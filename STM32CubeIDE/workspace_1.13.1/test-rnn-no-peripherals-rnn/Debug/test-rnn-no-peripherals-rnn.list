
test-rnn-no-peripherals-rnn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b06c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000059a0  0800b280  0800b280  0001b280  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010c20  08010c20  00030740  2**0
                  CONTENTS
  4 .ARM          00000008  08010c20  08010c20  00020c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010c28  08010c28  00030740  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010c28  08010c28  00020c28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010c2c  08010c2c  00020c2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000740  20000000  08010c30  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007b0  20000740  08011370  00030740  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20000ef0  08011370  00030ef0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030740  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  0003076e  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016721  00000000  00000000  00030801  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003bc8  00000000  00000000  00046f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 000060dd  00000000  00000000  0004aaea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000009c8  00000000  00000000  00050bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b9f  00000000  00000000  00051590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00031d91  00000000  00000000  0005212f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00015d06  00000000  00000000  00083ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011ff9a  00000000  00000000  00099bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002acc  00000000  00000000  001b9b60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  001bc62c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000740 	.word	0x20000740
 800021c:	00000000 	.word	0x00000000
 8000220:	0800b254 	.word	0x0800b254

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000744 	.word	0x20000744
 800023c:	0800b254 	.word	0x0800b254

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_uldivmod>:
 8000668:	b953      	cbnz	r3, 8000680 <__aeabi_uldivmod+0x18>
 800066a:	b94a      	cbnz	r2, 8000680 <__aeabi_uldivmod+0x18>
 800066c:	2900      	cmp	r1, #0
 800066e:	bf08      	it	eq
 8000670:	2800      	cmpeq	r0, #0
 8000672:	bf1c      	itt	ne
 8000674:	f04f 31ff 	movne.w	r1, #4294967295
 8000678:	f04f 30ff 	movne.w	r0, #4294967295
 800067c:	f000 b990 	b.w	80009a0 <__aeabi_idiv0>
 8000680:	f1ad 0c08 	sub.w	ip, sp, #8
 8000684:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000688:	f000 f826 	bl	80006d8 <__udivmoddi4>
 800068c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000690:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000694:	b004      	add	sp, #16
 8000696:	4770      	bx	lr

08000698 <__aeabi_d2ulz>:
 8000698:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 80006c8 <__aeabi_d2ulz+0x30>
 800069c:	ec41 0b17 	vmov	d7, r0, r1
 80006a0:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 80006d0 <__aeabi_d2ulz+0x38>
 80006a4:	ee27 6b06 	vmul.f64	d6, d7, d6
 80006a8:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 80006ac:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 80006b0:	eea4 7b45 	vfms.f64	d7, d4, d5
 80006b4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80006b8:	ee16 1a10 	vmov	r1, s12
 80006bc:	ee17 0a90 	vmov	r0, s15
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	f3af 8000 	nop.w
 80006c8:	00000000 	.word	0x00000000
 80006cc:	3df00000 	.word	0x3df00000
 80006d0:	00000000 	.word	0x00000000
 80006d4:	41f00000 	.word	0x41f00000

080006d8 <__udivmoddi4>:
 80006d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80006dc:	9e08      	ldr	r6, [sp, #32]
 80006de:	460d      	mov	r5, r1
 80006e0:	4604      	mov	r4, r0
 80006e2:	460f      	mov	r7, r1
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d14a      	bne.n	800077e <__udivmoddi4+0xa6>
 80006e8:	428a      	cmp	r2, r1
 80006ea:	4694      	mov	ip, r2
 80006ec:	d965      	bls.n	80007ba <__udivmoddi4+0xe2>
 80006ee:	fab2 f382 	clz	r3, r2
 80006f2:	b143      	cbz	r3, 8000706 <__udivmoddi4+0x2e>
 80006f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80006f8:	f1c3 0220 	rsb	r2, r3, #32
 80006fc:	409f      	lsls	r7, r3
 80006fe:	fa20 f202 	lsr.w	r2, r0, r2
 8000702:	4317      	orrs	r7, r2
 8000704:	409c      	lsls	r4, r3
 8000706:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800070a:	fa1f f58c 	uxth.w	r5, ip
 800070e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000712:	0c22      	lsrs	r2, r4, #16
 8000714:	fb0e 7711 	mls	r7, lr, r1, r7
 8000718:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800071c:	fb01 f005 	mul.w	r0, r1, r5
 8000720:	4290      	cmp	r0, r2
 8000722:	d90a      	bls.n	800073a <__udivmoddi4+0x62>
 8000724:	eb1c 0202 	adds.w	r2, ip, r2
 8000728:	f101 37ff 	add.w	r7, r1, #4294967295
 800072c:	f080 811c 	bcs.w	8000968 <__udivmoddi4+0x290>
 8000730:	4290      	cmp	r0, r2
 8000732:	f240 8119 	bls.w	8000968 <__udivmoddi4+0x290>
 8000736:	3902      	subs	r1, #2
 8000738:	4462      	add	r2, ip
 800073a:	1a12      	subs	r2, r2, r0
 800073c:	b2a4      	uxth	r4, r4
 800073e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000742:	fb0e 2210 	mls	r2, lr, r0, r2
 8000746:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800074a:	fb00 f505 	mul.w	r5, r0, r5
 800074e:	42a5      	cmp	r5, r4
 8000750:	d90a      	bls.n	8000768 <__udivmoddi4+0x90>
 8000752:	eb1c 0404 	adds.w	r4, ip, r4
 8000756:	f100 32ff 	add.w	r2, r0, #4294967295
 800075a:	f080 8107 	bcs.w	800096c <__udivmoddi4+0x294>
 800075e:	42a5      	cmp	r5, r4
 8000760:	f240 8104 	bls.w	800096c <__udivmoddi4+0x294>
 8000764:	4464      	add	r4, ip
 8000766:	3802      	subs	r0, #2
 8000768:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800076c:	1b64      	subs	r4, r4, r5
 800076e:	2100      	movs	r1, #0
 8000770:	b11e      	cbz	r6, 800077a <__udivmoddi4+0xa2>
 8000772:	40dc      	lsrs	r4, r3
 8000774:	2300      	movs	r3, #0
 8000776:	e9c6 4300 	strd	r4, r3, [r6]
 800077a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800077e:	428b      	cmp	r3, r1
 8000780:	d908      	bls.n	8000794 <__udivmoddi4+0xbc>
 8000782:	2e00      	cmp	r6, #0
 8000784:	f000 80ed 	beq.w	8000962 <__udivmoddi4+0x28a>
 8000788:	2100      	movs	r1, #0
 800078a:	e9c6 0500 	strd	r0, r5, [r6]
 800078e:	4608      	mov	r0, r1
 8000790:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000794:	fab3 f183 	clz	r1, r3
 8000798:	2900      	cmp	r1, #0
 800079a:	d149      	bne.n	8000830 <__udivmoddi4+0x158>
 800079c:	42ab      	cmp	r3, r5
 800079e:	d302      	bcc.n	80007a6 <__udivmoddi4+0xce>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	f200 80f8 	bhi.w	8000996 <__udivmoddi4+0x2be>
 80007a6:	1a84      	subs	r4, r0, r2
 80007a8:	eb65 0203 	sbc.w	r2, r5, r3
 80007ac:	2001      	movs	r0, #1
 80007ae:	4617      	mov	r7, r2
 80007b0:	2e00      	cmp	r6, #0
 80007b2:	d0e2      	beq.n	800077a <__udivmoddi4+0xa2>
 80007b4:	e9c6 4700 	strd	r4, r7, [r6]
 80007b8:	e7df      	b.n	800077a <__udivmoddi4+0xa2>
 80007ba:	b902      	cbnz	r2, 80007be <__udivmoddi4+0xe6>
 80007bc:	deff      	udf	#255	; 0xff
 80007be:	fab2 f382 	clz	r3, r2
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	f040 8090 	bne.w	80008e8 <__udivmoddi4+0x210>
 80007c8:	1a8a      	subs	r2, r1, r2
 80007ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007ce:	fa1f fe8c 	uxth.w	lr, ip
 80007d2:	2101      	movs	r1, #1
 80007d4:	fbb2 f5f7 	udiv	r5, r2, r7
 80007d8:	fb07 2015 	mls	r0, r7, r5, r2
 80007dc:	0c22      	lsrs	r2, r4, #16
 80007de:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80007e2:	fb0e f005 	mul.w	r0, lr, r5
 80007e6:	4290      	cmp	r0, r2
 80007e8:	d908      	bls.n	80007fc <__udivmoddi4+0x124>
 80007ea:	eb1c 0202 	adds.w	r2, ip, r2
 80007ee:	f105 38ff 	add.w	r8, r5, #4294967295
 80007f2:	d202      	bcs.n	80007fa <__udivmoddi4+0x122>
 80007f4:	4290      	cmp	r0, r2
 80007f6:	f200 80cb 	bhi.w	8000990 <__udivmoddi4+0x2b8>
 80007fa:	4645      	mov	r5, r8
 80007fc:	1a12      	subs	r2, r2, r0
 80007fe:	b2a4      	uxth	r4, r4
 8000800:	fbb2 f0f7 	udiv	r0, r2, r7
 8000804:	fb07 2210 	mls	r2, r7, r0, r2
 8000808:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800080c:	fb0e fe00 	mul.w	lr, lr, r0
 8000810:	45a6      	cmp	lr, r4
 8000812:	d908      	bls.n	8000826 <__udivmoddi4+0x14e>
 8000814:	eb1c 0404 	adds.w	r4, ip, r4
 8000818:	f100 32ff 	add.w	r2, r0, #4294967295
 800081c:	d202      	bcs.n	8000824 <__udivmoddi4+0x14c>
 800081e:	45a6      	cmp	lr, r4
 8000820:	f200 80bb 	bhi.w	800099a <__udivmoddi4+0x2c2>
 8000824:	4610      	mov	r0, r2
 8000826:	eba4 040e 	sub.w	r4, r4, lr
 800082a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800082e:	e79f      	b.n	8000770 <__udivmoddi4+0x98>
 8000830:	f1c1 0720 	rsb	r7, r1, #32
 8000834:	408b      	lsls	r3, r1
 8000836:	fa22 fc07 	lsr.w	ip, r2, r7
 800083a:	ea4c 0c03 	orr.w	ip, ip, r3
 800083e:	fa05 f401 	lsl.w	r4, r5, r1
 8000842:	fa20 f307 	lsr.w	r3, r0, r7
 8000846:	40fd      	lsrs	r5, r7
 8000848:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800084c:	4323      	orrs	r3, r4
 800084e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000852:	fa1f fe8c 	uxth.w	lr, ip
 8000856:	fb09 5518 	mls	r5, r9, r8, r5
 800085a:	0c1c      	lsrs	r4, r3, #16
 800085c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000860:	fb08 f50e 	mul.w	r5, r8, lr
 8000864:	42a5      	cmp	r5, r4
 8000866:	fa02 f201 	lsl.w	r2, r2, r1
 800086a:	fa00 f001 	lsl.w	r0, r0, r1
 800086e:	d90b      	bls.n	8000888 <__udivmoddi4+0x1b0>
 8000870:	eb1c 0404 	adds.w	r4, ip, r4
 8000874:	f108 3aff 	add.w	sl, r8, #4294967295
 8000878:	f080 8088 	bcs.w	800098c <__udivmoddi4+0x2b4>
 800087c:	42a5      	cmp	r5, r4
 800087e:	f240 8085 	bls.w	800098c <__udivmoddi4+0x2b4>
 8000882:	f1a8 0802 	sub.w	r8, r8, #2
 8000886:	4464      	add	r4, ip
 8000888:	1b64      	subs	r4, r4, r5
 800088a:	b29d      	uxth	r5, r3
 800088c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000890:	fb09 4413 	mls	r4, r9, r3, r4
 8000894:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000898:	fb03 fe0e 	mul.w	lr, r3, lr
 800089c:	45a6      	cmp	lr, r4
 800089e:	d908      	bls.n	80008b2 <__udivmoddi4+0x1da>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f103 35ff 	add.w	r5, r3, #4294967295
 80008a8:	d26c      	bcs.n	8000984 <__udivmoddi4+0x2ac>
 80008aa:	45a6      	cmp	lr, r4
 80008ac:	d96a      	bls.n	8000984 <__udivmoddi4+0x2ac>
 80008ae:	3b02      	subs	r3, #2
 80008b0:	4464      	add	r4, ip
 80008b2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80008b6:	fba3 9502 	umull	r9, r5, r3, r2
 80008ba:	eba4 040e 	sub.w	r4, r4, lr
 80008be:	42ac      	cmp	r4, r5
 80008c0:	46c8      	mov	r8, r9
 80008c2:	46ae      	mov	lr, r5
 80008c4:	d356      	bcc.n	8000974 <__udivmoddi4+0x29c>
 80008c6:	d053      	beq.n	8000970 <__udivmoddi4+0x298>
 80008c8:	b156      	cbz	r6, 80008e0 <__udivmoddi4+0x208>
 80008ca:	ebb0 0208 	subs.w	r2, r0, r8
 80008ce:	eb64 040e 	sbc.w	r4, r4, lr
 80008d2:	fa04 f707 	lsl.w	r7, r4, r7
 80008d6:	40ca      	lsrs	r2, r1
 80008d8:	40cc      	lsrs	r4, r1
 80008da:	4317      	orrs	r7, r2
 80008dc:	e9c6 7400 	strd	r7, r4, [r6]
 80008e0:	4618      	mov	r0, r3
 80008e2:	2100      	movs	r1, #0
 80008e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e8:	f1c3 0120 	rsb	r1, r3, #32
 80008ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80008f0:	fa20 f201 	lsr.w	r2, r0, r1
 80008f4:	fa25 f101 	lsr.w	r1, r5, r1
 80008f8:	409d      	lsls	r5, r3
 80008fa:	432a      	orrs	r2, r5
 80008fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000900:	fa1f fe8c 	uxth.w	lr, ip
 8000904:	fbb1 f0f7 	udiv	r0, r1, r7
 8000908:	fb07 1510 	mls	r5, r7, r0, r1
 800090c:	0c11      	lsrs	r1, r2, #16
 800090e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000912:	fb00 f50e 	mul.w	r5, r0, lr
 8000916:	428d      	cmp	r5, r1
 8000918:	fa04 f403 	lsl.w	r4, r4, r3
 800091c:	d908      	bls.n	8000930 <__udivmoddi4+0x258>
 800091e:	eb1c 0101 	adds.w	r1, ip, r1
 8000922:	f100 38ff 	add.w	r8, r0, #4294967295
 8000926:	d22f      	bcs.n	8000988 <__udivmoddi4+0x2b0>
 8000928:	428d      	cmp	r5, r1
 800092a:	d92d      	bls.n	8000988 <__udivmoddi4+0x2b0>
 800092c:	3802      	subs	r0, #2
 800092e:	4461      	add	r1, ip
 8000930:	1b49      	subs	r1, r1, r5
 8000932:	b292      	uxth	r2, r2
 8000934:	fbb1 f5f7 	udiv	r5, r1, r7
 8000938:	fb07 1115 	mls	r1, r7, r5, r1
 800093c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000940:	fb05 f10e 	mul.w	r1, r5, lr
 8000944:	4291      	cmp	r1, r2
 8000946:	d908      	bls.n	800095a <__udivmoddi4+0x282>
 8000948:	eb1c 0202 	adds.w	r2, ip, r2
 800094c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000950:	d216      	bcs.n	8000980 <__udivmoddi4+0x2a8>
 8000952:	4291      	cmp	r1, r2
 8000954:	d914      	bls.n	8000980 <__udivmoddi4+0x2a8>
 8000956:	3d02      	subs	r5, #2
 8000958:	4462      	add	r2, ip
 800095a:	1a52      	subs	r2, r2, r1
 800095c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000960:	e738      	b.n	80007d4 <__udivmoddi4+0xfc>
 8000962:	4631      	mov	r1, r6
 8000964:	4630      	mov	r0, r6
 8000966:	e708      	b.n	800077a <__udivmoddi4+0xa2>
 8000968:	4639      	mov	r1, r7
 800096a:	e6e6      	b.n	800073a <__udivmoddi4+0x62>
 800096c:	4610      	mov	r0, r2
 800096e:	e6fb      	b.n	8000768 <__udivmoddi4+0x90>
 8000970:	4548      	cmp	r0, r9
 8000972:	d2a9      	bcs.n	80008c8 <__udivmoddi4+0x1f0>
 8000974:	ebb9 0802 	subs.w	r8, r9, r2
 8000978:	eb65 0e0c 	sbc.w	lr, r5, ip
 800097c:	3b01      	subs	r3, #1
 800097e:	e7a3      	b.n	80008c8 <__udivmoddi4+0x1f0>
 8000980:	4645      	mov	r5, r8
 8000982:	e7ea      	b.n	800095a <__udivmoddi4+0x282>
 8000984:	462b      	mov	r3, r5
 8000986:	e794      	b.n	80008b2 <__udivmoddi4+0x1da>
 8000988:	4640      	mov	r0, r8
 800098a:	e7d1      	b.n	8000930 <__udivmoddi4+0x258>
 800098c:	46d0      	mov	r8, sl
 800098e:	e77b      	b.n	8000888 <__udivmoddi4+0x1b0>
 8000990:	3d02      	subs	r5, #2
 8000992:	4462      	add	r2, ip
 8000994:	e732      	b.n	80007fc <__udivmoddi4+0x124>
 8000996:	4608      	mov	r0, r1
 8000998:	e70a      	b.n	80007b0 <__udivmoddi4+0xd8>
 800099a:	4464      	add	r4, ip
 800099c:	3802      	subs	r0, #2
 800099e:	e742      	b.n	8000826 <__udivmoddi4+0x14e>

080009a0 <__aeabi_idiv0>:
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a4:	b510      	push	{r4, lr}
 80009a6:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a8:	2210      	movs	r2, #16
 80009aa:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ac:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009ae:	a809      	add	r0, sp, #36	; 0x24
 80009b0:	f008 fe01 	bl	80095b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b4:	2214      	movs	r2, #20
 80009b6:	2100      	movs	r1, #0
 80009b8:	a802      	add	r0, sp, #8
 80009ba:	f008 fdfc 	bl	80095b6 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b22      	ldr	r3, [pc, #136]	; (8000a48 <SystemClock_Config+0xa4>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009c0:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
 80009c2:	2019      	movs	r0, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009c6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80009ca:	641a      	str	r2, [r3, #64]	; 0x40
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	9300      	str	r3, [sp, #0]
 80009d4:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009d6:	4b1d      	ldr	r3, [pc, #116]	; (8000a4c <SystemClock_Config+0xa8>)
 80009d8:	681a      	ldr	r2, [r3, #0]
 80009da:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80009de:	601a      	str	r2, [r3, #0]
 80009e0:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009e2:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009e8:	9301      	str	r3, [sp, #4]
 80009ea:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f0:	e9cd 1307 	strd	r1, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f8:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 432;
 80009fc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 8000a00:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a04:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a06:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a08:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0c:	f000 fea2 	bl	8001754 <HAL_RCC_OscConfig>
 8000a10:	b108      	cbz	r0, 8000a16 <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a12:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <SystemClock_Config+0x70>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a16:	f000 fe65 	bl	80016e4 <HAL_PWREx_EnableOverDrive>
 8000a1a:	b108      	cbz	r0, 8000a20 <SystemClock_Config+0x7c>
 8000a1c:	b672      	cpsid	i
  while (1)
 8000a1e:	e7fe      	b.n	8000a1e <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a20:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a22:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a26:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a28:	2107      	movs	r1, #7
 8000a2a:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2c:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a34:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a38:	f001 f87c 	bl	8001b34 <HAL_RCC_ClockConfig>
 8000a3c:	b108      	cbz	r0, 8000a42 <SystemClock_Config+0x9e>
 8000a3e:	b672      	cpsid	i
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <SystemClock_Config+0x9c>
}
 8000a42:	b014      	add	sp, #80	; 0x50
 8000a44:	bd10      	pop	{r4, pc}
 8000a46:	bf00      	nop
 8000a48:	40023800 	.word	0x40023800
 8000a4c:	40007000 	.word	0x40007000

08000a50 <main>:
{
 8000a50:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	char ch = 'X';		// xzl
 8000a54:	2358      	movs	r3, #88	; 0x58
{
 8000a56:	b093      	sub	sp, #76	; 0x4c
	char ch = 'X';		// xzl
 8000a58:	f88d 3007 	strb.w	r3, [sp, #7]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a60:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a64:	4ac5      	ldr	r2, [pc, #788]	; (8000d7c <main+0x32c>)
 8000a66:	2100      	movs	r1, #0
 8000a68:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a70:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000a74:	6953      	ldr	r3, [r2, #20]
 8000a76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a7a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000a7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000a80:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000a84:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000a88:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000a8c:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a90:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000a94:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000a98:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000a9c:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000a9e:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000aa2:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aa4:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000aa8:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000aaa:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000aae:	d2f9      	bcs.n	8000aa4 <main+0x54>
    } while(sets-- != 0U);
 8000ab0:	3b20      	subs	r3, #32
 8000ab2:	f113 0f20 	cmn.w	r3, #32
 8000ab6:	d1f2      	bne.n	8000a9e <main+0x4e>
 8000ab8:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000abc:	6953      	ldr	r3, [r2, #20]
 8000abe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ac2:	6153      	str	r3, [r2, #20]
 8000ac4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ac8:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000acc:	f000 fc2a 	bl	8001324 <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2502      	movs	r5, #2
  SystemClock_Config();
 8000ad2:	f7ff ff67 	bl	80009a4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad6:	2214      	movs	r2, #20
 8000ad8:	2100      	movs	r1, #0
 8000ada:	a80d      	add	r0, sp, #52	; 0x34
 8000adc:	f008 fd6b 	bl	80095b6 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae0:	4ba7      	ldr	r3, [pc, #668]	; (8000d80 <main+0x330>)
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 8000ae2:	f242 0120 	movw	r1, #8224	; 0x2020
 8000ae6:	48a7      	ldr	r0, [pc, #668]	; (8000d84 <main+0x334>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ae8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2400      	movs	r4, #0
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000aec:	2603      	movs	r6, #3
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000aee:	2704      	movs	r7, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000af0:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000af4:	f04f 0b09 	mov.w	fp, #9
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000af8:	f04f 0a0b 	mov.w	sl, #11
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000afc:	f04f 090c 	mov.w	r9, #12
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b00:	631a      	str	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000b02:	f04f 080a 	mov.w	r8, #10
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b08:	f002 0210 	and.w	r2, r2, #16
 8000b0c:	9202      	str	r2, [sp, #8]
 8000b0e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000b16:	631a      	str	r2, [r3, #48]	; 0x30
 8000b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b1a:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8000b1e:	9203      	str	r2, [sp, #12]
 8000b20:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b24:	f042 0202 	orr.w	r2, r2, #2
 8000b28:	631a      	str	r2, [r3, #48]	; 0x30
 8000b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b2c:	f002 0202 	and.w	r2, r2, #2
 8000b30:	9204      	str	r2, [sp, #16]
 8000b32:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b34:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b36:	f042 0208 	orr.w	r2, r2, #8
 8000b3a:	631a      	str	r2, [r3, #48]	; 0x30
 8000b3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b3e:	f002 0208 	and.w	r2, r2, #8
 8000b42:	9205      	str	r2, [sp, #20]
 8000b44:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b48:	f042 0204 	orr.w	r2, r2, #4
 8000b4c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b50:	f002 0204 	and.w	r2, r2, #4
 8000b54:	9206      	str	r2, [sp, #24]
 8000b56:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b5a:	f042 0201 	orr.w	r2, r2, #1
 8000b5e:	631a      	str	r2, [r3, #48]	; 0x30
 8000b60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b62:	f002 0201 	and.w	r2, r2, #1
 8000b66:	9207      	str	r2, [sp, #28]
 8000b68:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000b6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b6c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000b70:	631a      	str	r2, [r3, #48]	; 0x30
 8000b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b74:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000b78:	9208      	str	r2, [sp, #32]
 8000b7a:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000b82:	631a      	str	r2, [r3, #48]	; 0x30
 8000b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b86:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000b8a:	9209      	str	r2, [sp, #36]	; 0x24
 8000b8c:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000b94:	631a      	str	r2, [r3, #48]	; 0x30
 8000b96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b98:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000b9c:	920a      	str	r2, [sp, #40]	; 0x28
 8000b9e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ba0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ba2:	f042 0220 	orr.w	r2, r2, #32
 8000ba6:	631a      	str	r2, [r3, #48]	; 0x30
 8000ba8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000baa:	f002 0220 	and.w	r2, r2, #32
 8000bae:	920b      	str	r2, [sp, #44]	; 0x2c
 8000bb0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bb2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000bb4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000bb8:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bc2:	930c      	str	r3, [sp, #48]	; 0x30
 8000bc4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 8000bc6:	f000 fd87 	bl	80016d8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bca:	2378      	movs	r3, #120	; 0x78
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bcc:	a90d      	add	r1, sp, #52	; 0x34
 8000bce:	486e      	ldr	r0, [pc, #440]	; (8000d88 <main+0x338>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000bd4:	2306      	movs	r3, #6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000bda:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bdc:	f000 fc9a 	bl	8001514 <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000be0:	a90d      	add	r1, sp, #52	; 0x34
 8000be2:	4869      	ldr	r0, [pc, #420]	; (8000d88 <main+0x338>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	e9cd 750d 	strd	r7, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000bea:	e9cd 6b10 	strd	r6, fp, [sp, #64]	; 0x40
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f000 fc91 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000bf2:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bf6:	a90d      	add	r1, sp, #52	; 0x34
 8000bf8:	4864      	ldr	r0, [pc, #400]	; (8000d8c <main+0x33c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bfa:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c06:	f000 fc85 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000c0a:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0e:	a90d      	add	r1, sp, #52	; 0x34
 8000c10:	485d      	ldr	r0, [pc, #372]	; (8000d88 <main+0x338>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c12:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1a:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c1e:	f000 fc79 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c22:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000c26:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c28:	a90d      	add	r1, sp, #52	; 0x34
 8000c2a:	4859      	ldr	r0, [pc, #356]	; (8000d90 <main+0x340>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c2c:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c2e:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c32:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c36:	f000 fc6d 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000c3a:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3e:	a90d      	add	r1, sp, #52	; 0x34
 8000c40:	4853      	ldr	r0, [pc, #332]	; (8000d90 <main+0x340>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000c42:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c46:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c4a:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4e:	f000 fc61 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8000c52:	2318      	movs	r3, #24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c54:	a90d      	add	r1, sp, #52	; 0x34
 8000c56:	484e      	ldr	r0, [pc, #312]	; (8000d90 <main+0x340>)
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8000c58:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5c:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c60:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f000 fc56 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8000c68:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c6a:	a90d      	add	r1, sp, #52	; 0x34
 8000c6c:	4849      	ldr	r0, [pc, #292]	; (8000d94 <main+0x344>)
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8000c6e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c72:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c76:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c7a:	f000 fc4b 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8000c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8000c82:	a90d      	add	r1, sp, #52	; 0x34
 8000c84:	4844      	ldr	r0, [pc, #272]	; (8000d98 <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c86:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c8a:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c8c:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000c90:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8000c92:	f000 fc3f 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c96:	2312      	movs	r3, #18
 8000c98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8000c9c:	483f      	ldr	r0, [pc, #252]	; (8000d9c <main+0x34c>)
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8000c9e:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ca0:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8000ca4:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8000caa:	f000 fc33 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cae:	2312      	movs	r3, #18
 8000cb0:	2080      	movs	r0, #128	; 0x80
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8000cb4:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cb8:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000cbc:	4834      	ldr	r0, [pc, #208]	; (8000d90 <main+0x340>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000cc2:	f000 fc27 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000cc6:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000cc8:	a90d      	add	r1, sp, #52	; 0x34
 8000cca:	4831      	ldr	r0, [pc, #196]	; (8000d90 <main+0x340>)
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000ccc:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd0:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cd4:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000cd8:	f000 fc1c 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8000cdc:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ce0:	a90d      	add	r1, sp, #52	; 0x34
 8000ce2:	482a      	ldr	r0, [pc, #168]	; (8000d8c <main+0x33c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ce4:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce8:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cec:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cf0:	f000 fc10 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	f242 0c20 	movw	ip, #8224	; 0x2020
 8000cf8:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000cfa:	a90d      	add	r1, sp, #52	; 0x34
 8000cfc:	4821      	ldr	r0, [pc, #132]	; (8000d84 <main+0x334>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfe:	e9cd c30d 	strd	ip, r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d02:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d06:	f000 fc05 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin|WIFI_RST_Pin|DSI_RESET_Pin|ARD_D8_Pin
 8000d0a:	f24d 031b 	movw	r3, #53275	; 0xd01b
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d0e:	a90d      	add	r1, sp, #52	; 0x34
 8000d10:	481c      	ldr	r0, [pc, #112]	; (8000d84 <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000d18:	f000 fbfc 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000d1c:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d20:	a90d      	add	r1, sp, #52	; 0x34
 8000d22:	481c      	ldr	r0, [pc, #112]	; (8000d94 <main+0x344>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d24:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d30:	f000 fbf0 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8000d34:	f640 0308 	movw	r3, #2056	; 0x808
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d38:	a90d      	add	r1, sp, #52	; 0x34
 8000d3a:	4817      	ldr	r0, [pc, #92]	; (8000d98 <main+0x348>)
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000d3c:	9611      	str	r6, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d46:	f000 fbe5 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8000d4a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4e:	a90d      	add	r1, sp, #52	; 0x34
 8000d50:	4811      	ldr	r0, [pc, #68]	; (8000d98 <main+0x348>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000d52:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d5a:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d5e:	f000 fbd9 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8000d62:	f44f 4251 	mov.w	r2, #53504	; 0xd100
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d66:	a90d      	add	r1, sp, #52	; 0x34
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <main+0x350>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d6c:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000d70:	f000 fbd0 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8000d74:	f240 62ff 	movw	r2, #1791	; 0x6ff
 8000d78:	e014      	b.n	8000da4 <main+0x354>
 8000d7a:	bf00      	nop
 8000d7c:	e000ed00 	.word	0xe000ed00
 8000d80:	40023800 	.word	0x40023800
 8000d84:	40022400 	.word	0x40022400
 8000d88:	40021000 	.word	0x40021000
 8000d8c:	40021800 	.word	0x40021800
 8000d90:	40020400 	.word	0x40020400
 8000d94:	40020c00 	.word	0x40020c00
 8000d98:	40020800 	.word	0x40020800
 8000d9c:	40020000 	.word	0x40020000
 8000da0:	40022000 	.word	0x40022000
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000da4:	a90d      	add	r1, sp, #52	; 0x34
 8000da6:	48c6      	ldr	r0, [pc, #792]	; (80010c0 <main+0x670>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000da8:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dac:	e9cd 250d 	strd	r2, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db0:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000db4:	f000 fbae 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8000db8:	22f8      	movs	r2, #248	; 0xf8
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000dba:	a90d      	add	r1, sp, #52	; 0x34
 8000dbc:	48c1      	ldr	r0, [pc, #772]	; (80010c4 <main+0x674>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000dc4:	f000 fba6 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8000dc8:	2207      	movs	r2, #7
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8000dca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8000dce:	a90d      	add	r1, sp, #52	; 0x34
 8000dd0:	48bd      	ldr	r0, [pc, #756]	; (80010c8 <main+0x678>)
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8000dd2:	9211      	str	r2, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd8:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8000ddc:	f000 fb9a 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8000de0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000de4:	a90d      	add	r1, sp, #52	; 0x34
 8000de6:	48b8      	ldr	r0, [pc, #736]	; (80010c8 <main+0x678>)
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8000de8:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dec:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000df4:	f000 fb8e 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8000df8:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dfa:	a90d      	add	r1, sp, #52	; 0x34
 8000dfc:	48b3      	ldr	r0, [pc, #716]	; (80010cc <main+0x67c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e00:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e04:	f000 fb86 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8000e08:	2308      	movs	r3, #8
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000e0a:	a90d      	add	r1, sp, #52	; 0x34
 8000e0c:	48af      	ldr	r0, [pc, #700]	; (80010cc <main+0x67c>)
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000e0e:	9611      	str	r6, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e10:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e14:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f000 fb7c 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e20:	a90d      	add	r1, sp, #52	; 0x34
 8000e22:	48ab      	ldr	r0, [pc, #684]	; (80010d0 <main+0x680>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2c:	f000 fb72 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000e30:	f64f 023f 	movw	r2, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e34:	a90d      	add	r1, sp, #52	; 0x34
 8000e36:	48a7      	ldr	r0, [pc, #668]	; (80010d4 <main+0x684>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e38:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	e9cd 250d 	strd	r2, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e40:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e44:	f000 fb66 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e48:	2308      	movs	r3, #8
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8000e4a:	a90d      	add	r1, sp, #52	; 0x34
 8000e4c:	489f      	ldr	r0, [pc, #636]	; (80010cc <main+0x67c>)
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000e4e:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e50:	e9cd 750d 	strd	r7, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f000 fb5c 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8000e5c:	f64f 722c 	movw	r2, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e60:	a90d      	add	r1, sp, #52	; 0x34
 8000e62:	489d      	ldr	r0, [pc, #628]	; (80010d8 <main+0x688>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000e64:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	e9cd 250d 	strd	r2, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000e70:	f000 fb50 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8000e74:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8000e78:	a90d      	add	r1, sp, #52	; 0x34
 8000e7a:	4891      	ldr	r0, [pc, #580]	; (80010c0 <main+0x670>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e7c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e80:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e84:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f000 fb44 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8000e8c:	f44f 7280 	mov.w	r2, #256	; 0x100
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8000e90:	a90d      	add	r1, sp, #52	; 0x34
 8000e92:	4892      	ldr	r0, [pc, #584]	; (80010dc <main+0x68c>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000e94:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e96:	e9cd 250d 	strd	r2, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	f000 fb39 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ea2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ea6:	f44f 1190 	mov.w	r1, #1179648	; 0x120000
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000eaa:	4885      	ldr	r0, [pc, #532]	; (80010c0 <main+0x670>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000eae:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000eb2:	a90d      	add	r1, sp, #52	; 0x34
 8000eb4:	f000 fb2e 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8000eb8:	f44f 7280 	mov.w	r2, #256	; 0x100
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	a90d      	add	r1, sp, #52	; 0x34
 8000ebe:	4884      	ldr	r0, [pc, #528]	; (80010d0 <main+0x680>)
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ec0:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	e9cd 250d 	strd	r2, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec6:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8000eca:	f000 fb23 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8000ece:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ed0:	a90d      	add	r1, sp, #52	; 0x34
 8000ed2:	487f      	ldr	r0, [pc, #508]	; (80010d0 <main+0x680>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed4:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ed8:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eda:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000ede:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee0:	f000 fb18 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000ee4:	2210      	movs	r2, #16
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	a90d      	add	r1, sp, #52	; 0x34
 8000ee8:	487b      	ldr	r0, [pc, #492]	; (80010d8 <main+0x688>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000eea:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	e9cd 250d 	strd	r2, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f000 fb0d 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8000efa:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8000efc:	a90d      	add	r1, sp, #52	; 0x34
 8000efe:	4872      	ldr	r0, [pc, #456]	; (80010c8 <main+0x678>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f00:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000f04:	2306      	movs	r3, #6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000f0a:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8000f0c:	f000 fb02 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8000f10:	2248      	movs	r2, #72	; 0x48
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f12:	a90d      	add	r1, sp, #52	; 0x34
 8000f14:	486c      	ldr	r0, [pc, #432]	; (80010c8 <main+0x678>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f16:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f18:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f1c:	f000 fafa 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8000f20:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f22:	a90d      	add	r1, sp, #52	; 0x34
 8000f24:	486b      	ldr	r0, [pc, #428]	; (80010d4 <main+0x684>)
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000f26:	9611      	str	r6, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f30:	f000 faf0 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8000f34:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f36:	a90d      	add	r1, sp, #52	; 0x34
 8000f38:	4866      	ldr	r0, [pc, #408]	; (80010d4 <main+0x684>)
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000f3a:	9611      	str	r6, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f40:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f000 fae6 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000f48:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f4c:	a90d      	add	r1, sp, #52	; 0x34
 8000f4e:	4861      	ldr	r0, [pc, #388]	; (80010d4 <main+0x684>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f52:	e9cd 260d 	strd	r2, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000f56:	f000 fadd 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8000f5a:	2301      	movs	r3, #1
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8000f5c:	a90d      	add	r1, sp, #52	; 0x34
 8000f5e:	485c      	ldr	r0, [pc, #368]	; (80010d0 <main+0x680>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000f60:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f64:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f68:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f000 fad2 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000f70:	2232      	movs	r2, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f72:	a90d      	add	r1, sp, #52	; 0x34
 8000f74:	4856      	ldr	r0, [pc, #344]	; (80010d0 <main+0x680>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f76:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7a:	e9cd 250d 	strd	r2, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f7e:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f82:	f000 fac7 	bl	8001514 <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8000f86:	a90d      	add	r1, sp, #52	; 0x34
 8000f88:	4851      	ldr	r0, [pc, #324]	; (80010d0 <main+0x680>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f8a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8c:	e9cd 760d 	strd	r7, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8000f90:	f000 fac0 	bl	8001514 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f94:	a90d      	add	r1, sp, #52	; 0x34
 8000f96:	4852      	ldr	r0, [pc, #328]	; (80010e0 <main+0x690>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000f98:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9c:	e9cd 750d 	strd	r7, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa4:	f000 fab6 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fa8:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
 8000fac:	2312      	movs	r3, #18
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fae:	a90d      	add	r1, sp, #52	; 0x34
 8000fb0:	4846      	ldr	r0, [pc, #280]	; (80010cc <main+0x67c>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000fb2:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fb4:	e9cd e30d 	strd	lr, r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fb8:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8000fbc:	f000 faaa 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8000fc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8000fc4:	a90d      	add	r1, sp, #52	; 0x34
 8000fc6:	4841      	ldr	r0, [pc, #260]	; (80010cc <main+0x67c>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000fc8:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fcc:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fd0:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f000 fa9e 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000fd8:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	a90d      	add	r1, sp, #52	; 0x34
 8000fdc:	483f      	ldr	r0, [pc, #252]	; (80010dc <main+0x68c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000fde:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fe2:	f04f 0a01 	mov.w	sl, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe6:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fea:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fee:	f000 fa91 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ff2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	a90d      	add	r1, sp, #52	; 0x34
 8000ff8:	4838      	ldr	r0, [pc, #224]	; (80010dc <main+0x68c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffa:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffc:	e9cd a30d 	strd	sl, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8001000:	f000 fa88 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8001004:	2350      	movs	r3, #80	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001006:	a90d      	add	r1, sp, #52	; 0x34
 8001008:	4834      	ldr	r0, [pc, #208]	; (80010dc <main+0x68c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800100a:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800100c:	e9cd 360d 	strd	r3, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001010:	f000 fa80 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8001014:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8001018:	a90d      	add	r1, sp, #52	; 0x34
 800101a:	482c      	ldr	r0, [pc, #176]	; (80010cc <main+0x67c>)
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 800101c:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001020:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8001028:	f000 fa74 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 800102c:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 800102e:	a90d      	add	r1, sp, #52	; 0x34
 8001030:	4829      	ldr	r0, [pc, #164]	; (80010d8 <main+0x688>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001034:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001038:	f000 fa6c 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800103c:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103e:	a90d      	add	r1, sp, #52	; 0x34
 8001040:	4826      	ldr	r0, [pc, #152]	; (80010dc <main+0x68c>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001042:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001046:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104a:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104e:	f000 fa61 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001052:	230d      	movs	r3, #13
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8001054:	a90d      	add	r1, sp, #52	; 0x34
 8001056:	4823      	ldr	r0, [pc, #140]	; (80010e4 <main+0x694>)
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001058:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	e9cd 750d 	strd	r7, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800105e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8001062:	f000 fa57 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8001066:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8001068:	a90d      	add	r1, sp, #52	; 0x34
 800106a:	481b      	ldr	r0, [pc, #108]	; (80010d8 <main+0x688>)
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800106c:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  huart1.Init.BaudRate = 115200;
 8001070:	f8df b078 	ldr.w	fp, [pc, #120]	; 80010ec <main+0x69c>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 800107c:	f000 fa4a 	bl	8001514 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8001080:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	4816      	ldr	r0, [pc, #88]	; (80010e0 <main+0x690>)
 8001086:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001088:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800108c:	2305      	movs	r3, #5
  huart1.Instance = USART1;
 800108e:	4d16      	ldr	r5, [pc, #88]	; (80010e8 <main+0x698>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001090:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001092:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001096:	f000 fa3d 	bl	8001514 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 800109a:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800109e:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 80010a0:	e9c5 b300 	strd	fp, r3, [r5]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010a4:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010a8:	e9c5 4904 	strd	r4, r9, [r5, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ac:	e9c5 4406 	strd	r4, r4, [r5, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010b0:	e9c5 4408 	strd	r4, r4, [r5, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010b4:	f001 fb96 	bl	80027e4 <HAL_UART_Init>
 80010b8:	b1d0      	cbz	r0, 80010f0 <main+0x6a0>
  __ASM volatile ("cpsid i" : : : "memory");
 80010ba:	b672      	cpsid	i
  while (1)
 80010bc:	e7fe      	b.n	80010bc <main+0x66c>
 80010be:	bf00      	nop
 80010c0:	40022000 	.word	0x40022000
 80010c4:	40022800 	.word	0x40022800
 80010c8:	40021800 	.word	0x40021800
 80010cc:	40020c00 	.word	0x40020c00
 80010d0:	40020800 	.word	0x40020800
 80010d4:	40021400 	.word	0x40021400
 80010d8:	40021c00 	.word	0x40021c00
 80010dc:	40020000 	.word	0x40020000
 80010e0:	40020400 	.word	0x40020400
 80010e4:	40022400 	.word	0x40022400
 80010e8:	20000780 	.word	0x20000780
 80010ec:	40011000 	.word	0x40011000
  hcrc.Instance = CRC;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <main+0x6e0>)
 80010f2:	4a10      	ldr	r2, [pc, #64]	; (8001134 <main+0x6e4>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80010f4:	8098      	strh	r0, [r3, #4]
  hcrc.Instance = CRC;
 80010f6:	601a      	str	r2, [r3, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80010f8:	2201      	movs	r2, #1
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 80010fa:	e9c3 0005 	strd	r0, r0, [r3, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010fe:	4618      	mov	r0, r3
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8001100:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8001102:	f000 f9a9 	bl	8001458 <HAL_CRC_Init>
 8001106:	b108      	cbz	r0, 800110c <main+0x6bc>
 8001108:	b672      	cpsid	i
  while (1)
 800110a:	e7fe      	b.n	800110a <main+0x6ba>
  MX_X_CUBE_AI_Init();
 800110c:	f002 fd48 	bl	8003ba0 <MX_X_CUBE_AI_Init>
	  HAL_Delay(500);
 8001110:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001114:	f000 f924 	bl	8001360 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001118:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800111c:	2201      	movs	r2, #1
 800111e:	f10d 0107 	add.w	r1, sp, #7
 8001122:	4628      	mov	r0, r5
 8001124:	f001 fa6f 	bl	8002606 <HAL_UART_Transmit>
  MX_X_CUBE_AI_Process();
 8001128:	f002 fd3c 	bl	8003ba4 <MX_X_CUBE_AI_Process>
  while (1)
 800112c:	e7f0      	b.n	8001110 <main+0x6c0>
 800112e:	bf00      	nop
 8001130:	2000075c 	.word	0x2000075c
 8001134:	40023000 	.word	0x40023000

08001138 <Error_Handler>:
 8001138:	b672      	cpsid	i
  while (1)
 800113a:	e7fe      	b.n	800113a <Error_Handler+0x2>

0800113c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800113c:	4b0a      	ldr	r3, [pc, #40]	; (8001168 <HAL_MspInit+0x2c>)
{
 800113e:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8001140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001142:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
 8001148:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800114a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800114e:	9200      	str	r2, [sp, #0]
 8001150:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001152:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001154:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001158:	645a      	str	r2, [r3, #68]	; 0x44
 800115a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001160:	9301      	str	r3, [sp, #4]
 8001162:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001164:	b002      	add	sp, #8
 8001166:	4770      	bx	lr
 8001168:	40023800 	.word	0x40023800

0800116c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800116c:	6802      	ldr	r2, [r0, #0]
{
 800116e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001170:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_CRC_MspInit+0x28>)
 8001172:	429a      	cmp	r2, r3
 8001174:	d10b      	bne.n	800118e <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001176:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 800117a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800117e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001182:	631a      	str	r2, [r3, #48]	; 0x30
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800118e:	b002      	add	sp, #8
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40023000 	.word	0x40023000

08001198 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001198:	b510      	push	{r4, lr}
 800119a:	b0ac      	sub	sp, #176	; 0xb0
 800119c:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800119e:	2214      	movs	r2, #20
 80011a0:	2100      	movs	r1, #0
 80011a2:	a803      	add	r0, sp, #12
 80011a4:	f008 fa07 	bl	80095b6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011a8:	2290      	movs	r2, #144	; 0x90
 80011aa:	2100      	movs	r1, #0
 80011ac:	a808      	add	r0, sp, #32
 80011ae:	f008 fa02 	bl	80095b6 <memset>
  if(huart->Instance==USART1)
 80011b2:	6822      	ldr	r2, [r4, #0]
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <HAL_UART_MspInit+0x7c>)
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d129      	bne.n	800120e <HAL_UART_MspInit+0x76>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011ba:	2340      	movs	r3, #64	; 0x40
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011bc:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80011be:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011c0:	f000 fd7c 	bl	8001cbc <HAL_RCCEx_PeriphCLKConfig>
 80011c4:	b108      	cbz	r0, 80011ca <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 80011c6:	f7ff ffb7 	bl	8001138 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011ca:	4b13      	ldr	r3, [pc, #76]	; (8001218 <HAL_UART_MspInit+0x80>)
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2100      	movs	r1, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ce:	4813      	ldr	r0, [pc, #76]	; (800121c <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80011d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011d2:	f042 0210 	orr.w	r2, r2, #16
 80011d6:	645a      	str	r2, [r3, #68]	; 0x44
 80011d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011da:	f002 0210 	and.w	r2, r2, #16
 80011de:	9201      	str	r2, [sp, #4]
 80011e0:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011e4:	f042 0201 	orr.w	r2, r2, #1
 80011e8:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ea:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	9302      	str	r3, [sp, #8]
 80011f6:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011f8:	2302      	movs	r3, #2
 80011fa:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011fe:	2303      	movs	r3, #3
 8001200:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001204:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001206:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001208:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120a:	f000 f983 	bl	8001514 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800120e:	b02c      	add	sp, #176	; 0xb0
 8001210:	bd10      	pop	{r4, pc}
 8001212:	bf00      	nop
 8001214:	40011000 	.word	0x40011000
 8001218:	40023800 	.word	0x40023800
 800121c:	40020000 	.word	0x40020000

08001220 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <NMI_Handler>

08001222 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <HardFault_Handler>

08001224 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001224:	e7fe      	b.n	8001224 <MemManage_Handler>

08001226 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler>

08001228 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler>

0800122a <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800122a:	4770      	bx	lr

0800122c <DebugMon_Handler>:
 800122c:	4770      	bx	lr

0800122e <PendSV_Handler>:
 800122e:	4770      	bx	lr

08001230 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001230:	f000 b884 	b.w	800133c <HAL_IncTick>

08001234 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001234:	4a0b      	ldr	r2, [pc, #44]	; (8001264 <_sbrk+0x30>)
{
 8001236:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001238:	6811      	ldr	r1, [r2, #0]
{
 800123a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800123c:	b909      	cbnz	r1, 8001242 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800123e:	490a      	ldr	r1, [pc, #40]	; (8001268 <_sbrk+0x34>)
 8001240:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001242:	6810      	ldr	r0, [r2, #0]
 8001244:	4909      	ldr	r1, [pc, #36]	; (800126c <_sbrk+0x38>)
 8001246:	4c0a      	ldr	r4, [pc, #40]	; (8001270 <_sbrk+0x3c>)
 8001248:	4403      	add	r3, r0
 800124a:	1b09      	subs	r1, r1, r4
 800124c:	428b      	cmp	r3, r1
 800124e:	d906      	bls.n	800125e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001250:	f008 fa26 	bl	80096a0 <__errno>
 8001254:	230c      	movs	r3, #12
 8001256:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001258:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800125c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800125e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001260:	e7fc      	b.n	800125c <_sbrk+0x28>
 8001262:	bf00      	nop
 8001264:	20000808 	.word	0x20000808
 8001268:	20000ef0 	.word	0x20000ef0
 800126c:	20080000 	.word	0x20080000
 8001270:	00000800 	.word	0x00000800

08001274 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001274:	4a03      	ldr	r2, [pc, #12]	; (8001284 <SystemInit+0x10>)
 8001276:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 800127a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800127e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001282:	4770      	bx	lr
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001288:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800128c:	480d      	ldr	r0, [pc, #52]	; (80012c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800128e:	490e      	ldr	r1, [pc, #56]	; (80012c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001290:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001292:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001294:	e002      	b.n	800129c <LoopCopyDataInit>

08001296 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001296:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001298:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800129a:	3304      	adds	r3, #4

0800129c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800129c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800129e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012a0:	d3f9      	bcc.n	8001296 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012a2:	4a0b      	ldr	r2, [pc, #44]	; (80012d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012a4:	4c0b      	ldr	r4, [pc, #44]	; (80012d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80012a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012a8:	e001      	b.n	80012ae <LoopFillZerobss>

080012aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012ac:	3204      	adds	r2, #4

080012ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012b0:	d3fb      	bcc.n	80012aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80012b2:	f7ff ffdf 	bl	8001274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012b6:	f008 f9f9 	bl	80096ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012ba:	f7ff fbc9 	bl	8000a50 <main>
  bx  lr    
 80012be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80012c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012c8:	20000740 	.word	0x20000740
  ldr r2, =_sidata
 80012cc:	08010c30 	.word	0x08010c30
  ldr r2, =_sbss
 80012d0:	20000740 	.word	0x20000740
  ldr r4, =_ebss
 80012d4:	20000ef0 	.word	0x20000ef0

080012d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012d8:	e7fe      	b.n	80012d8 <ADC_IRQHandler>
	...

080012dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012dc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <HAL_InitTick+0x3c>)
{
 80012e0:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e2:	781a      	ldrb	r2, [r3, #0]
 80012e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80012ec:	4a0b      	ldr	r2, [pc, #44]	; (800131c <HAL_InitTick+0x40>)
 80012ee:	6810      	ldr	r0, [r2, #0]
 80012f0:	fbb0 f0f3 	udiv	r0, r0, r3
 80012f4:	f000 f89c 	bl	8001430 <HAL_SYSTICK_Config>
 80012f8:	4604      	mov	r4, r0
 80012fa:	b958      	cbnz	r0, 8001314 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012fc:	2d0f      	cmp	r5, #15
 80012fe:	d809      	bhi.n	8001314 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001300:	4602      	mov	r2, r0
 8001302:	4629      	mov	r1, r5
 8001304:	f04f 30ff 	mov.w	r0, #4294967295
 8001308:	f000 f860 	bl	80013cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800130c:	4b04      	ldr	r3, [pc, #16]	; (8001320 <HAL_InitTick+0x44>)
 800130e:	4620      	mov	r0, r4
 8001310:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8001312:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8001314:	2001      	movs	r0, #1
 8001316:	e7fc      	b.n	8001312 <HAL_InitTick+0x36>
 8001318:	20000004 	.word	0x20000004
 800131c:	20000000 	.word	0x20000000
 8001320:	20000008 	.word	0x20000008

08001324 <HAL_Init>:
{
 8001324:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001326:	2003      	movs	r0, #3
 8001328:	f000 f83e 	bl	80013a8 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff ffd5 	bl	80012dc <HAL_InitTick>
  HAL_MspInit();
 8001332:	f7ff ff03 	bl	800113c <HAL_MspInit>
}
 8001336:	2000      	movs	r0, #0
 8001338:	bd08      	pop	{r3, pc}
	...

0800133c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800133c:	4a03      	ldr	r2, [pc, #12]	; (800134c <HAL_IncTick+0x10>)
 800133e:	4b04      	ldr	r3, [pc, #16]	; (8001350 <HAL_IncTick+0x14>)
 8001340:	6811      	ldr	r1, [r2, #0]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	440b      	add	r3, r1
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	2000080c 	.word	0x2000080c
 8001350:	20000004 	.word	0x20000004

08001354 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001354:	4b01      	ldr	r3, [pc, #4]	; (800135c <HAL_GetTick+0x8>)
 8001356:	6818      	ldr	r0, [r3, #0]
}
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000080c 	.word	0x2000080c

08001360 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001360:	b538      	push	{r3, r4, r5, lr}
 8001362:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001364:	f7ff fff6 	bl	8001354 <HAL_GetTick>
 8001368:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800136a:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800136c:	bf1e      	ittt	ne
 800136e:	4b04      	ldrne	r3, [pc, #16]	; (8001380 <HAL_Delay+0x20>)
 8001370:	781b      	ldrbne	r3, [r3, #0]
 8001372:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001374:	f7ff ffee 	bl	8001354 <HAL_GetTick>
 8001378:	1b43      	subs	r3, r0, r5
 800137a:	42a3      	cmp	r3, r4
 800137c:	d3fa      	bcc.n	8001374 <HAL_Delay+0x14>
  {
  }
}
 800137e:	bd38      	pop	{r3, r4, r5, pc}
 8001380:	20000004 	.word	0x20000004

08001384 <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F7xx_HAL_VERSION;
}
 8001384:	4800      	ldr	r0, [pc, #0]	; (8001388 <HAL_GetHalVersion+0x4>)
 8001386:	4770      	bx	lr
 8001388:	01030000 	.word	0x01030000

0800138c <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 800138c:	4b01      	ldr	r3, [pc, #4]	; (8001394 <HAL_GetREVID+0x8>)
 800138e:	6818      	ldr	r0, [r3, #0]
}
 8001390:	0c00      	lsrs	r0, r0, #16
 8001392:	4770      	bx	lr
 8001394:	e0042000 	.word	0xe0042000

08001398 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001398:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <HAL_GetDEVID+0xc>)
 800139a:	6818      	ldr	r0, [r3, #0]
}
 800139c:	f3c0 000b 	ubfx	r0, r0, #0, #12
 80013a0:	4770      	bx	lr
 80013a2:	bf00      	nop
 80013a4:	e0042000 	.word	0xe0042000

080013a8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013aa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013ac:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80013b6:	0412      	lsls	r2, r2, #16
 80013b8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80013c4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013cc:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013ce:	b530      	push	{r4, r5, lr}
 80013d0:	68dc      	ldr	r4, [r3, #12]
 80013d2:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013d6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013da:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013dc:	2b04      	cmp	r3, #4
 80013de:	bf28      	it	cs
 80013e0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e2:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013e8:	bf8c      	ite	hi
 80013ea:	3c03      	subhi	r4, #3
 80013ec:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013ee:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80013f2:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013f4:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013fc:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001400:	fa03 f304 	lsl.w	r3, r3, r4
 8001404:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001408:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800140c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800140e:	db06      	blt.n	800141e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001410:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001414:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001418:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800141c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141e:	f000 000f 	and.w	r0, r0, #15
 8001422:	4a02      	ldr	r2, [pc, #8]	; (800142c <HAL_NVIC_SetPriority+0x60>)
 8001424:	5413      	strb	r3, [r2, r0]
 8001426:	e7f9      	b.n	800141c <HAL_NVIC_SetPriority+0x50>
 8001428:	e000ed00 	.word	0xe000ed00
 800142c:	e000ed14 	.word	0xe000ed14

08001430 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001430:	3801      	subs	r0, #1
 8001432:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001436:	d20b      	bcs.n	8001450 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001438:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143c:	4a05      	ldr	r2, [pc, #20]	; (8001454 <HAL_SYSTICK_Config+0x24>)
 800143e:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001440:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001442:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001444:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001448:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800144a:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800144c:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800144e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8001450:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001452:	4770      	bx	lr
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001458:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800145a:	4604      	mov	r4, r0
 800145c:	b908      	cbnz	r0, 8001462 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800145e:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001460:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001462:	7f43      	ldrb	r3, [r0, #29]
 8001464:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001468:	b913      	cbnz	r3, 8001470 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800146a:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 800146c:	f7ff fe7e 	bl	800116c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001470:	2302      	movs	r3, #2
 8001472:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8001474:	7923      	ldrb	r3, [r4, #4]
 8001476:	b9e3      	cbnz	r3, 80014b2 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	4a13      	ldr	r2, [pc, #76]	; (80014c8 <HAL_CRC_Init+0x70>)
 800147c:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800147e:	689a      	ldr	r2, [r3, #8]
 8001480:	f022 0218 	bic.w	r2, r2, #24
 8001484:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001486:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001488:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800148a:	b9d2      	cbnz	r2, 80014c2 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800148c:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001490:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 8001492:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	6961      	ldr	r1, [r4, #20]
 8001498:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800149c:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800149e:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80014a0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014a8:	430a      	orrs	r2, r1
 80014aa:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80014ac:	2301      	movs	r3, #1
 80014ae:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80014b0:	e7d6      	b.n	8001460 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80014b2:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80014b6:	4620      	mov	r0, r4
 80014b8:	f000 f808 	bl	80014cc <HAL_CRCEx_Polynomial_Set>
 80014bc:	2800      	cmp	r0, #0
 80014be:	d0e2      	beq.n	8001486 <HAL_CRC_Init+0x2e>
 80014c0:	e7cd      	b.n	800145e <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80014c2:	6922      	ldr	r2, [r4, #16]
 80014c4:	e7e4      	b.n	8001490 <HAL_CRC_Init+0x38>
 80014c6:	bf00      	nop
 80014c8:	04c11db7 	.word	0x04c11db7

080014cc <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80014cc:	231f      	movs	r3, #31
{
 80014ce:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80014d0:	3b01      	subs	r3, #1
 80014d2:	d31c      	bcc.n	800150e <HAL_CRCEx_Polynomial_Set+0x42>
 80014d4:	fa21 f403 	lsr.w	r4, r1, r3
 80014d8:	07e4      	lsls	r4, r4, #31
 80014da:	d5f9      	bpl.n	80014d0 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 80014dc:	2a10      	cmp	r2, #16
 80014de:	d012      	beq.n	8001506 <HAL_CRCEx_Polynomial_Set+0x3a>
 80014e0:	d804      	bhi.n	80014ec <HAL_CRCEx_Polynomial_Set+0x20>
 80014e2:	b13a      	cbz	r2, 80014f4 <HAL_CRCEx_Polynomial_Set+0x28>
 80014e4:	2a08      	cmp	r2, #8
 80014e6:	d010      	beq.n	800150a <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 80014e8:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80014ea:	e00b      	b.n	8001504 <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 80014ec:	2a18      	cmp	r2, #24
 80014ee:	d1fb      	bne.n	80014e8 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 80014f0:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 80014f2:	d8f9      	bhi.n	80014e8 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80014f4:	6800      	ldr	r0, [r0, #0]
 80014f6:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80014f8:	6883      	ldr	r3, [r0, #8]
 80014fa:	f023 0318 	bic.w	r3, r3, #24
 80014fe:	4313      	orrs	r3, r2
 8001500:	6083      	str	r3, [r0, #8]
 8001502:	2000      	movs	r0, #0
}
 8001504:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 8001506:	2b07      	cmp	r3, #7
 8001508:	e7f3      	b.n	80014f2 <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 800150a:	2b0f      	cmp	r3, #15
 800150c:	e7f1      	b.n	80014f2 <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 800150e:	2a00      	cmp	r2, #0
 8001510:	d1ea      	bne.n	80014e8 <HAL_CRCEx_Polynomial_Set+0x1c>
 8001512:	e7ef      	b.n	80014f4 <HAL_CRCEx_Polynomial_Set+0x28>

08001514 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001514:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001518:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800151a:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 80016d4 <HAL_GPIO_Init+0x1c0>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800151e:	4a6b      	ldr	r2, [pc, #428]	; (80016cc <HAL_GPIO_Init+0x1b8>)
    ioposition = ((uint32_t)0x01) << position;
 8001520:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001522:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 8001524:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001526:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 800152a:	43ac      	bics	r4, r5
 800152c:	f040 80b4 	bne.w	8001698 <HAL_GPIO_Init+0x184>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001530:	684d      	ldr	r5, [r1, #4]
 8001532:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001536:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001538:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800153c:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001540:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001542:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001544:	2f01      	cmp	r7, #1
 8001546:	d834      	bhi.n	80015b2 <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 8001548:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800154a:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 800154e:	68cf      	ldr	r7, [r1, #12]
 8001550:	fa07 f708 	lsl.w	r7, r7, r8
 8001554:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001558:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800155a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800155c:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001560:	f3c5 1700 	ubfx	r7, r5, #4, #1
 8001564:	409f      	lsls	r7, r3
 8001566:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800156a:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 800156c:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156e:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001570:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001574:	688f      	ldr	r7, [r1, #8]
 8001576:	fa07 f708 	lsl.w	r7, r7, r8
 800157a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 800157e:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001580:	d119      	bne.n	80015b6 <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 8001582:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001586:	f003 0b07 	and.w	fp, r3, #7
 800158a:	f04f 0e0f 	mov.w	lr, #15
 800158e:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8001592:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 8001596:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800159a:	fa0e fe0b 	lsl.w	lr, lr, fp
 800159e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015a2:	690f      	ldr	r7, [r1, #16]
 80015a4:	fa07 f70b 	lsl.w	r7, r7, fp
 80015a8:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 80015ac:	f8ca 7020 	str.w	r7, [sl, #32]
 80015b0:	e001      	b.n	80015b6 <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015b2:	2c03      	cmp	r4, #3
 80015b4:	d1da      	bne.n	800156c <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 80015b6:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015b8:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015bc:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015c0:	ea07 0706 	and.w	r7, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015c4:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 80015c8:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ca:	d065      	beq.n	8001698 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015cc:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80015d0:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015d4:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d8:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 80015dc:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015e0:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015e2:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 80015e6:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 80015ea:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 80015ee:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 80015f2:	9401      	str	r4, [sp, #4]
 80015f4:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015f6:	240f      	movs	r4, #15
        temp = SYSCFG->EXTICR[position >> 2];
 80015f8:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80015fc:	40bc      	lsls	r4, r7
 80015fe:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001602:	4c33      	ldr	r4, [pc, #204]	; (80016d0 <HAL_GPIO_Init+0x1bc>)
 8001604:	42a0      	cmp	r0, r4
 8001606:	d04e      	beq.n	80016a6 <HAL_GPIO_Init+0x192>
 8001608:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800160c:	42a0      	cmp	r0, r4
 800160e:	d04c      	beq.n	80016aa <HAL_GPIO_Init+0x196>
 8001610:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001614:	42a0      	cmp	r0, r4
 8001616:	d04a      	beq.n	80016ae <HAL_GPIO_Init+0x19a>
 8001618:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800161c:	42a0      	cmp	r0, r4
 800161e:	d048      	beq.n	80016b2 <HAL_GPIO_Init+0x19e>
 8001620:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001624:	42a0      	cmp	r0, r4
 8001626:	d046      	beq.n	80016b6 <HAL_GPIO_Init+0x1a2>
 8001628:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800162c:	42a0      	cmp	r0, r4
 800162e:	d044      	beq.n	80016ba <HAL_GPIO_Init+0x1a6>
 8001630:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001634:	42a0      	cmp	r0, r4
 8001636:	d042      	beq.n	80016be <HAL_GPIO_Init+0x1aa>
 8001638:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800163c:	42a0      	cmp	r0, r4
 800163e:	d040      	beq.n	80016c2 <HAL_GPIO_Init+0x1ae>
 8001640:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8001644:	42a0      	cmp	r0, r4
 8001646:	d03e      	beq.n	80016c6 <HAL_GPIO_Init+0x1b2>
 8001648:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 800164c:	42a0      	cmp	r0, r4
 800164e:	bf0c      	ite	eq
 8001650:	2409      	moveq	r4, #9
 8001652:	240a      	movne	r4, #10
 8001654:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001656:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001658:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 800165c:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 800165e:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 8001662:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 8001664:	bf54      	ite	pl
 8001666:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001668:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800166c:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 800166e:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8001670:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 8001672:	bf54      	ite	pl
 8001674:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001676:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800167a:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 800167c:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 800167e:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001680:	bf54      	ite	pl
 8001682:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001684:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001688:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 800168a:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 800168c:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800168e:	bf54      	ite	pl
 8001690:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001692:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 8001696:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001698:	3301      	adds	r3, #1
 800169a:	2b10      	cmp	r3, #16
 800169c:	f47f af40 	bne.w	8001520 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 80016a0:	b003      	add	sp, #12
 80016a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80016a6:	2400      	movs	r4, #0
 80016a8:	e7d4      	b.n	8001654 <HAL_GPIO_Init+0x140>
 80016aa:	2401      	movs	r4, #1
 80016ac:	e7d2      	b.n	8001654 <HAL_GPIO_Init+0x140>
 80016ae:	2402      	movs	r4, #2
 80016b0:	e7d0      	b.n	8001654 <HAL_GPIO_Init+0x140>
 80016b2:	2403      	movs	r4, #3
 80016b4:	e7ce      	b.n	8001654 <HAL_GPIO_Init+0x140>
 80016b6:	2404      	movs	r4, #4
 80016b8:	e7cc      	b.n	8001654 <HAL_GPIO_Init+0x140>
 80016ba:	2405      	movs	r4, #5
 80016bc:	e7ca      	b.n	8001654 <HAL_GPIO_Init+0x140>
 80016be:	2406      	movs	r4, #6
 80016c0:	e7c8      	b.n	8001654 <HAL_GPIO_Init+0x140>
 80016c2:	2407      	movs	r4, #7
 80016c4:	e7c6      	b.n	8001654 <HAL_GPIO_Init+0x140>
 80016c6:	2408      	movs	r4, #8
 80016c8:	e7c4      	b.n	8001654 <HAL_GPIO_Init+0x140>
 80016ca:	bf00      	nop
 80016cc:	40013c00 	.word	0x40013c00
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40023800 	.word	0x40023800

080016d8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016d8:	b10a      	cbz	r2, 80016de <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016da:	6181      	str	r1, [r0, #24]
  }
}
 80016dc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80016de:	0409      	lsls	r1, r1, #16
 80016e0:	e7fb      	b.n	80016da <HAL_GPIO_WritePin+0x2>
	...

080016e4 <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 80016e4:	4b19      	ldr	r3, [pc, #100]	; (800174c <HAL_PWREx_EnableOverDrive+0x68>)
{
 80016e6:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 80016e8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80016ea:	4c19      	ldr	r4, [pc, #100]	; (8001750 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80016ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80016f0:	641a      	str	r2, [r3, #64]	; 0x40
 80016f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f8:	9301      	str	r3, [sp, #4]
 80016fa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80016fc:	6823      	ldr	r3, [r4, #0]
 80016fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001702:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001704:	f7ff fe26 	bl	8001354 <HAL_GetTick>
 8001708:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800170a:	6863      	ldr	r3, [r4, #4]
 800170c:	03da      	lsls	r2, r3, #15
 800170e:	d50c      	bpl.n	800172a <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001710:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001712:	4d0f      	ldr	r5, [pc, #60]	; (8001750 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001714:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001718:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800171a:	f7ff fe1b 	bl	8001354 <HAL_GetTick>
 800171e:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001720:	686b      	ldr	r3, [r5, #4]
 8001722:	039b      	lsls	r3, r3, #14
 8001724:	d50a      	bpl.n	800173c <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8001726:	2000      	movs	r0, #0
 8001728:	e006      	b.n	8001738 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800172a:	f7ff fe13 	bl	8001354 <HAL_GetTick>
 800172e:	1b40      	subs	r0, r0, r5
 8001730:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001734:	d9e9      	bls.n	800170a <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 8001736:	2003      	movs	r0, #3
}
 8001738:	b003      	add	sp, #12
 800173a:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800173c:	f7ff fe0a 	bl	8001354 <HAL_GetTick>
 8001740:	1b00      	subs	r0, r0, r4
 8001742:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8001746:	d9eb      	bls.n	8001720 <HAL_PWREx_EnableOverDrive+0x3c>
 8001748:	e7f5      	b.n	8001736 <HAL_PWREx_EnableOverDrive+0x52>
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800
 8001750:	40007000 	.word	0x40007000

08001754 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001754:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001758:	4604      	mov	r4, r0
 800175a:	b340      	cbz	r0, 80017ae <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800175c:	6803      	ldr	r3, [r0, #0]
 800175e:	07db      	lsls	r3, r3, #31
 8001760:	d410      	bmi.n	8001784 <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001762:	6823      	ldr	r3, [r4, #0]
 8001764:	079f      	lsls	r7, r3, #30
 8001766:	d461      	bmi.n	800182c <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001768:	6823      	ldr	r3, [r4, #0]
 800176a:	0719      	lsls	r1, r3, #28
 800176c:	f100 80a6 	bmi.w	80018bc <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001770:	6823      	ldr	r3, [r4, #0]
 8001772:	075a      	lsls	r2, r3, #29
 8001774:	f100 80c7 	bmi.w	8001906 <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001778:	69a2      	ldr	r2, [r4, #24]
 800177a:	2a00      	cmp	r2, #0
 800177c:	f040 8130 	bne.w	80019e0 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001780:	2000      	movs	r0, #0
 8001782:	e02c      	b.n	80017de <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001784:	4b94      	ldr	r3, [pc, #592]	; (80019d8 <HAL_RCC_OscConfig+0x284>)
 8001786:	689a      	ldr	r2, [r3, #8]
 8001788:	f002 020c 	and.w	r2, r2, #12
 800178c:	2a04      	cmp	r2, #4
 800178e:	d007      	beq.n	80017a0 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001790:	689a      	ldr	r2, [r3, #8]
 8001792:	f002 020c 	and.w	r2, r2, #12
 8001796:	2a08      	cmp	r2, #8
 8001798:	d10b      	bne.n	80017b2 <HAL_RCC_OscConfig+0x5e>
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	025e      	lsls	r6, r3, #9
 800179e:	d508      	bpl.n	80017b2 <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	4b8d      	ldr	r3, [pc, #564]	; (80019d8 <HAL_RCC_OscConfig+0x284>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	039d      	lsls	r5, r3, #14
 80017a6:	d5dc      	bpl.n	8001762 <HAL_RCC_OscConfig+0xe>
 80017a8:	6863      	ldr	r3, [r4, #4]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d1d9      	bne.n	8001762 <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 80017ae:	2001      	movs	r0, #1
 80017b0:	e015      	b.n	80017de <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017b2:	6863      	ldr	r3, [r4, #4]
 80017b4:	4d88      	ldr	r5, [pc, #544]	; (80019d8 <HAL_RCC_OscConfig+0x284>)
 80017b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017ba:	d113      	bne.n	80017e4 <HAL_RCC_OscConfig+0x90>
 80017bc:	682b      	ldr	r3, [r5, #0]
 80017be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017c2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017c4:	f7ff fdc6 	bl	8001354 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c8:	4e83      	ldr	r6, [pc, #524]	; (80019d8 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 80017ca:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017cc:	6833      	ldr	r3, [r6, #0]
 80017ce:	0398      	lsls	r0, r3, #14
 80017d0:	d4c7      	bmi.n	8001762 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d2:	f7ff fdbf 	bl	8001354 <HAL_GetTick>
 80017d6:	1b40      	subs	r0, r0, r5
 80017d8:	2864      	cmp	r0, #100	; 0x64
 80017da:	d9f7      	bls.n	80017cc <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 80017dc:	2003      	movs	r0, #3
}
 80017de:	b002      	add	sp, #8
 80017e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017e4:	b99b      	cbnz	r3, 800180e <HAL_RCC_OscConfig+0xba>
 80017e6:	682b      	ldr	r3, [r5, #0]
 80017e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017ec:	602b      	str	r3, [r5, #0]
 80017ee:	682b      	ldr	r3, [r5, #0]
 80017f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80017f6:	f7ff fdad 	bl	8001354 <HAL_GetTick>
 80017fa:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017fc:	682b      	ldr	r3, [r5, #0]
 80017fe:	0399      	lsls	r1, r3, #14
 8001800:	d5af      	bpl.n	8001762 <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001802:	f7ff fda7 	bl	8001354 <HAL_GetTick>
 8001806:	1b80      	subs	r0, r0, r6
 8001808:	2864      	cmp	r0, #100	; 0x64
 800180a:	d9f7      	bls.n	80017fc <HAL_RCC_OscConfig+0xa8>
 800180c:	e7e6      	b.n	80017dc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800180e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001812:	682b      	ldr	r3, [r5, #0]
 8001814:	d103      	bne.n	800181e <HAL_RCC_OscConfig+0xca>
 8001816:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800181a:	602b      	str	r3, [r5, #0]
 800181c:	e7ce      	b.n	80017bc <HAL_RCC_OscConfig+0x68>
 800181e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001822:	602b      	str	r3, [r5, #0]
 8001824:	682b      	ldr	r3, [r5, #0]
 8001826:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182a:	e7ca      	b.n	80017c2 <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800182c:	4b6a      	ldr	r3, [pc, #424]	; (80019d8 <HAL_RCC_OscConfig+0x284>)
 800182e:	689a      	ldr	r2, [r3, #8]
 8001830:	f012 0f0c 	tst.w	r2, #12
 8001834:	d007      	beq.n	8001846 <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001836:	689a      	ldr	r2, [r3, #8]
 8001838:	f002 020c 	and.w	r2, r2, #12
 800183c:	2a08      	cmp	r2, #8
 800183e:	d111      	bne.n	8001864 <HAL_RCC_OscConfig+0x110>
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	025a      	lsls	r2, r3, #9
 8001844:	d40e      	bmi.n	8001864 <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001846:	4a64      	ldr	r2, [pc, #400]	; (80019d8 <HAL_RCC_OscConfig+0x284>)
 8001848:	6813      	ldr	r3, [r2, #0]
 800184a:	079b      	lsls	r3, r3, #30
 800184c:	d502      	bpl.n	8001854 <HAL_RCC_OscConfig+0x100>
 800184e:	68e3      	ldr	r3, [r4, #12]
 8001850:	2b01      	cmp	r3, #1
 8001852:	d1ac      	bne.n	80017ae <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001854:	6813      	ldr	r3, [r2, #0]
 8001856:	6921      	ldr	r1, [r4, #16]
 8001858:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800185c:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001860:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001862:	e781      	b.n	8001768 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001864:	68e3      	ldr	r3, [r4, #12]
 8001866:	4d5c      	ldr	r5, [pc, #368]	; (80019d8 <HAL_RCC_OscConfig+0x284>)
 8001868:	b1bb      	cbz	r3, 800189a <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 800186a:	682b      	ldr	r3, [r5, #0]
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001872:	f7ff fd6f 	bl	8001354 <HAL_GetTick>
 8001876:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001878:	682b      	ldr	r3, [r5, #0]
 800187a:	079f      	lsls	r7, r3, #30
 800187c:	d507      	bpl.n	800188e <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800187e:	682b      	ldr	r3, [r5, #0]
 8001880:	6922      	ldr	r2, [r4, #16]
 8001882:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001886:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800188a:	602b      	str	r3, [r5, #0]
 800188c:	e76c      	b.n	8001768 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800188e:	f7ff fd61 	bl	8001354 <HAL_GetTick>
 8001892:	1b80      	subs	r0, r0, r6
 8001894:	2802      	cmp	r0, #2
 8001896:	d9ef      	bls.n	8001878 <HAL_RCC_OscConfig+0x124>
 8001898:	e7a0      	b.n	80017dc <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 800189a:	682b      	ldr	r3, [r5, #0]
 800189c:	f023 0301 	bic.w	r3, r3, #1
 80018a0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018a2:	f7ff fd57 	bl	8001354 <HAL_GetTick>
 80018a6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a8:	682b      	ldr	r3, [r5, #0]
 80018aa:	0798      	lsls	r0, r3, #30
 80018ac:	f57f af5c 	bpl.w	8001768 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b0:	f7ff fd50 	bl	8001354 <HAL_GetTick>
 80018b4:	1b80      	subs	r0, r0, r6
 80018b6:	2802      	cmp	r0, #2
 80018b8:	d9f6      	bls.n	80018a8 <HAL_RCC_OscConfig+0x154>
 80018ba:	e78f      	b.n	80017dc <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80018bc:	6963      	ldr	r3, [r4, #20]
 80018be:	4d46      	ldr	r5, [pc, #280]	; (80019d8 <HAL_RCC_OscConfig+0x284>)
 80018c0:	b183      	cbz	r3, 80018e4 <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 80018c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80018ca:	f7ff fd43 	bl	8001354 <HAL_GetTick>
 80018ce:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018d0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80018d2:	079b      	lsls	r3, r3, #30
 80018d4:	f53f af4c 	bmi.w	8001770 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d8:	f7ff fd3c 	bl	8001354 <HAL_GetTick>
 80018dc:	1b80      	subs	r0, r0, r6
 80018de:	2802      	cmp	r0, #2
 80018e0:	d9f6      	bls.n	80018d0 <HAL_RCC_OscConfig+0x17c>
 80018e2:	e77b      	b.n	80017dc <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 80018e4:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 80018ec:	f7ff fd32 	bl	8001354 <HAL_GetTick>
 80018f0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80018f4:	079f      	lsls	r7, r3, #30
 80018f6:	f57f af3b 	bpl.w	8001770 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff fd2b 	bl	8001354 <HAL_GetTick>
 80018fe:	1b80      	subs	r0, r0, r6
 8001900:	2802      	cmp	r0, #2
 8001902:	d9f6      	bls.n	80018f2 <HAL_RCC_OscConfig+0x19e>
 8001904:	e76a      	b.n	80017dc <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001906:	4b34      	ldr	r3, [pc, #208]	; (80019d8 <HAL_RCC_OscConfig+0x284>)
 8001908:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800190a:	00d0      	lsls	r0, r2, #3
 800190c:	d427      	bmi.n	800195e <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 8001910:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8001912:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001916:	641a      	str	r2, [r3, #64]	; 0x40
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191e:	9301      	str	r3, [sp, #4]
 8001920:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001922:	4d2e      	ldr	r5, [pc, #184]	; (80019dc <HAL_RCC_OscConfig+0x288>)
 8001924:	682b      	ldr	r3, [r5, #0]
 8001926:	05d9      	lsls	r1, r3, #23
 8001928:	d51b      	bpl.n	8001962 <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800192a:	68a3      	ldr	r3, [r4, #8]
 800192c:	4d2a      	ldr	r5, [pc, #168]	; (80019d8 <HAL_RCC_OscConfig+0x284>)
 800192e:	2b01      	cmp	r3, #1
 8001930:	d127      	bne.n	8001982 <HAL_RCC_OscConfig+0x22e>
 8001932:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800193a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800193e:	f7ff fd09 	bl	8001354 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001942:	4e25      	ldr	r6, [pc, #148]	; (80019d8 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 8001944:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001946:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8001948:	079b      	lsls	r3, r3, #30
 800194a:	d53f      	bpl.n	80019cc <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 800194c:	2f00      	cmp	r7, #0
 800194e:	f43f af13 	beq.w	8001778 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001952:	4a21      	ldr	r2, [pc, #132]	; (80019d8 <HAL_RCC_OscConfig+0x284>)
 8001954:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8001956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800195a:	6413      	str	r3, [r2, #64]	; 0x40
 800195c:	e70c      	b.n	8001778 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 800195e:	2700      	movs	r7, #0
 8001960:	e7df      	b.n	8001922 <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 8001962:	682b      	ldr	r3, [r5, #0]
 8001964:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001968:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800196a:	f7ff fcf3 	bl	8001354 <HAL_GetTick>
 800196e:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001970:	682b      	ldr	r3, [r5, #0]
 8001972:	05da      	lsls	r2, r3, #23
 8001974:	d4d9      	bmi.n	800192a <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001976:	f7ff fced 	bl	8001354 <HAL_GetTick>
 800197a:	1b80      	subs	r0, r0, r6
 800197c:	2864      	cmp	r0, #100	; 0x64
 800197e:	d9f7      	bls.n	8001970 <HAL_RCC_OscConfig+0x21c>
 8001980:	e72c      	b.n	80017dc <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001982:	b9ab      	cbnz	r3, 80019b0 <HAL_RCC_OscConfig+0x25c>
 8001984:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001986:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	672b      	str	r3, [r5, #112]	; 0x70
 8001990:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001992:	f023 0304 	bic.w	r3, r3, #4
 8001996:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001998:	f7ff fcdc 	bl	8001354 <HAL_GetTick>
 800199c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199e:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019a0:	0798      	lsls	r0, r3, #30
 80019a2:	d5d3      	bpl.n	800194c <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019a4:	f7ff fcd6 	bl	8001354 <HAL_GetTick>
 80019a8:	1b80      	subs	r0, r0, r6
 80019aa:	4540      	cmp	r0, r8
 80019ac:	d9f7      	bls.n	800199e <HAL_RCC_OscConfig+0x24a>
 80019ae:	e715      	b.n	80017dc <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b0:	2b05      	cmp	r3, #5
 80019b2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019b4:	d103      	bne.n	80019be <HAL_RCC_OscConfig+0x26a>
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	672b      	str	r3, [r5, #112]	; 0x70
 80019bc:	e7b9      	b.n	8001932 <HAL_RCC_OscConfig+0x1de>
 80019be:	f023 0301 	bic.w	r3, r3, #1
 80019c2:	672b      	str	r3, [r5, #112]	; 0x70
 80019c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80019c6:	f023 0304 	bic.w	r3, r3, #4
 80019ca:	e7b5      	b.n	8001938 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019cc:	f7ff fcc2 	bl	8001354 <HAL_GetTick>
 80019d0:	1b40      	subs	r0, r0, r5
 80019d2:	4540      	cmp	r0, r8
 80019d4:	d9b7      	bls.n	8001946 <HAL_RCC_OscConfig+0x1f2>
 80019d6:	e701      	b.n	80017dc <HAL_RCC_OscConfig+0x88>
 80019d8:	40023800 	.word	0x40023800
 80019dc:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019e0:	4d3c      	ldr	r5, [pc, #240]	; (8001ad4 <HAL_RCC_OscConfig+0x380>)
 80019e2:	68ab      	ldr	r3, [r5, #8]
 80019e4:	f003 030c 	and.w	r3, r3, #12
 80019e8:	2b08      	cmp	r3, #8
 80019ea:	d042      	beq.n	8001a72 <HAL_RCC_OscConfig+0x31e>
        __HAL_RCC_PLL_DISABLE();
 80019ec:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019ee:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80019f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019f4:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019f6:	d12f      	bne.n	8001a58 <HAL_RCC_OscConfig+0x304>
        tickstart = HAL_GetTick();
 80019f8:	f7ff fcac 	bl	8001354 <HAL_GetTick>
 80019fc:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fe:	682b      	ldr	r3, [r5, #0]
 8001a00:	0199      	lsls	r1, r3, #6
 8001a02:	d423      	bmi.n	8001a4c <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a04:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001a0c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8001a10:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001a12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001a16:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8001a18:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8001a1c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001a1e:	0852      	lsrs	r2, r2, #1
 8001a20:	3a01      	subs	r2, #1
 8001a22:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001a26:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8001a28:	682b      	ldr	r3, [r5, #0]
 8001a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a2e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8001a30:	f7ff fc90 	bl	8001354 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a34:	4d27      	ldr	r5, [pc, #156]	; (8001ad4 <HAL_RCC_OscConfig+0x380>)
        tickstart = HAL_GetTick();
 8001a36:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a38:	682b      	ldr	r3, [r5, #0]
 8001a3a:	019a      	lsls	r2, r3, #6
 8001a3c:	f53f aea0 	bmi.w	8001780 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff fc88 	bl	8001354 <HAL_GetTick>
 8001a44:	1b00      	subs	r0, r0, r4
 8001a46:	2802      	cmp	r0, #2
 8001a48:	d9f6      	bls.n	8001a38 <HAL_RCC_OscConfig+0x2e4>
 8001a4a:	e6c7      	b.n	80017dc <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a4c:	f7ff fc82 	bl	8001354 <HAL_GetTick>
 8001a50:	1b80      	subs	r0, r0, r6
 8001a52:	2802      	cmp	r0, #2
 8001a54:	d9d3      	bls.n	80019fe <HAL_RCC_OscConfig+0x2aa>
 8001a56:	e6c1      	b.n	80017dc <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8001a58:	f7ff fc7c 	bl	8001354 <HAL_GetTick>
 8001a5c:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a5e:	682b      	ldr	r3, [r5, #0]
 8001a60:	019b      	lsls	r3, r3, #6
 8001a62:	f57f ae8d 	bpl.w	8001780 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a66:	f7ff fc75 	bl	8001354 <HAL_GetTick>
 8001a6a:	1b00      	subs	r0, r0, r4
 8001a6c:	2802      	cmp	r0, #2
 8001a6e:	d9f6      	bls.n	8001a5e <HAL_RCC_OscConfig+0x30a>
 8001a70:	e6b4      	b.n	80017dc <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a72:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 8001a74:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a76:	f43f ae9a 	beq.w	80017ae <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a7a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a7e:	69e1      	ldr	r1, [r4, #28]
 8001a80:	428a      	cmp	r2, r1
 8001a82:	f47f ae94 	bne.w	80017ae <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	6a21      	ldr	r1, [r4, #32]
 8001a8c:	428a      	cmp	r2, r1
 8001a8e:	f47f ae8e 	bne.w	80017ae <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a92:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a96:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a98:	401a      	ands	r2, r3
 8001a9a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001a9e:	f47f ae86 	bne.w	80017ae <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001aa2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001aa4:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001aa8:	0852      	lsrs	r2, r2, #1
 8001aaa:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aac:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001ab0:	f47f ae7d 	bne.w	80017ae <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ab4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001ab8:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001aba:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8001abe:	f47f ae76 	bne.w	80017ae <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001ac2:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8001ac6:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ac8:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8001acc:	f43f ae58 	beq.w	8001780 <HAL_RCC_OscConfig+0x2c>
 8001ad0:	e66d      	b.n	80017ae <HAL_RCC_OscConfig+0x5a>
 8001ad2:	bf00      	nop
 8001ad4:	40023800 	.word	0x40023800

08001ad8 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ad8:	4913      	ldr	r1, [pc, #76]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001ada:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001adc:	688b      	ldr	r3, [r1, #8]
 8001ade:	f003 030c 	and.w	r3, r3, #12
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d01b      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x46>
 8001ae6:	2b08      	cmp	r3, #8
 8001ae8:	d11b      	bne.n	8001b22 <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001aea:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001aec:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aee:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001af0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001af4:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001af8:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8001afc:	bf1a      	itte	ne
 8001afe:	480b      	ldrne	r0, [pc, #44]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x54>)
 8001b00:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b02:	480b      	ldreq	r0, [pc, #44]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x58>)
 8001b04:	fba1 0100 	umull	r0, r1, r1, r0
 8001b08:	f7fe fdae 	bl	8000668 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x50>)
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8001b14:	3301      	adds	r3, #1
 8001b16:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 8001b18:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8001b1c:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001b1e:	4803      	ldr	r0, [pc, #12]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x54>)
 8001b20:	e7fc      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 8001b22:	4803      	ldr	r0, [pc, #12]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 8001b24:	e7fa      	b.n	8001b1c <HAL_RCC_GetSysClockFreq+0x44>
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	017d7840 	.word	0x017d7840
 8001b30:	00f42400 	.word	0x00f42400

08001b34 <HAL_RCC_ClockConfig>:
{
 8001b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b38:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 8001b3a:	4604      	mov	r4, r0
 8001b3c:	b910      	cbnz	r0, 8001b44 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001b3e:	2001      	movs	r0, #1
}
 8001b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b44:	4a45      	ldr	r2, [pc, #276]	; (8001c5c <HAL_RCC_ClockConfig+0x128>)
 8001b46:	6813      	ldr	r3, [r2, #0]
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	428b      	cmp	r3, r1
 8001b4e:	d328      	bcc.n	8001ba2 <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b50:	6821      	ldr	r1, [r4, #0]
 8001b52:	078f      	lsls	r7, r1, #30
 8001b54:	d430      	bmi.n	8001bb8 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b56:	07c8      	lsls	r0, r1, #31
 8001b58:	d443      	bmi.n	8001be2 <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b5a:	4a40      	ldr	r2, [pc, #256]	; (8001c5c <HAL_RCC_ClockConfig+0x128>)
 8001b5c:	6813      	ldr	r3, [r2, #0]
 8001b5e:	f003 030f 	and.w	r3, r3, #15
 8001b62:	42ab      	cmp	r3, r5
 8001b64:	d866      	bhi.n	8001c34 <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b66:	6822      	ldr	r2, [r4, #0]
 8001b68:	0751      	lsls	r1, r2, #29
 8001b6a:	d46f      	bmi.n	8001c4c <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b6c:	0713      	lsls	r3, r2, #28
 8001b6e:	d507      	bpl.n	8001b80 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b70:	4a3b      	ldr	r2, [pc, #236]	; (8001c60 <HAL_RCC_ClockConfig+0x12c>)
 8001b72:	6921      	ldr	r1, [r4, #16]
 8001b74:	6893      	ldr	r3, [r2, #8]
 8001b76:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001b7a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001b7e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001b80:	f7ff ffaa 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
 8001b84:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <HAL_RCC_ClockConfig+0x12c>)
 8001b86:	4a37      	ldr	r2, [pc, #220]	; (8001c64 <HAL_RCC_ClockConfig+0x130>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001b8e:	5cd3      	ldrb	r3, [r2, r3]
 8001b90:	40d8      	lsrs	r0, r3
 8001b92:	4b35      	ldr	r3, [pc, #212]	; (8001c68 <HAL_RCC_ClockConfig+0x134>)
 8001b94:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001b96:	4b35      	ldr	r3, [pc, #212]	; (8001c6c <HAL_RCC_ClockConfig+0x138>)
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	f7ff fb9f 	bl	80012dc <HAL_InitTick>
  return HAL_OK;
 8001b9e:	2000      	movs	r0, #0
 8001ba0:	e7ce      	b.n	8001b40 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	6813      	ldr	r3, [r2, #0]
 8001ba4:	f023 030f 	bic.w	r3, r3, #15
 8001ba8:	430b      	orrs	r3, r1
 8001baa:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bac:	6813      	ldr	r3, [r2, #0]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	428b      	cmp	r3, r1
 8001bb4:	d1c3      	bne.n	8001b3e <HAL_RCC_ClockConfig+0xa>
 8001bb6:	e7cb      	b.n	8001b50 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bb8:	f011 0f04 	tst.w	r1, #4
 8001bbc:	4b28      	ldr	r3, [pc, #160]	; (8001c60 <HAL_RCC_ClockConfig+0x12c>)
 8001bbe:	d003      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001bc0:	689a      	ldr	r2, [r3, #8]
 8001bc2:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001bc6:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bc8:	070e      	lsls	r6, r1, #28
 8001bca:	d503      	bpl.n	8001bd4 <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001bcc:	689a      	ldr	r2, [r3, #8]
 8001bce:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001bd2:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd4:	689a      	ldr	r2, [r3, #8]
 8001bd6:	68a0      	ldr	r0, [r4, #8]
 8001bd8:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001bdc:	4302      	orrs	r2, r0
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	e7b9      	b.n	8001b56 <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001be2:	6861      	ldr	r1, [r4, #4]
 8001be4:	4b1e      	ldr	r3, [pc, #120]	; (8001c60 <HAL_RCC_ClockConfig+0x12c>)
 8001be6:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001be8:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001bea:	d11b      	bne.n	8001c24 <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bec:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bf0:	d0a5      	beq.n	8001b3e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bf2:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bf4:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bf8:	4f19      	ldr	r7, [pc, #100]	; (8001c60 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bfa:	f022 0203 	bic.w	r2, r2, #3
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001c02:	f7ff fba7 	bl	8001354 <HAL_GetTick>
 8001c06:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	6862      	ldr	r2, [r4, #4]
 8001c0c:	f003 030c 	and.w	r3, r3, #12
 8001c10:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001c14:	d0a1      	beq.n	8001b5a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c16:	f7ff fb9d 	bl	8001354 <HAL_GetTick>
 8001c1a:	1b80      	subs	r0, r0, r6
 8001c1c:	4540      	cmp	r0, r8
 8001c1e:	d9f3      	bls.n	8001c08 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001c20:	2003      	movs	r0, #3
 8001c22:	e78d      	b.n	8001b40 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c24:	2902      	cmp	r1, #2
 8001c26:	d102      	bne.n	8001c2e <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c28:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001c2c:	e7e0      	b.n	8001bf0 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c2e:	f012 0f02 	tst.w	r2, #2
 8001c32:	e7dd      	b.n	8001bf0 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c34:	6813      	ldr	r3, [r2, #0]
 8001c36:	f023 030f 	bic.w	r3, r3, #15
 8001c3a:	432b      	orrs	r3, r5
 8001c3c:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3e:	6813      	ldr	r3, [r2, #0]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	42ab      	cmp	r3, r5
 8001c46:	f47f af7a 	bne.w	8001b3e <HAL_RCC_ClockConfig+0xa>
 8001c4a:	e78c      	b.n	8001b66 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c4c:	4904      	ldr	r1, [pc, #16]	; (8001c60 <HAL_RCC_ClockConfig+0x12c>)
 8001c4e:	68e0      	ldr	r0, [r4, #12]
 8001c50:	688b      	ldr	r3, [r1, #8]
 8001c52:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001c56:	4303      	orrs	r3, r0
 8001c58:	608b      	str	r3, [r1, #8]
 8001c5a:	e787      	b.n	8001b6c <HAL_RCC_ClockConfig+0x38>
 8001c5c:	40023c00 	.word	0x40023c00
 8001c60:	40023800 	.word	0x40023800
 8001c64:	0800bebc 	.word	0x0800bebc
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000008 	.word	0x20000008

08001c70 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001c70:	4b01      	ldr	r3, [pc, #4]	; (8001c78 <HAL_RCC_GetHCLKFreq+0x8>)
 8001c72:	6818      	ldr	r0, [r3, #0]
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	20000000 	.word	0x20000000

08001c7c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c7c:	4b04      	ldr	r3, [pc, #16]	; (8001c90 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001c7e:	4a05      	ldr	r2, [pc, #20]	; (8001c94 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001c8a:	6810      	ldr	r0, [r2, #0]
}
 8001c8c:	40d8      	lsrs	r0, r3
 8001c8e:	4770      	bx	lr
 8001c90:	40023800 	.word	0x40023800
 8001c94:	0800becc 	.word	0x0800becc
 8001c98:	20000000 	.word	0x20000000

08001c9c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001c9e:	4a05      	ldr	r2, [pc, #20]	; (8001cb4 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001ca0:	689b      	ldr	r3, [r3, #8]
 8001ca2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001ca6:	5cd3      	ldrb	r3, [r2, r3]
 8001ca8:	4a03      	ldr	r2, [pc, #12]	; (8001cb8 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001caa:	6810      	ldr	r0, [r2, #0]
}
 8001cac:	40d8      	lsrs	r0, r3
 8001cae:	4770      	bx	lr
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	0800becc 	.word	0x0800becc
 8001cb8:	20000000 	.word	0x20000000

08001cbc <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cbc:	6803      	ldr	r3, [r0, #0]
{
 8001cbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cc2:	f013 0601 	ands.w	r6, r3, #1
{
 8001cc6:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001cc8:	d00b      	beq.n	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001cca:	4ab1      	ldr	r2, [pc, #708]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ccc:	6891      	ldr	r1, [r2, #8]
 8001cce:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001cd2:	6091      	str	r1, [r2, #8]
 8001cd4:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001cd6:	6891      	ldr	r1, [r2, #8]
 8001cd8:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001cda:	fab6 f686 	clz	r6, r6
 8001cde:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ce0:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001ce2:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001ce6:	d012      	beq.n	8001d0e <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ce8:	49a9      	ldr	r1, [pc, #676]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001cea:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001cec:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001cf0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cf4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001cf8:	bf08      	it	eq
 8001cfa:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001cfc:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d00:	bf16      	itet	ne
 8001d02:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001d06:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001d08:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d0a:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001d0e:	02d9      	lsls	r1, r3, #11
 8001d10:	d510      	bpl.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d12:	489f      	ldr	r0, [pc, #636]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001d14:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001d16:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d1a:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001d1e:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001d22:	ea42 0201 	orr.w	r2, r2, r1
 8001d26:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001d2a:	f000 81aa 	beq.w	8002082 <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001d2e:	2900      	cmp	r1, #0
 8001d30:	bf08      	it	eq
 8001d32:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001d34:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001d38:	bf18      	it	ne
 8001d3a:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001d3c:	069a      	lsls	r2, r3, #26
 8001d3e:	d532      	bpl.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	4b93      	ldr	r3, [pc, #588]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001d42:	4f94      	ldr	r7, [pc, #592]	; (8001f94 <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d46:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d4a:	641a      	str	r2, [r3, #64]	; 0x40
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5c:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d5e:	f7ff faf9 	bl	8001354 <HAL_GetTick>
 8001d62:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	05db      	lsls	r3, r3, #23
 8001d68:	f140 818d 	bpl.w	8002086 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d6c:	4f88      	ldr	r7, [pc, #544]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d6e:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d72:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001d76:	f040 8191 	bne.w	800209c <HAL_RCCEx_PeriphCLKConfig+0x3e0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d7a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001d7c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001d80:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001d84:	4a82      	ldr	r2, [pc, #520]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001d86:	f040 81ae 	bne.w	80020e6 <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001d8a:	6891      	ldr	r1, [r2, #8]
 8001d8c:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001d90:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001d94:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001d98:	4301      	orrs	r1, r0
 8001d9a:	6091      	str	r1, [r2, #8]
 8001d9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001da0:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001da2:	430b      	orrs	r3, r1
 8001da4:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	06da      	lsls	r2, r3, #27
 8001daa:	d50c      	bpl.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001dac:	4a78      	ldr	r2, [pc, #480]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001dae:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001db2:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001db6:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001dba:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001dbe:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001dc0:	4301      	orrs	r1, r0
 8001dc2:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dc6:	045f      	lsls	r7, r3, #17
 8001dc8:	d508      	bpl.n	8001ddc <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dca:	4971      	ldr	r1, [pc, #452]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001dcc:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001dce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001dd2:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001dd6:	4302      	orrs	r2, r0
 8001dd8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001ddc:	0418      	lsls	r0, r3, #16
 8001dde:	d508      	bpl.n	8001df2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001de0:	496b      	ldr	r1, [pc, #428]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001de2:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001de4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001de8:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001dec:	4302      	orrs	r2, r0
 8001dee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001df2:	03d9      	lsls	r1, r3, #15
 8001df4:	d508      	bpl.n	8001e08 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001df6:	4966      	ldr	r1, [pc, #408]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001df8:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001dfa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001dfe:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001e02:	4302      	orrs	r2, r0
 8001e04:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e08:	039a      	lsls	r2, r3, #14
 8001e0a:	d508      	bpl.n	8001e1e <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e0c:	4960      	ldr	r1, [pc, #384]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001e0e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001e10:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e14:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001e18:	4302      	orrs	r2, r0
 8001e1a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e1e:	065f      	lsls	r7, r3, #25
 8001e20:	d508      	bpl.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e22:	495b      	ldr	r1, [pc, #364]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001e24:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001e26:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e2a:	f022 0203 	bic.w	r2, r2, #3
 8001e2e:	4302      	orrs	r2, r0
 8001e30:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e34:	0618      	lsls	r0, r3, #24
 8001e36:	d508      	bpl.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e38:	4955      	ldr	r1, [pc, #340]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001e3a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001e3c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e40:	f022 020c 	bic.w	r2, r2, #12
 8001e44:	4302      	orrs	r2, r0
 8001e46:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e4a:	05d9      	lsls	r1, r3, #23
 8001e4c:	d508      	bpl.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e4e:	4950      	ldr	r1, [pc, #320]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001e50:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001e52:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e56:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001e5a:	4302      	orrs	r2, r0
 8001e5c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e60:	059a      	lsls	r2, r3, #22
 8001e62:	d508      	bpl.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e64:	494a      	ldr	r1, [pc, #296]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001e66:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001e68:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e6c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001e70:	4302      	orrs	r2, r0
 8001e72:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e76:	055f      	lsls	r7, r3, #21
 8001e78:	d508      	bpl.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e7a:	4945      	ldr	r1, [pc, #276]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001e7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001e7e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e82:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001e86:	4302      	orrs	r2, r0
 8001e88:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e8c:	0518      	lsls	r0, r3, #20
 8001e8e:	d508      	bpl.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e90:	493f      	ldr	r1, [pc, #252]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001e92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001e94:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001e98:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001e9c:	4302      	orrs	r2, r0
 8001e9e:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001ea2:	04d9      	lsls	r1, r3, #19
 8001ea4:	d508      	bpl.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001ea6:	493a      	ldr	r1, [pc, #232]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ea8:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001eaa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001eae:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001eb2:	4302      	orrs	r2, r0
 8001eb4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001eb8:	049a      	lsls	r2, r3, #18
 8001eba:	d508      	bpl.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001ebc:	4934      	ldr	r1, [pc, #208]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ebe:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001ec0:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ec4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001ec8:	4302      	orrs	r2, r0
 8001eca:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ece:	025f      	lsls	r7, r3, #9
 8001ed0:	d508      	bpl.n	8001ee4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ed2:	492f      	ldr	r1, [pc, #188]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ed4:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001ed6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001eda:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001ede:	4302      	orrs	r2, r0
 8001ee0:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ee4:	0298      	lsls	r0, r3, #10
 8001ee6:	d50c      	bpl.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ee8:	4829      	ldr	r0, [pc, #164]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001eea:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001eec:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001ef0:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ef4:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001ef8:	bf08      	it	eq
 8001efa:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001efc:	430a      	orrs	r2, r1
 8001efe:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001f02:	f013 0f08 	tst.w	r3, #8
 8001f06:	bf18      	it	ne
 8001f08:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f0a:	0359      	lsls	r1, r3, #13
 8001f0c:	d508      	bpl.n	8001f20 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f0e:	4920      	ldr	r1, [pc, #128]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001f10:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001f12:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f16:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f1a:	4302      	orrs	r2, r0
 8001f1c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f20:	021a      	lsls	r2, r3, #8
 8001f22:	d509      	bpl.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f24:	491a      	ldr	r1, [pc, #104]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001f26:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001f2a:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f2e:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001f32:	4302      	orrs	r2, r0
 8001f34:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001f38:	015f      	lsls	r7, r3, #5
 8001f3a:	d509      	bpl.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001f3c:	4914      	ldr	r1, [pc, #80]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001f3e:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001f42:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001f46:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001f4a:	4302      	orrs	r2, r0
 8001f4c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f50:	0118      	lsls	r0, r3, #4
 8001f52:	d509      	bpl.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f54:	490e      	ldr	r1, [pc, #56]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001f56:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001f5a:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001f5e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001f62:	4302      	orrs	r2, r0
 8001f64:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001f68:	00d9      	lsls	r1, r3, #3
 8001f6a:	d509      	bpl.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001f6c:	4908      	ldr	r1, [pc, #32]	; (8001f90 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001f6e:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001f72:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001f76:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001f7a:	4302      	orrs	r2, r0
 8001f7c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f80:	2e01      	cmp	r6, #1
 8001f82:	f000 80b4 	beq.w	80020ee <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001f86:	019a      	lsls	r2, r3, #6
 8001f88:	f100 80b1 	bmi.w	80020ee <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001f8c:	e004      	b.n	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8001f8e:	bf00      	nop
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001f98:	2d01      	cmp	r5, #1
 8001f9a:	d170      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x3c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001f9c:	4d9d      	ldr	r5, [pc, #628]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001f9e:	682b      	ldr	r3, [r5, #0]
 8001fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fa6:	f7ff f9d5 	bl	8001354 <HAL_GetTick>
 8001faa:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001fac:	682b      	ldr	r3, [r5, #0]
 8001fae:	009f      	lsls	r7, r3, #2
 8001fb0:	f100 8121 	bmi.w	80021f6 <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001fb4:	6821      	ldr	r1, [r4, #0]
 8001fb6:	030e      	lsls	r6, r1, #12
 8001fb8:	d501      	bpl.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x302>
 8001fba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fbc:	b11b      	cbz	r3, 8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8001fbe:	02cd      	lsls	r5, r1, #11
 8001fc0:	d51d      	bpl.n	8001ffe <HAL_RCCEx_PeriphCLKConfig+0x342>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001fc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fc4:	b9db      	cbnz	r3, 8001ffe <HAL_RCCEx_PeriphCLKConfig+0x342>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001fc6:	4a93      	ldr	r2, [pc, #588]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001fc8:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001fcc:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001fd0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fd4:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001fd8:	4303      	orrs	r3, r0
 8001fda:	6960      	ldr	r0, [r4, #20]
 8001fdc:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001fe0:	69a0      	ldr	r0, [r4, #24]
 8001fe2:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001fe6:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001fea:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001fee:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001ff0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001ff4:	3801      	subs	r0, #1
 8001ff6:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001ffa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001ffe:	0288      	lsls	r0, r1, #10
 8002000:	d515      	bpl.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x372>
 8002002:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8002004:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002008:	d111      	bne.n	800202e <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800200a:	4a82      	ldr	r2, [pc, #520]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800200c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002010:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002014:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002018:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800201c:	4303      	orrs	r3, r0
 800201e:	6960      	ldr	r0, [r4, #20]
 8002020:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002024:	6a20      	ldr	r0, [r4, #32]
 8002026:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800202a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800202e:	070a      	lsls	r2, r1, #28
 8002030:	d519      	bpl.n	8002066 <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002032:	4a78      	ldr	r2, [pc, #480]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002034:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002038:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800203c:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8002040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002044:	430b      	orrs	r3, r1
 8002046:	6961      	ldr	r1, [r4, #20]
 8002048:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800204c:	69e1      	ldr	r1, [r4, #28]
 800204e:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8002052:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002056:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 800205a:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800205c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002060:	430b      	orrs	r3, r1
 8002062:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002066:	4c6b      	ldr	r4, [pc, #428]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002068:	6823      	ldr	r3, [r4, #0]
 800206a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002070:	f7ff f970 	bl	8001354 <HAL_GetTick>
 8002074:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002076:	6823      	ldr	r3, [r4, #0]
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	f140 80c3 	bpl.w	8002204 <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800207e:	2000      	movs	r0, #0
 8002080:	e009      	b.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x3da>
      plli2sused = 1;
 8002082:	2601      	movs	r6, #1
 8002084:	e656      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002086:	f7ff f965 	bl	8001354 <HAL_GetTick>
 800208a:	eba0 0008 	sub.w	r0, r0, r8
 800208e:	2864      	cmp	r0, #100	; 0x64
 8002090:	f67f ae68 	bls.w	8001d64 <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8002094:	2003      	movs	r0, #3
}
 8002096:	b003      	add	sp, #12
 8002098:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800209c:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80020a0:	429a      	cmp	r2, r3
 80020a2:	f43f ae6a 	beq.w	8001d7a <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 80020a8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80020aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 80020ae:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020b2:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80020b4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80020b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020ba:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 80020bc:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80020be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c0:	07d8      	lsls	r0, r3, #31
 80020c2:	f57f ae5a 	bpl.w	8001d7a <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 80020c6:	f7ff f945 	bl	8001354 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 80020ce:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020d2:	0799      	lsls	r1, r3, #30
 80020d4:	f53f ae51 	bmi.w	8001d7a <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d8:	f7ff f93c 	bl	8001354 <HAL_GetTick>
 80020dc:	eba0 0008 	sub.w	r0, r0, r8
 80020e0:	4548      	cmp	r0, r9
 80020e2:	d9f5      	bls.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 80020e4:	e7d6      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020e6:	6891      	ldr	r1, [r2, #8]
 80020e8:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 80020ec:	e655      	b.n	8001d9a <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 80020ee:	4e49      	ldr	r6, [pc, #292]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80020f0:	6833      	ldr	r3, [r6, #0]
 80020f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80020f6:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80020f8:	f7ff f92c 	bl	8001354 <HAL_GetTick>
 80020fc:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80020fe:	6833      	ldr	r3, [r6, #0]
 8002100:	011b      	lsls	r3, r3, #4
 8002102:	d472      	bmi.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002104:	6822      	ldr	r2, [r4, #0]
 8002106:	07d7      	lsls	r7, r2, #31
 8002108:	d512      	bpl.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x474>
 800210a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800210c:	b983      	cbnz	r3, 8002130 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800210e:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002112:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002116:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800211a:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800211e:	430b      	orrs	r3, r1
 8002120:	6861      	ldr	r1, [r4, #4]
 8002122:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8002126:	68a1      	ldr	r1, [r4, #8]
 8002128:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 800212c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002130:	0316      	lsls	r6, r2, #12
 8002132:	d503      	bpl.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8002134:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800213a:	d005      	beq.n	8002148 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800213c:	02d0      	lsls	r0, r2, #11
 800213e:	d51e      	bpl.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002140:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002142:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002146:	d11a      	bne.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002148:	4932      	ldr	r1, [pc, #200]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800214a:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800214e:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002152:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002156:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800215a:	4303      	orrs	r3, r0
 800215c:	6860      	ldr	r0, [r4, #4]
 800215e:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002162:	68e0      	ldr	r0, [r4, #12]
 8002164:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002168:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800216c:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002170:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002172:	f020 001f 	bic.w	r0, r0, #31
 8002176:	3b01      	subs	r3, #1
 8002178:	4303      	orrs	r3, r0
 800217a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800217e:	01d1      	lsls	r1, r2, #7
 8002180:	d511      	bpl.n	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002182:	4924      	ldr	r1, [pc, #144]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002184:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002188:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800218c:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002190:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002194:	4303      	orrs	r3, r0
 8002196:	6860      	ldr	r0, [r4, #4]
 8002198:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800219c:	6920      	ldr	r0, [r4, #16]
 800219e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80021a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80021a6:	0192      	lsls	r2, r2, #6
 80021a8:	d50d      	bpl.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80021aa:	6923      	ldr	r3, [r4, #16]
 80021ac:	6862      	ldr	r2, [r4, #4]
 80021ae:	041b      	lsls	r3, r3, #16
 80021b0:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80021b4:	68e2      	ldr	r2, [r4, #12]
 80021b6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80021ba:	68a2      	ldr	r2, [r4, #8]
 80021bc:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80021c0:	4a14      	ldr	r2, [pc, #80]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80021c2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 80021c6:	4e13      	ldr	r6, [pc, #76]	; (8002214 <HAL_RCCEx_PeriphCLKConfig+0x558>)
 80021c8:	6833      	ldr	r3, [r6, #0]
 80021ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80021ce:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 80021d0:	f7ff f8c0 	bl	8001354 <HAL_GetTick>
 80021d4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80021d6:	6833      	ldr	r3, [r6, #0]
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	f53f aedd 	bmi.w	8001f98 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021de:	f7ff f8b9 	bl	8001354 <HAL_GetTick>
 80021e2:	1bc0      	subs	r0, r0, r7
 80021e4:	2864      	cmp	r0, #100	; 0x64
 80021e6:	d9f6      	bls.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80021e8:	e754      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80021ea:	f7ff f8b3 	bl	8001354 <HAL_GetTick>
 80021ee:	1bc0      	subs	r0, r0, r7
 80021f0:	2864      	cmp	r0, #100	; 0x64
 80021f2:	d984      	bls.n	80020fe <HAL_RCCEx_PeriphCLKConfig+0x442>
 80021f4:	e74e      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021f6:	f7ff f8ad 	bl	8001354 <HAL_GetTick>
 80021fa:	1b80      	subs	r0, r0, r6
 80021fc:	2864      	cmp	r0, #100	; 0x64
 80021fe:	f67f aed5 	bls.w	8001fac <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 8002202:	e747      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002204:	f7ff f8a6 	bl	8001354 <HAL_GetTick>
 8002208:	1b40      	subs	r0, r0, r5
 800220a:	2864      	cmp	r0, #100	; 0x64
 800220c:	f67f af33 	bls.w	8002076 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8002210:	e740      	b.n	8002094 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 8002212:	bf00      	nop
 8002214:	40023800 	.word	0x40023800

08002218 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002218:	b538      	push	{r3, r4, r5, lr}
 800221a:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800221c:	69c0      	ldr	r0, [r0, #28]
 800221e:	6921      	ldr	r1, [r4, #16]
 8002220:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002222:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002224:	430a      	orrs	r2, r1
 8002226:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002228:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800222a:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800222c:	498e      	ldr	r1, [pc, #568]	; (8002468 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800222e:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002230:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 8002232:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002234:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002236:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002238:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8002240:	430a      	orrs	r2, r1
 8002242:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002244:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002246:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 8002248:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800224a:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800224e:	430a      	orrs	r2, r1
 8002250:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002252:	4a86      	ldr	r2, [pc, #536]	; (800246c <UART_SetConfig+0x254>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d117      	bne.n	8002288 <UART_SetConfig+0x70>
 8002258:	4b85      	ldr	r3, [pc, #532]	; (8002470 <UART_SetConfig+0x258>)
 800225a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800225e:	f003 0303 	and.w	r3, r3, #3
 8002262:	3b01      	subs	r3, #1
 8002264:	2b02      	cmp	r3, #2
 8002266:	f200 80e2 	bhi.w	800242e <UART_SetConfig+0x216>
 800226a:	4a82      	ldr	r2, [pc, #520]	; (8002474 <UART_SetConfig+0x25c>)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800226c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002270:	5cd3      	ldrb	r3, [r2, r3]
 8002272:	f040 80b3 	bne.w	80023dc <UART_SetConfig+0x1c4>
  {
    switch (clocksource)
 8002276:	2b08      	cmp	r3, #8
 8002278:	d822      	bhi.n	80022c0 <UART_SetConfig+0xa8>
 800227a:	e8df f003 	tbb	[pc, r3]
 800227e:	db90      	.short	0xdb90
 8002280:	21d52198 	.word	0x21d52198
 8002284:	2121      	.short	0x2121
 8002286:	99          	.byte	0x99
 8002287:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002288:	4a7b      	ldr	r2, [pc, #492]	; (8002478 <UART_SetConfig+0x260>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d106      	bne.n	800229c <UART_SetConfig+0x84>
 800228e:	4b78      	ldr	r3, [pc, #480]	; (8002470 <UART_SetConfig+0x258>)
 8002290:	4a7a      	ldr	r2, [pc, #488]	; (800247c <UART_SetConfig+0x264>)
 8002292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002296:	f003 030c 	and.w	r3, r3, #12
 800229a:	e7e7      	b.n	800226c <UART_SetConfig+0x54>
 800229c:	4a78      	ldr	r2, [pc, #480]	; (8002480 <UART_SetConfig+0x268>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d118      	bne.n	80022d4 <UART_SetConfig+0xbc>
 80022a2:	4b73      	ldr	r3, [pc, #460]	; (8002470 <UART_SetConfig+0x258>)
 80022a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80022ac:	2b20      	cmp	r3, #32
 80022ae:	f000 80b3 	beq.w	8002418 <UART_SetConfig+0x200>
 80022b2:	d807      	bhi.n	80022c4 <UART_SetConfig+0xac>
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80c0 	beq.w	800243a <UART_SetConfig+0x222>
 80022ba:	2b10      	cmp	r3, #16
 80022bc:	f000 80b1 	beq.w	8002422 <UART_SetConfig+0x20a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80022c0:	2001      	movs	r0, #1
 80022c2:	e070      	b.n	80023a6 <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022c4:	2b30      	cmp	r3, #48	; 0x30
 80022c6:	d1fb      	bne.n	80022c0 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80022cc:	d070      	beq.n	80023b0 <UART_SetConfig+0x198>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80022ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80022d2:	e0b9      	b.n	8002448 <UART_SetConfig+0x230>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80022d4:	4a6b      	ldr	r2, [pc, #428]	; (8002484 <UART_SetConfig+0x26c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d10f      	bne.n	80022fa <UART_SetConfig+0xe2>
 80022da:	4b65      	ldr	r3, [pc, #404]	; (8002470 <UART_SetConfig+0x258>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80022e4:	2b80      	cmp	r3, #128	; 0x80
 80022e6:	f000 8097 	beq.w	8002418 <UART_SetConfig+0x200>
 80022ea:	d804      	bhi.n	80022f6 <UART_SetConfig+0xde>
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 80a4 	beq.w	800243a <UART_SetConfig+0x222>
 80022f2:	2b40      	cmp	r3, #64	; 0x40
 80022f4:	e7e2      	b.n	80022bc <UART_SetConfig+0xa4>
 80022f6:	2bc0      	cmp	r3, #192	; 0xc0
 80022f8:	e7e5      	b.n	80022c6 <UART_SetConfig+0xae>
 80022fa:	4a63      	ldr	r2, [pc, #396]	; (8002488 <UART_SetConfig+0x270>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d112      	bne.n	8002326 <UART_SetConfig+0x10e>
 8002300:	4b5b      	ldr	r3, [pc, #364]	; (8002470 <UART_SetConfig+0x258>)
 8002302:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002306:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800230a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800230e:	f000 8083 	beq.w	8002418 <UART_SetConfig+0x200>
 8002312:	d805      	bhi.n	8002320 <UART_SetConfig+0x108>
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 8090 	beq.w	800243a <UART_SetConfig+0x222>
 800231a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800231e:	e7cd      	b.n	80022bc <UART_SetConfig+0xa4>
 8002320:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002324:	e7cf      	b.n	80022c6 <UART_SetConfig+0xae>
 8002326:	4a59      	ldr	r2, [pc, #356]	; (800248c <UART_SetConfig+0x274>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d110      	bne.n	800234e <UART_SetConfig+0x136>
 800232c:	4b50      	ldr	r3, [pc, #320]	; (8002470 <UART_SetConfig+0x258>)
 800232e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002332:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002336:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800233a:	d06d      	beq.n	8002418 <UART_SetConfig+0x200>
 800233c:	d804      	bhi.n	8002348 <UART_SetConfig+0x130>
 800233e:	2b00      	cmp	r3, #0
 8002340:	d075      	beq.n	800242e <UART_SetConfig+0x216>
 8002342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002346:	e7b9      	b.n	80022bc <UART_SetConfig+0xa4>
 8002348:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800234c:	e7bb      	b.n	80022c6 <UART_SetConfig+0xae>
 800234e:	4a50      	ldr	r2, [pc, #320]	; (8002490 <UART_SetConfig+0x278>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d110      	bne.n	8002376 <UART_SetConfig+0x15e>
 8002354:	4b46      	ldr	r3, [pc, #280]	; (8002470 <UART_SetConfig+0x258>)
 8002356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800235a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800235e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002362:	d059      	beq.n	8002418 <UART_SetConfig+0x200>
 8002364:	d804      	bhi.n	8002370 <UART_SetConfig+0x158>
 8002366:	2b00      	cmp	r3, #0
 8002368:	d067      	beq.n	800243a <UART_SetConfig+0x222>
 800236a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800236e:	e7a5      	b.n	80022bc <UART_SetConfig+0xa4>
 8002370:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002374:	e7a7      	b.n	80022c6 <UART_SetConfig+0xae>
 8002376:	4a47      	ldr	r2, [pc, #284]	; (8002494 <UART_SetConfig+0x27c>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d1a1      	bne.n	80022c0 <UART_SetConfig+0xa8>
 800237c:	4b3c      	ldr	r3, [pc, #240]	; (8002470 <UART_SetConfig+0x258>)
 800237e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002382:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002386:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800238a:	d045      	beq.n	8002418 <UART_SetConfig+0x200>
 800238c:	d804      	bhi.n	8002398 <UART_SetConfig+0x180>
 800238e:	2b00      	cmp	r3, #0
 8002390:	d053      	beq.n	800243a <UART_SetConfig+0x222>
 8002392:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002396:	e791      	b.n	80022bc <UART_SetConfig+0xa4>
 8002398:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800239c:	e793      	b.n	80022c6 <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetPCLK1Freq();
 800239e:	f7ff fc6d 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80023a2:	b928      	cbnz	r0, 80023b0 <UART_SetConfig+0x198>
 80023a4:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80023a6:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80023a8:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68

  return ret;
}
 80023ac:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 80023ae:	483a      	ldr	r0, [pc, #232]	; (8002498 <UART_SetConfig+0x280>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80023b0:	6862      	ldr	r2, [r4, #4]
 80023b2:	0853      	lsrs	r3, r2, #1
 80023b4:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 80023b8:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80023bc:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80023c0:	f1a3 0110 	sub.w	r1, r3, #16
 80023c4:	4291      	cmp	r1, r2
 80023c6:	f63f af7b 	bhi.w	80022c0 <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023ca:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80023ce:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80023d2:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80023d4:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60cb      	str	r3, [r1, #12]
 80023da:	e7e3      	b.n	80023a4 <UART_SetConfig+0x18c>
    switch (clocksource)
 80023dc:	2b08      	cmp	r3, #8
 80023de:	f63f af6f 	bhi.w	80022c0 <UART_SetConfig+0xa8>
 80023e2:	a201      	add	r2, pc, #4	; (adr r2, 80023e8 <UART_SetConfig+0x1d0>)
 80023e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023e8:	08002441 	.word	0x08002441
 80023ec:	0800240d 	.word	0x0800240d
 80023f0:	0800241f 	.word	0x0800241f
 80023f4:	080022c1 	.word	0x080022c1
 80023f8:	08002413 	.word	0x08002413
 80023fc:	080022c1 	.word	0x080022c1
 8002400:	080022c1 	.word	0x080022c1
 8002404:	080022c1 	.word	0x080022c1
 8002408:	080022cf 	.word	0x080022cf
        pclk = HAL_RCC_GetPCLK2Freq();
 800240c:	f7ff fc46 	bl	8001c9c <HAL_RCC_GetPCLK2Freq>
        break;
 8002410:	e018      	b.n	8002444 <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetSysClockFreq();
 8002412:	f7ff fb61 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
        break;
 8002416:	e015      	b.n	8002444 <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002418:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800241c:	d0c7      	beq.n	80023ae <UART_SetConfig+0x196>
        pclk = (uint32_t) HSI_VALUE;
 800241e:	481e      	ldr	r0, [pc, #120]	; (8002498 <UART_SetConfig+0x280>)
 8002420:	e012      	b.n	8002448 <UART_SetConfig+0x230>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002422:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002426:	d1f4      	bne.n	8002412 <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 8002428:	f7ff fb56 	bl	8001ad8 <HAL_RCC_GetSysClockFreq>
        break;
 800242c:	e7b9      	b.n	80023a2 <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800242e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002432:	d1eb      	bne.n	800240c <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 8002434:	f7ff fc32 	bl	8001c9c <HAL_RCC_GetPCLK2Freq>
        break;
 8002438:	e7b3      	b.n	80023a2 <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800243a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800243e:	d0ae      	beq.n	800239e <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002440:	f7ff fc1c 	bl	8001c7c <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8002444:	2800      	cmp	r0, #0
 8002446:	d0ad      	beq.n	80023a4 <UART_SetConfig+0x18c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002448:	6862      	ldr	r2, [r4, #4]
 800244a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800244e:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002452:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002456:	f1a3 0110 	sub.w	r1, r3, #16
 800245a:	4291      	cmp	r1, r2
 800245c:	f63f af30 	bhi.w	80022c0 <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002460:	6822      	ldr	r2, [r4, #0]
 8002462:	60d3      	str	r3, [r2, #12]
 8002464:	e79e      	b.n	80023a4 <UART_SetConfig+0x18c>
 8002466:	bf00      	nop
 8002468:	efff69f3 	.word	0xefff69f3
 800246c:	40011000 	.word	0x40011000
 8002470:	40023800 	.word	0x40023800
 8002474:	0800bed4 	.word	0x0800bed4
 8002478:	40004400 	.word	0x40004400
 800247c:	0800bed7 	.word	0x0800bed7
 8002480:	40004800 	.word	0x40004800
 8002484:	40004c00 	.word	0x40004c00
 8002488:	40005000 	.word	0x40005000
 800248c:	40011400 	.word	0x40011400
 8002490:	40007800 	.word	0x40007800
 8002494:	40007c00 	.word	0x40007c00
 8002498:	00f42400 	.word	0x00f42400

0800249c <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800249c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800249e:	07da      	lsls	r2, r3, #31
{
 80024a0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80024a2:	d506      	bpl.n	80024b2 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80024a4:	6801      	ldr	r1, [r0, #0]
 80024a6:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80024a8:	684a      	ldr	r2, [r1, #4]
 80024aa:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80024ae:	4322      	orrs	r2, r4
 80024b0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80024b2:	079c      	lsls	r4, r3, #30
 80024b4:	d506      	bpl.n	80024c4 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80024b6:	6801      	ldr	r1, [r0, #0]
 80024b8:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80024ba:	684a      	ldr	r2, [r1, #4]
 80024bc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80024c0:	4322      	orrs	r2, r4
 80024c2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80024c4:	0759      	lsls	r1, r3, #29
 80024c6:	d506      	bpl.n	80024d6 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80024c8:	6801      	ldr	r1, [r0, #0]
 80024ca:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80024cc:	684a      	ldr	r2, [r1, #4]
 80024ce:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80024d2:	4322      	orrs	r2, r4
 80024d4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80024d6:	071a      	lsls	r2, r3, #28
 80024d8:	d506      	bpl.n	80024e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80024da:	6801      	ldr	r1, [r0, #0]
 80024dc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80024de:	684a      	ldr	r2, [r1, #4]
 80024e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024e4:	4322      	orrs	r2, r4
 80024e6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80024e8:	06dc      	lsls	r4, r3, #27
 80024ea:	d506      	bpl.n	80024fa <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80024ec:	6801      	ldr	r1, [r0, #0]
 80024ee:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80024f0:	688a      	ldr	r2, [r1, #8]
 80024f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80024f6:	4322      	orrs	r2, r4
 80024f8:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80024fa:	0699      	lsls	r1, r3, #26
 80024fc:	d506      	bpl.n	800250c <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80024fe:	6801      	ldr	r1, [r0, #0]
 8002500:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8002502:	688a      	ldr	r2, [r1, #8]
 8002504:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002508:	4322      	orrs	r2, r4
 800250a:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800250c:	065a      	lsls	r2, r3, #25
 800250e:	d510      	bpl.n	8002532 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002510:	6801      	ldr	r1, [r0, #0]
 8002512:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002514:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002516:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800251a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800251e:	ea42 0204 	orr.w	r2, r2, r4
 8002522:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002524:	d105      	bne.n	8002532 <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002526:	684a      	ldr	r2, [r1, #4]
 8002528:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800252a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 800252e:	4322      	orrs	r2, r4
 8002530:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002532:	061b      	lsls	r3, r3, #24
 8002534:	d506      	bpl.n	8002544 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002536:	6802      	ldr	r2, [r0, #0]
 8002538:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800253a:	6853      	ldr	r3, [r2, #4]
 800253c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8002540:	430b      	orrs	r3, r1
 8002542:	6053      	str	r3, [r2, #4]
  }
}
 8002544:	bd10      	pop	{r4, pc}

08002546 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800254a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800254e:	4604      	mov	r4, r0
 8002550:	460e      	mov	r6, r1
 8002552:	4615      	mov	r5, r2
 8002554:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002556:	6822      	ldr	r2, [r4, #0]
 8002558:	69d3      	ldr	r3, [r2, #28]
 800255a:	ea36 0303 	bics.w	r3, r6, r3
 800255e:	bf0c      	ite	eq
 8002560:	2301      	moveq	r3, #1
 8002562:	2300      	movne	r3, #0
 8002564:	42ab      	cmp	r3, r5
 8002566:	d001      	beq.n	800256c <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002568:	2000      	movs	r0, #0
 800256a:	e026      	b.n	80025ba <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 800256c:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002570:	d0f2      	beq.n	8002558 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002572:	f7fe feef 	bl	8001354 <HAL_GetTick>
 8002576:	1bc0      	subs	r0, r0, r7
 8002578:	4540      	cmp	r0, r8
 800257a:	6820      	ldr	r0, [r4, #0]
 800257c:	d802      	bhi.n	8002584 <UART_WaitOnFlagUntilTimeout+0x3e>
 800257e:	f1b8 0f00 	cmp.w	r8, #0
 8002582:	d11c      	bne.n	80025be <UART_WaitOnFlagUntilTimeout+0x78>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002584:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002588:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800258c:	e840 3200 	strex	r2, r3, [r0]
 8002590:	2a00      	cmp	r2, #0
 8002592:	d1f7      	bne.n	8002584 <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002594:	f100 0308 	add.w	r3, r0, #8
 8002598:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800259c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025a0:	f100 0108 	add.w	r1, r0, #8
 80025a4:	e841 3200 	strex	r2, r3, [r1]
 80025a8:	2a00      	cmp	r2, #0
 80025aa:	d1f3      	bne.n	8002594 <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 80025ac:	2320      	movs	r3, #32
 80025ae:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80025b0:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 80025b4:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 80025b6:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
}
 80025ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80025be:	6803      	ldr	r3, [r0, #0]
 80025c0:	075a      	lsls	r2, r3, #29
 80025c2:	d5c8      	bpl.n	8002556 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80025c4:	69c3      	ldr	r3, [r0, #28]
 80025c6:	051b      	lsls	r3, r3, #20
 80025c8:	d5c5      	bpl.n	8002556 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80025ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025ce:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025d0:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80025d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d8:	e840 3200 	strex	r2, r3, [r0]
 80025dc:	2a00      	cmp	r2, #0
 80025de:	d1f7      	bne.n	80025d0 <UART_WaitOnFlagUntilTimeout+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025e0:	f100 0308 	add.w	r3, r0, #8
 80025e4:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ec:	f100 0108 	add.w	r1, r0, #8
 80025f0:	e841 3200 	strex	r2, r3, [r1]
 80025f4:	2a00      	cmp	r2, #0
 80025f6:	d1f3      	bne.n	80025e0 <UART_WaitOnFlagUntilTimeout+0x9a>
          huart->gState = HAL_UART_STATE_READY;
 80025f8:	2320      	movs	r3, #32
 80025fa:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80025fc:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002600:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 8002604:	e7d6      	b.n	80025b4 <UART_WaitOnFlagUntilTimeout+0x6e>

08002606 <HAL_UART_Transmit>:
{
 8002606:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800260a:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800260c:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 800260e:	4604      	mov	r4, r0
 8002610:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8002612:	2b20      	cmp	r3, #32
{
 8002614:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8002616:	d142      	bne.n	800269e <HAL_UART_Transmit+0x98>
    if ((pData == NULL) || (Size == 0U))
 8002618:	2900      	cmp	r1, #0
 800261a:	d042      	beq.n	80026a2 <HAL_UART_Transmit+0x9c>
 800261c:	2a00      	cmp	r2, #0
 800261e:	d040      	beq.n	80026a2 <HAL_UART_Transmit+0x9c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002620:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002622:	2500      	movs	r5, #0
 8002624:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002628:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 800262a:	f7fe fe93 	bl	8001354 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800262e:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8002630:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 8002632:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002636:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 800263a:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800263e:	d103      	bne.n	8002648 <HAL_UART_Transmit+0x42>
 8002640:	6922      	ldr	r2, [r4, #16]
 8002642:	b90a      	cbnz	r2, 8002648 <HAL_UART_Transmit+0x42>
 8002644:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8002646:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 8002648:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800264c:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 8002650:	b292      	uxth	r2, r2
 8002652:	b93a      	cbnz	r2, 8002664 <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002654:	2140      	movs	r1, #64	; 0x40
 8002656:	4620      	mov	r0, r4
 8002658:	f7ff ff75 	bl	8002546 <UART_WaitOnFlagUntilTimeout>
 800265c:	b950      	cbnz	r0, 8002674 <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 800265e:	2320      	movs	r3, #32
 8002660:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 8002662:	e008      	b.n	8002676 <HAL_UART_Transmit+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002664:	2200      	movs	r2, #0
 8002666:	2180      	movs	r1, #128	; 0x80
 8002668:	4620      	mov	r0, r4
 800266a:	9303      	str	r3, [sp, #12]
 800266c:	f7ff ff6b 	bl	8002546 <UART_WaitOnFlagUntilTimeout>
 8002670:	9b03      	ldr	r3, [sp, #12]
 8002672:	b118      	cbz	r0, 800267c <HAL_UART_Transmit+0x76>
        return HAL_TIMEOUT;
 8002674:	2003      	movs	r0, #3
}
 8002676:	b004      	add	sp, #16
 8002678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800267c:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 800267e:	b95e      	cbnz	r6, 8002698 <HAL_UART_Transmit+0x92>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002680:	f835 2b02 	ldrh.w	r2, [r5], #2
 8002684:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002688:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 800268a:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 800268e:	3a01      	subs	r2, #1
 8002690:	b292      	uxth	r2, r2
 8002692:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 8002696:	e7d7      	b.n	8002648 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002698:	f816 2b01 	ldrb.w	r2, [r6], #1
 800269c:	e7f4      	b.n	8002688 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800269e:	2002      	movs	r0, #2
 80026a0:	e7e9      	b.n	8002676 <HAL_UART_Transmit+0x70>
      return  HAL_ERROR;
 80026a2:	2001      	movs	r0, #1
 80026a4:	e7e7      	b.n	8002676 <HAL_UART_Transmit+0x70>

080026a6 <HAL_UART_Receive>:
{
 80026a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80026aa:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 80026ac:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 80026b0:	4604      	mov	r4, r0
 80026b2:	460e      	mov	r6, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 80026b4:	2b20      	cmp	r3, #32
{
 80026b6:	4617      	mov	r7, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 80026b8:	d159      	bne.n	800276e <HAL_UART_Receive+0xc8>
    if ((pData == NULL) || (Size == 0U))
 80026ba:	2900      	cmp	r1, #0
 80026bc:	d059      	beq.n	8002772 <HAL_UART_Receive+0xcc>
 80026be:	2a00      	cmp	r2, #0
 80026c0:	d057      	beq.n	8002772 <HAL_UART_Receive+0xcc>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026c2:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026c4:	2500      	movs	r5, #0
 80026c6:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80026ca:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026ce:	6605      	str	r5, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 80026d0:	f7fe fe40 	bl	8001354 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 80026d4:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 80026d6:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 80026d8:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 80026dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 80026e0:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 80026e4:	d118      	bne.n	8002718 <HAL_UART_Receive+0x72>
 80026e6:	6922      	ldr	r2, [r4, #16]
 80026e8:	42aa      	cmp	r2, r5
 80026ea:	f240 15ff 	movw	r5, #511	; 0x1ff
 80026ee:	bf18      	it	ne
 80026f0:	25ff      	movne	r5, #255	; 0xff
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    UART_MASK_COMPUTATION(huart);
 80026f6:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026fa:	d11d      	bne.n	8002738 <HAL_UART_Receive+0x92>
 80026fc:	6923      	ldr	r3, [r4, #16]
 80026fe:	b9db      	cbnz	r3, 8002738 <HAL_UART_Receive+0x92>
 8002700:	4637      	mov	r7, r6
      pdata8bits  = NULL;
 8002702:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 8002704:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8002708:	b290      	uxth	r0, r2
 800270a:	b9b8      	cbnz	r0, 800273c <HAL_UART_Receive+0x96>
    huart->RxState = HAL_UART_STATE_READY;
 800270c:	2320      	movs	r3, #32
 800270e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 8002712:	b003      	add	sp, #12
 8002714:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 8002718:	b92b      	cbnz	r3, 8002726 <HAL_UART_Receive+0x80>
 800271a:	6922      	ldr	r2, [r4, #16]
 800271c:	2a00      	cmp	r2, #0
 800271e:	bf14      	ite	ne
 8002720:	257f      	movne	r5, #127	; 0x7f
 8002722:	25ff      	moveq	r5, #255	; 0xff
 8002724:	e7e5      	b.n	80026f2 <HAL_UART_Receive+0x4c>
 8002726:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800272a:	d1e2      	bne.n	80026f2 <HAL_UART_Receive+0x4c>
 800272c:	6922      	ldr	r2, [r4, #16]
 800272e:	2a00      	cmp	r2, #0
 8002730:	bf0c      	ite	eq
 8002732:	257f      	moveq	r5, #127	; 0x7f
 8002734:	253f      	movne	r5, #63	; 0x3f
 8002736:	e7dc      	b.n	80026f2 <HAL_UART_Receive+0x4c>
      pdata16bits = NULL;
 8002738:	2700      	movs	r7, #0
 800273a:	e7e3      	b.n	8002704 <HAL_UART_Receive+0x5e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800273c:	464b      	mov	r3, r9
 800273e:	2200      	movs	r2, #0
 8002740:	2120      	movs	r1, #32
 8002742:	4620      	mov	r0, r4
 8002744:	f8cd 8000 	str.w	r8, [sp]
 8002748:	f7ff fefd 	bl	8002546 <UART_WaitOnFlagUntilTimeout>
 800274c:	b998      	cbnz	r0, 8002776 <HAL_UART_Receive+0xd0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800274e:	6823      	ldr	r3, [r4, #0]
 8002750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002752:	402b      	ands	r3, r5
      if (pdata8bits == NULL)
 8002754:	b946      	cbnz	r6, 8002768 <HAL_UART_Receive+0xc2>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002756:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 800275a:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 800275e:	3a01      	subs	r2, #1
 8002760:	b292      	uxth	r2, r2
 8002762:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 8002766:	e7cd      	b.n	8002704 <HAL_UART_Receive+0x5e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002768:	f806 3b01 	strb.w	r3, [r6], #1
        pdata8bits++;
 800276c:	e7f5      	b.n	800275a <HAL_UART_Receive+0xb4>
    return HAL_BUSY;
 800276e:	2002      	movs	r0, #2
 8002770:	e7cf      	b.n	8002712 <HAL_UART_Receive+0x6c>
      return  HAL_ERROR;
 8002772:	2001      	movs	r0, #1
 8002774:	e7cd      	b.n	8002712 <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 8002776:	2003      	movs	r0, #3
 8002778:	e7cb      	b.n	8002712 <HAL_UART_Receive+0x6c>

0800277a <UART_CheckIdleState>:
{
 800277a:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800277c:	2500      	movs	r5, #0
{
 800277e:	4604      	mov	r4, r0
 8002780:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002782:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8002786:	f7fe fde5 	bl	8001354 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800278a:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 800278c:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800278e:	6812      	ldr	r2, [r2, #0]
 8002790:	0711      	lsls	r1, r2, #28
 8002792:	d417      	bmi.n	80027c4 <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002794:	6822      	ldr	r2, [r4, #0]
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	0752      	lsls	r2, r2, #29
 800279a:	d509      	bpl.n	80027b0 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800279c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80027a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80027a4:	4620      	mov	r0, r4
 80027a6:	9200      	str	r2, [sp, #0]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f7ff fecc 	bl	8002546 <UART_WaitOnFlagUntilTimeout>
 80027ae:	b9b0      	cbnz	r0, 80027de <UART_CheckIdleState+0x64>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027b0:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80027b2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80027b4:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 80027b8:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80027ba:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027be:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027c0:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 80027c2:	e00d      	b.n	80027e0 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80027c4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80027c8:	9003      	str	r0, [sp, #12]
 80027ca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80027ce:	4620      	mov	r0, r4
 80027d0:	9200      	str	r2, [sp, #0]
 80027d2:	462a      	mov	r2, r5
 80027d4:	f7ff feb7 	bl	8002546 <UART_WaitOnFlagUntilTimeout>
 80027d8:	9b03      	ldr	r3, [sp, #12]
 80027da:	2800      	cmp	r0, #0
 80027dc:	d0da      	beq.n	8002794 <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 80027de:	2003      	movs	r0, #3
}
 80027e0:	b005      	add	sp, #20
 80027e2:	bd30      	pop	{r4, r5, pc}

080027e4 <HAL_UART_Init>:
{
 80027e4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80027e6:	4604      	mov	r4, r0
 80027e8:	b340      	cbz	r0, 800283c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80027ea:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 80027ec:	b91b      	cbnz	r3, 80027f6 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 80027ee:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 80027f2:	f7fe fcd1 	bl	8001198 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80027f6:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80027f8:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027fa:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80027fc:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80027fe:	6813      	ldr	r3, [r2, #0]
 8002800:	f023 0301 	bic.w	r3, r3, #1
 8002804:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002806:	f7ff fd07 	bl	8002218 <UART_SetConfig>
 800280a:	2801      	cmp	r0, #1
 800280c:	d016      	beq.n	800283c <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800280e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002810:	b113      	cbz	r3, 8002818 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8002812:	4620      	mov	r0, r4
 8002814:	f7ff fe42 	bl	800249c <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002818:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800281a:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002822:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800282a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	f042 0201 	orr.w	r2, r2, #1
}
 8002832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 8002836:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 8002838:	f7ff bf9f 	b.w	800277a <UART_CheckIdleState>
}
 800283c:	2001      	movs	r0, #1
 800283e:	bd10      	pop	{r4, pc}

08002840 <_mon_alloc_reset>:

#include <stdlib.h>

#pragma GCC push_options
#pragma GCC optimize ("O0")
static inline void _mon_alloc_reset(void) {
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
    memset((void *)&io_malloc, 0, sizeof(struct io_malloc));
 8002844:	221c      	movs	r2, #28
 8002846:	2100      	movs	r1, #0
 8002848:	4805      	ldr	r0, [pc, #20]	; (8002860 <_mon_alloc_reset+0x20>)
 800284a:	f006 feb4 	bl	80095b6 <memset>
    /* force a call of wrap functions */\
    free(malloc(10));
 800284e:	200a      	movs	r0, #10
 8002850:	f000 fff2 	bl	8003838 <__wrap_malloc>
 8002854:	4603      	mov	r3, r0
 8002856:	4618      	mov	r0, r3
 8002858:	f001 f816 	bl	8003888 <__wrap_free>
}
 800285c:	bf00      	nop
 800285e:	bd80      	pop	{r7, pc}
 8002860:	200008dc 	.word	0x200008dc

08002864 <cyclesCounterEnd>:
#endif
#endif
}

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 8002864:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(port_dwt_get_cycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 8002866:	4b10      	ldr	r3, [pc, #64]	; (80028a8 <cyclesCounterEnd+0x44>)
 8002868:	4d10      	ldr	r5, [pc, #64]	; (80028ac <cyclesCounterEnd+0x48>)
 800286a:	685c      	ldr	r4, [r3, #4]
 800286c:	686b      	ldr	r3, [r5, #4]
 800286e:	1ae4      	subs	r4, r4, r3
 8002870:	2300      	movs	r3, #0
 8002872:	9301      	str	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8002874:	f7fe fd6e 	bl	8001354 <HAL_GetTick>
 8002878:	68aa      	ldr	r2, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 800287a:	9b01      	ldr	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 800287c:	1a80      	subs	r0, r0, r2
  if (tick_e > cyclesCount.dwt_max) {
 800287e:	682a      	ldr	r2, [r5, #0]
 8002880:	4290      	cmp	r0, r2
 8002882:	d90c      	bls.n	800289e <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8002884:	4619      	mov	r1, r3
 8002886:	f7fd feef 	bl	8000668 <__aeabi_uldivmod>
 800288a:	f04f 33ff 	mov.w	r3, #4294967295
 800288e:	fba0 0303 	umull	r0, r3, r0, r3
 8002892:	1900      	adds	r0, r0, r4
 8002894:	eba3 0301 	sub.w	r3, r3, r1
 8002898:	4604      	mov	r4, r0
 800289a:	f143 0300 	adc.w	r3, r3, #0
  }
  return dwt_e;
#endif
#endif
}
 800289e:	4620      	mov	r0, r4
 80028a0:	4619      	mov	r1, r3
 80028a2:	b003      	add	sp, #12
 80028a4:	bd30      	pop	{r4, r5, pc}
 80028a6:	bf00      	nop
 80028a8:	e0001000 	.word	0xe0001000
 80028ac:	200008d0 	.word	0x200008d0

080028b0 <user_observer_cb>:
static struct u_observer_ctx u_observer_ctx;

/* User callback */
static ai_u32 user_observer_cb(const ai_handle cookie,
    const ai_u32 flags,
    const ai_observer_node *node) {
 80028b0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 80028b4:	4604      	mov	r4, r0
 80028b6:	460e      	mov	r6, r1
 80028b8:	4615      	mov	r5, r2

  struct u_observer_ctx *u_obs;

  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 80028ba:	f7ff ffd3 	bl	8002864 <cyclesCounterEnd>

  u_obs = (struct u_observer_ctx *)cookie;
  u_obs->n_cb += 1;
 80028be:	e9d4 3200 	ldrd	r3, r2, [r4]
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp entry */
 80028c2:	e9cd 0100 	strd	r0, r1, [sp]
  u_obs->n_cb += 1;
 80028c6:	3301      	adds	r3, #1
 80028c8:	f142 0200 	adc.w	r2, r2, #0
 80028cc:	e9c4 3200 	strd	r3, r2, [r4]

  if (flags & AI_OBSERVER_POST_EVT) {
 80028d0:	0773      	lsls	r3, r6, #29
 80028d2:	d51f      	bpl.n	8002914 <user_observer_cb+0x64>
    const uint64_t end_t = ts - u_obs->start_t;
    u_obs->k_dur_t += end_t;
    u_obs->nodes[node->c_idx].dur += end_t;
 80028d4:	6a26      	ldr	r6, [r4, #32]
    const uint64_t end_t = ts - u_obs->start_t;
 80028d6:	e9d4 1002 	ldrd	r1, r0, [r4, #8]
 80028da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80028de:	1a51      	subs	r1, r2, r1
 80028e0:	eb63 0000 	sbc.w	r0, r3, r0
    u_obs->k_dur_t += end_t;
 80028e4:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 80028e8:	185b      	adds	r3, r3, r1
 80028ea:	eb40 0202 	adc.w	r2, r0, r2
 80028ee:	e9c4 3206 	strd	r3, r2, [r4, #24]
    u_obs->nodes[node->c_idx].dur += end_t;
 80028f2:	882b      	ldrh	r3, [r5, #0]
 80028f4:	ea4f 1c03 	mov.w	ip, r3, lsl #4
 80028f8:	eb06 1303 	add.w	r3, r6, r3, lsl #4
 80028fc:	f856 200c 	ldr.w	r2, [r6, ip]
 8002900:	685d      	ldr	r5, [r3, #4]
 8002902:	1852      	adds	r2, r2, r1
 8002904:	f846 200c 	str.w	r2, [r6, ip]
 8002908:	eb40 0005 	adc.w	r0, r0, r5
    u_obs->nodes[node->c_idx].n_runs += 1;
 800290c:	689a      	ldr	r2, [r3, #8]
    u_obs->nodes[node->c_idx].dur += end_t;
 800290e:	6058      	str	r0, [r3, #4]
    u_obs->nodes[node->c_idx].n_runs += 1;
 8002910:	3201      	adds	r2, #1
 8002912:	609a      	str	r2, [r3, #8]
  }

  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 8002914:	f7ff ffa6 	bl	8002864 <cyclesCounterEnd>
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 8002918:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800291c:	e9dd 8900 	ldrd	r8, r9, [sp]
  u_obs->start_t = cyclesCounterEnd();    /* time stamp exit */
 8002920:	e9c4 0102 	strd	r0, r1, [r4, #8]
  u_obs->u_dur_t += u_obs->start_t  - ts; /* accumulate cycles used by the CB */
 8002924:	ebb3 0308 	subs.w	r3, r3, r8
 8002928:	eb62 0209 	sbc.w	r2, r2, r9
 800292c:	1818      	adds	r0, r3, r0
 800292e:	eb41 0102 	adc.w	r1, r1, r2
 8002932:	e9c4 0104 	strd	r0, r1, [r4, #16]
  return 0;
}
 8002936:	2000      	movs	r0, #0
 8002938:	b002      	add	sp, #8
 800293a:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
	...

08002940 <aiDeInit>:
{
 8002940:	b510      	push	{r4, lr}
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 8002942:	4c09      	ldr	r4, [pc, #36]	; (8002968 <aiDeInit+0x28>)
  LC_PRINT("Releasing the instance(s)...\r\n");
 8002944:	4809      	ldr	r0, [pc, #36]	; (800296c <aiDeInit+0x2c>)
 8002946:	f000 ff65 	bl	8003814 <lc_print>
    if (net_exec_ctx[idx].handle != AI_HANDLE_NULL) {
 800294a:	6820      	ldr	r0, [r4, #0]
 800294c:	b150      	cbz	r0, 8002964 <aiDeInit+0x24>
      if (ai_mnetwork_destroy(net_exec_ctx[idx].handle)
 800294e:	f001 f96b 	bl	8003c28 <ai_mnetwork_destroy>
 8002952:	b128      	cbz	r0, 8002960 <aiDeInit+0x20>
        err = ai_mnetwork_get_error(net_exec_ctx[idx].handle);
 8002954:	6820      	ldr	r0, [r4, #0]
 8002956:	f001 f988 	bl	8003c6a <ai_mnetwork_get_error>
        aiLogErr(err, "ai_mnetwork_destroy");
 800295a:	4905      	ldr	r1, [pc, #20]	; (8002970 <aiDeInit+0x30>)
 800295c:	f000 fd44 	bl	80033e8 <aiLogErr>
      net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8002960:	2300      	movs	r3, #0
 8002962:	6023      	str	r3, [r4, #0]
}
 8002964:	bd10      	pop	{r4, pc}
 8002966:	bf00      	nop
 8002968:	20000810 	.word	0x20000810
 800296c:	0800b280 	.word	0x0800b280
 8002970:	0800b29f 	.word	0x0800b29f

08002974 <aiTestConsole>:
#define CONS_EVT_HIDE       (6)

#define CONS_EVT_UNDEFINED  (100)

static int aiTestConsole(void)
{
 8002974:	b513      	push	{r0, r1, r4, lr}
  uint8_t c = 0;
 8002976:	2400      	movs	r4, #0

  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 8002978:	f241 3188 	movw	r1, #5000	; 0x1388
 800297c:	f10d 0007 	add.w	r0, sp, #7
  uint8_t c = 0;
 8002980:	f88d 4007 	strb.w	r4, [sp, #7]
  if (ioRawGetUint8(&c, 5000) == -1) /* Timeout */
 8002984:	f000 ff16 	bl	80037b4 <ioRawGetUint8>
 8002988:	1c43      	adds	r3, r0, #1
 800298a:	d02c      	beq.n	80029e6 <aiTestConsole+0x72>
    return CONS_EVT_TIMEOUT;

  if ((c == 'q') || (c == 'Q'))
 800298c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002990:	2b71      	cmp	r3, #113	; 0x71
 8002992:	d02a      	beq.n	80029ea <aiTestConsole+0x76>
 8002994:	2b52      	cmp	r3, #82	; 0x52
 8002996:	d816      	bhi.n	80029c6 <aiTestConsole+0x52>
 8002998:	2b43      	cmp	r3, #67	; 0x43
 800299a:	d805      	bhi.n	80029a8 <aiTestConsole+0x34>
 800299c:	2b3f      	cmp	r3, #63	; 0x3f
 800299e:	bf0c      	ite	eq
 80029a0:	2003      	moveq	r0, #3
 80029a2:	2064      	movne	r0, #100	; 0x64

  if ((c == 'x') || (c == 'X'))
    return CONS_EVT_PROF;

  return CONS_EVT_UNDEFINED;
}
 80029a4:	b002      	add	sp, #8
 80029a6:	bd10      	pop	{r4, pc}
 80029a8:	3b44      	subs	r3, #68	; 0x44
 80029aa:	2b0e      	cmp	r3, #14
 80029ac:	d809      	bhi.n	80029c2 <aiTestConsole+0x4e>
 80029ae:	e8df f003 	tbb	[pc, r3]
 80029b2:	0820      	.short	0x0820
 80029b4:	08220808 	.word	0x08220808
 80029b8:	08080808 	.word	0x08080808
 80029bc:	1c1e0808 	.word	0x1c1e0808
 80029c0:	24          	.byte	0x24
 80029c1:	00          	.byte	0x00
  if ((c == 'q') || (c == 'Q'))
 80029c2:	2064      	movs	r0, #100	; 0x64
 80029c4:	e7ee      	b.n	80029a4 <aiTestConsole+0x30>
 80029c6:	2b70      	cmp	r3, #112	; 0x70
 80029c8:	d011      	beq.n	80029ee <aiTestConsole+0x7a>
 80029ca:	d808      	bhi.n	80029de <aiTestConsole+0x6a>
 80029cc:	2b64      	cmp	r3, #100	; 0x64
 80029ce:	d010      	beq.n	80029f2 <aiTestConsole+0x7e>
 80029d0:	2b68      	cmp	r3, #104	; 0x68
 80029d2:	d010      	beq.n	80029f6 <aiTestConsole+0x82>
    return CONS_EVT_PROF;
 80029d4:	2b58      	cmp	r3, #88	; 0x58
 80029d6:	bf14      	ite	ne
 80029d8:	2064      	movne	r0, #100	; 0x64
 80029da:	2005      	moveq	r0, #5
 80029dc:	e7e2      	b.n	80029a4 <aiTestConsole+0x30>
 80029de:	2b72      	cmp	r3, #114	; 0x72
 80029e0:	d00b      	beq.n	80029fa <aiTestConsole+0x86>
 80029e2:	2b78      	cmp	r3, #120	; 0x78
 80029e4:	e7f7      	b.n	80029d6 <aiTestConsole+0x62>
    return CONS_EVT_TIMEOUT;
 80029e6:	4620      	mov	r0, r4
 80029e8:	e7dc      	b.n	80029a4 <aiTestConsole+0x30>
    return CONS_EVT_QUIT;
 80029ea:	2001      	movs	r0, #1
 80029ec:	e7da      	b.n	80029a4 <aiTestConsole+0x30>
    return CONS_EVT_PAUSE;
 80029ee:	2004      	movs	r0, #4
 80029f0:	e7d8      	b.n	80029a4 <aiTestConsole+0x30>
  if ((c == 'q') || (c == 'Q'))
 80029f2:	2006      	movs	r0, #6
 80029f4:	e7d6      	b.n	80029a4 <aiTestConsole+0x30>
    return CONS_EVT_HELP;
 80029f6:	2003      	movs	r0, #3
 80029f8:	e7d4      	b.n	80029a4 <aiTestConsole+0x30>
    return CONS_EVT_RESTART;
 80029fa:	2002      	movs	r0, #2
 80029fc:	e7d2      	b.n	80029a4 <aiTestConsole+0x30>
	...

08002a00 <aiObserverInit>:
{
 8002a00:	b530      	push	{r4, r5, lr}
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 8002a02:	4604      	mov	r4, r0
{
 8002a04:	b093      	sub	sp, #76	; 0x4c
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) || !net_ctx->report.n_nodes)
 8002a06:	b1e0      	cbz	r0, 8002a42 <aiObserverInit+0x42>
 8002a08:	6800      	ldr	r0, [r0, #0]
 8002a0a:	b1d0      	cbz	r0, 8002a42 <aiObserverInit+0x42>
 8002a0c:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 8002a10:	b1bb      	cbz	r3, 8002a42 <aiObserverInit+0x42>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002a12:	4d17      	ldr	r5, [pc, #92]	; (8002a70 <aiObserverInit+0x70>)
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 8002a14:	aa04      	add	r2, sp, #16
 8002a16:	a903      	add	r1, sp, #12
 8002a18:	f001 f964 	bl	8003ce4 <ai_mnetwork_get_private_handle>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002a1c:	2228      	movs	r2, #40	; 0x28
 8002a1e:	2100      	movs	r1, #0
 8002a20:	4628      	mov	r0, r5
 8002a22:	f006 fdc8 	bl	80095b6 <memset>
  sz = net_ctx->report.n_nodes * sizeof(struct u_node_stat);
 8002a26:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8002a2a:	0112      	lsls	r2, r2, #4
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 8002a2c:	4610      	mov	r0, r2
 8002a2e:	9201      	str	r2, [sp, #4]
 8002a30:	f000 ff02 	bl	8003838 <__wrap_malloc>
  if (!u_observer_ctx.nodes) {
 8002a34:	9a01      	ldr	r2, [sp, #4]
  u_observer_ctx.nodes = (struct u_node_stat*)malloc(sz);
 8002a36:	6228      	str	r0, [r5, #32]
  if (!u_observer_ctx.nodes) {
 8002a38:	b928      	cbnz	r0, 8002a46 <aiObserverInit+0x46>
    LC_PRINT("W: enable to allocate the u_node_stats (sz=%d) ..\r\n", sz);
 8002a3a:	4611      	mov	r1, r2
 8002a3c:	480d      	ldr	r0, [pc, #52]	; (8002a74 <aiObserverInit+0x74>)
 8002a3e:	f000 fee9 	bl	8003814 <lc_print>
}
 8002a42:	b013      	add	sp, #76	; 0x4c
 8002a44:	bd30      	pop	{r4, r5, pc}
  memset(u_observer_ctx.nodes, 0, sz);
 8002a46:	2100      	movs	r1, #0
 8002a48:	f006 fdb5 	bl	80095b6 <memset>
  res = ai_platform_observer_register(net_hdl, user_observer_cb,
 8002a4c:	2306      	movs	r3, #6
 8002a4e:	462a      	mov	r2, r5
 8002a50:	4909      	ldr	r1, [pc, #36]	; (8002a78 <aiObserverInit+0x78>)
 8002a52:	9803      	ldr	r0, [sp, #12]
 8002a54:	f004 f8a4 	bl	8006ba0 <ai_platform_observer_register>
  if (!res) {
 8002a58:	4604      	mov	r4, r0
 8002a5a:	2800      	cmp	r0, #0
 8002a5c:	d1f1      	bne.n	8002a42 <aiObserverInit+0x42>
    LC_PRINT("W: unable to register the user CB\r\n");
 8002a5e:	4807      	ldr	r0, [pc, #28]	; (8002a7c <aiObserverInit+0x7c>)
 8002a60:	f000 fed8 	bl	8003814 <lc_print>
    free(u_observer_ctx.nodes);
 8002a64:	6a28      	ldr	r0, [r5, #32]
 8002a66:	f000 ff0f 	bl	8003888 <__wrap_free>
    u_observer_ctx.nodes = NULL;
 8002a6a:	622c      	str	r4, [r5, #32]
    return;
 8002a6c:	e7e9      	b.n	8002a42 <aiObserverInit+0x42>
 8002a6e:	bf00      	nop
 8002a70:	200008a8 	.word	0x200008a8
 8002a74:	0800b2b3 	.word	0x0800b2b3
 8002a78:	080028b1 	.word	0x080028b1
 8002a7c:	0800b2e7 	.word	0x0800b2e7

08002a80 <aiObserverDone>:
{
 8002a80:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8002a84:	ed2d 8b04 	vpush	{d8-d9}
 8002a88:	b0a0      	sub	sp, #128	; 0x80
  if (!net_ctx || (net_ctx->handle == AI_HANDLE_NULL) ||
 8002a8a:	2800      	cmp	r0, #0
 8002a8c:	f000 80d8 	beq.w	8002c40 <aiObserverDone+0x1c0>
 8002a90:	6803      	ldr	r3, [r0, #0]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 80d4 	beq.w	8002c40 <aiObserverDone+0x1c0>
 8002a98:	f8d0 2084 	ldr.w	r2, [r0, #132]	; 0x84
 8002a9c:	2a00      	cmp	r2, #0
 8002a9e:	f000 80cf 	beq.w	8002c40 <aiObserverDone+0x1c0>
      !net_ctx->report.n_nodes || !u_observer_ctx.nodes)
 8002aa2:	4c6d      	ldr	r4, [pc, #436]	; (8002c58 <aiObserverDone+0x1d8>)
 8002aa4:	6a22      	ldr	r2, [r4, #32]
 8002aa6:	2a00      	cmp	r2, #0
 8002aa8:	f000 80ca 	beq.w	8002c40 <aiObserverDone+0x1c0>
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 8002aac:	4618      	mov	r0, r3
 8002aae:	aa12      	add	r2, sp, #72	; 0x48
 8002ab0:	a909      	add	r1, sp, #36	; 0x24
  LC_PRINT("  kernel  : %d.%03dms (time passed in the c-kernel fcts)\r\n", t.s * 1000 + t.ms, t.us);
 8002ab2:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
  ai_mnetwork_get_private_handle(net_ctx->handle, &net_hdl, &net_params);
 8002ab6:	f001 f915 	bl	8003ce4 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister(net_hdl, user_observer_cb,
 8002aba:	4622      	mov	r2, r4
 8002abc:	4967      	ldr	r1, [pc, #412]	; (8002c5c <aiObserverDone+0x1dc>)
 8002abe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002ac0:	f004 f9b4 	bl	8006e2c <ai_platform_observer_unregister>
  LC_PRINT("\r\n Inference time by c-node\r\n");
 8002ac4:	4866      	ldr	r0, [pc, #408]	; (8002c60 <aiObserverDone+0x1e0>)
 8002ac6:	f000 fea5 	bl	8003814 <lc_print>
  dwtCyclesToTime(u_observer_ctx.k_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 8002aca:	6a23      	ldr	r3, [r4, #32]
 8002acc:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f7fd fdc8 	bl	8000668 <__aeabi_uldivmod>
 8002ad8:	aa0a      	add	r2, sp, #40	; 0x28
 8002ada:	f000 ff27 	bl	800392c <dwtCyclesToTime>
  LC_PRINT("  kernel  : %d.%03dms (time passed in the c-kernel fcts)\r\n", t.s * 1000 + t.ms, t.us);
 8002ade:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002ae0:	4860      	ldr	r0, [pc, #384]	; (8002c64 <aiObserverDone+0x1e4>)
 8002ae2:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
    LC_PRINT(fmt, node_info.c_idx,
 8002ae6:	ed9f 9b5a 	vldr	d9, [pc, #360]	; 8002c50 <aiObserverDone+0x1d0>
  LC_PRINT("  kernel  : %d.%03dms (time passed in the c-kernel fcts)\r\n", t.s * 1000 + t.ms, t.us);
 8002aea:	fb05 3101 	mla	r1, r5, r1, r3
 8002aee:	f000 fe91 	bl	8003814 <lc_print>
  dwtCyclesToTime(u_observer_ctx.u_dur_t / u_observer_ctx.nodes[0].n_runs, &t);
 8002af2:	6a23      	ldr	r3, [r4, #32]
 8002af4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
 8002af8:	689a      	ldr	r2, [r3, #8]
 8002afa:	2300      	movs	r3, #0
 8002afc:	f7fd fdb4 	bl	8000668 <__aeabi_uldivmod>
 8002b00:	aa0a      	add	r2, sp, #40	; 0x28
 8002b02:	f000 ff13 	bl	800392c <dwtCyclesToTime>
  LC_PRINT("  user    : %d.%03dms (time passed in the user cb)\r\n", t.s * 1000 + t.ms, t.us);
 8002b06:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8002b08:	4857      	ldr	r0, [pc, #348]	; (8002c68 <aiObserverDone+0x1e8>)
 8002b0a:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
 8002b0e:	fb05 3101 	mla	r1, r5, r1, r3
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 8002b12:	4d56      	ldr	r5, [pc, #344]	; (8002c6c <aiObserverDone+0x1ec>)
  LC_PRINT("  user    : %d.%03dms (time passed in the user cb)\r\n", t.s * 1000 + t.ms, t.us);
 8002b14:	f000 fe7e 	bl	8003814 <lc_print>
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 8002b18:	f1a5 0324 	sub.w	r3, r5, #36	; 0x24
 8002b1c:	f1a5 0221 	sub.w	r2, r5, #33	; 0x21
 8002b20:	f1a5 011c 	sub.w	r1, r5, #28
 8002b24:	f1a5 0017 	sub.w	r0, r5, #23
 8002b28:	9500      	str	r5, [sp, #0]
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002b2a:	f1a5 09fd 	sub.w	r9, r5, #253	; 0xfd
  LC_PRINT("\r\n %-6s%-20s%-7s  %s\r\n", "c_id", "type", "id", "time (ms)");
 8002b2e:	f000 fe71 	bl	8003814 <lc_print>
  LC_PRINT(" ---------------------------------------------------\r\n");
 8002b32:	f105 000a 	add.w	r0, r5, #10
 8002b36:	f000 fe6d 	bl	8003814 <lc_print>
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8002b3a:	2300      	movs	r3, #0
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002b3c:	3dd6      	subs	r5, #214	; 0xd6
  cumul = 0;
 8002b3e:	461e      	mov	r6, r3
 8002b40:	4698      	mov	r8, r3
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8002b42:	a90e      	add	r1, sp, #56	; 0x38
 8002b44:	9809      	ldr	r0, [sp, #36]	; 0x24
  node_info.c_idx = 0;
 8002b46:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
  while (ai_platform_observer_node_info(net_hdl, &node_info)) {
 8002b4a:	f003 ff53 	bl	80069f4 <ai_platform_observer_node_info>
 8002b4e:	4682      	mov	sl, r0
 8002b50:	bb20      	cbnz	r0, 8002b9c <aiObserverDone+0x11c>
  LC_PRINT(" -------------------------------------------------\r\n");
 8002b52:	4847      	ldr	r0, [pc, #284]	; (8002c70 <aiObserverDone+0x1f0>)
 8002b54:	f000 fe5e 	bl	8003814 <lc_print>
  cumul /= u_observer_ctx.nodes[0].n_runs;
 8002b58:	6a23      	ldr	r3, [r4, #32]
 8002b5a:	4630      	mov	r0, r6
 8002b5c:	4641      	mov	r1, r8
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	4653      	mov	r3, sl
 8002b62:	f7fd fd81 	bl	8000668 <__aeabi_uldivmod>
  dwtCyclesToTime(cumul, &t);
 8002b66:	aa0a      	add	r2, sp, #40	; 0x28
 8002b68:	f000 fee0 	bl	800392c <dwtCyclesToTime>
  LC_PRINT(" %31s %6d.%03d ms\r\n", "", t.s * 1000 + t.ms, t.us);
 8002b6c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002b6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002b70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002b76:	fb00 1202 	mla	r2, r0, r2, r1
 8002b7a:	493e      	ldr	r1, [pc, #248]	; (8002c74 <aiObserverDone+0x1f4>)
 8002b7c:	1c48      	adds	r0, r1, #1
 8002b7e:	f000 fe49 	bl	8003814 <lc_print>
  free(u_observer_ctx.nodes);
 8002b82:	6a20      	ldr	r0, [r4, #32]
 8002b84:	f000 fe80 	bl	8003888 <__wrap_free>
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002b88:	2228      	movs	r2, #40	; 0x28
 8002b8a:	4651      	mov	r1, sl
 8002b8c:	4832      	ldr	r0, [pc, #200]	; (8002c58 <aiObserverDone+0x1d8>)
}
 8002b8e:	b020      	add	sp, #128	; 0x80
 8002b90:	ecbd 8b04 	vpop	{d8-d9}
 8002b94:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  memset((void *)&u_observer_ctx, 0, sizeof(struct u_observer_ctx));
 8002b98:	f006 bd0d 	b.w	80095b6 <memset>
    struct u_node_stat *sn = &u_observer_ctx.nodes[node_info.c_idx];
 8002b9c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8002ba0:	6a22      	ldr	r2, [r4, #32]
 8002ba2:	0119      	lsls	r1, r3, #4
 8002ba4:	eb02 1303 	add.w	r3, r2, r3, lsl #4
    cumul +=  sn->dur;
 8002ba8:	5850      	ldr	r0, [r2, r1]
 8002baa:	6859      	ldr	r1, [r3, #4]
 8002bac:	1986      	adds	r6, r0, r6
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8002bae:	689a      	ldr	r2, [r3, #8]
 8002bb0:	f04f 0300 	mov.w	r3, #0
    cumul +=  sn->dur;
 8002bb4:	eb41 0808 	adc.w	r8, r1, r8
    dwtCyclesToTime(sn->dur / (uint64_t)sn->n_runs, &t);
 8002bb8:	f7fd fd56 	bl	8000668 <__aeabi_uldivmod>
 8002bbc:	aa0a      	add	r2, sp, #40	; 0x28
 8002bbe:	f000 feb5 	bl	800392c <dwtCyclesToTime>
    if ((node_info.type & (ai_u16)0x8000) >> 15)
 8002bc2:	f8bd 003a 	ldrh.w	r0, [sp, #58]	; 0x3a
 8002bc6:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	; 0x3a
    LC_PRINT(fmt, node_info.c_idx,
 8002bca:	f3c0 000e 	ubfx	r0, r0, #0, #15
 8002bce:	f8bd b038 	ldrh.w	fp, [sp, #56]	; 0x38
      fmt = " %-6d%-20s%-5d %6d.%03d %6.02f %c\r\n";
 8002bd2:	ea19 0a23 	ands.w	sl, r9, r3, asr #32
 8002bd6:	bf38      	it	cc
 8002bd8:	46aa      	movcc	sl, r5
    LC_PRINT(fmt, node_info.c_idx,
 8002bda:	f004 fa91 	bl	8007100 <ai_layer_type_name>
 8002bde:	2125      	movs	r1, #37	; 0x25
 8002be0:	9007      	str	r0, [sp, #28]
 8002be2:	f8bd 0038 	ldrh.w	r0, [sp, #56]	; 0x38
 8002be6:	9104      	str	r1, [sp, #16]
 8002be8:	6a21      	ldr	r1, [r4, #32]
 8002bea:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8002bee:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8002bf2:	9306      	str	r3, [sp, #24]
 8002bf4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002bf8:	f7fd fd00 	bl	80005fc <__aeabi_ul2d>
 8002bfc:	ec41 0b17 	vmov	d7, r0, r1
 8002c00:	ee27 8b09 	vmul.f64	d8, d7, d9
 8002c04:	e9d4 0106 	ldrd	r0, r1, [r4, #24]
 8002c08:	f7fd fcf8 	bl	80005fc <__aeabi_ul2d>
 8002c0c:	f44f 7c7a 	mov.w	ip, #1000	; 0x3e8
 8002c10:	ec41 0b17 	vmov	d7, r0, r1
 8002c14:	ee88 7b07 	vdiv.f64	d7, d8, d7
 8002c18:	990d      	ldr	r1, [sp, #52]	; 0x34
 8002c1a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8002c1c:	9101      	str	r1, [sp, #4]
 8002c1e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002c20:	fb0c 1100 	mla	r1, ip, r0, r1
 8002c24:	4650      	mov	r0, sl
 8002c26:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8002c2a:	9100      	str	r1, [sp, #0]
 8002c2c:	4659      	mov	r1, fp
 8002c2e:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002c32:	f000 fdef 	bl	8003814 <lc_print>
    node_info.c_idx++;
 8002c36:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	e780      	b.n	8002b42 <aiObserverDone+0xc2>
}
 8002c40:	b020      	add	sp, #128	; 0x80
 8002c42:	ecbd 8b04 	vpop	{d8-d9}
 8002c46:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
 8002c4a:	bf00      	nop
 8002c4c:	f3af 8000 	nop.w
 8002c50:	00000000 	.word	0x00000000
 8002c54:	40590000 	.word	0x40590000
 8002c58:	200008a8 	.word	0x200008a8
 8002c5c:	080028b1 	.word	0x080028b1
 8002c60:	0800b356 	.word	0x0800b356
 8002c64:	0800b374 	.word	0x0800b374
 8002c68:	0800b3af 	.word	0x0800b3af
 8002c6c:	0800b408 	.word	0x0800b408
 8002c70:	0800b449 	.word	0x0800b449
 8002c74:	0800b47e 	.word	0x0800b47e

08002c78 <aiSystemPerformanceInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiSystemPerformanceInit(void)
{
 8002c78:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
  LC_PRINT("\r\n#\r\n");
 8002c7c:	484e      	ldr	r0, [pc, #312]	; (8002db8 <aiSystemPerformanceInit+0x140>)
{
 8002c7e:	b086      	sub	sp, #24
  LC_PRINT("\r\n#\r\n");
 8002c80:	f000 fdc8 	bl	8003814 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_,
 8002c84:	494d      	ldr	r1, [pc, #308]	; (8002dbc <aiSystemPerformanceInit+0x144>)
 8002c86:	2300      	movs	r3, #0
 8002c88:	2207      	movs	r2, #7
 8002c8a:	f101 0022 	add.w	r0, r1, #34	; 0x22
  port_dwt_reset();
 8002c8e:	4d4c      	ldr	r5, [pc, #304]	; (8002dc0 <aiSystemPerformanceInit+0x148>)
 8002c90:	2400      	movs	r4, #0
 8002c92:	f000 fdbf 	bl	8003814 <lc_print>
      _APP_VERSION_MINOR_ );
  LC_PRINT("#\r\n");
 8002c96:	484b      	ldr	r0, [pc, #300]	; (8002dc4 <aiSystemPerformanceInit+0x14c>)
 8002c98:	f000 fdbc 	bl	8003814 <lc_print>
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8002c9c:	4e4a      	ldr	r6, [pc, #296]	; (8002dc8 <aiSystemPerformanceInit+0x150>)

  systemSettingLog();
 8002c9e:	f000 febb 	bl	8003a18 <systemSettingLog>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8002ca2:	f8df 9140 	ldr.w	r9, [pc, #320]	; 8002de4 <aiSystemPerformanceInit+0x16c>

  crcIpInit();
 8002ca6:	f000 ff31 	bl	8003b0c <port_hal_crc_ip_init_imp>
  port_dwt_init();
 8002caa:	f000 ff3f 	bl	8003b2c <port_dwt_init_imp>
  port_hal_delay(100);
 8002cae:	2064      	movs	r0, #100	; 0x64
  port_dwt_reset();
 8002cb0:	606c      	str	r4, [r5, #4]
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8002cb2:	f109 0a17 	add.w	sl, r9, #23
  port_hal_delay(100);
 8002cb6:	f7fe fb53 	bl	8001360 <HAL_Delay>
  st = port_dwt_get_cycles();
 8002cba:	6868      	ldr	r0, [r5, #4]
  dwtCyclesToTime(st/100, &t);
 8002cbc:	2564      	movs	r5, #100	; 0x64
 8002cbe:	aa02      	add	r2, sp, #8
 8002cc0:	4621      	mov	r1, r4
  LC_PRINT("Initializing the network\r\n");
 8002cc2:	f109 0b48 	add.w	fp, r9, #72	; 0x48
 8002cc6:	fbb0 f0f5 	udiv	r0, r0, r5
 8002cca:	f000 fe2f 	bl	800392c <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 8002cce:	9a05      	ldr	r2, [sp, #20]
 8002cd0:	483e      	ldr	r0, [pc, #248]	; (8002dcc <aiSystemPerformanceInit+0x154>)
 8002cd2:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
 8002cd6:	fb05 3101 	mla	r1, r5, r1, r3
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8002cda:	4635      	mov	r5, r6
 8002cdc:	f000 fd9a 	bl	8003814 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 8002ce0:	aa02      	add	r2, sp, #8
 8002ce2:	2100      	movs	r1, #0
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce8:	f000 fe20 	bl	800392c <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8002cec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002cf0:	9a03      	ldr	r2, [sp, #12]
 8002cf2:	9b04      	ldr	r3, [sp, #16]
 8002cf4:	fb01 3302 	mla	r3, r1, r2, r3
 8002cf8:	4a35      	ldr	r2, [pc, #212]	; (8002dd0 <aiSystemPerformanceInit+0x158>)
 8002cfa:	6013      	str	r3, [r2, #0]
  port_dwt_init();
 8002cfc:	f000 ff16 	bl	8003b2c <port_dwt_init_imp>
  aiPlatformVersion();
 8002d00:	f000 fb5c 	bl	80033bc <aiPlatformVersion>
  LC_PRINT("Discovering the network(s)...\r\n");
 8002d04:	4833      	ldr	r0, [pc, #204]	; (8002dd4 <aiSystemPerformanceInit+0x15c>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8002d06:	f845 4b08 	str.w	r4, [r5], #8
  LC_PRINT("Discovering the network(s)...\r\n");
 8002d0a:	f000 fd83 	bl	8003814 <lc_print>
    nn_name = ai_mnetwork_find(NULL, idx);
 8002d0e:	4621      	mov	r1, r4
 8002d10:	2000      	movs	r0, #0
 8002d12:	f000 ff51 	bl	8003bb8 <ai_mnetwork_find>
    if (nn_name) {
 8002d16:	4680      	mov	r8, r0
 8002d18:	b190      	cbz	r0, 8002d40 <aiSystemPerformanceInit+0xc8>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8002d1a:	4601      	mov	r1, r0
 8002d1c:	4648      	mov	r0, r9
 8002d1e:	f000 fd79 	bl	8003814 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8002d22:	4641      	mov	r1, r8
 8002d24:	4650      	mov	r0, sl
 8002d26:	f000 fd75 	bl	8003814 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f1a5 0108 	sub.w	r1, r5, #8
 8002d30:	4640      	mov	r0, r8
 8002d32:	f000 ff4f 	bl	8003bd4 <ai_mnetwork_create>
  if (err.type) {
 8002d36:	b2c3      	uxtb	r3, r0
 8002d38:	b14b      	cbz	r3, 8002d4e <aiSystemPerformanceInit+0xd6>
    aiLogErr(err, "ai_mnetwork_create");
 8002d3a:	4927      	ldr	r1, [pc, #156]	; (8002dd8 <aiSystemPerformanceInit+0x160>)
 8002d3c:	f000 fb54 	bl	80033e8 <aiLogErr>
  cyclesCounterInit();

  aiInit();

  srand(3); /* deterministic outcome */
 8002d40:	2003      	movs	r0, #3
 8002d42:	f005 fddb 	bl	80088fc <srand>

  return 0;
}
 8002d46:	2000      	movs	r0, #0
 8002d48:	b006      	add	sp, #24
 8002d4a:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  LC_PRINT("Initializing the network\r\n");
 8002d4e:	4658      	mov	r0, fp
 8002d50:	46a8      	mov	r8, r5
 8002d52:	f000 fd5f 	bl	8003814 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8002d56:	4629      	mov	r1, r5
 8002d58:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8002d5c:	f000 ff7a 	bl	8003c54 <ai_mnetwork_get_report>
 8002d60:	4603      	mov	r3, r0
 8002d62:	b938      	cbnz	r0, 8002d74 <aiSystemPerformanceInit+0xfc>
    err = ai_mnetwork_get_error(ctx->handle);
 8002d64:	2290      	movs	r2, #144	; 0x90
 8002d66:	9301      	str	r3, [sp, #4]
 8002d68:	4354      	muls	r4, r2
 8002d6a:	5930      	ldr	r0, [r6, r4]
 8002d6c:	f000 ff7d 	bl	8003c6a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8002d70:	491a      	ldr	r1, [pc, #104]	; (8002ddc <aiSystemPerformanceInit+0x164>)
 8002d72:	e00b      	b.n	8002d8c <aiSystemPerformanceInit+0x114>
  if (!ai_mnetwork_init(ctx->handle)) {
 8002d74:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8002d78:	f000 ff84 	bl	8003c84 <ai_mnetwork_init>
 8002d7c:	b970      	cbnz	r0, 8002d9c <aiSystemPerformanceInit+0x124>
    err = ai_mnetwork_get_error(ctx->handle);
 8002d7e:	2290      	movs	r2, #144	; 0x90
 8002d80:	9001      	str	r0, [sp, #4]
 8002d82:	4354      	muls	r4, r2
 8002d84:	5930      	ldr	r0, [r6, r4]
 8002d86:	f000 ff70 	bl	8003c6a <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8002d8a:	4915      	ldr	r1, [pc, #84]	; (8002de0 <aiSystemPerformanceInit+0x168>)
    aiLogErr(err, "ai_mnetwork_get_info");
 8002d8c:	f000 fb2c 	bl	80033e8 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8002d90:	5930      	ldr	r0, [r6, r4]
 8002d92:	f000 ff49 	bl	8003c28 <ai_mnetwork_destroy>
    ctx->handle = AI_HANDLE_NULL;
 8002d96:	9b01      	ldr	r3, [sp, #4]
 8002d98:	5133      	str	r3, [r6, r4]
  } while (nn_name);
 8002d9a:	e7d1      	b.n	8002d40 <aiSystemPerformanceInit+0xc8>
  if (ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	f855 0c08 	ldr.w	r0, [r5, #-8]
 8002da2:	f000 ff57 	bl	8003c54 <ai_mnetwork_get_report>
 8002da6:	3590      	adds	r5, #144	; 0x90
 8002da8:	4603      	mov	r3, r0
 8002daa:	2800      	cmp	r0, #0
 8002dac:	d0da      	beq.n	8002d64 <aiSystemPerformanceInit+0xec>
    aiPrintNetworkInfo(&ctx->report);
 8002dae:	4640      	mov	r0, r8
    idx++;
 8002db0:	3401      	adds	r4, #1
    aiPrintNetworkInfo(&ctx->report);
 8002db2:	f000 fc31 	bl	8003618 <aiPrintNetworkInfo>
  } while (nn_name);
 8002db6:	e7aa      	b.n	8002d0e <aiSystemPerformanceInit+0x96>
 8002db8:	0800b493 	.word	0x0800b493
 8002dbc:	0800b499 	.word	0x0800b499
 8002dc0:	e0001000 	.word	0xe0001000
 8002dc4:	0800b4c8 	.word	0x0800b4c8
 8002dc8:	20000810 	.word	0x20000810
 8002dcc:	0800b4cc 	.word	0x0800b4cc
 8002dd0:	200008d0 	.word	0x200008d0
 8002dd4:	0800b502 	.word	0x0800b502
 8002dd8:	0800b557 	.word	0x0800b557
 8002ddc:	0800b585 	.word	0x0800b585
 8002de0:	0800b59a 	.word	0x0800b59a
 8002de4:	0800b522 	.word	0x0800b522

08002de8 <aiSystemPerformanceProcess>:

int aiSystemPerformanceProcess(void)
{
 8002de8:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
 8002dec:	ed2d 8b02 	vpush	{d8}
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 8002df0:	ed9f 8a54 	vldr	s16, [pc, #336]	; 8002f44 <aiSystemPerformanceProcess+0x15c>
{
 8002df4:	b09c      	sub	sp, #112	; 0x70
  if (net_exec_ctx[idx].handle == AI_HANDLE_NULL) {
 8002df6:	4c54      	ldr	r4, [pc, #336]	; (8002f48 <aiSystemPerformanceProcess+0x160>)
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	b94b      	cbnz	r3, 8002e10 <aiSystemPerformanceProcess+0x28>
    LC_PRINT("E: network handle is NULL\r\n");
 8002dfc:	4853      	ldr	r0, [pc, #332]	; (8002f4c <aiSystemPerformanceProcess+0x164>)
 8002dfe:	f000 fd09 	bl	8003814 <lc_print>

  do {
    r = aiTestPerformance(idx);
    idx = (idx+1) % AI_MNETWORK_NUMBER;

    if (!r) {
 8002e02:	f04f 30ff 	mov.w	r0, #4294967295
      }
    }
  } while (r==0);

  return r;
}
 8002e06:	b01c      	add	sp, #112	; 0x70
 8002e08:	ecbd 8b02 	vpop	{d8}
 8002e0c:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
  __ASM volatile ("MRS %0, control" : "=r" (result) );
 8002e10:	f3ef 8014 	mrs	r0, CONTROL
  __ASM volatile ("MRS %0, msp" : "=r" (result) );
 8002e14:	f3ef 8108 	mrs	r1, MSP
  if (profiling_mode)
 8002e18:	f8df 915c 	ldr.w	r9, [pc, #348]	; 8002f78 <aiSystemPerformanceProcess+0x190>
  MON_STACK_INIT();
 8002e1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e20:	f000 fd58 	bl	80038d4 <stackMonInit>
  if (profiling_mode)
 8002e24:	f899 3000 	ldrb.w	r3, [r9]
 8002e28:	b30b      	cbz	r3, 8002e6e <aiSystemPerformanceProcess+0x86>
    niter = _APP_ITER_ * profiling_factor;
 8002e2a:	4b49      	ldr	r3, [pc, #292]	; (8002f50 <aiSystemPerformanceProcess+0x168>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	ea4f 1803 	mov.w	r8, r3, lsl #4
  LC_PRINT("\r\nRunning PerfTest on \"%s\" with random inputs (%d iterations)...\r\n",
 8002e32:	4642      	mov	r2, r8
 8002e34:	68a1      	ldr	r1, [r4, #8]
 8002e36:	4847      	ldr	r0, [pc, #284]	; (8002f54 <aiSystemPerformanceProcess+0x16c>)
 8002e38:	f000 fcec 	bl	8003814 <lc_print>
 8002e3c:	f3ef 8308 	mrs	r3, MSP
  MON_STACK_CHECK0();
 8002e40:	4d45      	ldr	r5, [pc, #276]	; (8002f58 <aiSystemPerformanceProcess+0x170>)
 8002e42:	69aa      	ldr	r2, [r5, #24]
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d004      	beq.n	8002e52 <aiSystemPerformanceProcess+0x6a>
 8002e48:	f3ef 8108 	mrs	r1, MSP
 8002e4c:	4843      	ldr	r0, [pc, #268]	; (8002f5c <aiSystemPerformanceProcess+0x174>)
 8002e4e:	f000 fce1 	bl	8003814 <lc_print>
  MON_STACK_MARK();
 8002e52:	792b      	ldrb	r3, [r5, #4]
 8002e54:	b973      	cbnz	r3, 8002e74 <aiSystemPerformanceProcess+0x8c>
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 8002e56:	f8b4 e040 	ldrh.w	lr, [r4, #64]	; 0x40
 8002e5a:	f1be 0f01 	cmp.w	lr, #1
 8002e5e:	d915      	bls.n	8002e8c <aiSystemPerformanceProcess+0xa4>
    LC_PRINT("E: AI_MNETWORK_IN/OUT_NUM definition are incoherent\r\n");
 8002e60:	483f      	ldr	r0, [pc, #252]	; (8002f60 <aiSystemPerformanceProcess+0x178>)
 8002e62:	f000 fcd7 	bl	8003814 <lc_print>
    port_hal_delay(100);
 8002e66:	2064      	movs	r0, #100	; 0x64
 8002e68:	f7fe fa7a 	bl	8001360 <HAL_Delay>
 8002e6c:	e7c9      	b.n	8002e02 <aiSystemPerformanceProcess+0x1a>
    niter = _APP_ITER_;
 8002e6e:	f04f 0810 	mov.w	r8, #16
 8002e72:	e7de      	b.n	8002e32 <aiSystemPerformanceProcess+0x4a>
  MON_STACK_MARK();
 8002e74:	69eb      	ldr	r3, [r5, #28]
 8002e76:	f04f 31de 	mov.w	r1, #3739147998	; 0xdededede
 8002e7a:	3303      	adds	r3, #3
 8002e7c:	f023 0303 	bic.w	r3, r3, #3
 8002e80:	69aa      	ldr	r2, [r5, #24]
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d2e7      	bcs.n	8002e56 <aiSystemPerformanceProcess+0x6e>
 8002e86:	f843 1b04 	str.w	r1, [r3], #4
 8002e8a:	e7f9      	b.n	8002e80 <aiSystemPerformanceProcess+0x98>
      (net_exec_ctx[idx].report.n_outputs > AI_MNETWORK_OUT_NUM))
 8002e8c:	f8b4 c042 	ldrh.w	ip, [r4, #66]	; 0x42
  if ((net_exec_ctx[idx].report.n_inputs > AI_MNETWORK_IN_NUM) ||
 8002e90:	f1bc 0f01 	cmp.w	ip, #1
 8002e94:	d8e4      	bhi.n	8002e60 <aiSystemPerformanceProcess+0x78>
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8002e96:	2300      	movs	r3, #0
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8002e98:	f8df a0e0 	ldr.w	sl, [pc, #224]	; 8002f7c <aiSystemPerformanceProcess+0x194>
 8002e9c:	e010      	b.n	8002ec0 <aiSystemPerformanceProcess+0xd8>
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 8002e9e:	f8d4 b044 	ldr.w	fp, [r4, #68]	; 0x44
 8002ea2:	ad0e      	add	r5, sp, #56	; 0x38
 8002ea4:	465e      	mov	r6, fp
 8002ea6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002eaa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 8002eae:	f8db 3004 	ldr.w	r3, [fp, #4]
    ai_input[i] = net_exec_ctx[idx].report.inputs[i];
 8002eb2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.inputs[i].data)
 8002eb6:	b90b      	cbnz	r3, 8002ebc <aiSystemPerformanceProcess+0xd4>
      ai_input[i].data = AI_HANDLE_PTR(data_ins[i]);
 8002eb8:	f8da 3000 	ldr.w	r3, [sl]
 8002ebc:	930f      	str	r3, [sp, #60]	; 0x3c
    niter = _APP_ITER_;
 8002ebe:	2301      	movs	r3, #1
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8002ec0:	459e      	cmp	lr, r3
 8002ec2:	dcec      	bgt.n	8002e9e <aiSystemPerformanceProcess+0xb6>
  for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 8002ec4:	2300      	movs	r3, #0
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8002ec6:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 8002f80 <aiSystemPerformanceProcess+0x198>
  for (int i = 0; i < net_exec_ctx[idx].report.n_outputs; i++) {
 8002eca:	459c      	cmp	ip, r3
 8002ecc:	dc28      	bgt.n	8002f20 <aiSystemPerformanceProcess+0x138>
  if (profiling_mode) {
 8002ece:	f899 3000 	ldrb.w	r3, [r9]
 8002ed2:	b14b      	cbz	r3, 8002ee8 <aiSystemPerformanceProcess+0x100>
    LC_PRINT("Profiling mode (%d)...\r\n", profiling_factor);
 8002ed4:	4b1e      	ldr	r3, [pc, #120]	; (8002f50 <aiSystemPerformanceProcess+0x168>)
 8002ed6:	4823      	ldr	r0, [pc, #140]	; (8002f64 <aiSystemPerformanceProcess+0x17c>)
 8002ed8:	6819      	ldr	r1, [r3, #0]
 8002eda:	f000 fc9b 	bl	8003814 <lc_print>
    fflush(stdout);
 8002ede:	4b22      	ldr	r3, [pc, #136]	; (8002f68 <aiSystemPerformanceProcess+0x180>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	6898      	ldr	r0, [r3, #8]
 8002ee4:	f006 fa60 	bl	80093a8 <fflush>
  if (observer_mode) {
 8002ee8:	4b20      	ldr	r3, [pc, #128]	; (8002f6c <aiSystemPerformanceProcess+0x184>)
 8002eea:	781b      	ldrb	r3, [r3, #0]
 8002eec:	b153      	cbz	r3, 8002f04 <aiSystemPerformanceProcess+0x11c>
    MON_ALLOC_ENABLE();
 8002eee:	4d20      	ldr	r5, [pc, #128]	; (8002f70 <aiSystemPerformanceProcess+0x188>)
    MON_ALLOC_RESET();
 8002ef0:	f7ff fca6 	bl	8002840 <_mon_alloc_reset>
    aiObserverInit(&net_exec_ctx[idx]);
 8002ef4:	4814      	ldr	r0, [pc, #80]	; (8002f48 <aiSystemPerformanceProcess+0x160>)
    MON_ALLOC_ENABLE();
 8002ef6:	682b      	ldr	r3, [r5, #0]
 8002ef8:	f043 0301 	orr.w	r3, r3, #1
 8002efc:	602b      	str	r3, [r5, #0]
    aiObserverInit(&net_exec_ctx[idx]);
 8002efe:	f7ff fd7f 	bl	8002a00 <aiObserverInit>
    observer_heap_sz = MON_ALLOC_MAX_USED();
 8002f02:	696b      	ldr	r3, [r5, #20]
  tcumul = 0ULL;
 8002f04:	2500      	movs	r5, #0
  int observer_heap_sz = 0UL;
 8002f06:	9306      	str	r3, [sp, #24]
  MON_ALLOC_RESET();
 8002f08:	f7ff fc9a 	bl	8002840 <_mon_alloc_reset>
  tcumul = 0ULL;
 8002f0c:	46aa      	mov	sl, r5
  for (iter = 0; iter < niter; iter++) {
 8002f0e:	462e      	mov	r6, r5
 8002f10:	4546      	cmp	r6, r8
 8002f12:	da74      	bge.n	8002ffe <aiSystemPerformanceProcess+0x216>
 8002f14:	f10d 0b38 	add.w	fp, sp, #56	; 0x38
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8002f18:	2300      	movs	r3, #0
            in_data[j] = (ai_i8)(v * 127);
 8002f1a:	eddf 8a16 	vldr	s17, [pc, #88]	; 8002f74 <aiSystemPerformanceProcess+0x18c>
 8002f1e:	e04b      	b.n	8002fb8 <aiSystemPerformanceProcess+0x1d0>
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 8002f20:	f8d4 a048 	ldr.w	sl, [r4, #72]	; 0x48
 8002f24:	ad15      	add	r5, sp, #84	; 0x54
 8002f26:	4656      	mov	r6, sl
 8002f28:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002f2c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 8002f30:	f8da 3004 	ldr.w	r3, [sl, #4]
    ai_output[i] = net_exec_ctx[idx].report.outputs[i];
 8002f34:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    if (net_exec_ctx[idx].report.outputs[i].data)
 8002f38:	b90b      	cbnz	r3, 8002f3e <aiSystemPerformanceProcess+0x156>
      ai_output[i].data = AI_HANDLE_PTR(data_outs[i]);
 8002f3a:	f8de 3000 	ldr.w	r3, [lr]
 8002f3e:	9316      	str	r3, [sp, #88]	; 0x58
  for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8002f40:	2301      	movs	r3, #1
 8002f42:	e7c2      	b.n	8002eca <aiSystemPerformanceProcess+0xe2>
 8002f44:	30000000 	.word	0x30000000
 8002f48:	20000810 	.word	0x20000810
 8002f4c:	0800b5ab 	.word	0x0800b5ab
 8002f50:	20000010 	.word	0x20000010
 8002f54:	0800b5c7 	.word	0x0800b5c7
 8002f58:	200008f8 	.word	0x200008f8
 8002f5c:	0800b60a 	.word	0x0800b60a
 8002f60:	0800b64e 	.word	0x0800b64e
 8002f64:	0800b684 	.word	0x0800b684
 8002f68:	200005d0 	.word	0x200005d0
 8002f6c:	2000000c 	.word	0x2000000c
 8002f70:	200008dc 	.word	0x200008dc
 8002f74:	42fe0000 	.word	0x42fe0000
 8002f78:	200008a0 	.word	0x200008a0
 8002f7c:	2000001c 	.word	0x2000001c
 8002f80:	20000020 	.word	0x20000020
      ai_i8 *in_data = (ai_i8 *)ai_input[i].data;
 8002f84:	e9db 1200 	ldrd	r1, r2, [fp]
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 8002f88:	f04f 0900 	mov.w	r9, #0
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8002f8c:	f3c1 4043 	ubfx	r0, r1, #17, #4
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8002f90:	f3c1 11d1 	ubfx	r1, r1, #7, #18
 8002f94:	f001 0178 	and.w	r1, r1, #120	; 0x78
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 8002f98:	9005      	str	r0, [sp, #20]
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 8002f9a:	9107      	str	r1, [sp, #28]
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 8002f9c:	2101      	movs	r1, #1
 8002f9e:	4658      	mov	r0, fp
 8002fa0:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8002fa4:	f001 fad6 	bl	8004554 <ai_buffer_get_size>
 8002fa8:	4581      	cmp	r9, r0
 8002faa:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
 8002fae:	f0c0 8106 	bcc.w	80031be <aiSystemPerformanceProcess+0x3d6>
    for (int i = 0; i < net_exec_ctx[idx].report.n_inputs; i++) {
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	f10b 0b1c 	add.w	fp, fp, #28
 8002fb8:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	dbe1      	blt.n	8002f84 <aiSystemPerformanceProcess+0x19c>
    MON_ALLOC_ENABLE();
 8002fc0:	f8df 930c 	ldr.w	r9, [pc, #780]	; 80032d0 <aiSystemPerformanceProcess+0x4e8>
 8002fc4:	f8d9 3000 	ldr.w	r3, [r9]
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	f8c9 3000 	str.w	r3, [r9]
  cyclesCount.tick_start = port_hal_get_tick();
 8002fd0:	f7fe f9c0 	bl	8001354 <HAL_GetTick>
 8002fd4:	4bb1      	ldr	r3, [pc, #708]	; (800329c <aiSystemPerformanceProcess+0x4b4>)
  port_dwt_reset();
 8002fd6:	2100      	movs	r1, #0
 8002fd8:	4ab1      	ldr	r2, [pc, #708]	; (80032a0 <aiSystemPerformanceProcess+0x4b8>)
  cyclesCount.tick_start = port_hal_get_tick();
 8002fda:	6098      	str	r0, [r3, #8]
  port_dwt_reset();
 8002fdc:	6051      	str	r1, [r2, #4]
    batch = ai_mnetwork_run(net_exec_ctx[idx].handle, ai_input, ai_output);
 8002fde:	a90e      	add	r1, sp, #56	; 0x38
  cyclesCount.dwt_start = port_dwt_get_cycles();
 8002fe0:	6852      	ldr	r2, [r2, #4]
 8002fe2:	6820      	ldr	r0, [r4, #0]
 8002fe4:	605a      	str	r2, [r3, #4]
 8002fe6:	aa15      	add	r2, sp, #84	; 0x54
 8002fe8:	f000 fe6b 	bl	8003cc2 <ai_mnetwork_run>
    if (batch != 1) {
 8002fec:	2801      	cmp	r0, #1
 8002fee:	f000 8116 	beq.w	800321e <aiSystemPerformanceProcess+0x436>
      aiLogErr(ai_mnetwork_get_error(net_exec_ctx[idx].handle),
 8002ff2:	6820      	ldr	r0, [r4, #0]
 8002ff4:	f000 fe39 	bl	8003c6a <ai_mnetwork_get_error>
 8002ff8:	49aa      	ldr	r1, [pc, #680]	; (80032a4 <aiSystemPerformanceProcess+0x4bc>)
 8002ffa:	f000 f9f5 	bl	80033e8 <aiLogErr>
  LC_PRINT("\r\n");
 8002ffe:	48aa      	ldr	r0, [pc, #680]	; (80032a8 <aiSystemPerformanceProcess+0x4c0>)
 8003000:	f000 fc08 	bl	8003814 <lc_print>
  MON_STACK_EVALUATE();
 8003004:	4aa9      	ldr	r2, [pc, #676]	; (80032ac <aiSystemPerformanceProcess+0x4c4>)
 8003006:	2000      	movs	r0, #0
 8003008:	f892 c004 	ldrb.w	ip, [r2, #4]
 800300c:	6090      	str	r0, [r2, #8]
 800300e:	f1bc 0f00 	cmp.w	ip, #0
 8003012:	d023      	beq.n	800305c <aiSystemPerformanceProcess+0x274>
 8003014:	68d3      	ldr	r3, [r2, #12]
 8003016:	6951      	ldr	r1, [r2, #20]
 8003018:	eba1 0903 	sub.w	r9, r1, r3
 800301c:	69d3      	ldr	r3, [r2, #28]
 800301e:	3303      	adds	r3, #3
 8003020:	f023 0303 	bic.w	r3, r3, #3
 8003024:	f103 0e20 	add.w	lr, r3, #32
 8003028:	f853 8b04 	ldr.w	r8, [r3], #4
 800302c:	f1b8 3fde 	cmp.w	r8, #3739147998	; 0xdededede
 8003030:	bf18      	it	ne
 8003032:	4660      	movne	r0, ip
 8003034:	4573      	cmp	r3, lr
 8003036:	d1f7      	bne.n	8003028 <aiSystemPerformanceProcess+0x240>
 8003038:	2800      	cmp	r0, #0
 800303a:	f040 8114 	bne.w	8003266 <aiSystemPerformanceProcess+0x47e>
 800303e:	2020      	movs	r0, #32
 8003040:	f8d2 e018 	ldr.w	lr, [r2, #24]
 8003044:	6090      	str	r0, [r2, #8]
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	6890      	ldr	r0, [r2, #8]
 800304a:	f1b1 3fde 	cmp.w	r1, #3739147998	; 0xdededede
 800304e:	d102      	bne.n	8003056 <aiSystemPerformanceProcess+0x26e>
 8003050:	4573      	cmp	r3, lr
 8003052:	f0c0 8104 	bcc.w	800325e <aiSystemPerformanceProcess+0x476>
 8003056:	eba9 0100 	sub.w	r1, r9, r0
 800305a:	6091      	str	r1, [r2, #8]
  LC_PRINT("\r\n");
 800305c:	4892      	ldr	r0, [pc, #584]	; (80032a8 <aiSystemPerformanceProcess+0x4c0>)
 800305e:	f000 fbd9 	bl	8003814 <lc_print>
  tcumul -= u_observer_ctx.u_dur_t;
 8003062:	4a93      	ldr	r2, [pc, #588]	; (80032b0 <aiSystemPerformanceProcess+0x4c8>)
  tcumul /= (uint64_t)iter;
 8003064:	17f3      	asrs	r3, r6, #31
  tcumul -= u_observer_ctx.u_dur_t;
 8003066:	e9d2 0104 	ldrd	r0, r1, [r2, #16]
  tcumul /= (uint64_t)iter;
 800306a:	4632      	mov	r2, r6
  tcumul -= u_observer_ctx.u_dur_t;
 800306c:	1a28      	subs	r0, r5, r0
 800306e:	eb6a 0101 	sbc.w	r1, sl, r1
  tcumul /= (uint64_t)iter;
 8003072:	f7fd faf9 	bl	8000668 <__aeabi_uldivmod>
  dwtCyclesToTime(tcumul, &t);
 8003076:	aa0a      	add	r2, sp, #40	; 0x28
  tcumul /= (uint64_t)iter;
 8003078:	4688      	mov	r8, r1
 800307a:	4681      	mov	r9, r0
  dwtCyclesToTime(tcumul, &t);
 800307c:	f000 fc56 	bl	800392c <dwtCyclesToTime>
  LC_PRINT("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %" PRIu64 " MACC)\r\n",
 8003080:	68a1      	ldr	r1, [r4, #8]
 8003082:	9105      	str	r1, [sp, #20]
 8003084:	f7fe fdf4 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8003088:	4683      	mov	fp, r0
 800308a:	f7fe fdf1 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 800308e:	4b89      	ldr	r3, [pc, #548]	; (80032b4 <aiSystemPerformanceProcess+0x4cc>)
 8003090:	4632      	mov	r2, r6
 8003092:	9905      	ldr	r1, [sp, #20]
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 8003094:	2664      	movs	r6, #100	; 0x64
  LC_PRINT("Results for \"%s\", %d inferences @%dMHz/%dMHz (complexity: %" PRIu64 " MACC)\r\n",
 8003096:	fbb0 f0f3 	udiv	r0, r0, r3
 800309a:	ed94 7b0e 	vldr	d7, [r4, #56]	; 0x38
 800309e:	fbbb f3f3 	udiv	r3, fp, r3
 80030a2:	ed8d 7b02 	vstr	d7, [sp, #8]
 80030a6:	9000      	str	r0, [sp, #0]
 80030a8:	4883      	ldr	r0, [pc, #524]	; (80032b8 <aiSystemPerformanceProcess+0x4d0>)
 80030aa:	f000 fbb3 	bl	8003814 <lc_print>
  LC_PRINT(" duration     : %d.%03d ms (average)\r\n", t.s * 1000 + t.ms, t.us);
 80030ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80030b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80030b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80030b8:	fb00 3101 	mla	r1, r0, r1, r3
 80030bc:	487f      	ldr	r0, [pc, #508]	; (80032bc <aiSystemPerformanceProcess+0x4d4>)
 80030be:	f000 fba9 	bl	8003814 <lc_print>
  LC_PRINT(" CPU cycles   : %" PRIu64 " (average)\r\n", tcumul);
 80030c2:	464a      	mov	r2, r9
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 80030c4:	fba9 9506 	umull	r9, r5, r9, r6
  LC_PRINT(" CPU cycles   : %" PRIu64 " (average)\r\n", tcumul);
 80030c8:	4643      	mov	r3, r8
 80030ca:	487d      	ldr	r0, [pc, #500]	; (80032c0 <aiSystemPerformanceProcess+0x4d8>)
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 80030cc:	fb06 5508 	mla	r5, r6, r8, r5
  LC_PRINT(" CPU cycles   : %" PRIu64 " (average)\r\n", tcumul);
 80030d0:	f000 fba0 	bl	8003814 <lc_print>
  LC_PRINT(" CPU Workload : %d%c (duty cycle = 1s)\r\n", (int)((tcumul * 100) / t.fcpu), '%');
 80030d4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80030d6:	2300      	movs	r3, #0
 80030d8:	4629      	mov	r1, r5
 80030da:	4648      	mov	r0, r9
 80030dc:	f7fd fac4 	bl	8000668 <__aeabi_uldivmod>
 80030e0:	2225      	movs	r2, #37	; 0x25
 80030e2:	4601      	mov	r1, r0
 80030e4:	4877      	ldr	r0, [pc, #476]	; (80032c4 <aiSystemPerformanceProcess+0x4dc>)
 80030e6:	f000 fb95 	bl	8003814 <lc_print>
  cmacc = (ai_macc)((tcumul * 100)/ net_exec_ctx[idx].report.n_macc);
 80030ea:	4629      	mov	r1, r5
 80030ec:	4648      	mov	r0, r9
 80030ee:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 80030f2:	f7fd fab9 	bl	8000668 <__aeabi_uldivmod>
 80030f6:	4605      	mov	r5, r0
  LC_PRINT(" cycles/MACC  : %d.%02d (average for all layers)\r\n",
 80030f8:	2300      	movs	r3, #0
 80030fa:	2264      	movs	r2, #100	; 0x64
 80030fc:	f7fd fab4 	bl	8000668 <__aeabi_uldivmod>
 8003100:	fb06 5210 	mls	r2, r6, r0, r5
 8003104:	4601      	mov	r1, r0
 8003106:	4870      	ldr	r0, [pc, #448]	; (80032c8 <aiSystemPerformanceProcess+0x4e0>)
 8003108:	f000 fb84 	bl	8003814 <lc_print>
  MON_STACK_REPORT();
 800310c:	4b67      	ldr	r3, [pc, #412]	; (80032ac <aiSystemPerformanceProcess+0x4c4>)
 800310e:	791a      	ldrb	r2, [r3, #4]
 8003110:	2a00      	cmp	r2, #0
 8003112:	f000 80b3 	beq.w	800327c <aiSystemPerformanceProcess+0x494>
 8003116:	6899      	ldr	r1, [r3, #8]
 8003118:	486c      	ldr	r0, [pc, #432]	; (80032cc <aiSystemPerformanceProcess+0x4e4>)
 800311a:	f000 fb7b 	bl	8003814 <lc_print>
  MON_ALLOC_REPORT();
 800311e:	496c      	ldr	r1, [pc, #432]	; (80032d0 <aiSystemPerformanceProcess+0x4e8>)
 8003120:	486c      	ldr	r0, [pc, #432]	; (80032d4 <aiSystemPerformanceProcess+0x4ec>)
 8003122:	680b      	ldr	r3, [r1, #0]
 8003124:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8003128:	9303      	str	r3, [sp, #12]
 800312a:	698b      	ldr	r3, [r1, #24]
 800312c:	9302      	str	r3, [sp, #8]
 800312e:	694b      	ldr	r3, [r1, #20]
 8003130:	9301      	str	r3, [sp, #4]
 8003132:	688b      	ldr	r3, [r1, #8]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	690b      	ldr	r3, [r1, #16]
 8003138:	684a      	ldr	r2, [r1, #4]
 800313a:	68c9      	ldr	r1, [r1, #12]
 800313c:	f000 fb6a 	bl	8003814 <lc_print>
  LC_PRINT(" observer res : %d bytes used from the heap (%d c-nodes)\r\n", observer_heap_sz,
 8003140:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
 8003144:	9906      	ldr	r1, [sp, #24]
 8003146:	4864      	ldr	r0, [pc, #400]	; (80032d8 <aiSystemPerformanceProcess+0x4f0>)
 8003148:	f000 fb64 	bl	8003814 <lc_print>
  aiObserverDone(&net_exec_ctx[idx]);
 800314c:	4863      	ldr	r0, [pc, #396]	; (80032dc <aiSystemPerformanceProcess+0x4f4>)
 800314e:	f7ff fc97 	bl	8002a80 <aiObserverDone>
      r = aiTestConsole();
 8003152:	f7ff fc0f 	bl	8002974 <aiTestConsole>
      if (r == CONS_EVT_UNDEFINED) {
 8003156:	2864      	cmp	r0, #100	; 0x64
 8003158:	f43f ae4d 	beq.w	8002df6 <aiSystemPerformanceProcess+0xe>
      } else if (r == CONS_EVT_HELP) {
 800315c:	2803      	cmp	r0, #3
 800315e:	d124      	bne.n	80031aa <aiSystemPerformanceProcess+0x3c2>
        LC_PRINT("\r\n");
 8003160:	4851      	ldr	r0, [pc, #324]	; (80032a8 <aiSystemPerformanceProcess+0x4c0>)
 8003162:	f000 fb57 	bl	8003814 <lc_print>
        LC_PRINT("Possible key for the interactive console:\r\n");
 8003166:	485e      	ldr	r0, [pc, #376]	; (80032e0 <aiSystemPerformanceProcess+0x4f8>)
 8003168:	f000 fb54 	bl	8003814 <lc_print>
        LC_PRINT("  [q,Q]      quit the application\r\n");
 800316c:	485d      	ldr	r0, [pc, #372]	; (80032e4 <aiSystemPerformanceProcess+0x4fc>)
 800316e:	f000 fb51 	bl	8003814 <lc_print>
        LC_PRINT("  [r,R]      re-start (NN de-init and re-init)\r\n");
 8003172:	485d      	ldr	r0, [pc, #372]	; (80032e8 <aiSystemPerformanceProcess+0x500>)
 8003174:	f000 fb4e 	bl	8003814 <lc_print>
        LC_PRINT("  [p,P]      pause\r\n");
 8003178:	485c      	ldr	r0, [pc, #368]	; (80032ec <aiSystemPerformanceProcess+0x504>)
 800317a:	f000 fb4b 	bl	8003814 <lc_print>
        LC_PRINT("  [d,D]      hide detailed information ('r' to restore)\r\n");
 800317e:	485c      	ldr	r0, [pc, #368]	; (80032f0 <aiSystemPerformanceProcess+0x508>)
 8003180:	f000 fb48 	bl	8003814 <lc_print>
        LC_PRINT("  [h,H,?]    this information\r\n");
 8003184:	485b      	ldr	r0, [pc, #364]	; (80032f4 <aiSystemPerformanceProcess+0x50c>)
 8003186:	f000 fb45 	bl	8003814 <lc_print>
        LC_PRINT("   xx        continue immediately\r\n");
 800318a:	485b      	ldr	r0, [pc, #364]	; (80032f8 <aiSystemPerformanceProcess+0x510>)
 800318c:	f000 fb42 	bl	8003814 <lc_print>
        LC_PRINT("\r\n");
 8003190:	4845      	ldr	r0, [pc, #276]	; (80032a8 <aiSystemPerformanceProcess+0x4c0>)
 8003192:	f000 fb3f 	bl	8003814 <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 8003196:	4859      	ldr	r0, [pc, #356]	; (80032fc <aiSystemPerformanceProcess+0x514>)
 8003198:	f000 fb3c 	bl	8003814 <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 800319c:	f7ff fbea 	bl	8002974 <aiTestConsole>
 80031a0:	2800      	cmp	r0, #0
 80031a2:	d06f      	beq.n	8003284 <aiSystemPerformanceProcess+0x49c>
        if (r == CONS_EVT_UNDEFINED)
 80031a4:	2864      	cmp	r0, #100	; 0x64
 80031a6:	f43f ae26 	beq.w	8002df6 <aiSystemPerformanceProcess+0xe>
      if (r == CONS_EVT_PROF) {
 80031aa:	2805      	cmp	r0, #5
 80031ac:	d16f      	bne.n	800328e <aiSystemPerformanceProcess+0x4a6>
        profiling_mode = true;
 80031ae:	4b54      	ldr	r3, [pc, #336]	; (8003300 <aiSystemPerformanceProcess+0x518>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	701a      	strb	r2, [r3, #0]
        profiling_factor *= 2;
 80031b4:	4a53      	ldr	r2, [pc, #332]	; (8003304 <aiSystemPerformanceProcess+0x51c>)
 80031b6:	6813      	ldr	r3, [r2, #0]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	6013      	str	r3, [r2, #0]
  } while (r==0);
 80031bc:	e61b      	b.n	8002df6 <aiSystemPerformanceProcess+0xe>
 80031be:	e9cd 3208 	strd	r3, r2, [sp, #32]
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 80031c2:	f005 fbc9 	bl	8008958 <rand>
 80031c6:	ee07 0a90 	vmov	s15, r0
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 80031ca:	9b05      	ldr	r3, [sp, #20]
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 80031cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 80031d0:	2b01      	cmp	r3, #1
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 80031d2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80031d6:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 80031da:	e9dd 3208 	ldrd	r3, r2, [sp, #32]
        const float v = 2.0f * (ai_float) rand() / (ai_float) RAND_MAX - 1.0f;
 80031de:	eee7 7a08 	vfma.f32	s15, s14, s16
        if  (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT) {
 80031e2:	d106      	bne.n	80031f2 <aiSystemPerformanceProcess+0x40a>
          *(ai_float *)(in_data + j * 4) = v;
 80031e4:	eb02 0189 	add.w	r1, r2, r9, lsl #2
 80031e8:	edc1 7a00 	vstr	s15, [r1]
      for (ai_size j = 0; j < AI_BUFFER_SIZE(&ai_input[i]); ++j) {
 80031ec:	f109 0901 	add.w	r9, r9, #1
 80031f0:	e6d4      	b.n	8002f9c <aiSystemPerformanceProcess+0x1b4>
          if (AI_BUFFER_FMT_GET_BITS(fmt) >= 8) {
 80031f2:	9907      	ldr	r1, [sp, #28]
 80031f4:	2900      	cmp	r1, #0
 80031f6:	d0f9      	beq.n	80031ec <aiSystemPerformanceProcess+0x404>
            in_data[j] = (ai_i8)(v * 127);
 80031f8:	ee67 7aa8 	vmul.f32	s15, s15, s17
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 80031fc:	9805      	ldr	r0, [sp, #20]
 80031fe:	2803      	cmp	r0, #3
            in_data[j] = (ai_i8)(v * 127);
 8003200:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003204:	edcd 7a08 	vstr	s15, [sp, #32]
 8003208:	f99d 1020 	ldrsb.w	r1, [sp, #32]
            if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 800320c:	d002      	beq.n	8003214 <aiSystemPerformanceProcess+0x42c>
              in_data[j] = (in_data[j] > 0)?(ai_i8)1:(ai_i8)0;
 800320e:	f802 1009 	strb.w	r1, [r2, r9]
 8003212:	e7eb      	b.n	80031ec <aiSystemPerformanceProcess+0x404>
 8003214:	2900      	cmp	r1, #0
 8003216:	bfd4      	ite	le
 8003218:	2100      	movle	r1, #0
 800321a:	2101      	movgt	r1, #1
 800321c:	e7f7      	b.n	800320e <aiSystemPerformanceProcess+0x426>
    tend = cyclesCounterEnd();
 800321e:	f7ff fb21 	bl	8002864 <cyclesCounterEnd>
    MON_ALLOC_DISABLE();
 8003222:	f8d9 3000 	ldr.w	r3, [r9]
    dwtCyclesToTime(tend, &t);
 8003226:	aa0a      	add	r2, sp, #40	; 0x28
    MON_ALLOC_DISABLE();
 8003228:	f023 0301 	bic.w	r3, r3, #1
 800322c:	f8c9 3000 	str.w	r3, [r9]
    tcumul += tend;
 8003230:	1943      	adds	r3, r0, r5
 8003232:	461d      	mov	r5, r3
 8003234:	eb4a 0a01 	adc.w	sl, sl, r1
    dwtCyclesToTime(tend, &t);
 8003238:	f000 fb78 	bl	800392c <dwtCyclesToTime>
    if (!profiling_mode) {
 800323c:	4b30      	ldr	r3, [pc, #192]	; (8003300 <aiSystemPerformanceProcess+0x518>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	b95b      	cbnz	r3, 800325a <aiSystemPerformanceProcess+0x472>
      if (t.s > 10)
 8003242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
      LC_PRINT(".");
 8003244:	4830      	ldr	r0, [pc, #192]	; (8003308 <aiSystemPerformanceProcess+0x520>)
      if (t.s > 10)
 8003246:	2b0a      	cmp	r3, #10
 8003248:	bfc8      	it	gt
 800324a:	46b0      	movgt	r8, r6
      LC_PRINT(".");
 800324c:	f000 fae2 	bl	8003814 <lc_print>
      fflush(stdout);
 8003250:	4b2e      	ldr	r3, [pc, #184]	; (800330c <aiSystemPerformanceProcess+0x524>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6898      	ldr	r0, [r3, #8]
 8003256:	f006 f8a7 	bl	80093a8 <fflush>
  for (iter = 0; iter < niter; iter++) {
 800325a:	3601      	adds	r6, #1
 800325c:	e658      	b.n	8002f10 <aiSystemPerformanceProcess+0x128>
  MON_STACK_EVALUATE();
 800325e:	3004      	adds	r0, #4
 8003260:	3304      	adds	r3, #4
 8003262:	6090      	str	r0, [r2, #8]
 8003264:	e6ef      	b.n	8003046 <aiSystemPerformanceProcess+0x25e>
 8003266:	f04f 33ff 	mov.w	r3, #4294967295
 800326a:	4649      	mov	r1, r9
 800326c:	4828      	ldr	r0, [pc, #160]	; (8003310 <aiSystemPerformanceProcess+0x528>)
 800326e:	6093      	str	r3, [r2, #8]
 8003270:	f000 fad0 	bl	8003814 <lc_print>
 8003274:	4827      	ldr	r0, [pc, #156]	; (8003314 <aiSystemPerformanceProcess+0x52c>)
 8003276:	f000 facd 	bl	8003814 <lc_print>
 800327a:	e6ef      	b.n	800305c <aiSystemPerformanceProcess+0x274>
  MON_STACK_REPORT();
 800327c:	4826      	ldr	r0, [pc, #152]	; (8003318 <aiSystemPerformanceProcess+0x530>)
 800327e:	f000 fac9 	bl	8003814 <lc_print>
 8003282:	e74c      	b.n	800311e <aiSystemPerformanceProcess+0x336>
          port_hal_delay(1000);
 8003284:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003288:	f7fe f86a 	bl	8001360 <HAL_Delay>
 800328c:	e786      	b.n	800319c <aiSystemPerformanceProcess+0x3b4>
      if (r == CONS_EVT_HIDE) {
 800328e:	2806      	cmp	r0, #6
 8003290:	d146      	bne.n	8003320 <aiSystemPerformanceProcess+0x538>
        observer_mode = false;
 8003292:	4b22      	ldr	r3, [pc, #136]	; (800331c <aiSystemPerformanceProcess+0x534>)
 8003294:	2200      	movs	r2, #0
 8003296:	701a      	strb	r2, [r3, #0]
  } while (r==0);
 8003298:	e5ad      	b.n	8002df6 <aiSystemPerformanceProcess+0xe>
 800329a:	bf00      	nop
 800329c:	200008d0 	.word	0x200008d0
 80032a0:	e0001000 	.word	0xe0001000
 80032a4:	0800b69d 	.word	0x0800b69d
 80032a8:	0800b6af 	.word	0x0800b6af
 80032ac:	200008f8 	.word	0x200008f8
 80032b0:	200008a8 	.word	0x200008a8
 80032b4:	000f4240 	.word	0x000f4240
 80032b8:	0800b72f 	.word	0x0800b72f
 80032bc:	0800b776 	.word	0x0800b776
 80032c0:	0800b79d 	.word	0x0800b79d
 80032c4:	0800b7be 	.word	0x0800b7be
 80032c8:	0800b7e7 	.word	0x0800b7e7
 80032cc:	0800b81a 	.word	0x0800b81a
 80032d0:	200008dc 	.word	0x200008dc
 80032d4:	0800b857 	.word	0x0800b857
 80032d8:	0800b8b0 	.word	0x0800b8b0
 80032dc:	20000810 	.word	0x20000810
 80032e0:	0800b8eb 	.word	0x0800b8eb
 80032e4:	0800b917 	.word	0x0800b917
 80032e8:	0800b93b 	.word	0x0800b93b
 80032ec:	0800b96c 	.word	0x0800b96c
 80032f0:	0800b981 	.word	0x0800b981
 80032f4:	0800b9bb 	.word	0x0800b9bb
 80032f8:	0800b9db 	.word	0x0800b9db
 80032fc:	0800b9ff 	.word	0x0800b9ff
 8003300:	200008a0 	.word	0x200008a0
 8003304:	20000010 	.word	0x20000010
 8003308:	0800b6ad 	.word	0x0800b6ad
 800330c:	200005d0 	.word	0x200005d0
 8003310:	0800b6b2 	.word	0x0800b6b2
 8003314:	0800b6d6 	.word	0x0800b6d6
 8003318:	0800b836 	.word	0x0800b836
 800331c:	2000000c 	.word	0x2000000c
      if (r == CONS_EVT_RESTART) {
 8003320:	2802      	cmp	r0, #2
 8003322:	d110      	bne.n	8003346 <aiSystemPerformanceProcess+0x55e>
        profiling_mode = false;
 8003324:	4b1f      	ldr	r3, [pc, #124]	; (80033a4 <aiSystemPerformanceProcess+0x5bc>)
 8003326:	2200      	movs	r2, #0
        LC_PRINT("\r\n");
 8003328:	481f      	ldr	r0, [pc, #124]	; (80033a8 <aiSystemPerformanceProcess+0x5c0>)
        profiling_mode = false;
 800332a:	701a      	strb	r2, [r3, #0]
        observer_mode = true;
 800332c:	2201      	movs	r2, #1
 800332e:	4b1f      	ldr	r3, [pc, #124]	; (80033ac <aiSystemPerformanceProcess+0x5c4>)
 8003330:	701a      	strb	r2, [r3, #0]
        profiling_factor = 5;
 8003332:	2205      	movs	r2, #5
 8003334:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <aiSystemPerformanceProcess+0x5c8>)
 8003336:	601a      	str	r2, [r3, #0]
        LC_PRINT("\r\n");
 8003338:	f000 fa6c 	bl	8003814 <lc_print>
        aiDeInit();
 800333c:	f7ff fb00 	bl	8002940 <aiDeInit>
        aiSystemPerformanceInit();
 8003340:	f7ff fc9a 	bl	8002c78 <aiSystemPerformanceInit>
      if (r == CONS_EVT_PAUSE) {
 8003344:	e557      	b.n	8002df6 <aiSystemPerformanceProcess+0xe>
      if (r == CONS_EVT_QUIT) {
 8003346:	2801      	cmp	r0, #1
 8003348:	d115      	bne.n	8003376 <aiSystemPerformanceProcess+0x58e>
        profiling_mode = false;
 800334a:	4b16      	ldr	r3, [pc, #88]	; (80033a4 <aiSystemPerformanceProcess+0x5bc>)
 800334c:	2200      	movs	r2, #0
        LC_PRINT("\r\n");
 800334e:	4816      	ldr	r0, [pc, #88]	; (80033a8 <aiSystemPerformanceProcess+0x5c0>)
        profiling_mode = false;
 8003350:	701a      	strb	r2, [r3, #0]
        LC_PRINT("\r\n");
 8003352:	f000 fa5f 	bl	8003814 <lc_print>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003356:	f3ef 8310 	mrs	r3, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 800335a:	b672      	cpsid	i
        aiDeInit();
 800335c:	f7ff faf0 	bl	8002940 <aiDeInit>
        LC_PRINT("\r\n");
 8003360:	4811      	ldr	r0, [pc, #68]	; (80033a8 <aiSystemPerformanceProcess+0x5c0>)
 8003362:	f000 fa57 	bl	8003814 <lc_print>
        LC_PRINT("Board should be reseted...\r\n");
 8003366:	4813      	ldr	r0, [pc, #76]	; (80033b4 <aiSystemPerformanceProcess+0x5cc>)
 8003368:	f000 fa54 	bl	8003814 <lc_print>
          port_hal_delay(1000);
 800336c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003370:	f7fd fff6 	bl	8001360 <HAL_Delay>
        while (1) {
 8003374:	e7fa      	b.n	800336c <aiSystemPerformanceProcess+0x584>
      if (r == CONS_EVT_PAUSE) {
 8003376:	2804      	cmp	r0, #4
 8003378:	d003      	beq.n	8003382 <aiSystemPerformanceProcess+0x59a>
  } while (r==0);
 800337a:	2800      	cmp	r0, #0
 800337c:	f43f ad3b 	beq.w	8002df6 <aiSystemPerformanceProcess+0xe>
 8003380:	e541      	b.n	8002e06 <aiSystemPerformanceProcess+0x1e>
        LC_PRINT("\r\n");
 8003382:	4809      	ldr	r0, [pc, #36]	; (80033a8 <aiSystemPerformanceProcess+0x5c0>)
 8003384:	f000 fa46 	bl	8003814 <lc_print>
        LC_PRINT("Press any key to continue..\r\n");
 8003388:	480b      	ldr	r0, [pc, #44]	; (80033b8 <aiSystemPerformanceProcess+0x5d0>)
 800338a:	f000 fa43 	bl	8003814 <lc_print>
        while ((r = aiTestConsole()) == CONS_EVT_TIMEOUT) {
 800338e:	f7ff faf1 	bl	8002974 <aiTestConsole>
 8003392:	2800      	cmp	r0, #0
 8003394:	f47f ad2f 	bne.w	8002df6 <aiSystemPerformanceProcess+0xe>
          port_hal_delay(1000);
 8003398:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800339c:	f7fd ffe0 	bl	8001360 <HAL_Delay>
 80033a0:	e7f5      	b.n	800338e <aiSystemPerformanceProcess+0x5a6>
 80033a2:	bf00      	nop
 80033a4:	200008a0 	.word	0x200008a0
 80033a8:	0800b6af 	.word	0x0800b6af
 80033ac:	2000000c 	.word	0x2000000c
 80033b0:	20000010 	.word	0x20000010
 80033b4:	0800ba1d 	.word	0x0800ba1d
 80033b8:	0800b9ff 	.word	0x0800b9ff

080033bc <aiPlatformVersion>:

#include <ai_platform_interface.h>


void aiPlatformVersion(void)
{
 80033bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 80033be:	f001 fb03 	bl	80049c8 <ai_platform_runtime_get_version>

  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 80033c2:	f3c0 4307 	ubfx	r3, r0, #16, #8
 80033c6:	2201      	movs	r2, #1
 80033c8:	9302      	str	r3, [sp, #8]
 80033ca:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80033ce:	b2c0      	uxtb	r0, r0
 80033d0:	4611      	mov	r1, r2
 80033d2:	9301      	str	r3, [sp, #4]
 80033d4:	2300      	movs	r3, #0
 80033d6:	9000      	str	r0, [sp, #0]
 80033d8:	4802      	ldr	r0, [pc, #8]	; (80033e4 <aiPlatformVersion+0x28>)
 80033da:	f000 fa1b 	bl	8003814 <lc_print>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      rt_ver.major,
      rt_ver.minor,
      rt_ver.micro);
}
 80033de:	b007      	add	sp, #28
 80033e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80033e4:	0800ba48 	.word	0x0800ba48

080033e8 <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 80033e8:	b410      	push	{r4}
  if (fct)
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80033ea:	f3c0 2317 	ubfx	r3, r0, #8, #24
 80033ee:	b2c4      	uxtb	r4, r0
  if (fct)
 80033f0:	b129      	cbz	r1, 80033fe <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80033f2:	4622      	mov	r2, r4
 80033f4:	4805      	ldr	r0, [pc, #20]	; (800340c <aiLogErr+0x24>)
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 80033f6:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80033fa:	f000 ba0b 	b.w	8003814 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80033fe:	4621      	mov	r1, r4
 8003400:	461a      	mov	r2, r3
 8003402:	4803      	ldr	r0, [pc, #12]	; (8003410 <aiLogErr+0x28>)
}
 8003404:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8003408:	f000 ba04 	b.w	8003814 <lc_print>
 800340c:	0800ba7a 	.word	0x0800ba7a
 8003410:	0800baa7 	.word	0x0800baa7

08003414 <aiPrintBufferInfo>:
void aiPrintBufferInfo(const ai_buffer *buffer)
{
  const ai_buffer_format fmt = buffer->format;

  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,",
 8003414:	6981      	ldr	r1, [r0, #24]
{
 8003416:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800341a:	4604      	mov	r4, r0
  const ai_buffer_format fmt = buffer->format;
 800341c:	6806      	ldr	r6, [r0, #0]
  LC_PRINT("(%d,%d,%d,",
 800341e:	4870      	ldr	r0, [pc, #448]	; (80035e0 <aiPrintBufferInfo+0x1cc>)
 8003420:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
{
 8003424:	ed2d 8b02 	vpush	{d8}
  LC_PRINT("(%d,%d,%d,",
 8003428:	6809      	ldr	r1, [r1, #0]
{
 800342a:	b083      	sub	sp, #12
  LC_PRINT("(%d,%d,%d,",
 800342c:	f000 f9f2 	bl	8003814 <lc_print>
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH));

  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 8003430:	6962      	ldr	r2, [r4, #20]
 8003432:	69a0      	ldr	r0, [r4, #24]
 8003434:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003438:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800343c:	d119      	bne.n	8003472 <aiPrintBufferInfo+0x5e>
  {
    LC_PRINT("%d,%d)",
 800343e:	6842      	ldr	r2, [r0, #4]
 8003440:	6901      	ldr	r1, [r0, #16]
 8003442:	4868      	ldr	r0, [pc, #416]	; (80035e4 <aiPrintBufferInfo+0x1d0>)
 8003444:	f000 f9e6 	bl	8003814 <lc_print>
  } else
  {
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
  }

  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8003448:	2101      	movs	r1, #1
 800344a:	4620      	mov	r0, r4
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800344c:	f3c6 4743 	ubfx	r7, r6, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8003450:	f001 f880 	bl	8004554 <ai_buffer_get_size>
 8003454:	4601      	mov	r1, r0
 8003456:	4864      	ldr	r0, [pc, #400]	; (80035e8 <aiPrintBufferInfo+0x1d4>)
 8003458:	f000 f9dc 	bl	8003814 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 800345c:	2f01      	cmp	r7, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800345e:	ea4f 18e6 	mov.w	r8, r6, asr #7
 8003462:	f3c6 15c6 	ubfx	r5, r6, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8003466:	d113      	bne.n	8003490 <aiPrintBufferInfo+0x7c>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003468:	4629      	mov	r1, r5
 800346a:	4860      	ldr	r0, [pc, #384]	; (80035ec <aiPrintBufferInfo+0x1d8>)
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
      }
      LC_PRINT((s_ > max_)?"..":"");
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
      /* lower of 8b format */
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800346c:	f000 f9d2 	bl	8003814 <lc_print>
 8003470:	e044      	b.n	80034fc <aiPrintBufferInfo+0xe8>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8003472:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 8003476:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8003478:	d105      	bne.n	8003486 <aiPrintBufferInfo+0x72>
    LC_PRINT("%d,%d,%d)",
 800347a:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 800347e:	485c      	ldr	r0, [pc, #368]	; (80035f0 <aiPrintBufferInfo+0x1dc>)
 8003480:	f000 f9c8 	bl	8003814 <lc_print>
 8003484:	e7e0      	b.n	8003448 <aiPrintBufferInfo+0x34>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 8003486:	4619      	mov	r1, r3
 8003488:	485a      	ldr	r0, [pc, #360]	; (80035f4 <aiPrintBufferInfo+0x1e0>)
 800348a:	f000 f9c3 	bl	8003814 <lc_print>
 800348e:	e7db      	b.n	8003448 <aiPrintBufferInfo+0x34>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8003490:	2f03      	cmp	r7, #3
 8003492:	d102      	bne.n	800349a <aiPrintBufferInfo+0x86>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8003494:	4629      	mov	r1, r5
 8003496:	4858      	ldr	r0, [pc, #352]	; (80035f8 <aiPrintBufferInfo+0x1e4>)
 8003498:	e7e8      	b.n	800346c <aiPrintBufferInfo+0x58>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 800349a:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8003614 <aiPrintBufferInfo+0x200>
 800349e:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
 80034a2:	462a      	mov	r2, r5
 80034a4:	f109 0102 	add.w	r1, r9, #2
 80034a8:	f109 003b 	add.w	r0, r9, #59	; 0x3b
 80034ac:	bf18      	it	ne
 80034ae:	4649      	movne	r1, r9
 80034b0:	f000 f9b0 	bl	8003814 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 80034b4:	2f02      	cmp	r7, #2
 80034b6:	d121      	bne.n	80034fc <aiPrintBufferInfo+0xe8>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 80034b8:	68a3      	ldr	r3, [r4, #8]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d06a      	beq.n	8003594 <aiPrintBufferInfo+0x180>
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	07d2      	lsls	r2, r2, #31
 80034c2:	d567      	bpl.n	8003594 <aiPrintBufferInfo+0x180>
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d064      	beq.n	8003594 <aiPrintBufferInfo+0x180>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 80034ca:	f8b3 8002 	ldrh.w	r8, [r3, #2]
      LC_PRINT(" %d:", s_);
 80034ce:	f109 0040 	add.w	r0, r9, #64	; 0x40
      for (int idx=0; idx<max_; idx++) {
 80034d2:	2500      	movs	r5, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80034d4:	ed9f 8a49 	vldr	s16, [pc, #292]	; 80035fc <aiPrintBufferInfo+0x1e8>
      const int max_ = s_> 4?4:s_;
 80034d8:	4647      	mov	r7, r8
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 80034da:	f109 0945 	add.w	r9, r9, #69	; 0x45
      LC_PRINT(" %d:", s_);
 80034de:	4641      	mov	r1, r8
      const int max_ = s_> 4?4:s_;
 80034e0:	2f04      	cmp	r7, #4
 80034e2:	bf28      	it	cs
 80034e4:	2704      	movcs	r7, #4
      LC_PRINT(" %d:", s_);
 80034e6:	f000 f995 	bl	8003814 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 80034ea:	42bd      	cmp	r5, r7
 80034ec:	db1a      	blt.n	8003524 <aiPrintBufferInfo+0x110>
      LC_PRINT((s_ > max_)?"..":"");
 80034ee:	4b44      	ldr	r3, [pc, #272]	; (8003600 <aiPrintBufferInfo+0x1ec>)
 80034f0:	1cd8      	adds	r0, r3, #3
 80034f2:	4547      	cmp	r7, r8
 80034f4:	bf38      	it	cc
 80034f6:	4618      	movcc	r0, r3
 80034f8:	f000 f98c 	bl	8003814 <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 80034fc:	6865      	ldr	r5, [r4, #4]
    LC_PRINT(" @0x%X/%d",
 80034fe:	2101      	movs	r1, #1
 8003500:	4620      	mov	r0, r4
  if (buffer->data)
 8003502:	2d00      	cmp	r5, #0
 8003504:	d057      	beq.n	80035b6 <aiPrintBufferInfo+0x1a2>
    LC_PRINT(" @0x%X/%d",
 8003506:	f001 f825 	bl	8004554 <ai_buffer_get_size>
 800350a:	4631      	mov	r1, r6
 800350c:	f001 f856 	bl	80045bc <ai_buffer_get_byte_size>
 8003510:	4629      	mov	r1, r5
 8003512:	4602      	mov	r2, r0
 8003514:	483b      	ldr	r0, [pc, #236]	; (8003604 <aiPrintBufferInfo+0x1f0>)
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 8003516:	b003      	add	sp, #12
 8003518:	ecbd 8b02 	vpop	{d8}
 800351c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" @0x%X/%d",
 8003520:	f000 b978 	b.w	8003814 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003524:	68a2      	ldr	r2, [r4, #8]
 8003526:	2a00      	cmp	r2, #0
 8003528:	d053      	beq.n	80035d2 <aiPrintBufferInfo+0x1be>
 800352a:	6813      	ldr	r3, [r2, #0]
 800352c:	f013 0301 	ands.w	r3, r3, #1
 8003530:	d02b      	beq.n	800358a <aiPrintBufferInfo+0x176>
 8003532:	6852      	ldr	r2, [r2, #4]
 8003534:	2a00      	cmp	r2, #0
 8003536:	d04c      	beq.n	80035d2 <aiPrintBufferInfo+0x1be>
 8003538:	6853      	ldr	r3, [r2, #4]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d04d      	beq.n	80035da <aiPrintBufferInfo+0x1c6>
 800353e:	8851      	ldrh	r1, [r2, #2]
 8003540:	42a9      	cmp	r1, r5
 8003542:	dd4a      	ble.n	80035da <aiPrintBufferInfo+0x1c6>
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800354a:	edd3 7a00 	vldr	s15, [r3]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800354e:	2a00      	cmp	r2, #0
 8003550:	d041      	beq.n	80035d6 <aiPrintBufferInfo+0x1c2>
 8003552:	8813      	ldrh	r3, [r2, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8003554:	6851      	ldr	r1, [r2, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003556:	f013 0302 	ands.w	r3, r3, #2
 800355a:	d00f      	beq.n	800357c <aiPrintBufferInfo+0x168>
 800355c:	b1c1      	cbz	r1, 8003590 <aiPrintBufferInfo+0x17c>
 800355e:	8853      	ldrh	r3, [r2, #2]
 8003560:	42ab      	cmp	r3, r5
 8003562:	dd38      	ble.n	80035d6 <aiPrintBufferInfo+0x1c2>
 8003564:	684b      	ldr	r3, [r1, #4]
 8003566:	5d5b      	ldrb	r3, [r3, r5]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8003568:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	4648      	mov	r0, r9
      for (int idx=0; idx<max_; idx++) {
 8003570:	3501      	adds	r5, #1
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8003572:	ec53 2b17 	vmov	r2, r3, d7
 8003576:	f000 f94d 	bl	8003814 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 800357a:	e7b6      	b.n	80034ea <aiPrintBufferInfo+0xd6>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 800357c:	b141      	cbz	r1, 8003590 <aiPrintBufferInfo+0x17c>
 800357e:	8852      	ldrh	r2, [r2, #2]
 8003580:	42aa      	cmp	r2, r5
 8003582:	ddf1      	ble.n	8003568 <aiPrintBufferInfo+0x154>
 8003584:	684b      	ldr	r3, [r1, #4]
 8003586:	575b      	ldrsb	r3, [r3, r5]
 8003588:	e7ee      	b.n	8003568 <aiPrintBufferInfo+0x154>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 800358a:	eef0 7a48 	vmov.f32	s15, s16
 800358e:	e7eb      	b.n	8003568 <aiPrintBufferInfo+0x154>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8003590:	460b      	mov	r3, r1
 8003592:	e7e9      	b.n	8003568 <aiPrintBufferInfo+0x154>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 8003594:	f018 0f78 	tst.w	r8, #120	; 0x78
 8003598:	d102      	bne.n	80035a0 <aiPrintBufferInfo+0x18c>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 800359a:	4629      	mov	r1, r5
 800359c:	481a      	ldr	r0, [pc, #104]	; (8003608 <aiPrintBufferInfo+0x1f4>)
 800359e:	e765      	b.n	800346c <aiPrintBufferInfo+0x58>
      LC_PRINT(" Q%d.%d",
 80035a0:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 80035a4:	f3c6 51c0 	ubfx	r1, r6, #23, #1
 80035a8:	4818      	ldr	r0, [pc, #96]	; (800360c <aiPrintBufferInfo+0x1f8>)
 80035aa:	3a40      	subs	r2, #64	; 0x40
 80035ac:	4411      	add	r1, r2
 80035ae:	1a69      	subs	r1, r5, r1
 80035b0:	f000 f930 	bl	8003814 <lc_print>
 80035b4:	e7a2      	b.n	80034fc <aiPrintBufferInfo+0xe8>
    LC_PRINT(" (User Domain)/%d",
 80035b6:	f000 ffcd 	bl	8004554 <ai_buffer_get_size>
 80035ba:	4631      	mov	r1, r6
 80035bc:	f000 fffe 	bl	80045bc <ai_buffer_get_byte_size>
 80035c0:	4601      	mov	r1, r0
 80035c2:	4813      	ldr	r0, [pc, #76]	; (8003610 <aiPrintBufferInfo+0x1fc>)
}
 80035c4:	b003      	add	sp, #12
 80035c6:	ecbd 8b02 	vpop	{d8}
 80035ca:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" (User Domain)/%d",
 80035ce:	f000 b921 	b.w	8003814 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80035d2:	eef0 7a48 	vmov.f32	s15, s16
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 80035d6:	2300      	movs	r3, #0
 80035d8:	e7c6      	b.n	8003568 <aiPrintBufferInfo+0x154>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 80035da:	eef0 7a48 	vmov.f32	s15, s16
 80035de:	e7b6      	b.n	800354e <aiPrintBufferInfo+0x13a>
 80035e0:	0800bad7 	.word	0x0800bad7
 80035e4:	0800bae2 	.word	0x0800bae2
 80035e8:	0800baf7 	.word	0x0800baf7
 80035ec:	0800bafb 	.word	0x0800bafb
 80035f0:	0800bae9 	.word	0x0800bae9
 80035f4:	0800baf3 	.word	0x0800baf3
 80035f8:	0800bb03 	.word	0x0800bb03
 80035fc:	00000000 	.word	0x00000000
 8003600:	0800bad3 	.word	0x0800bad3
 8003604:	0800bb30 	.word	0x0800bb30
 8003608:	0800bb1d 	.word	0x0800bb1d
 800360c:	0800bb28 	.word	0x0800bb28
 8003610:	0800bb3a 	.word	0x0800bb3a
 8003614:	0800bacf 	.word	0x0800bacf

08003618 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8003618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800361c:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 800361e:	484b      	ldr	r0, [pc, #300]	; (800374c <aiPrintNetworkInfo+0x134>)
 8003620:	f000 f8f8 	bl	8003814 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8003624:	484a      	ldr	r0, [pc, #296]	; (8003750 <aiPrintNetworkInfo+0x138>)
 8003626:	6821      	ldr	r1, [r4, #0]
 8003628:	f000 f8f4 	bl	8003814 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 800362c:	6861      	ldr	r1, [r4, #4]
 800362e:	4849      	ldr	r0, [pc, #292]	; (8003754 <aiPrintNetworkInfo+0x13c>)
 8003630:	f000 f8f0 	bl	8003814 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8003634:	68a1      	ldr	r1, [r4, #8]
 8003636:	4848      	ldr	r0, [pc, #288]	; (8003758 <aiPrintNetworkInfo+0x140>)
 8003638:	f000 f8ec 	bl	8003814 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 800363c:	68e1      	ldr	r1, [r4, #12]
 800363e:	4847      	ldr	r0, [pc, #284]	; (800375c <aiPrintNetworkInfo+0x144>)
 8003640:	f000 f8e8 	bl	8003814 <lc_print>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
#endif
  if (report->tool_revision[0])
 8003644:	69a1      	ldr	r1, [r4, #24]
 8003646:	780b      	ldrb	r3, [r1, #0]
 8003648:	b113      	cbz	r3, 8003650 <aiPrintNetworkInfo+0x38>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 800364a:	4845      	ldr	r0, [pc, #276]	; (8003760 <aiPrintNetworkInfo+0x148>)
 800364c:	f000 f8e2 	bl	8003814 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8003650:	7f21      	ldrb	r1, [r4, #28]
      report->tool_version.micro);
  LC_PRINT(" complexity         : " "%" PRIu64 " MACC\r\n", report->n_macc);
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003652:	2500      	movs	r5, #0
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8003654:	7fa3      	ldrb	r3, [r4, #30]
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8003656:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 800365a:	7f62      	ldrb	r2, [r4, #29]
 800365c:	4841      	ldr	r0, [pc, #260]	; (8003764 <aiPrintNetworkInfo+0x14c>)
      LC_PRINT("  [%d] ", idx);
 800365e:	4f42      	ldr	r7, [pc, #264]	; (8003768 <aiPrintNetworkInfo+0x150>)
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8003660:	f000 f8d8 	bl	8003814 <lc_print>
  LC_PRINT(" complexity         : " "%" PRIu64 " MACC\r\n", report->n_macc);
 8003664:	4841      	ldr	r0, [pc, #260]	; (800376c <aiPrintNetworkInfo+0x154>)
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8003666:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" complexity         : " "%" PRIu64 " MACC\r\n", report->n_macc);
 800366a:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 800366e:	f000 f8d1 	bl	8003814 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8003672:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8003674:	483e      	ldr	r0, [pc, #248]	; (8003770 <aiPrintNetworkInfo+0x158>)
 8003676:	f000 f8cd 	bl	8003814 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 800367a:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 800367e:	483d      	ldr	r0, [pc, #244]	; (8003774 <aiPrintNetworkInfo+0x15c>)
 8003680:	f000 f8c8 	bl	8003814 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8003684:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8003688:	42ab      	cmp	r3, r5
 800368a:	dc25      	bgt.n	80036d8 <aiPrintNetworkInfo+0xc0>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
  for (int idx=0; idx<report->map_weights.size;idx++) {
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 800368c:	4f36      	ldr	r7, [pc, #216]	; (8003768 <aiPrintNetworkInfo+0x150>)
  for (int idx=0; idx<report->map_weights.size;idx++) {
 800368e:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8003690:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8003694:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8003698:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 800369c:	4836      	ldr	r0, [pc, #216]	; (8003778 <aiPrintNetworkInfo+0x160>)
 800369e:	f000 f8b9 	bl	8003814 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 80036a2:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 80036a6:	42ab      	cmp	r3, r5
 80036a8:	dc25      	bgt.n	80036f6 <aiPrintNetworkInfo+0xde>
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 80036aa:	4e34      	ldr	r6, [pc, #208]	; (800377c <aiPrintNetworkInfo+0x164>)
  for (int i=0; i<report->n_inputs; i++) {
 80036ac:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 80036ae:	271c      	movs	r7, #28
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80036b0:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    LC_PRINT("\r\n");
 80036b2:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 80036b6:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 80036b8:	4831      	ldr	r0, [pc, #196]	; (8003780 <aiPrintNetworkInfo+0x168>)
 80036ba:	f000 f8ab 	bl	8003814 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 80036be:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 80036c0:	42ab      	cmp	r3, r5
 80036c2:	dc27      	bgt.n	8003714 <aiPrintNetworkInfo+0xfc>
  }

  for (int i=0; i<report->n_outputs; i++) {
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 80036c4:	4e2f      	ldr	r6, [pc, #188]	; (8003784 <aiPrintNetworkInfo+0x16c>)
  for (int i=0; i<report->n_outputs; i++) {
 80036c6:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 80036c8:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 80036ca:	f1a6 0845 	sub.w	r8, r6, #69	; 0x45
  for (int i=0; i<report->n_outputs; i++) {
 80036ce:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 80036d0:	42ab      	cmp	r3, r5
 80036d2:	dc2d      	bgt.n	8003730 <aiPrintNetworkInfo+0x118>
  }
}
 80036d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80036d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
      LC_PRINT("  [%d] ", idx);
 80036da:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 80036dc:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 80036e0:	4638      	mov	r0, r7
 80036e2:	f000 f897 	bl	8003814 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80036e6:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 80036e8:	4630      	mov	r0, r6
 80036ea:	f7ff fe93 	bl	8003414 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 80036ee:	4648      	mov	r0, r9
 80036f0:	f000 f890 	bl	8003814 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 80036f4:	e7c6      	b.n	8003684 <aiPrintNetworkInfo+0x6c>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80036f6:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      LC_PRINT("  [%d] ", idx);
 80036f8:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 80036fa:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 80036fe:	4638      	mov	r0, r7
 8003700:	f000 f888 	bl	8003814 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003704:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 8003706:	4630      	mov	r0, r6
 8003708:	f7ff fe84 	bl	8003414 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 800370c:	4648      	mov	r0, r9
 800370e:	f000 f881 	bl	8003814 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8003712:	e7c6      	b.n	80036a2 <aiPrintNetworkInfo+0x8a>
    LC_PRINT("  I[%d] ", i);
 8003714:	4629      	mov	r1, r5
 8003716:	4630      	mov	r0, r6
 8003718:	f000 f87c 	bl	8003814 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 800371c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800371e:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_inputs; i++) {
 8003722:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->inputs[i]);
 8003724:	f7ff fe76 	bl	8003414 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8003728:	4640      	mov	r0, r8
 800372a:	f000 f873 	bl	8003814 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 800372e:	e7c6      	b.n	80036be <aiPrintNetworkInfo+0xa6>
    LC_PRINT("  O[%d] ", i);
 8003730:	4629      	mov	r1, r5
 8003732:	4630      	mov	r0, r6
 8003734:	f000 f86e 	bl	8003814 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 8003738:	6c20      	ldr	r0, [r4, #64]	; 0x40
 800373a:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_outputs; i++) {
 800373e:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->outputs[i]);
 8003740:	f7ff fe68 	bl	8003414 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8003744:	4640      	mov	r0, r8
 8003746:	f000 f865 	bl	8003814 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 800374a:	e7c0      	b.n	80036ce <aiPrintNetworkInfo+0xb6>
 800374c:	0800bb4c 	.word	0x0800bb4c
 8003750:	0800bb66 	.word	0x0800bb66
 8003754:	0800bb81 	.word	0x0800bb81
 8003758:	0800bb9c 	.word	0x0800bb9c
 800375c:	0800bbb7 	.word	0x0800bbb7
 8003760:	0800bbd2 	.word	0x0800bbd2
 8003764:	0800bbed 	.word	0x0800bbed
 8003768:	0800bc66 	.word	0x0800bc66
 800376c:	0800bc0e 	.word	0x0800bc0e
 8003770:	0800bc30 	.word	0x0800bc30
 8003774:	0800bc4b 	.word	0x0800bc4b
 8003778:	0800bc71 	.word	0x0800bc71
 800377c:	0800bcaa 	.word	0x0800bcaa
 8003780:	0800bc8c 	.word	0x0800bc8c
 8003784:	0800bcb3 	.word	0x0800bcb3

08003788 <_put_c_driver>:
static void _put_c_driver(void *user, const char c)
{
#if defined(HAS_DEDICATED_PRINT_PORT) && HAS_DEDICATED_PRINT_PORT == 1
  port_io_dedicated_putc(c);
#else
  if (_ioWriteAllowed)
 8003788:	4b08      	ldr	r3, [pc, #32]	; (80037ac <_put_c_driver+0x24>)
 800378a:	781b      	ldrb	r3, [r3, #0]
{
 800378c:	b507      	push	{r0, r1, r2, lr}
 800378e:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 8003792:	b13b      	cbz	r3, 80037a4 <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003794:	f04f 33ff 	mov.w	r3, #4294967295
 8003798:	2201      	movs	r2, #1
 800379a:	f10d 0107 	add.w	r1, sp, #7
 800379e:	4804      	ldr	r0, [pc, #16]	; (80037b0 <_put_c_driver+0x28>)
 80037a0:	f7fe ff31 	bl	8002606 <HAL_UART_Transmit>
  }
#ifdef SWO_OUTPUT
  ITM_SendChar(c);
#endif 
#endif
}
 80037a4:	b003      	add	sp, #12
 80037a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80037aa:	bf00      	nop
 80037ac:	20000014 	.word	0x20000014
 80037b0:	20000780 	.word	0x20000780

080037b4 <ioRawGetUint8>:
 {
 80037b4:	b508      	push	{r3, lr}
 80037b6:	460b      	mov	r3, r1
  if (!c)
 80037b8:	4601      	mov	r1, r0
 80037ba:	b120      	cbz	r0, 80037c6 <ioRawGetUint8+0x12>
  status = HAL_UART_Receive(&UartHandle, (uint8_t *)c, 1, timeout);
 80037bc:	2201      	movs	r2, #1
 80037be:	4804      	ldr	r0, [pc, #16]	; (80037d0 <ioRawGetUint8+0x1c>)
 80037c0:	f7fe ff71 	bl	80026a6 <HAL_UART_Receive>
   return port_io_get(c, timeout) == true?1:-1;
 80037c4:	b110      	cbz	r0, 80037cc <ioRawGetUint8+0x18>
 80037c6:	f04f 30ff 	mov.w	r0, #4294967295
 }
 80037ca:	bd08      	pop	{r3, pc}
   return port_io_get(c, timeout) == true?1:-1;
 80037cc:	2001      	movs	r0, #1
 80037ce:	e7fc      	b.n	80037ca <ioRawGetUint8+0x16>
 80037d0:	20000780 	.word	0x20000780

080037d4 <_write>:
{
 80037d4:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 80037d6:	1e14      	subs	r4, r2, #0
 80037d8:	da0a      	bge.n	80037f0 <_write+0x1c>
 80037da:	3801      	subs	r0, #1
 80037dc:	2801      	cmp	r0, #1
 80037de:	d907      	bls.n	80037f0 <_write+0x1c>
    errno = EBADF;
 80037e0:	f005 ff5e 	bl	80096a0 <__errno>
    return -1;
 80037e4:	f04f 34ff 	mov.w	r4, #4294967295
    errno = EBADF;
 80037e8:	2309      	movs	r3, #9
 80037ea:	6003      	str	r3, [r0, #0]
}
 80037ec:	4620      	mov	r0, r4
 80037ee:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 80037f0:	4b06      	ldr	r3, [pc, #24]	; (800380c <_write+0x38>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d0f9      	beq.n	80037ec <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80037f8:	b2a2      	uxth	r2, r4
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
 80037fe:	4804      	ldr	r0, [pc, #16]	; (8003810 <_write+0x3c>)
 8003800:	f7fe ff01 	bl	8002606 <HAL_UART_Transmit>
  return (status ? count : 0);
 8003804:	2800      	cmp	r0, #0
 8003806:	bf18      	it	ne
 8003808:	2400      	movne	r4, #0
 800380a:	e7ef      	b.n	80037ec <_write+0x18>
 800380c:	20000014 	.word	0x20000014
 8003810:	20000780 	.word	0x20000780

08003814 <lc_print>:

void lc_print(const char* fmt, ... )
{
 8003814:	b40f      	push	{r0, r1, r2, r3}
 8003816:	b507      	push	{r0, r1, r2, lr}
 8003818:	ab04      	add	r3, sp, #16
  va_list ap;
  va_start(ap, fmt);
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 800381a:	2100      	movs	r1, #0
 800381c:	4805      	ldr	r0, [pc, #20]	; (8003834 <lc_print+0x20>)
{
 800381e:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 8003822:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 8003824:	f000 fb0e 	bl	8003e44 <vlc_print>
  va_end(ap);
}
 8003828:	b003      	add	sp, #12
 800382a:	f85d eb04 	ldr.w	lr, [sp], #4
 800382e:	b004      	add	sp, #16
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	08003789 	.word	0x08003789

08003838 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8003838:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 800383a:	4d11      	ldr	r5, [pc, #68]	; (8003880 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 800383c:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 800383e:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8003840:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8003844:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8003848:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 800384c:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 800384e:	f004 ff99 	bl	8008784 <malloc>

  /* remember size */
  if (ptr) {
 8003852:	b1a0      	cbz	r0, 800387e <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8003854:	1903      	adds	r3, r0, r4
 8003856:	4a0b      	ldr	r2, [pc, #44]	; (8003884 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8003858:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 800385a:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 800385c:	682b      	ldr	r3, [r5, #0]
 800385e:	07db      	lsls	r3, r3, #31
 8003860:	d50c      	bpl.n	800387c <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8003862:	68eb      	ldr	r3, [r5, #12]
 8003864:	3301      	adds	r3, #1
 8003866:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8003868:	686b      	ldr	r3, [r5, #4]
 800386a:	4423      	add	r3, r4
 800386c:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 800386e:	69ab      	ldr	r3, [r5, #24]
 8003870:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8003872:	696b      	ldr	r3, [r5, #20]
 8003874:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 8003876:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 8003878:	bf88      	it	hi
 800387a:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 800387c:	3004      	adds	r0, #4
}
 800387e:	bd38      	pop	{r3, r4, r5, pc}
 8003880:	200008dc 	.word	0x200008dc
 8003884:	efdcba98 	.word	0xefdcba98

08003888 <__wrap_free>:
void __wrap_free(void *ptr)
{
  uint8_t* p;
  uint32_t bytes;

  io_malloc.cfg |= 1 << 2;
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <__wrap_free+0x44>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	f042 0204 	orr.w	r2, r2, #4
{
 8003890:	b430      	push	{r4, r5}
  io_malloc.cfg |= 1 << 2;
 8003892:	601a      	str	r2, [r3, #0]

  if (!ptr)
 8003894:	4602      	mov	r2, r0
 8003896:	b1b8      	cbz	r0, 80038c8 <__wrap_free+0x40>
    return;

  p = (uint8_t*)ptr - 4;
  bytes = *((uint32_t*)p);
 8003898:	f852 1c04 	ldr.w	r1, [r2, #-4]
  p = (uint8_t*)ptr - 4;
 800389c:	3804      	subs	r0, #4

  if (*((uint32_t*)(p + 4 + bytes)) == MAGIC_MALLOC_NUMBER) {
 800389e:	4c0c      	ldr	r4, [pc, #48]	; (80038d0 <__wrap_free+0x48>)
 80038a0:	5855      	ldr	r5, [r2, r1]
 80038a2:	42a5      	cmp	r5, r4
    *((uint32_t*)(p + 4 + bytes)) = 0;
 80038a4:	bf04      	itt	eq
 80038a6:	2400      	moveq	r4, #0
 80038a8:	5054      	streq	r4, [r2, r1]
  }

  if (io_malloc.cfg & 1UL) {
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	07d2      	lsls	r2, r2, #31
 80038ae:	d508      	bpl.n	80038c2 <__wrap_free+0x3a>
    io_malloc.free_req++;
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	3201      	adds	r2, #1
 80038b4:	611a      	str	r2, [r3, #16]
    io_malloc.free += bytes;
 80038b6:	689a      	ldr	r2, [r3, #8]
 80038b8:	440a      	add	r2, r1
 80038ba:	609a      	str	r2, [r3, #8]
    io_malloc.used -= bytes;
 80038bc:	699a      	ldr	r2, [r3, #24]
 80038be:	1a52      	subs	r2, r2, r1
 80038c0:	619a      	str	r2, [r3, #24]
    if (io_malloc.f_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.f_idx = 0;
#endif
  }
  __real_free(p);
}
 80038c2:	bc30      	pop	{r4, r5}
  __real_free(p);
 80038c4:	f004 bf66 	b.w	8008794 <free>
}
 80038c8:	bc30      	pop	{r4, r5}
 80038ca:	4770      	bx	lr
 80038cc:	200008dc 	.word	0x200008dc
 80038d0:	efdcba98 	.word	0xefdcba98

080038d4 <stackMonInit>:
#endif

struct io_stack io_stack;

void stackMonInit(uint32_t ctrl, uint32_t cstack, uint32_t msize)
{
 80038d4:	b538      	push	{r3, r4, r5, lr}
  memset(&io_stack, 0, sizeof(struct io_stack));
 80038d6:	4c11      	ldr	r4, [pc, #68]	; (800391c <stackMonInit+0x48>)
 80038d8:	2500      	movs	r5, #0
  /* Reading ARM Core registers */
  io_stack.ctrl = ctrl;
  io_stack.cstack = cstack;

#if defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  io_stack.estack = (uint32_t)_estack;
 80038da:	4b11      	ldr	r3, [pc, #68]	; (8003920 <stackMonInit+0x4c>)
  memset(&io_stack, 0, sizeof(struct io_stack));
 80038dc:	60e5      	str	r5, [r4, #12]
  io_stack.estack = (uint32_t)_estack;
 80038de:	6123      	str	r3, [r4, #16]
  io_stack.bstack = io_stack.estack - msize;
 80038e0:	1a9b      	subs	r3, r3, r2
  io_stack.ctrl = ctrl;
 80038e2:	6020      	str	r0, [r4, #0]
  io_stack.bstack = io_stack.estack - msize;
 80038e4:	61e3      	str	r3, [r4, #28]
  io_stack.bstack = (uint32_t)&CSTACK$$Base;
  io_stack.mstack_size = (uint32_t)&CSTACK$$Limit - (uint32_t)&CSTACK$$Base;
#endif

  /* Check that MSP is the active stack */
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 80038e6:	0783      	lsls	r3, r0, #30
  io_stack.cstack = cstack;
 80038e8:	61a1      	str	r1, [r4, #24]
  io_stack.mstack_size = msize;
 80038ea:	6162      	str	r2, [r4, #20]
  memset(&io_stack, 0, sizeof(struct io_stack));
 80038ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
  if (io_stack.ctrl & CONTROL_SPSEL_Msk) {
 80038f0:	d511      	bpl.n	8003916 <stackMonInit+0x42>
    LC_PRINT("E: MSP is not the active stack (stack monitoring is disabled)\r\n");
 80038f2:	480c      	ldr	r0, [pc, #48]	; (8003924 <stackMonInit+0x50>)
 80038f4:	f7ff ff8e 	bl	8003814 <lc_print>
    io_stack.stack_mon = false;
  } else
    io_stack.stack_mon = true;

  /* Calculating used stack before test */
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 80038f8:	6921      	ldr	r1, [r4, #16]
 80038fa:	69a3      	ldr	r3, [r4, #24]
    io_stack.stack_mon = false;
 80038fc:	7125      	strb	r5, [r4, #4]
  io_stack.ustack_size = io_stack.estack - io_stack.cstack;
 80038fe:	1ac9      	subs	r1, r1, r3
 8003900:	60e1      	str	r1, [r4, #12]

  if ((io_stack.stack_mon) && (io_stack.ustack_size > io_stack.mstack_size)) {
 8003902:	b13d      	cbz	r5, 8003914 <stackMonInit+0x40>
 8003904:	6962      	ldr	r2, [r4, #20]
 8003906:	4291      	cmp	r1, r2
 8003908:	d904      	bls.n	8003914 <stackMonInit+0x40>
    LC_PRINT("E: !stack overflow detected %d > %d\r\n", (int)io_stack.ustack_size,
 800390a:	4807      	ldr	r0, [pc, #28]	; (8003928 <stackMonInit+0x54>)
 800390c:	f7ff ff82 	bl	8003814 <lc_print>
        (int)io_stack.mstack_size);
    io_stack.stack_mon = false;
 8003910:	2300      	movs	r3, #0
 8003912:	7123      	strb	r3, [r4, #4]
  }
}
 8003914:	bd38      	pop	{r3, r4, r5, pc}
 8003916:	2501      	movs	r5, #1
 8003918:	e7ee      	b.n	80038f8 <stackMonInit+0x24>
 800391a:	bf00      	nop
 800391c:	200008f8 	.word	0x200008f8
 8003920:	20080000 	.word	0x20080000
 8003924:	0800bcbc 	.word	0x0800bcbc
 8003928:	0800bcfc 	.word	0x0800bcfc

0800392c <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 800392c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003930:	4604      	mov	r4, r0
 8003932:	468a      	mov	sl, r1
  if (!t)
 8003934:	4617      	mov	r7, r2
 8003936:	b382      	cbz	r2, 800399a <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
  uint64_t s  = clks / fcpu;
  uint64_t ms = (clks * 1000) / fcpu;
 8003938:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint32_t fcpu = port_hal_get_cpu_freq();
 800393c:	f7fe f998 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 8003940:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 8003942:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8003944:	9001      	str	r0, [sp, #4]
 8003946:	4651      	mov	r1, sl
 8003948:	4620      	mov	r0, r4
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800394a:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80039a0 <dwtCyclesToTime+0x74>
  uint64_t s  = clks / fcpu;
 800394e:	f7fc fe8b 	bl	8000668 <__aeabi_uldivmod>
 8003952:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8003954:	fba4 0106 	umull	r0, r1, r4, r6
 8003958:	9a01      	ldr	r2, [sp, #4]
 800395a:	2300      	movs	r3, #0
 800395c:	fb06 110a 	mla	r1, r6, sl, r1
 8003960:	f7fc fe82 	bl	8000668 <__aeabi_uldivmod>
  ms -= (s * 1000);
 8003964:	fbab 3106 	umull	r3, r1, fp, r6
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003968:	9a01      	ldr	r2, [sp, #4]
  ms -= (s * 1000);
 800396a:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800396c:	fba4 0109 	umull	r0, r1, r4, r9
 8003970:	2300      	movs	r3, #0
 8003972:	fb09 110a 	mla	r1, r9, sl, r1
  us -= (ms * 1000 + s * 1000000);
 8003976:	fbab 8909 	umull	r8, r9, fp, r9
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 800397a:	f7fc fe75 	bl	8000668 <__aeabi_uldivmod>
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 800397e:	60bd      	str	r5, [r7, #8]
 8003980:	eba0 0008 	sub.w	r0, r0, r8
  us -= (ms * 1000 + s * 1000000);
 8003984:	fba5 5606 	umull	r5, r6, r5, r6
  t->fcpu = fcpu;
 8003988:	9a01      	ldr	r2, [sp, #4]
  us -= (ms * 1000 + s * 1000000);
 800398a:	1b40      	subs	r0, r0, r5
  t->us = us;
 800398c:	60f8      	str	r0, [r7, #12]
  return 0;
 800398e:	2000      	movs	r0, #0
  t->s = s;
 8003990:	e9c7 2b00 	strd	r2, fp, [r7]
}
 8003994:	b003      	add	sp, #12
 8003996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 800399a:	f04f 30ff 	mov.w	r0, #4294967295
 800399e:	e7f9      	b.n	8003994 <dwtCyclesToTime+0x68>
 80039a0:	000f4240 	.word	0x000f4240

080039a4 <getFlashCacheConf>:

#if defined(STM32F7)

  mconf |= MCONF_F7;

  __I uint32_t acr = FLASH->ACR;
 80039a4:	4b11      	ldr	r3, [pc, #68]	; (80039ec <getFlashCacheConf+0x48>)
{
 80039a6:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR;
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	9300      	str	r3, [sp, #0]
  __I uint32_t ccr = SCB->CCR;
 80039ac:	4b10      	ldr	r3, [pc, #64]	; (80039f0 <getFlashCacheConf+0x4c>)
 80039ae:	695b      	ldr	r3, [r3, #20]
 80039b0:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 80039b2:	9800      	ldr	r0, [sp, #0]
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 80039b4:	9b00      	ldr	r3, [sp, #0]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 80039b6:	f000 000f 	and.w	r0, r0, #15
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 80039ba:	05db      	lsls	r3, r3, #23
    mconf |= MCONF_ART_PREF;
  if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 80039bc:	9b00      	ldr	r3, [sp, #0]
    mconf |= MCONF_ART_PREF;
 80039be:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 80039c2:	bf48      	it	mi
 80039c4:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 80039c8:	0599      	lsls	r1, r3, #22
    mconf |= MCONF_ART_EN;

  if (ccr & SCB_CCR_IC_Msk)
 80039ca:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_EN;
 80039cc:	bf48      	it	mi
 80039ce:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if (ccr & SCB_CCR_IC_Msk)
 80039d2:	039a      	lsls	r2, r3, #14
    mconf |= MCONF_CORE_ICACHE;
  if (ccr & SCB_CCR_DC_Msk)
 80039d4:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_CORE_ICACHE;
 80039d6:	bf48      	it	mi
 80039d8:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
  if (ccr & SCB_CCR_DC_Msk)
 80039dc:	03db      	lsls	r3, r3, #15
    mconf |= MCONF_CORE_DCACHE;
 80039de:	bf48      	it	mi
 80039e0:	f440 6000 	orrmi.w	r0, r0, #2048	; 0x800
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 80039e4:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 80039e8:	b002      	add	sp, #8
 80039ea:	4770      	bx	lr
 80039ec:	40023c00 	.word	0x40023c00
 80039f0:	e000ed00 	.word	0xe000ed00

080039f4 <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 80039f4:	b510      	push	{r4, lr}
 80039f6:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 80039f8:	f7fe f93a 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 80039fc:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 80039fe:	f7fe f937 	bl	8001c70 <HAL_RCC_GetHCLKFreq>
 8003a02:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 8003a04:	f7ff ffce 	bl	80039a4 <getFlashCacheConf>
 8003a08:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 8003a0a:	f7fd fcc5 	bl	8001398 <HAL_GetDEVID>
 8003a0e:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8003a10:	f7fd fcbc 	bl	800138c <HAL_GetREVID>
 8003a14:	6120      	str	r0, [r4, #16]
}
 8003a16:	bd10      	pop	{r4, pc}

08003a18 <systemSettingLog>:

void systemSettingLog(void)
{
 8003a18:	b570      	push	{r4, r5, r6, lr}
 8003a1a:	b088      	sub	sp, #32
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 8003a1c:	2203      	movs	r2, #3
 8003a1e:	2301      	movs	r3, #1
 8003a20:	210b      	movs	r1, #11
 8003a22:	482d      	ldr	r0, [pc, #180]	; (8003ad8 <systemSettingLog+0xc0>)
 8003a24:	f7ff fef6 	bl	8003814 <lc_print>
  if (!conf)
 8003a28:	a803      	add	r0, sp, #12
 8003a2a:	f7ff ffe3 	bl	80039f4 <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 8003a2e:	482b      	ldr	r0, [pc, #172]	; (8003adc <systemSettingLog+0xc4>)
 8003a30:	f7ff fef0 	bl	8003814 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003a34:	9906      	ldr	r1, [sp, #24]
  switch (dev_id) {
 8003a36:	f46f 6389 	mvn.w	r3, #1096	; 0x448
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003a3a:	4829      	ldr	r0, [pc, #164]	; (8003ae0 <systemSettingLog+0xc8>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8003a3c:	4c29      	ldr	r4, [pc, #164]	; (8003ae4 <systemSettingLog+0xcc>)
 8003a3e:	18cb      	adds	r3, r1, r3
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b09      	cmp	r3, #9
 8003a44:	bf96      	itet	ls
 8003a46:	4a28      	ldrls	r2, [pc, #160]	; (8003ae8 <systemSettingLog+0xd0>)
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 8003a48:	4a28      	ldrhi	r2, [pc, #160]	; (8003aec <systemSettingLog+0xd4>)
 8003a4a:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 8003a4e:	9b07      	ldr	r3, [sp, #28]
 8003a50:	f7ff fee0 	bl	8003814 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 8003a54:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <systemSettingLog+0xd8>)
 8003a56:	2107      	movs	r1, #7
 8003a58:	1d5a      	adds	r2, r3, #5
 8003a5a:	f103 000a 	add.w	r0, r3, #10
 8003a5e:	f7ff fed9 	bl	8003814 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 8003a62:	f7fd fc8f 	bl	8001384 <HAL_GetHalVersion>
 8003a66:	4601      	mov	r1, r0
 8003a68:	4822      	ldr	r0, [pc, #136]	; (8003af4 <systemSettingLog+0xdc>)
 8003a6a:	f7ff fed3 	bl	8003814 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 8003a6e:	9903      	ldr	r1, [sp, #12]
 8003a70:	4821      	ldr	r0, [pc, #132]	; (8003af8 <systemSettingLog+0xe0>)
 8003a72:	fb91 f1f4 	sdiv	r1, r1, r4
 8003a76:	f7ff fecd 	bl	8003814 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 8003a7a:	9904      	ldr	r1, [sp, #16]
 8003a7c:	481f      	ldr	r0, [pc, #124]	; (8003afc <systemSettingLog+0xe4>)
 8003a7e:	fb91 f1f4 	sdiv	r1, r1, r4
 8003a82:	f7ff fec7 	bl	8003814 <lc_print>

#if defined(STM32F7)
  uint32_t acr = FLASH->ACR;
 8003a86:	4b1e      	ldr	r3, [pc, #120]	; (8003b00 <systemSettingLog+0xe8>)
    return "False";
 8003a88:	4c1e      	ldr	r4, [pc, #120]	; (8003b04 <systemSettingLog+0xec>)
  uint32_t acr = FLASH->ACR;
 8003a8a:	6819      	ldr	r1, [r3, #0]
    return "False";
 8003a8c:	1d65      	adds	r5, r4, #5
  uint32_t ccr = SCB->CCR;
 8003a8e:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <systemSettingLog+0xf0>)
    return "False";
 8003a90:	f411 7f80 	tst.w	r1, #256	; 0x100
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8003a94:	f104 00ec 	add.w	r0, r4, #236	; 0xec
  uint32_t ccr = SCB->CCR;
 8003a98:	695e      	ldr	r6, [r3, #20]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8003a9a:	f001 030f 	and.w	r3, r1, #15
    return "False";
 8003a9e:	bf14      	ite	ne
 8003aa0:	4622      	movne	r2, r4
 8003aa2:	462a      	moveq	r2, r5
 8003aa4:	f411 7f00 	tst.w	r1, #512	; 0x200
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8003aa8:	9300      	str	r3, [sp, #0]
 8003aaa:	bf14      	ite	ne
 8003aac:	4623      	movne	r3, r4
 8003aae:	462b      	moveq	r3, r5
 8003ab0:	f7ff feb0 	bl	8003814 <lc_print>
    return "False";
 8003ab4:	f416 3f00 	tst.w	r6, #131072	; 0x20000
      (int)acr,
      bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
      bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8003ab8:	f204 1029 	addw	r0, r4, #297	; 0x129
    return "False";
 8003abc:	bf14      	ite	ne
 8003abe:	4621      	movne	r1, r4
 8003ac0:	4629      	moveq	r1, r5
 8003ac2:	f416 3f80 	tst.w	r6, #65536	; 0x10000
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8003ac6:	bf14      	ite	ne
 8003ac8:	4622      	movne	r2, r4
 8003aca:	462a      	moveq	r2, r5
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 8003acc:	b008      	add	sp, #32
 8003ace:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8003ad2:	f7ff be9f 	b.w	8003814 <lc_print>
 8003ad6:	bf00      	nop
 8003ad8:	0800bd35 	.word	0x0800bd35
 8003adc:	0800bd52 	.word	0x0800bd52
 8003ae0:	0800bd72 	.word	0x0800bd72
 8003ae4:	000f4240 	.word	0x000f4240
 8003ae8:	0800bee4 	.word	0x0800bee4
 8003aec:	0800bd22 	.word	0x0800bd22
 8003af0:	0800bda3 	.word	0x0800bda3
 8003af4:	0800bdcb 	.word	0x0800bdcb
 8003af8:	0800bde4 	.word	0x0800bde4
 8003afc:	0800bdfd 	.word	0x0800bdfd
 8003b00:	40023c00 	.word	0x40023c00
 8003b04:	0800bd2a 	.word	0x0800bd2a
 8003b08:	e000ed00 	.word	0xe000ed00

08003b0c <port_hal_crc_ip_init_imp>:
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8003b0c:	4b06      	ldr	r3, [pc, #24]	; (8003b28 <port_hal_crc_ip_init_imp+0x1c>)
{
 8003b0e:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 8003b10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b12:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b16:	631a      	str	r2, [r3, #48]	; 0x30
 8003b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	9b01      	ldr	r3, [sp, #4]
#endif
}
 8003b22:	b002      	add	sp, #8
 8003b24:	4770      	bx	lr
 8003b26:	bf00      	nop
 8003b28:	40023800 	.word	0x40023800

08003b2c <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003b2c:	4a08      	ldr	r2, [pc, #32]	; (8003b50 <port_dwt_init_imp+0x24>)
 8003b2e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8003b32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003b36:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
 8003b3a:	4b06      	ldr	r3, [pc, #24]	; (8003b54 <port_dwt_init_imp+0x28>)
 8003b3c:	4a06      	ldr	r2, [pc, #24]	; (8003b58 <port_dwt_init_imp+0x2c>)
 8003b3e:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
#endif
  DWT->CYCCNT = 0;
 8003b42:	2200      	movs	r2, #0
 8003b44:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	f042 0201 	orr.w	r2, r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]
}
 8003b4e:	4770      	bx	lr
 8003b50:	e000ed00 	.word	0xe000ed00
 8003b54:	e0001000 	.word	0xe0001000
 8003b58:	c5acce55 	.word	0xc5acce55

08003b5c <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8003b5c:	4b05      	ldr	r3, [pc, #20]	; (8003b74 <ai_mnetwork_handle+0x18>)
 8003b5e:	b120      	cbz	r0, 8003b6a <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8003b60:	4298      	cmp	r0, r3
 8003b62:	bf0c      	ite	eq
 8003b64:	4618      	moveq	r0, r3
 8003b66:	2000      	movne	r0, #0
 8003b68:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8003b6a:	681a      	ldr	r2, [r3, #0]
            return inst;
 8003b6c:	2a00      	cmp	r2, #0
 8003b6e:	bf08      	it	eq
 8003b70:	4618      	moveq	r0, r3
}
 8003b72:	4770      	bx	lr
 8003b74:	20000920 	.word	0x20000920

08003b78 <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8003b78:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	b160      	cbz	r0, 8003b98 <ai_mnetwork_is_valid.constprop.0+0x20>
 8003b7e:	f7fc fbaf 	bl	80002e0 <strlen>
 8003b82:	2805      	cmp	r0, #5
 8003b84:	4602      	mov	r2, r0
 8003b86:	d107      	bne.n	8003b98 <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8003b88:	4621      	mov	r1, r4
 8003b8a:	4804      	ldr	r0, [pc, #16]	; (8003b9c <ai_mnetwork_is_valid.constprop.0+0x24>)
 8003b8c:	f005 fd1b 	bl	80095c6 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003b90:	fab0 f080 	clz	r0, r0
 8003b94:	0940      	lsrs	r0, r0, #5
}
 8003b96:	bd10      	pop	{r4, pc}
    return false;
 8003b98:	2000      	movs	r0, #0
 8003b9a:	e7fc      	b.n	8003b96 <ai_mnetwork_is_valid.constprop.0+0x1e>
 8003b9c:	0800bf0c 	.word	0x0800bf0c

08003ba0 <MX_X_CUBE_AI_Init>:
    aiSystemPerformanceInit();
 8003ba0:	f7ff b86a 	b.w	8002c78 <aiSystemPerformanceInit>

08003ba4 <MX_X_CUBE_AI_Process>:
{
 8003ba4:	b508      	push	{r3, lr}
    aiSystemPerformanceProcess();
 8003ba6:	f7ff f91f 	bl	8002de8 <aiSystemPerformanceProcess>
    HAL_Delay(1000); /* delay 1s */
 8003baa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
}
 8003bae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_Delay(1000); /* delay 1s */
 8003bb2:	f7fd bbd5 	b.w	8001360 <HAL_Delay>
	...

08003bb8 <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8003bb8:	b510      	push	{r4, lr}
 8003bba:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8003bbc:	f7ff ffdc 	bl	8003b78 <ai_mnetwork_is_valid.constprop.0>
 8003bc0:	b920      	cbnz	r0, 8003bcc <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 8003bc2:	2c00      	cmp	r4, #0
 8003bc4:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <ai_mnetwork_find+0x18>)
 8003bc6:	bf18      	it	ne
 8003bc8:	2000      	movne	r0, #0
}
 8003bca:	bd10      	pop	{r4, pc}
            return entry->name;
 8003bcc:	4800      	ldr	r0, [pc, #0]	; (8003bd0 <ai_mnetwork_find+0x18>)
 8003bce:	e7fc      	b.n	8003bca <ai_mnetwork_find+0x12>
 8003bd0:	0800bf0c 	.word	0x0800bf0c

08003bd4 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8003bd4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bd6:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003bd8:	2000      	movs	r0, #0
{
 8003bda:	9201      	str	r2, [sp, #4]
 8003bdc:	460d      	mov	r5, r1
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003bde:	f7ff ffbd 	bl	8003b5c <ai_mnetwork_handle>

    if (!inst) {
 8003be2:	4604      	mov	r4, r0
 8003be4:	b1e0      	cbz	r0, 8003c20 <ai_mnetwork_create+0x4c>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8003be6:	4630      	mov	r0, r6
 8003be8:	f7ff ffc6 	bl	8003b78 <ai_mnetwork_is_valid.constprop.0>
 8003bec:	9901      	ldr	r1, [sp, #4]
 8003bee:	b910      	cbnz	r0, 8003bf6 <ai_mnetwork_create+0x22>
 8003bf0:	2214      	movs	r2, #20
 8003bf2:	2310      	movs	r3, #16
 8003bf4:	e00d      	b.n	8003c12 <ai_mnetwork_create+0x3e>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 8003bf6:	4628      	mov	r0, r5
 8003bf8:	f000 fbf2 	bl	80043e0 <ai_myrnn_create>
 8003bfc:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8003c00:	b2c2      	uxtb	r2, r0
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8003c02:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8003c06:	d104      	bne.n	8003c12 <ai_mnetwork_create+0x3e>
        inst->entry = found;
 8003c08:	4906      	ldr	r1, [pc, #24]	; (8003c24 <ai_mnetwork_create+0x50>)
 8003c0a:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8003c0c:	6829      	ldr	r1, [r5, #0]
 8003c0e:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8003c10:	602c      	str	r4, [r5, #0]
        return err;
 8003c12:	2000      	movs	r0, #0
 8003c14:	f362 0007 	bfi	r0, r2, #0, #8
 8003c18:	f363 201f 	bfi	r0, r3, #8, #24
    }

    return err;
}
 8003c1c:	b002      	add	sp, #8
 8003c1e:	bd70      	pop	{r4, r5, r6, pc}
 8003c20:	2231      	movs	r2, #49	; 0x31
 8003c22:	e7e6      	b.n	8003bf2 <ai_mnetwork_create+0x1e>
 8003c24:	0800bf14 	.word	0x0800bf14

08003c28 <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8003c28:	b538      	push	{r3, r4, r5, lr}
 8003c2a:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003c2c:	f7ff ff96 	bl	8003b5c <ai_mnetwork_handle>
    if (inn) {
 8003c30:	4605      	mov	r5, r0
 8003c32:	b158      	cbz	r0, 8003c4c <ai_mnetwork_destroy+0x24>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8003c34:	6803      	ldr	r3, [r0, #0]
 8003c36:	6840      	ldr	r0, [r0, #4]
 8003c38:	699b      	ldr	r3, [r3, #24]
 8003c3a:	4798      	blx	r3
        if (hdl != inn->handle) {
 8003c3c:	686b      	ldr	r3, [r5, #4]
 8003c3e:	4283      	cmp	r3, r0
 8003c40:	d004      	beq.n	8003c4c <ai_mnetwork_destroy+0x24>
        if ((inst) && (&gnetworks[i] == inst)) {
 8003c42:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <ai_mnetwork_destroy+0x28>)
 8003c44:	2400      	movs	r4, #0
 8003c46:	429d      	cmp	r5, r3
 8003c48:	d100      	bne.n	8003c4c <ai_mnetwork_destroy+0x24>
            gnetworks[i].entry = NULL;
 8003c4a:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 8003c4c:	4620      	mov	r0, r4
 8003c4e:	bd38      	pop	{r3, r4, r5, pc}
 8003c50:	20000920 	.word	0x20000920

08003c54 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8003c54:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003c56:	f7ff ff81 	bl	8003b5c <ai_mnetwork_handle>
    if (inn)
 8003c5a:	b128      	cbz	r0, 8003c68 <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 8003c5c:	6802      	ldr	r2, [r0, #0]
 8003c5e:	6840      	ldr	r0, [r0, #4]
 8003c60:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8003c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 8003c66:	4710      	bx	r2
}
 8003c68:	bd10      	pop	{r4, pc}

08003c6a <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8003c6a:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003c6c:	f7ff ff76 	bl	8003b5c <ai_mnetwork_handle>
    if (inn)
 8003c70:	b128      	cbz	r0, 8003c7e <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8003c72:	6803      	ldr	r3, [r0, #0]
 8003c74:	6840      	ldr	r0, [r0, #4]
 8003c76:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8003c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8003c7c:	4718      	bx	r3
}
 8003c7e:	f241 0014 	movw	r0, #4116	; 0x1014
 8003c82:	bd10      	pop	{r4, pc}

08003c84 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8003c84:	b530      	push	{r4, r5, lr}
 8003c86:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003c88:	f7ff ff68 	bl	8003b5c <ai_mnetwork_handle>
    if (inn) {
 8003c8c:	4604      	mov	r4, r0
 8003c8e:	b168      	cbz	r0, 8003cac <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8003c90:	6803      	ldr	r3, [r0, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003c92:	2500      	movs	r5, #0
        inn->entry->ai_data_params_get(&par);
 8003c94:	4668      	mov	r0, sp
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003c9a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003c9e:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003ca0:	42aa      	cmp	r2, r5
 8003ca2:	dc05      	bgt.n	8003cb0 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	4669      	mov	r1, sp
 8003ca8:	6860      	ldr	r0, [r4, #4]
 8003caa:	4798      	blx	r3
    }
    else
        return false;
}
 8003cac:	b00f      	add	sp, #60	; 0x3c
 8003cae:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cb2:	4629      	mov	r1, r5
 8003cb4:	a803      	add	r0, sp, #12
 8003cb6:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003cba:	3501      	adds	r5, #1
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8003cbc:	f000 fc90 	bl	80045e0 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8003cc0:	e7eb      	b.n	8003c9a <ai_mnetwork_init+0x16>

08003cc2 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8003cc2:	b513      	push	{r0, r1, r4, lr}
 8003cc4:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003cc6:	f7ff ff49 	bl	8003b5c <ai_mnetwork_handle>
    if (inn)
 8003cca:	4603      	mov	r3, r0
 8003ccc:	b140      	cbz	r0, 8003ce0 <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 8003cce:	6800      	ldr	r0, [r0, #0]
 8003cd0:	9a01      	ldr	r2, [sp, #4]
 8003cd2:	6a04      	ldr	r4, [r0, #32]
 8003cd4:	6858      	ldr	r0, [r3, #4]
 8003cd6:	4623      	mov	r3, r4
    else
        return 0;
}
 8003cd8:	b002      	add	sp, #8
 8003cda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 8003cde:	4718      	bx	r3
}
 8003ce0:	b002      	add	sp, #8
 8003ce2:	bd10      	pop	{r4, pc}

08003ce4 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8003ce4:	b538      	push	{r3, r4, r5, lr}
 8003ce6:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003ce8:	f7ff ff38 	bl	8003b5c <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8003cec:	b188      	cbz	r0, 8003d12 <ai_mnetwork_get_private_handle+0x2e>
 8003cee:	b181      	cbz	r1, 8003d12 <ai_mnetwork_get_private_handle+0x2e>
 8003cf0:	b17d      	cbz	r5, 8003d12 <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8003cf2:	6843      	ldr	r3, [r0, #4]
         *pparams = inn->params;
 8003cf4:	f100 0408 	add.w	r4, r0, #8
         *phandle = inn->handle;
 8003cf8:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 8003cfa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003cfc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003cfe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d00:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d0a:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 8003d0e:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8003d10:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 8003d12:	f04f 30ff 	mov.w	r0, #4294967295
 8003d16:	e7fb      	b.n	8003d10 <ai_mnetwork_get_private_handle+0x2c>

08003d18 <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 8003d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 8003d1c:	6896      	ldr	r6, [r2, #8]
{
 8003d1e:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 8003d20:	2500      	movs	r5, #0
{
 8003d22:	4614      	mov	r4, r2
  if (specifier->flags & FLAG_IS_SIGNED) {
 8003d24:	f016 0304 	ands.w	r3, r6, #4
  buf[idx--] = 0;
 8003d28:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 8003d2c:	d02a      	beq.n	8003d84 <_write_number+0x6c>
    if ((int64_t)number < 0) {
 8003d2e:	42a9      	cmp	r1, r5
 8003d30:	da08      	bge.n	8003d44 <_write_number+0x2c>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 8003d32:	6813      	ldr	r3, [r2, #0]
      number = -number;
 8003d34:	4240      	negs	r0, r0
      sign_neg = '-';
 8003d36:	f04f 052d 	mov.w	r5, #45	; 0x2d
      specifier->width -= 1;
 8003d3a:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 8003d3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 8003d42:	6013      	str	r3, [r2, #0]
 8003d44:	f016 0f08 	tst.w	r6, #8
 8003d48:	f10d 093f 	add.w	r9, sp, #63	; 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003d4c:	f04f 073e 	mov.w	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 8003d50:	f006 0a10 	and.w	sl, r6, #16
 8003d54:	bf14      	ite	ne
 8003d56:	f04f 0841 	movne.w	r8, #65	; 0x41
 8003d5a:	f04f 0861 	moveq.w	r8, #97	; 0x61
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003d5e:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 8003d62:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 8003d66:	f1ba 0f00 	cmp.w	sl, #0
 8003d6a:	d033      	beq.n	8003dd4 <_write_number+0xbc>
      chr = number & 0x0F;
 8003d6c:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 8003d70:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003d72:	2b09      	cmp	r3, #9
      t = number >> 4;
 8003d74:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 8003d78:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003d7c:	d906      	bls.n	8003d8c <_write_number+0x74>
 8003d7e:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	e004      	b.n	8003d8e <_write_number+0x76>
  char sign_neg = 0;
 8003d84:	461d      	mov	r5, r3
 8003d86:	e7dd      	b.n	8003d44 <_write_number+0x2c>
    }
    number = t;
    buf[idx--] = chr;
 8003d88:	4617      	mov	r7, r2
 8003d8a:	e7ea      	b.n	8003d62 <_write_number+0x4a>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8003d8c:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8003d8e:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 8003d92:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 8003d96:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 8003d9a:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 8003d9e:	d1f3      	bne.n	8003d88 <_write_number+0x70>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8003da0:	f006 0101 	and.w	r1, r6, #1
 8003da4:	b155      	cbz	r5, 8003dbc <_write_number+0xa4>
 8003da6:	b949      	cbnz	r1, 8003dbc <_write_number+0xa4>
    buf[idx--] = sign_neg;
 8003da8:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 8003dac:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8003db0:	eb0d 0203 	add.w	r2, sp, r3
 8003db4:	232d      	movs	r3, #45	; 0x2d
 8003db6:	f802 3c40 	strb.w	r3, [r2, #-64]
 8003dba:	1eba      	subs	r2, r7, #2
 8003dbc:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8003dbe:	6823      	ldr	r3, [r4, #0]
 8003dc0:	f006 0602 	and.w	r6, r6, #2
 8003dc4:	bf14      	ite	ne
 8003dc6:	2130      	movne	r1, #48	; 0x30
 8003dc8:	2120      	moveq	r1, #32
 8003dca:	455b      	cmp	r3, fp
 8003dcc:	dd13      	ble.n	8003df6 <_write_number+0xde>
 8003dce:	b166      	cbz	r6, 8003dea <_write_number+0xd2>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8003dd0:	b9a5      	cbnz	r5, 8003dfc <_write_number+0xe4>
 8003dd2:	e01c      	b.n	8003e0e <_write_number+0xf6>
      t = number / 10;
 8003dd4:	220a      	movs	r2, #10
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	f7fc fc46 	bl	8000668 <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8003ddc:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8003de0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8003de4:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8003de8:	e7ca      	b.n	8003d80 <_write_number+0x68>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 8003dea:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 8003dee:	f10b 0b01 	add.w	fp, fp, #1
 8003df2:	3a01      	subs	r2, #1
 8003df4:	e7e9      	b.n	8003dca <_write_number+0xb2>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 8003df6:	b155      	cbz	r5, 8003e0e <_write_number+0xf6>
 8003df8:	455b      	cmp	r3, fp
 8003dfa:	d108      	bne.n	8003e0e <_write_number+0xf6>
    buf[idx--] = sign_neg;
 8003dfc:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8003e00:	212d      	movs	r1, #45	; 0x2d
    count++;
 8003e02:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 8003e06:	3a01      	subs	r2, #1
 8003e08:	446b      	add	r3, sp
 8003e0a:	f803 1c40 	strb.w	r1, [r3, #-64]
  }

  idx++;


  for(int i = 0; i < count; i++) {
 8003e0e:	eb0d 0602 	add.w	r6, sp, r2
 8003e12:	2500      	movs	r5, #0
 8003e14:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8003e16:	68e3      	ldr	r3, [r4, #12]
 8003e18:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003e1c:	6920      	ldr	r0, [r4, #16]
 8003e1e:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 8003e20:	45ab      	cmp	fp, r5
 8003e22:	d1f7      	bne.n	8003e14 <_write_number+0xfc>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 8003e24:	68a3      	ldr	r3, [r4, #8]
 8003e26:	079b      	lsls	r3, r3, #30
 8003e28:	d408      	bmi.n	8003e3c <_write_number+0x124>
      _WRITE_C(' ');
    }
  }

  return count;
}
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	b011      	add	sp, #68	; 0x44
 8003e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 8003e32:	3501      	adds	r5, #1
 8003e34:	68e3      	ldr	r3, [r4, #12]
 8003e36:	2120      	movs	r1, #32
 8003e38:	6920      	ldr	r0, [r4, #16]
 8003e3a:	4798      	blx	r3
    while (count < specifier->width) {
 8003e3c:	6823      	ldr	r3, [r4, #0]
 8003e3e:	42ab      	cmp	r3, r5
 8003e40:	dcf7      	bgt.n	8003e32 <_write_number+0x11a>
 8003e42:	e7f2      	b.n	8003e2a <_write_number+0x112>

08003e44 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 8003e44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e48:	461c      	mov	r4, r3
 8003e4a:	4606      	mov	r6, r0
  char c, t;
  int count = 0;
 8003e4c:	2300      	movs	r3, #0
{
 8003e4e:	460f      	mov	r7, r1
 8003e50:	ed2d 8b02 	vpush	{d8}
 8003e54:	b09b      	sub	sp, #108	; 0x6c
  int count = 0;
 8003e56:	9301      	str	r3, [sp, #4]
  return *(*fmtP)++;
 8003e58:	4613      	mov	r3, r2
 8003e5a:	f813 1b01 	ldrb.w	r1, [r3], #1
 8003e5e:	9302      	str	r3, [sp, #8]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 8003e60:	b929      	cbnz	r1, 8003e6e <vlc_print+0x2a>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 8003e62:	9801      	ldr	r0, [sp, #4]
 8003e64:	b01b      	add	sp, #108	; 0x6c
 8003e66:	ecbd 8b02 	vpop	{d8}
 8003e6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 8003e6e:	290a      	cmp	r1, #10
 8003e70:	d104      	bne.n	8003e7c <vlc_print+0x38>
      putc_fct(user, c);
 8003e72:	4638      	mov	r0, r7
 8003e74:	47b0      	blx	r6
      count++;
 8003e76:	9b01      	ldr	r3, [sp, #4]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	e119      	b.n	80040b0 <vlc_print+0x26c>
    else if (c == '%')
 8003e7c:	2925      	cmp	r1, #37	; 0x25
 8003e7e:	d1f8      	bne.n	8003e72 <vlc_print+0x2e>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8003e80:	2300      	movs	r3, #0
 8003e82:	9709      	str	r7, [sp, #36]	; 0x24
 8003e84:	469c      	mov	ip, r3
 8003e86:	469e      	mov	lr, r3
 8003e88:	461a      	mov	r2, r3
 8003e8a:	4698      	mov	r8, r3
 8003e8c:	4618      	mov	r0, r3
      bool long_type = false;
 8003e8e:	469b      	mov	fp, r3
      bool has_precision = false;
 8003e90:	4699      	mov	r9, r3
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8003e92:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003e96:	e9cd 3607 	strd	r3, r6, [sp, #28]
  return *(*fmtP)++;
 8003e9a:	9d02      	ldr	r5, [sp, #8]
 8003e9c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8003ea0:	9502      	str	r5, [sp, #8]
        if (!c)
 8003ea2:	b329      	cbz	r1, 8003ef0 <vlc_print+0xac>
        else if (c == '0')
 8003ea4:	2939      	cmp	r1, #57	; 0x39
 8003ea6:	d814      	bhi.n	8003ed2 <vlc_print+0x8e>
 8003ea8:	292c      	cmp	r1, #44	; 0x2c
 8003eaa:	d91e      	bls.n	8003eea <vlc_print+0xa6>
 8003eac:	f1a1 052d 	sub.w	r5, r1, #45	; 0x2d
 8003eb0:	2d0c      	cmp	r5, #12
 8003eb2:	d811      	bhi.n	8003ed8 <vlc_print+0x94>
 8003eb4:	e8df f015 	tbh	[pc, r5, lsl #1]
 8003eb8:	02270048 	.word	0x02270048
 8003ebc:	00340010 	.word	0x00340010
 8003ec0:	004b004b 	.word	0x004b004b
 8003ec4:	004b004b 	.word	0x004b004b
 8003ec8:	004b004b 	.word	0x004b004b
 8003ecc:	004b004b 	.word	0x004b004b
 8003ed0:	004b      	.short	0x004b
 8003ed2:	296c      	cmp	r1, #108	; 0x6c
 8003ed4:	f000 822e 	beq.w	8004334 <vlc_print+0x4f0>
          switch(c)
 8003ed8:	2978      	cmp	r1, #120	; 0x78
 8003eda:	d809      	bhi.n	8003ef0 <vlc_print+0xac>
 8003edc:	2962      	cmp	r1, #98	; 0x62
 8003ede:	d841      	bhi.n	8003f64 <vlc_print+0x120>
 8003ee0:	2946      	cmp	r1, #70	; 0x46
 8003ee2:	f000 813b 	beq.w	800415c <vlc_print+0x318>
 8003ee6:	2958      	cmp	r1, #88	; 0x58
 8003ee8:	d070      	beq.n	8003fcc <vlc_print+0x188>
 8003eea:	2925      	cmp	r1, #37	; 0x25
 8003eec:	f000 8096 	beq.w	800401c <vlc_print+0x1d8>
 8003ef0:	b10b      	cbz	r3, 8003ef6 <vlc_print+0xb2>
 8003ef2:	f8cd c01c 	str.w	ip, [sp, #28]
 8003ef6:	f1be 0f00 	cmp.w	lr, #0
 8003efa:	d000      	beq.n	8003efe <vlc_print+0xba>
 8003efc:	9206      	str	r2, [sp, #24]
 8003efe:	f1b8 0f00 	cmp.w	r8, #0
 8003f02:	d000      	beq.n	8003f06 <vlc_print+0xc2>
 8003f04:	9005      	str	r0, [sp, #20]
        putc_fct(user, '<');
 8003f06:	213c      	movs	r1, #60	; 0x3c
 8003f08:	4638      	mov	r0, r7
 8003f0a:	47b0      	blx	r6
        putc_fct(user, '!');
 8003f0c:	2121      	movs	r1, #33	; 0x21
 8003f0e:	4638      	mov	r0, r7
        va_arg(vl, signed long);
 8003f10:	3404      	adds	r4, #4
        putc_fct(user, '!');
 8003f12:	47b0      	blx	r6
        putc_fct(user, '>');
 8003f14:	213e      	movs	r1, #62	; 0x3e
 8003f16:	4638      	mov	r0, r7
 8003f18:	47b0      	blx	r6
        count += 3;
 8003f1a:	9b01      	ldr	r3, [sp, #4]
 8003f1c:	3303      	adds	r3, #3
 8003f1e:	e0c7      	b.n	80040b0 <vlc_print+0x26c>
          if (!specifier.width && !specifier.precision) {
 8003f20:	ea50 0102 	orrs.w	r1, r0, r2
 8003f24:	d105      	bne.n	8003f32 <vlc_print+0xee>
            specifier.flags |= FLAG_ZERO_EXTEND;
 8003f26:	f04c 0c01 	orr.w	ip, ip, #1
 8003f2a:	460a      	mov	r2, r1
 8003f2c:	4608      	mov	r0, r1
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e7b3      	b.n	8003e9a <vlc_print+0x56>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8003f32:	210a      	movs	r1, #10
          } else if (has_precision) {
 8003f34:	f1b9 0f00 	cmp.w	r9, #0
 8003f38:	d002      	beq.n	8003f40 <vlc_print+0xfc>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8003f3a:	434a      	muls	r2, r1
 8003f3c:	46ce      	mov	lr, r9
 8003f3e:	e7ac      	b.n	8003e9a <vlc_print+0x56>
            specifier.width = specifier.width * 10 + (c - '0');
 8003f40:	4348      	muls	r0, r1
            specifier.width = specifier.width * 10 + (c - '0');
 8003f42:	f04f 0801 	mov.w	r8, #1
 8003f46:	e7a8      	b.n	8003e9a <vlc_print+0x56>
          specifier.flags |= FLAG_NEG_PAD;
 8003f48:	f04c 0c02 	orr.w	ip, ip, #2
 8003f4c:	e7ef      	b.n	8003f2e <vlc_print+0xea>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8003f4e:	3930      	subs	r1, #48	; 0x30
 8003f50:	250a      	movs	r5, #10
          if (has_precision) {
 8003f52:	f1b9 0f00 	cmp.w	r9, #0
 8003f56:	d002      	beq.n	8003f5e <vlc_print+0x11a>
            specifier.precision = specifier.precision * 10 + (c - '0');
 8003f58:	fb05 1202 	mla	r2, r5, r2, r1
 8003f5c:	e7ee      	b.n	8003f3c <vlc_print+0xf8>
            specifier.width = specifier.width * 10 + (c - '0');
 8003f5e:	fb05 1000 	mla	r0, r5, r0, r1
 8003f62:	e7ee      	b.n	8003f42 <vlc_print+0xfe>
          switch(c)
 8003f64:	3963      	subs	r1, #99	; 0x63
 8003f66:	2915      	cmp	r1, #21
 8003f68:	d8c2      	bhi.n	8003ef0 <vlc_print+0xac>
 8003f6a:	f20f 0908 	addw	r9, pc, #8
 8003f6e:	f859 f021 	ldr.w	pc, [r9, r1, lsl #2]
 8003f72:	bf00      	nop
 8003f74:	08004037 	.word	0x08004037
 8003f78:	08004115 	.word	0x08004115
 8003f7c:	08003ef1 	.word	0x08003ef1
 8003f80:	0800415d 	.word	0x0800415d
 8003f84:	08003ef1 	.word	0x08003ef1
 8003f88:	08003ef1 	.word	0x08003ef1
 8003f8c:	08004115 	.word	0x08004115
 8003f90:	08003ef1 	.word	0x08003ef1
 8003f94:	08003ef1 	.word	0x08003ef1
 8003f98:	08003ef1 	.word	0x08003ef1
 8003f9c:	08003ef1 	.word	0x08003ef1
 8003fa0:	08003ef1 	.word	0x08003ef1
 8003fa4:	08003ef1 	.word	0x08003ef1
 8003fa8:	080040f9 	.word	0x080040f9
 8003fac:	08003ef1 	.word	0x08003ef1
 8003fb0:	08003ef1 	.word	0x08003ef1
 8003fb4:	08004053 	.word	0x08004053
 8003fb8:	08003ef1 	.word	0x08003ef1
 8003fbc:	0800430d 	.word	0x0800430d
 8003fc0:	08003ef1 	.word	0x08003ef1
 8003fc4:	08003ef1 	.word	0x08003ef1
 8003fc8:	08003fed 	.word	0x08003fed
 8003fcc:	b10b      	cbz	r3, 8003fd2 <vlc_print+0x18e>
 8003fce:	f8cd c01c 	str.w	ip, [sp, #28]
 8003fd2:	f1be 0f00 	cmp.w	lr, #0
 8003fd6:	d000      	beq.n	8003fda <vlc_print+0x196>
 8003fd8:	9206      	str	r2, [sp, #24]
 8003fda:	f1b8 0f00 	cmp.w	r8, #0
 8003fde:	d000      	beq.n	8003fe2 <vlc_print+0x19e>
 8003fe0:	9005      	str	r0, [sp, #20]
            specifier.flags |= FLAG_CAPS;
 8003fe2:	9b07      	ldr	r3, [sp, #28]
 8003fe4:	f043 0308 	orr.w	r3, r3, #8
 8003fe8:	9307      	str	r3, [sp, #28]
 8003fea:	e00a      	b.n	8004002 <vlc_print+0x1be>
 8003fec:	b10b      	cbz	r3, 8003ff2 <vlc_print+0x1ae>
 8003fee:	f8cd c01c 	str.w	ip, [sp, #28]
 8003ff2:	f1be 0f00 	cmp.w	lr, #0
 8003ff6:	d000      	beq.n	8003ffa <vlc_print+0x1b6>
 8003ff8:	9206      	str	r2, [sp, #24]
 8003ffa:	f1b8 0f00 	cmp.w	r8, #0
 8003ffe:	d000      	beq.n	8004002 <vlc_print+0x1be>
 8004000:	9005      	str	r0, [sp, #20]
            specifier.flags |= FLAG_HEX;
 8004002:	9b07      	ldr	r3, [sp, #28]
            count += _write_number(val, &specifier);
 8004004:	aa05      	add	r2, sp, #20
 8004006:	f854 0b04 	ldr.w	r0, [r4], #4
 800400a:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 800400c:	f043 0310 	orr.w	r3, r3, #16
 8004010:	9307      	str	r3, [sp, #28]
            count += _write_number(val, &specifier);
 8004012:	f7ff fe81 	bl	8003d18 <_write_number>
 8004016:	9b01      	ldr	r3, [sp, #4]
 8004018:	4403      	add	r3, r0
 800401a:	e049      	b.n	80040b0 <vlc_print+0x26c>
 800401c:	b10b      	cbz	r3, 8004022 <vlc_print+0x1de>
 800401e:	f8cd c01c 	str.w	ip, [sp, #28]
 8004022:	f1be 0f00 	cmp.w	lr, #0
 8004026:	d000      	beq.n	800402a <vlc_print+0x1e6>
 8004028:	9206      	str	r2, [sp, #24]
 800402a:	f1b8 0f00 	cmp.w	r8, #0
 800402e:	d000      	beq.n	8004032 <vlc_print+0x1ee>
 8004030:	9005      	str	r0, [sp, #20]
            putc_fct(user, c);
 8004032:	2125      	movs	r1, #37	; 0x25
 8004034:	e71d      	b.n	8003e72 <vlc_print+0x2e>
 8004036:	b10b      	cbz	r3, 800403c <vlc_print+0x1f8>
 8004038:	f8cd c01c 	str.w	ip, [sp, #28]
 800403c:	f1be 0f00 	cmp.w	lr, #0
 8004040:	d000      	beq.n	8004044 <vlc_print+0x200>
 8004042:	9206      	str	r2, [sp, #24]
 8004044:	f1b8 0f00 	cmp.w	r8, #0
 8004048:	d000      	beq.n	800404c <vlc_print+0x208>
 800404a:	9005      	str	r0, [sp, #20]
            putc_fct(user, t);
 800404c:	f814 1b04 	ldrb.w	r1, [r4], #4
 8004050:	e70f      	b.n	8003e72 <vlc_print+0x2e>
 8004052:	b10b      	cbz	r3, 8004058 <vlc_print+0x214>
 8004054:	f8cd c01c 	str.w	ip, [sp, #28]
 8004058:	f1be 0f00 	cmp.w	lr, #0
 800405c:	d000      	beq.n	8004060 <vlc_print+0x21c>
 800405e:	9206      	str	r2, [sp, #24]
 8004060:	f1b8 0f00 	cmp.w	r8, #0
 8004064:	d000      	beq.n	8004068 <vlc_print+0x224>
 8004066:	9005      	str	r0, [sp, #20]
            if (!str) str = "(null)";
 8004068:	4bb4      	ldr	r3, [pc, #720]	; (800433c <vlc_print+0x4f8>)
            str = va_arg(vl, char*);
 800406a:	f854 bb04 	ldr.w	fp, [r4], #4
            if (!str) str = "(null)";
 800406e:	f1bb 0f00 	cmp.w	fp, #0
 8004072:	bf08      	it	eq
 8004074:	469b      	moveq	fp, r3
  int len = strlen(str);
 8004076:	4658      	mov	r0, fp
 8004078:	f7fc f932 	bl	80002e0 <strlen>
  if (specifier->precision) {
 800407c:	9b06      	ldr	r3, [sp, #24]
  int len = strlen(str);
 800407e:	4681      	mov	r9, r0
  if (specifier->precision) {
 8004080:	b113      	cbz	r3, 8004088 <vlc_print+0x244>
    len = (len > specifier->precision)?specifier->precision:len;
 8004082:	4298      	cmp	r0, r3
 8004084:	bfa8      	it	ge
 8004086:	4699      	movge	r9, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 8004088:	9b07      	ldr	r3, [sp, #28]
 800408a:	f013 0a02 	ands.w	sl, r3, #2
 800408e:	d01c      	beq.n	80040ca <vlc_print+0x286>
  int count = 0;
 8004090:	f04f 0800 	mov.w	r8, #0
 8004094:	465b      	mov	r3, fp
  for (int i = 0; i < len; i++) {
 8004096:	eba3 020b 	sub.w	r2, r3, fp
 800409a:	4591      	cmp	r9, r2
 800409c:	dc17      	bgt.n	80040ce <vlc_print+0x28a>
 800409e:	f1b9 0f00 	cmp.w	r9, #0
 80040a2:	bfa8      	it	ge
 80040a4:	44c8      	addge	r8, r9
  if (specifier->flags & FLAG_NEG_PAD) {
 80040a6:	f1ba 0f00 	cmp.w	sl, #0
 80040aa:	d122      	bne.n	80040f2 <vlc_print+0x2ae>
            count += _write_string(str, &specifier);
 80040ac:	9b01      	ldr	r3, [sp, #4]
 80040ae:	4443      	add	r3, r8
      count++;
 80040b0:	9301      	str	r3, [sp, #4]
 80040b2:	e049      	b.n	8004148 <vlc_print+0x304>
      _WRITE_C(' ');
 80040b4:	f108 0801 	add.w	r8, r8, #1
 80040b8:	2120      	movs	r1, #32
 80040ba:	4638      	mov	r0, r7
 80040bc:	47b0      	blx	r6
    for(int i = len; i < specifier->width; i++) {
 80040be:	eb08 0309 	add.w	r3, r8, r9
 80040c2:	9a05      	ldr	r2, [sp, #20]
 80040c4:	429a      	cmp	r2, r3
 80040c6:	dcf5      	bgt.n	80040b4 <vlc_print+0x270>
 80040c8:	e7e4      	b.n	8004094 <vlc_print+0x250>
  int count = 0;
 80040ca:	46d0      	mov	r8, sl
 80040cc:	e7f7      	b.n	80040be <vlc_print+0x27a>
    _WRITE_C(*str++);
 80040ce:	f813 1b01 	ldrb.w	r1, [r3], #1
 80040d2:	4638      	mov	r0, r7
 80040d4:	9303      	str	r3, [sp, #12]
 80040d6:	47b0      	blx	r6
 80040d8:	9b03      	ldr	r3, [sp, #12]
  for (int i = 0; i < len; i++) {
 80040da:	e7dc      	b.n	8004096 <vlc_print+0x252>
      _WRITE_C(' ');
 80040dc:	f108 0801 	add.w	r8, r8, #1
 80040e0:	2120      	movs	r1, #32
 80040e2:	4638      	mov	r0, r7
 80040e4:	47b0      	blx	r6
    for(int i = len; i < specifier->width; i++) {
 80040e6:	eb09 0308 	add.w	r3, r9, r8
 80040ea:	9a05      	ldr	r2, [sp, #20]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	dcf5      	bgt.n	80040dc <vlc_print+0x298>
 80040f0:	e7dc      	b.n	80040ac <vlc_print+0x268>
 80040f2:	eba9 0908 	sub.w	r9, r9, r8
 80040f6:	e7f6      	b.n	80040e6 <vlc_print+0x2a2>
 80040f8:	b10b      	cbz	r3, 80040fe <vlc_print+0x2ba>
 80040fa:	f8cd c01c 	str.w	ip, [sp, #28]
 80040fe:	f1be 0f00 	cmp.w	lr, #0
 8004102:	d000      	beq.n	8004106 <vlc_print+0x2c2>
 8004104:	9206      	str	r2, [sp, #24]
            specifier.flags |= FLAG_ZERO_EXTEND;
 8004106:	9b07      	ldr	r3, [sp, #28]
 8004108:	f043 0301 	orr.w	r3, r3, #1
 800410c:	9307      	str	r3, [sp, #28]
            specifier.width = 8;
 800410e:	2308      	movs	r3, #8
 8004110:	9305      	str	r3, [sp, #20]
 8004112:	e766      	b.n	8003fe2 <vlc_print+0x19e>
 8004114:	b10b      	cbz	r3, 800411a <vlc_print+0x2d6>
 8004116:	f8cd c01c 	str.w	ip, [sp, #28]
 800411a:	f1be 0f00 	cmp.w	lr, #0
 800411e:	d000      	beq.n	8004122 <vlc_print+0x2de>
 8004120:	9206      	str	r2, [sp, #24]
 8004122:	f1b8 0f00 	cmp.w	r8, #0
 8004126:	d000      	beq.n	800412a <vlc_print+0x2e6>
 8004128:	9005      	str	r0, [sp, #20]
            specifier.flags |= FLAG_IS_SIGNED;
 800412a:	9b07      	ldr	r3, [sp, #28]
            val = va_arg(vl, unsigned int);
 800412c:	f104 0804 	add.w	r8, r4, #4
            specifier.flags |= FLAG_IS_SIGNED;
 8004130:	f043 0304 	orr.w	r3, r3, #4
 8004134:	9307      	str	r3, [sp, #28]
                val = va_arg(vl, signed int);
 8004136:	6820      	ldr	r0, [r4, #0]
 8004138:	17c1      	asrs	r1, r0, #31
            count += _write_number(val, &specifier);
 800413a:	aa05      	add	r2, sp, #20
            break;
 800413c:	4644      	mov	r4, r8
            count += _write_number(val, &specifier);
 800413e:	f7ff fdeb 	bl	8003d18 <_write_number>
 8004142:	9b01      	ldr	r3, [sp, #4]
 8004144:	4403      	add	r3, r0
 8004146:	9301      	str	r3, [sp, #4]
            break;
 8004148:	9a02      	ldr	r2, [sp, #8]
 800414a:	e685      	b.n	8003e58 <vlc_print+0x14>
                val = va_arg(vl, uint64_t);
 800414c:	3407      	adds	r4, #7
 800414e:	f024 0407 	bic.w	r4, r4, #7
 8004152:	46a0      	mov	r8, r4
 8004154:	6861      	ldr	r1, [r4, #4]
 8004156:	f858 0b08 	ldr.w	r0, [r8], #8
 800415a:	e7ee      	b.n	800413a <vlc_print+0x2f6>
 800415c:	b10b      	cbz	r3, 8004162 <vlc_print+0x31e>
 800415e:	f8cd c01c 	str.w	ip, [sp, #28]
 8004162:	f1be 0f00 	cmp.w	lr, #0
 8004166:	d000      	beq.n	800416a <vlc_print+0x326>
 8004168:	9206      	str	r2, [sp, #24]
 800416a:	f1b8 0f00 	cmp.w	r8, #0
 800416e:	d000      	beq.n	8004172 <vlc_print+0x32e>
 8004170:	9005      	str	r0, [sp, #20]
            dbl = va_arg(vl, double);
 8004172:	3407      	adds	r4, #7
            if (specifier.precision == 0)
 8004174:	9b06      	ldr	r3, [sp, #24]
            dbl = va_arg(vl, double);
 8004176:	f024 0407 	bic.w	r4, r4, #7
 800417a:	ecb4 8b02 	vldmia	r4!, {d8}
            if (specifier.precision == 0)
 800417e:	b90b      	cbnz	r3, 8004184 <vlc_print+0x340>
              specifier.precision = 6;
 8004180:	2306      	movs	r3, #6
 8004182:	9306      	str	r3, [sp, #24]
  double mul = 1.0;
 8004184:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
  for (int i=0;i <specifier->precision; i++)
 8004188:	f8dd 8018 	ldr.w	r8, [sp, #24]
    mul *= 10;
 800418c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
  for (int i=0;i <specifier->precision; i++)
 8004190:	2300      	movs	r3, #0
 8004192:	4543      	cmp	r3, r8
 8004194:	f2c0 80ab 	blt.w	80042ee <vlc_print+0x4aa>
  if (is_signed)
 8004198:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800419c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a0:	f140 80a9 	bpl.w	80042f6 <vlc_print+0x4b2>
    number = -number;
 80041a4:	eeb1 5b48 	vneg.f64	d5, d8
  number += (half_ / mul);
 80041a8:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
  uint32_t count = 0;
 80041ac:	f04f 0900 	mov.w	r9, #0
  uint32_t idx = sizeof(buf) - 1;
 80041b0:	f04f 0a3f 	mov.w	sl, #63	; 0x3f
  number += (half_ / mul);
 80041b4:	ee84 6b07 	vdiv.f64	d6, d4, d7
 80041b8:	ee36 6b05 	vadd.f64	d6, d6, d5
  val = (uint64_t)(number * mul);
 80041bc:	ee26 7b07 	vmul.f64	d7, d6, d7
 80041c0:	ec51 0b17 	vmov	r0, r1, d7
 80041c4:	f7fc fa68 	bl	8000698 <__aeabi_d2ulz>
 80041c8:	4602      	mov	r2, r0
    uint64_t t = val / 10;
 80041ca:	4693      	mov	fp, r2
 80041cc:	2300      	movs	r3, #0
 80041ce:	220a      	movs	r2, #10
 80041d0:	460d      	mov	r5, r1
 80041d2:	4658      	mov	r0, fp
 80041d4:	f7fc fa48 	bl	8000668 <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 80041d8:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
 80041dc:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    uint64_t t = val / 10;
 80041e0:	4602      	mov	r2, r0
    buf[idx--] = chr;
 80041e2:	f10a 3cff 	add.w	ip, sl, #4294967295
    chr = (val - t * 10) + '0';
 80041e6:	ebae 0043 	sub.w	r0, lr, r3, lsl #1
    buf[idx--] = chr;
 80041ea:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 80041ee:	446b      	add	r3, sp
 80041f0:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 80041f4:	f109 0301 	add.w	r3, r9, #1
    if (count == specifier->precision) {
 80041f8:	4598      	cmp	r8, r3
      buf[idx--] = '.';
 80041fa:	bf09      	itett	eq
 80041fc:	f10c 0368 	addeq.w	r3, ip, #104	; 0x68
    count++;
 8004200:	4699      	movne	r9, r3
      buf[idx--] = '.';
 8004202:	f1aa 0a02 	subeq.w	sl, sl, #2
      count++;
 8004206:	f109 0902 	addeq.w	r9, r9, #2
      buf[idx--] = '.';
 800420a:	bf05      	ittet	eq
 800420c:	eb0d 0c03 	addeq.w	ip, sp, r3
 8004210:	232e      	moveq	r3, #46	; 0x2e
    buf[idx--] = chr;
 8004212:	46e2      	movne	sl, ip
      buf[idx--] = '.';
 8004214:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
  } while (val);
 8004218:	f1bb 0f0a 	cmp.w	fp, #10
 800421c:	462b      	mov	r3, r5
 800421e:	f173 0300 	sbcs.w	r3, r3, #0
 8004222:	d2d2      	bcs.n	80041ca <vlc_print+0x386>
    buf[idx--] = '0';
 8004224:	45c1      	cmp	r9, r8
 8004226:	f1c8 0001 	rsb	r0, r8, #1
 800422a:	eba8 0b09 	sub.w	fp, r8, r9
 800422e:	ab0a      	add	r3, sp, #40	; 0x28
 8004230:	4448      	add	r0, r9
 8004232:	bf84      	itt	hi
 8004234:	2001      	movhi	r0, #1
 8004236:	f04f 0b00 	movhi.w	fp, #0
 800423a:	2130      	movs	r1, #48	; 0x30
 800423c:	4450      	add	r0, sl
 800423e:	465a      	mov	r2, fp
 8004240:	4418      	add	r0, r3
 8004242:	f005 f9b8 	bl	80095b6 <memset>
 8004246:	eba9 0308 	sub.w	r3, r9, r8
 800424a:	45c1      	cmp	r9, r8
 800424c:	bf88      	it	hi
 800424e:	2300      	movhi	r3, #0
 8004250:	44d9      	add	r9, fp
  if (count == specifier->precision) {
 8004252:	45c8      	cmp	r8, r9
 8004254:	449a      	add	sl, r3
 8004256:	f108 0801 	add.w	r8, r8, #1
 800425a:	d108      	bne.n	800426e <vlc_print+0x42a>
    buf[idx--] = '.';
 800425c:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 8004260:	222e      	movs	r2, #46	; 0x2e
    count++;
 8004262:	46c1      	mov	r9, r8
    buf[idx--] = '.';
 8004264:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004268:	446b      	add	r3, sp
 800426a:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (count == specifier->precision + 1)
 800426e:	45c8      	cmp	r8, r9
 8004270:	d109      	bne.n	8004286 <vlc_print+0x442>
    buf[idx--] = '0';
 8004272:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 8004276:	2230      	movs	r2, #48	; 0x30
    count++;
 8004278:	f109 0901 	add.w	r9, r9, #1
    buf[idx--] = '0';
 800427c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004280:	446b      	add	r3, sp
 8004282:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (is_signed) {
 8004286:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800428a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800428e:	d509      	bpl.n	80042a4 <vlc_print+0x460>
    buf[idx--] = '-';
 8004290:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 8004294:	222d      	movs	r2, #45	; 0x2d
    count++;
 8004296:	f109 0901 	add.w	r9, r9, #1
    buf[idx--] = '-';
 800429a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800429e:	446b      	add	r3, sp
 80042a0:	f803 2c40 	strb.w	r2, [r3, #-64]
  while (count < specifier->width) {
 80042a4:	f8dd 8014 	ldr.w	r8, [sp, #20]
    buf[idx--] = ' ';
 80042a8:	ab0a      	add	r3, sp, #40	; 0x28
 80042aa:	2120      	movs	r1, #32
 80042ac:	45c1      	cmp	r9, r8
 80042ae:	f1c8 0001 	rsb	r0, r8, #1
 80042b2:	eba8 0b09 	sub.w	fp, r8, r9
 80042b6:	4448      	add	r0, r9
 80042b8:	bf84      	itt	hi
 80042ba:	2001      	movhi	r0, #1
 80042bc:	f04f 0b00 	movhi.w	fp, #0
 80042c0:	4450      	add	r0, sl
 80042c2:	465a      	mov	r2, fp
 80042c4:	44cb      	add	fp, r9
 80042c6:	4418      	add	r0, r3
 80042c8:	f005 f975 	bl	80095b6 <memset>
 80042cc:	eba9 0308 	sub.w	r3, r9, r8
 80042d0:	aa0a      	add	r2, sp, #40	; 0x28
 80042d2:	45c1      	cmp	r9, r8
 80042d4:	bf88      	it	hi
 80042d6:	2300      	movhi	r3, #0
  for(int i = 0; i < count; i++) {
 80042d8:	4453      	add	r3, sl
 80042da:	eb02 0903 	add.w	r9, r2, r3
 80042de:	445b      	add	r3, fp
 80042e0:	eb03 0802 	add.w	r8, r3, r2
 80042e4:	45c8      	cmp	r8, r9
 80042e6:	d109      	bne.n	80042fc <vlc_print+0x4b8>
            count += _write_double(dbl, &specifier);
 80042e8:	9b01      	ldr	r3, [sp, #4]
 80042ea:	445b      	add	r3, fp
 80042ec:	e6e0      	b.n	80040b0 <vlc_print+0x26c>
    mul *= 10;
 80042ee:	ee27 7b06 	vmul.f64	d7, d7, d6
  for (int i=0;i <specifier->precision; i++)
 80042f2:	3301      	adds	r3, #1
 80042f4:	e74d      	b.n	8004192 <vlc_print+0x34e>
 80042f6:	eeb0 5b48 	vmov.f64	d5, d8
 80042fa:	e755      	b.n	80041a8 <vlc_print+0x364>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 80042fc:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8004300:	4638      	mov	r0, r7
 8004302:	47b0      	blx	r6
  for(int i = 0; i < count; i++) {
 8004304:	e7ee      	b.n	80042e4 <vlc_print+0x4a0>
        if (!c)
 8004306:	f04f 0901 	mov.w	r9, #1
 800430a:	e5c6      	b.n	8003e9a <vlc_print+0x56>
 800430c:	b10b      	cbz	r3, 8004312 <vlc_print+0x4ce>
 800430e:	f8cd c01c 	str.w	ip, [sp, #28]
 8004312:	f1be 0f00 	cmp.w	lr, #0
 8004316:	d000      	beq.n	800431a <vlc_print+0x4d6>
 8004318:	9206      	str	r2, [sp, #24]
 800431a:	f1b8 0f00 	cmp.w	r8, #0
 800431e:	d000      	beq.n	8004322 <vlc_print+0x4de>
 8004320:	9005      	str	r0, [sp, #20]
              if (long_type)
 8004322:	f1bb 0f00 	cmp.w	fp, #0
 8004326:	f47f af11 	bne.w	800414c <vlc_print+0x308>
                val = va_arg(vl, unsigned int);
 800432a:	46a0      	mov	r8, r4
 800432c:	4659      	mov	r1, fp
 800432e:	f858 0b04 	ldr.w	r0, [r8], #4
 8004332:	e702      	b.n	800413a <vlc_print+0x2f6>
        if (!c)
 8004334:	f04f 0b01 	mov.w	fp, #1
      while (done == false) {
 8004338:	e5af      	b.n	8003e9a <vlc_print+0x56>
 800433a:	bf00      	nop
 800433c:	0800bf40 	.word	0x0800bf40

08004340 <ai_myrnn_get_report>:


AI_API_ENTRY
ai_bool ai_myrnn_get_report(
  ai_handle network, ai_network_report* report)
{
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	460d      	mov	r5, r1
 8004344:	b0a2      	sub	sp, #136	; 0x88
 8004346:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8004348:	f000 fd06 	bl	8004d58 <ai_platform_context_acquire>
 800434c:	4604      	mov	r4, r0

  if (report && net_ctx)
 800434e:	2d00      	cmp	r5, #0
 8004350:	d034      	beq.n	80043bc <ai_myrnn_get_report+0x7c>
 8004352:	2800      	cmp	r0, #0
 8004354:	d02f      	beq.n	80043b6 <ai_myrnn_get_report+0x76>
  {
    ai_network_report r = {
 8004356:	2278      	movs	r2, #120	; 0x78
 8004358:	2100      	movs	r1, #0
 800435a:	a804      	add	r0, sp, #16
 800435c:	f005 f92b 	bl	80095b6 <memset>
 8004360:	4b17      	ldr	r3, [pc, #92]	; (80043c0 <ai_myrnn_get_report+0x80>)
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	4b17      	ldr	r3, [pc, #92]	; (80043c4 <ai_myrnn_get_report+0x84>)
 8004366:	9301      	str	r3, [sp, #4]
 8004368:	4b17      	ldr	r3, [pc, #92]	; (80043c8 <ai_myrnn_get_report+0x88>)
 800436a:	9302      	str	r3, [sp, #8]
 800436c:	4b17      	ldr	r3, [pc, #92]	; (80043cc <ai_myrnn_get_report+0x8c>)
 800436e:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_MYRNN_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 8004370:	f000 faa6 	bl	80048c0 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 8004374:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 8004376:	f000 fb27 	bl	80049c8 <ai_platform_runtime_get_version>
    ai_network_report r = {
 800437a:	4b15      	ldr	r3, [pc, #84]	; (80043d0 <ai_myrnn_get_report+0x90>)
      .runtime_version   = ai_platform_runtime_get_version(),
 800437c:	9005      	str	r0, [sp, #20]
    ai_network_report r = {
 800437e:	9306      	str	r3, [sp, #24]
 8004380:	f44f 7384 	mov.w	r3, #264	; 0x108
 8004384:	f8ad 301c 	strh.w	r3, [sp, #28]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 8004388:	f000 fbb6 	bl	8004af8 <ai_platform_api_get_version>
 800438c:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800438e:	f000 fc4b 	bl	8004c28 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8004392:	4a10      	ldr	r2, [pc, #64]	; (80043d4 <ai_myrnn_get_report+0x94>)
 8004394:	2300      	movs	r3, #0
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004396:	900a      	str	r0, [sp, #40]	; 0x28
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004398:	4669      	mov	r1, sp
 800439a:	4630      	mov	r0, r6
    ai_network_report r = {
 800439c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80043a0:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <ai_myrnn_get_report+0x98>)
 80043a2:	9311      	str	r3, [sp, #68]	; 0x44
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 80043a4:	f000 fe76 	bl	8005094 <ai_platform_api_get_network_report>
 80043a8:	4604      	mov	r4, r0
 80043aa:	b120      	cbz	r0, 80043b6 <ai_myrnn_get_report+0x76>

    *report = r;
 80043ac:	2288      	movs	r2, #136	; 0x88
 80043ae:	4669      	mov	r1, sp
 80043b0:	4628      	mov	r0, r5
 80043b2:	f005 f9a1 	bl	80096f8 <memcpy>
    return true;
  }
  return false;
}
 80043b6:	4620      	mov	r0, r4
 80043b8:	b022      	add	sp, #136	; 0x88
 80043ba:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 80043bc:	462c      	mov	r4, r5
 80043be:	e7fa      	b.n	80043b6 <ai_myrnn_get_report+0x76>
 80043c0:	0800bf0c 	.word	0x0800bf0c
 80043c4:	0800bf47 	.word	0x0800bf47
 80043c8:	0800bf68 	.word	0x0800bf68
 80043cc:	0800bf81 	.word	0x0800bf81
 80043d0:	080107ee 	.word	0x080107ee
 80043d4:	0003394b 	.word	0x0003394b
 80043d8:	a1facade 	.word	0xa1facade

080043dc <ai_myrnn_get_error>:

AI_API_ENTRY
ai_error ai_myrnn_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 80043dc:	f000 bd48 	b.w	8004e70 <ai_platform_network_get_error>

080043e0 <ai_myrnn_create>:
}

AI_API_ENTRY
ai_error ai_myrnn_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80043e0:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 80043e2:	2305      	movs	r3, #5
 80043e4:	2200      	movs	r2, #0
 80043e6:	e9cd 3200 	strd	r3, r2, [sp]
 80043ea:	2301      	movs	r3, #1
 80043ec:	4a02      	ldr	r2, [pc, #8]	; (80043f8 <ai_myrnn_create+0x18>)
 80043ee:	f001 fa7d 	bl	80058ec <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 80043f2:	b003      	add	sp, #12
 80043f4:	f85d fb04 	ldr.w	pc, [sp], #4
 80043f8:	200003a4 	.word	0x200003a4

080043fc <ai_myrnn_destroy>:
}

AI_API_ENTRY
ai_handle ai_myrnn_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 80043fc:	f001 bc50 	b.w	8005ca0 <ai_platform_network_destroy>

08004400 <ai_myrnn_init>:
}

AI_API_ENTRY
ai_bool ai_myrnn_init(
  ai_handle network, const ai_network_params* params)
{
 8004400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004404:	4607      	mov	r7, r0
 8004406:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8004408:	f001 fd52 	bl	8005eb0 <ai_platform_network_init>
  if (!net_ctx) return false;
 800440c:	4604      	mov	r4, r0
 800440e:	2800      	cmp	r0, #0
 8004410:	d05b      	beq.n	80044ca <ai_myrnn_init+0xca>
  if (ai_platform_get_weights_map(g_myrnn_weights_map, 1, params)) {
 8004412:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8004510 <ai_myrnn_init+0x110>
 8004416:	4632      	mov	r2, r6
 8004418:	2101      	movs	r1, #1
 800441a:	4640      	mov	r0, r8
 800441c:	f000 f986 	bl	800472c <ai_platform_get_weights_map>
 8004420:	4605      	mov	r5, r0
 8004422:	2800      	cmp	r0, #0
 8004424:	d053      	beq.n	80044ce <ai_myrnn_init+0xce>
    simple_rnn_kernel_array.format |= AI_FMT_FLAG_CONST;
 8004426:	4a30      	ldr	r2, [pc, #192]	; (80044e8 <ai_myrnn_init+0xe8>)
 8004428:	6813      	ldr	r3, [r2, #0]
 800442a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800442e:	6013      	str	r3, [r2, #0]
    simple_rnn_kernel_array.data = AI_PTR(g_myrnn_weights_map[0] + 0);
 8004430:	f8d8 3000 	ldr.w	r3, [r8]
    simple_rnn_kernel_array.data_start = AI_PTR(g_myrnn_weights_map[0] + 0);
 8004434:	e9c2 3302 	strd	r3, r3, [r2, #8]
    simple_rnn_recurrent_array.format |= AI_FMT_FLAG_CONST;
 8004438:	4a2c      	ldr	r2, [pc, #176]	; (80044ec <ai_myrnn_init+0xec>)
 800443a:	6811      	ldr	r1, [r2, #0]
 800443c:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004440:	6011      	str	r1, [r2, #0]
    simple_rnn_recurrent_array.data = AI_PTR(g_myrnn_weights_map[0] + 256);
 8004442:	f503 7180 	add.w	r1, r3, #256	; 0x100
    simple_rnn_recurrent_array.data_start = AI_PTR(g_myrnn_weights_map[0] + 256);
 8004446:	e9c2 1102 	strd	r1, r1, [r2, #8]
    simple_rnn_bias_array.format |= AI_FMT_FLAG_CONST;
 800444a:	4a29      	ldr	r2, [pc, #164]	; (80044f0 <ai_myrnn_init+0xf0>)
 800444c:	6811      	ldr	r1, [r2, #0]
 800444e:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004452:	6011      	str	r1, [r2, #0]
    simple_rnn_bias_array.data = AI_PTR(g_myrnn_weights_map[0] + 16640);
 8004454:	f503 4182 	add.w	r1, r3, #16640	; 0x4100
    simple_rnn_bias_array.data_start = AI_PTR(g_myrnn_weights_map[0] + 16640);
 8004458:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 800445c:	4a25      	ldr	r2, [pc, #148]	; (80044f4 <ai_myrnn_init+0xf4>)
 800445e:	6811      	ldr	r1, [r2, #0]
 8004460:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 8004464:	6011      	str	r1, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_myrnn_weights_map[0] + 16896);
 8004466:	f503 4184 	add.w	r1, r3, #16896	; 0x4200
    dense_dense_bias_array.data = AI_PTR(g_myrnn_weights_map[0] + 17152);
 800446a:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
    dense_dense_weights_array.data_start = AI_PTR(g_myrnn_weights_map[0] + 16896);
 800446e:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004472:	4a21      	ldr	r2, [pc, #132]	; (80044f8 <ai_myrnn_init+0xf8>)
 8004474:	6811      	ldr	r1, [r2, #0]
 8004476:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    dense_dense_bias_array.data_start = AI_PTR(g_myrnn_weights_map[0] + 17152);
 800447a:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800447e:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_myrnn_activations_map, 1, params)) {
 8004480:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004514 <ai_myrnn_init+0x114>
 8004484:	4632      	mov	r2, r6
 8004486:	2101      	movs	r1, #1
 8004488:	4640      	mov	r0, r8
 800448a:	f000 f9a7 	bl	80047dc <ai_platform_get_activations_map>
 800448e:	4606      	mov	r6, r0
 8004490:	b318      	cbz	r0, 80044da <ai_myrnn_init+0xda>
    input_0_output_array.data = AI_PTR(g_myrnn_activations_map[0] + 0);
 8004492:	f8d8 3000 	ldr.w	r3, [r8]
 8004496:	4a19      	ldr	r2, [pc, #100]	; (80044fc <ai_myrnn_init+0xfc>)
    simple_rnn_scratch0_array.data = AI_PTR(g_myrnn_activations_map[0] + 200);
 8004498:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
    input_0_output_array.data_start = AI_PTR(g_myrnn_activations_map[0] + 0);
 800449c:	e9c2 3302 	strd	r3, r3, [r2, #8]
    simple_rnn_scratch0_array.data = AI_PTR(g_myrnn_activations_map[0] + 200);
 80044a0:	4a17      	ldr	r2, [pc, #92]	; (8004500 <ai_myrnn_init+0x100>)
    simple_rnn_scratch0_array.data_start = AI_PTR(g_myrnn_activations_map[0] + 200);
 80044a2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    simple_rnn_output_array.data = AI_PTR(g_myrnn_activations_map[0] + 712);
 80044a6:	f503 7132 	add.w	r1, r3, #712	; 0x2c8
 80044aa:	4a16      	ldr	r2, [pc, #88]	; (8004504 <ai_myrnn_init+0x104>)
    simple_rnn_output_array.data_start = AI_PTR(g_myrnn_activations_map[0] + 712);
 80044ac:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_output_array.data = AI_PTR(g_myrnn_activations_map[0] + 0);
 80044b0:	4a15      	ldr	r2, [pc, #84]	; (8004508 <ai_myrnn_init+0x108>)
    dense_dense_output_array.data_start = AI_PTR(g_myrnn_activations_map[0] + 0);
 80044b2:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_output_array.data = AI_PTR(g_myrnn_activations_map[0] + 4);
 80044b6:	3304      	adds	r3, #4
 80044b8:	4a14      	ldr	r2, [pc, #80]	; (800450c <ai_myrnn_init+0x10c>)
    dense_output_array.data_start = AI_PTR(g_myrnn_activations_map[0] + 4);
 80044ba:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= myrnn_configure_weights(net_ctx, params);
  ok &= myrnn_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 80044be:	4638      	mov	r0, r7
 80044c0:	f001 fe92 	bl	80061e8 <ai_platform_network_post_init>
 80044c4:	4030      	ands	r0, r6
 80044c6:	4005      	ands	r5, r0
 80044c8:	b2e8      	uxtb	r0, r5

  return ok;
}
 80044ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80044ce:	2212      	movs	r2, #18
 80044d0:	2130      	movs	r1, #48	; 0x30
 80044d2:	4620      	mov	r0, r4
 80044d4:	f000 fdd8 	bl	8005088 <ai_platform_network_set_error>
  return false;
 80044d8:	e7d2      	b.n	8004480 <ai_myrnn_init+0x80>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80044da:	2213      	movs	r2, #19
 80044dc:	2130      	movs	r1, #48	; 0x30
 80044de:	4620      	mov	r0, r4
 80044e0:	f000 fdd2 	bl	8005088 <ai_platform_network_set_error>
  return false;
 80044e4:	e7eb      	b.n	80044be <ai_myrnn_init+0xbe>
 80044e6:	bf00      	nop
 80044e8:	20000464 	.word	0x20000464
 80044ec:	200004e4 	.word	0x200004e4
 80044f0:	20000438 	.word	0x20000438
 80044f4:	20000348 	.word	0x20000348
 80044f8:	200002d4 	.word	0x200002d4
 80044fc:	2000040c 	.word	0x2000040c
 8004500:	20000510 	.word	0x20000510
 8004504:	200004b8 	.word	0x200004b8
 8004508:	2000031c 	.word	0x2000031c
 800450c:	20000394 	.word	0x20000394
 8004510:	20000da0 	.word	0x20000da0
 8004514:	20000d9c 	.word	0x20000d9c

08004518 <ai_myrnn_run>:

AI_API_ENTRY
ai_i32 ai_myrnn_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8004518:	f001 bf90 	b.w	800643c <ai_platform_network_process>

0800451c <ai_myrnn_forward>:
}

AI_API_ENTRY
ai_i32 ai_myrnn_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 800451c:	2200      	movs	r2, #0
 800451e:	f001 bf8d 	b.w	800643c <ai_platform_network_process>
	...

08004524 <ai_myrnn_data_params_get>:
 * @ingroup myrnn_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_myrnn_data_params_get(ai_network_params* params)
{
 8004524:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 8004526:	4603      	mov	r3, r0
{
 8004528:	b085      	sub	sp, #20
  if (!params) return false;
 800452a:	b170      	cbz	r0, 800454a <ai_myrnn_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 800452c:	4c08      	ldr	r4, [pc, #32]	; (8004550 <ai_myrnn_data_params_get+0x2c>)
 800452e:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MYRNN_DATA_ACTIVATIONS_COUNT, g_myrnn_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8004530:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 8004532:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004536:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 800453a:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 800453e:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MYRNN_DATA_WEIGHTS_COUNT, g_myrnn_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8004542:	4629      	mov	r1, r5
 8004544:	4618      	mov	r0, r3
 8004546:	f000 f9a1 	bl	800488c <ai_platform_bind_network_params>
}
 800454a:	b005      	add	sp, #20
 800454c:	bd30      	pop	{r4, r5, pc}
 800454e:	bf00      	nop
 8004550:	0800be9c 	.word	0x0800be9c

08004554 <ai_buffer_get_size>:
 8004554:	b368      	cbz	r0, 80045b2 <ai_buffer_get_size+0x5e>
 8004556:	4b17      	ldr	r3, [pc, #92]	; (80045b4 <ai_buffer_get_size+0x60>)
 8004558:	4a17      	ldr	r2, [pc, #92]	; (80045b8 <ai_buffer_get_size+0x64>)
 800455a:	b410      	push	{r4}
 800455c:	6804      	ldr	r4, [r0, #0]
 800455e:	4023      	ands	r3, r4
 8004560:	4293      	cmp	r3, r2
 8004562:	d123      	bne.n	80045ac <ai_buffer_get_size+0x58>
 8004564:	b311      	cbz	r1, 80045ac <ai_buffer_get_size+0x58>
 8004566:	6984      	ldr	r4, [r0, #24]
 8004568:	6862      	ldr	r2, [r4, #4]
 800456a:	321f      	adds	r2, #31
 800456c:	f022 021f 	bic.w	r2, r2, #31
 8004570:	7d03      	ldrb	r3, [r0, #20]
 8004572:	6941      	ldr	r1, [r0, #20]
 8004574:	f1a3 0301 	sub.w	r3, r3, #1
 8004578:	f3c1 2017 	ubfx	r0, r1, #8, #24
 800457c:	fab3 f383 	clz	r3, r3
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8004586:	da0c      	bge.n	80045a2 <ai_buffer_get_size+0x4e>
 8004588:	2b01      	cmp	r3, #1
 800458a:	d103      	bne.n	8004594 <ai_buffer_get_size+0x40>
 800458c:	2802      	cmp	r0, #2
 800458e:	f04f 0302 	mov.w	r3, #2
 8004592:	d006      	beq.n	80045a2 <ai_buffer_get_size+0x4e>
 8004594:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8004598:	3301      	adds	r3, #1
 800459a:	4298      	cmp	r0, r3
 800459c:	fb01 f202 	mul.w	r2, r1, r2
 80045a0:	d1f2      	bne.n	8004588 <ai_buffer_get_size+0x34>
 80045a2:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80045a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80045aa:	4770      	bx	lr
 80045ac:	6984      	ldr	r4, [r0, #24]
 80045ae:	6862      	ldr	r2, [r4, #4]
 80045b0:	e7de      	b.n	8004570 <ai_buffer_get_size+0x1c>
 80045b2:	4770      	bx	lr
 80045b4:	017fffff 	.word	0x017fffff
 80045b8:	000400c0 	.word	0x000400c0

080045bc <ai_buffer_get_byte_size>:
 80045bc:	b128      	cbz	r0, 80045ca <ai_buffer_get_byte_size+0xe>
 80045be:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 80045c2:	fb01 f000 	mul.w	r0, r1, r0
 80045c6:	3007      	adds	r0, #7
 80045c8:	08c0      	lsrs	r0, r0, #3
 80045ca:	4770      	bx	lr

080045cc <ai_buffer_array_sane>:
 80045cc:	b138      	cbz	r0, 80045de <ai_buffer_array_sane+0x12>
 80045ce:	6843      	ldr	r3, [r0, #4]
 80045d0:	b123      	cbz	r3, 80045dc <ai_buffer_array_sane+0x10>
 80045d2:	8840      	ldrh	r0, [r0, #2]
 80045d4:	3800      	subs	r0, #0
 80045d6:	bf18      	it	ne
 80045d8:	2001      	movne	r0, #1
 80045da:	4770      	bx	lr
 80045dc:	4618      	mov	r0, r3
 80045de:	4770      	bx	lr

080045e0 <ai_buffer_array_item_set_address>:
 80045e0:	b150      	cbz	r0, 80045f8 <ai_buffer_array_item_set_address+0x18>
 80045e2:	6843      	ldr	r3, [r0, #4]
 80045e4:	b14b      	cbz	r3, 80045fa <ai_buffer_array_item_set_address+0x1a>
 80045e6:	8840      	ldrh	r0, [r0, #2]
 80045e8:	b900      	cbnz	r0, 80045ec <ai_buffer_array_item_set_address+0xc>
 80045ea:	4770      	bx	lr
 80045ec:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 80045f0:	2001      	movs	r0, #1
 80045f2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80045f6:	604a      	str	r2, [r1, #4]
 80045f8:	4770      	bx	lr
 80045fa:	4618      	mov	r0, r3
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop

08004600 <_platform_observer_node_exec_cb>:
 8004600:	2a00      	cmp	r2, #0
 8004602:	d06c      	beq.n	80046de <_platform_observer_node_exec_cb+0xde>
 8004604:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004608:	6815      	ldr	r5, [r2, #0]
 800460a:	b085      	sub	sp, #20
 800460c:	4614      	mov	r4, r2
 800460e:	2d00      	cmp	r5, #0
 8004610:	d067      	beq.n	80046e2 <_platform_observer_node_exec_cb+0xe2>
 8004612:	8993      	ldrh	r3, [r2, #12]
 8004614:	f240 2c02 	movw	ip, #514	; 0x202
 8004618:	89d2      	ldrh	r2, [r2, #14]
 800461a:	460e      	mov	r6, r1
 800461c:	2b00      	cmp	r3, #0
 800461e:	f240 3102 	movw	r1, #770	; 0x302
 8004622:	f102 32ff 	add.w	r2, r2, #4294967295
 8004626:	f240 3e01 	movw	lr, #769	; 0x301
 800462a:	bf18      	it	ne
 800462c:	4667      	movne	r7, ip
 800462e:	f240 2c01 	movw	ip, #513	; 0x201
 8004632:	bf0d      	iteet	eq
 8004634:	460f      	moveq	r7, r1
 8004636:	f44f 7901 	movne.w	r9, #516	; 0x204
 800463a:	46e6      	movne	lr, ip
 800463c:	f44f 7941 	moveq.w	r9, #772	; 0x304
 8004640:	f240 1c01 	movw	ip, #257	; 0x101
 8004644:	bf1b      	ittet	ne
 8004646:	f04f 0804 	movne.w	r8, #4
 800464a:	f04f 0c01 	movne.w	ip, #1
 800464e:	f44f 7882 	moveq.w	r8, #260	; 0x104
 8004652:	2102      	movne	r1, #2
 8004654:	bf08      	it	eq
 8004656:	f44f 7181 	moveq.w	r1, #258	; 0x102
 800465a:	429a      	cmp	r2, r3
 800465c:	d013      	beq.n	8004686 <_platform_observer_node_exec_cb+0x86>
 800465e:	b148      	cbz	r0, 8004674 <_platform_observer_node_exec_cb+0x74>
 8004660:	2801      	cmp	r0, #1
 8004662:	d042      	beq.n	80046ea <_platform_observer_node_exec_cb+0xea>
 8004664:	2802      	cmp	r0, #2
 8004666:	d025      	beq.n	80046b4 <_platform_observer_node_exec_cb+0xb4>
 8004668:	2803      	cmp	r0, #3
 800466a:	d045      	beq.n	80046f8 <_platform_observer_node_exec_cb+0xf8>
 800466c:	2000      	movs	r0, #0
 800466e:	b005      	add	sp, #20
 8004670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004674:	68a2      	ldr	r2, [r4, #8]
 8004676:	07d7      	lsls	r7, r2, #31
 8004678:	d40b      	bmi.n	8004692 <_platform_observer_node_exec_cb+0x92>
 800467a:	3301      	adds	r3, #1
 800467c:	2000      	movs	r0, #0
 800467e:	81a3      	strh	r3, [r4, #12]
 8004680:	b005      	add	sp, #20
 8004682:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004686:	46c8      	mov	r8, r9
 8004688:	4639      	mov	r1, r7
 800468a:	46f4      	mov	ip, lr
 800468c:	2800      	cmp	r0, #0
 800468e:	d1e7      	bne.n	8004660 <_platform_observer_node_exec_cb+0x60>
 8004690:	e7f0      	b.n	8004674 <_platform_observer_node_exec_cb+0x74>
 8004692:	f8ad 3000 	strh.w	r3, [sp]
 8004696:	466a      	mov	r2, sp
 8004698:	8873      	ldrh	r3, [r6, #2]
 800469a:	4661      	mov	r1, ip
 800469c:	9002      	str	r0, [sp, #8]
 800469e:	f8ad 3004 	strh.w	r3, [sp, #4]
 80046a2:	8833      	ldrh	r3, [r6, #0]
 80046a4:	6860      	ldr	r0, [r4, #4]
 80046a6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80046aa:	69b3      	ldr	r3, [r6, #24]
 80046ac:	9303      	str	r3, [sp, #12]
 80046ae:	47a8      	blx	r5
 80046b0:	89a3      	ldrh	r3, [r4, #12]
 80046b2:	e7e2      	b.n	800467a <_platform_observer_node_exec_cb+0x7a>
 80046b4:	68a2      	ldr	r2, [r4, #8]
 80046b6:	6126      	str	r6, [r4, #16]
 80046b8:	0790      	lsls	r0, r2, #30
 80046ba:	d5d7      	bpl.n	800466c <_platform_observer_node_exec_cb+0x6c>
 80046bc:	f8ad 3000 	strh.w	r3, [sp]
 80046c0:	8873      	ldrh	r3, [r6, #2]
 80046c2:	8832      	ldrh	r2, [r6, #0]
 80046c4:	6860      	ldr	r0, [r4, #4]
 80046c6:	2400      	movs	r4, #0
 80046c8:	f8ad 3004 	strh.w	r3, [sp, #4]
 80046cc:	69b3      	ldr	r3, [r6, #24]
 80046ce:	f8ad 2002 	strh.w	r2, [sp, #2]
 80046d2:	466a      	mov	r2, sp
 80046d4:	e9cd 4302 	strd	r4, r3, [sp, #8]
 80046d8:	47a8      	blx	r5
 80046da:	4620      	mov	r0, r4
 80046dc:	e7d0      	b.n	8004680 <_platform_observer_node_exec_cb+0x80>
 80046de:	2001      	movs	r0, #1
 80046e0:	4770      	bx	lr
 80046e2:	2001      	movs	r0, #1
 80046e4:	b005      	add	sp, #20
 80046e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046ea:	2300      	movs	r3, #0
 80046ec:	6126      	str	r6, [r4, #16]
 80046ee:	4618      	mov	r0, r3
 80046f0:	81a3      	strh	r3, [r4, #12]
 80046f2:	b005      	add	sp, #20
 80046f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046f8:	68a2      	ldr	r2, [r4, #8]
 80046fa:	0752      	lsls	r2, r2, #29
 80046fc:	d5bd      	bpl.n	800467a <_platform_observer_node_exec_cb+0x7a>
 80046fe:	6922      	ldr	r2, [r4, #16]
 8004700:	2000      	movs	r0, #0
 8004702:	f8ad 3000 	strh.w	r3, [sp]
 8004706:	4641      	mov	r1, r8
 8004708:	8853      	ldrh	r3, [r2, #2]
 800470a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800470e:	8813      	ldrh	r3, [r2, #0]
 8004710:	f8ad 3002 	strh.w	r3, [sp, #2]
 8004714:	6993      	ldr	r3, [r2, #24]
 8004716:	466a      	mov	r2, sp
 8004718:	9002      	str	r0, [sp, #8]
 800471a:	9303      	str	r3, [sp, #12]
 800471c:	6860      	ldr	r0, [r4, #4]
 800471e:	47a8      	blx	r5
 8004720:	89a3      	ldrh	r3, [r4, #12]
 8004722:	e7aa      	b.n	800467a <_platform_observer_node_exec_cb+0x7a>

08004724 <_ai_platform_acquire_crc>:
 8004724:	2001      	movs	r0, #1
 8004726:	4770      	bx	lr

08004728 <_ai_platform_release_crc>:
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop

0800472c <ai_platform_get_weights_map>:
 800472c:	2900      	cmp	r1, #0
 800472e:	bf18      	it	ne
 8004730:	2800      	cmpne	r0, #0
 8004732:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004734:	bf0c      	ite	eq
 8004736:	2401      	moveq	r4, #1
 8004738:	2400      	movne	r4, #0
 800473a:	2a00      	cmp	r2, #0
 800473c:	bf08      	it	eq
 800473e:	f044 0401 	orreq.w	r4, r4, #1
 8004742:	b114      	cbz	r4, 800474a <ai_platform_get_weights_map+0x1e>
 8004744:	2400      	movs	r4, #0
 8004746:	4620      	mov	r0, r4
 8004748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800474a:	4616      	mov	r6, r2
 800474c:	4b22      	ldr	r3, [pc, #136]	; (80047d8 <ai_platform_get_weights_map+0xac>)
 800474e:	6812      	ldr	r2, [r2, #0]
 8004750:	4605      	mov	r5, r0
 8004752:	460f      	mov	r7, r1
 8004754:	429a      	cmp	r2, r3
 8004756:	d022      	beq.n	800479e <ai_platform_get_weights_map+0x72>
 8004758:	6870      	ldr	r0, [r6, #4]
 800475a:	2800      	cmp	r0, #0
 800475c:	d0f2      	beq.n	8004744 <ai_platform_get_weights_map+0x18>
 800475e:	6806      	ldr	r6, [r0, #0]
 8004760:	429e      	cmp	r6, r3
 8004762:	d006      	beq.n	8004772 <ai_platform_get_weights_map+0x46>
 8004764:	f1a1 0401 	sub.w	r4, r1, #1
 8004768:	6028      	str	r0, [r5, #0]
 800476a:	fab4 f484 	clz	r4, r4
 800476e:	0964      	lsrs	r4, r4, #5
 8004770:	e7e9      	b.n	8004746 <ai_platform_get_weights_map+0x1a>
 8004772:	3d04      	subs	r5, #4
 8004774:	4602      	mov	r2, r0
 8004776:	4621      	mov	r1, r4
 8004778:	e000      	b.n	800477c <ai_platform_get_weights_map+0x50>
 800477a:	4619      	mov	r1, r3
 800477c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8004780:	42b3      	cmp	r3, r6
 8004782:	d025      	beq.n	80047d0 <ai_platform_get_weights_map+0xa4>
 8004784:	f845 3f04 	str.w	r3, [r5, #4]!
 8004788:	1c4b      	adds	r3, r1, #1
 800478a:	429f      	cmp	r7, r3
 800478c:	d8f5      	bhi.n	800477a <ai_platform_get_weights_map+0x4e>
 800478e:	d1da      	bne.n	8004746 <ai_platform_get_weights_map+0x1a>
 8004790:	3102      	adds	r1, #2
 8004792:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8004796:	42b3      	cmp	r3, r6
 8004798:	d1d5      	bne.n	8004746 <ai_platform_get_weights_map+0x1a>
 800479a:	2401      	movs	r4, #1
 800479c:	e7d3      	b.n	8004746 <ai_platform_get_weights_map+0x1a>
 800479e:	1d30      	adds	r0, r6, #4
 80047a0:	f7ff ff14 	bl	80045cc <ai_buffer_array_sane>
 80047a4:	2800      	cmp	r0, #0
 80047a6:	d0cd      	beq.n	8004744 <ai_platform_get_weights_map+0x18>
 80047a8:	88f3      	ldrh	r3, [r6, #6]
 80047aa:	429f      	cmp	r7, r3
 80047ac:	d1ca      	bne.n	8004744 <ai_platform_get_weights_map+0x18>
 80047ae:	3d04      	subs	r5, #4
 80047b0:	4622      	mov	r2, r4
 80047b2:	68b3      	ldr	r3, [r6, #8]
 80047b4:	4423      	add	r3, r4
 80047b6:	341c      	adds	r4, #28
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	b123      	cbz	r3, 80047c6 <ai_platform_get_weights_map+0x9a>
 80047bc:	3201      	adds	r2, #1
 80047be:	f845 3f04 	str.w	r3, [r5, #4]!
 80047c2:	4297      	cmp	r7, r2
 80047c4:	d8f5      	bhi.n	80047b2 <ai_platform_get_weights_map+0x86>
 80047c6:	1abc      	subs	r4, r7, r2
 80047c8:	fab4 f484 	clz	r4, r4
 80047cc:	0964      	lsrs	r4, r4, #5
 80047ce:	e7ba      	b.n	8004746 <ai_platform_get_weights_map+0x1a>
 80047d0:	428f      	cmp	r7, r1
 80047d2:	d1b8      	bne.n	8004746 <ai_platform_get_weights_map+0x1a>
 80047d4:	e7e1      	b.n	800479a <ai_platform_get_weights_map+0x6e>
 80047d6:	bf00      	nop
 80047d8:	a1facade 	.word	0xa1facade

080047dc <ai_platform_get_activations_map>:
 80047dc:	2900      	cmp	r1, #0
 80047de:	bf18      	it	ne
 80047e0:	2800      	cmpne	r0, #0
 80047e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e4:	bf0c      	ite	eq
 80047e6:	2401      	moveq	r4, #1
 80047e8:	2400      	movne	r4, #0
 80047ea:	2a00      	cmp	r2, #0
 80047ec:	bf08      	it	eq
 80047ee:	f044 0401 	orreq.w	r4, r4, #1
 80047f2:	b114      	cbz	r4, 80047fa <ai_platform_get_activations_map+0x1e>
 80047f4:	2400      	movs	r4, #0
 80047f6:	4620      	mov	r0, r4
 80047f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047fa:	4616      	mov	r6, r2
 80047fc:	4b22      	ldr	r3, [pc, #136]	; (8004888 <ai_platform_get_activations_map+0xac>)
 80047fe:	6812      	ldr	r2, [r2, #0]
 8004800:	4605      	mov	r5, r0
 8004802:	460f      	mov	r7, r1
 8004804:	429a      	cmp	r2, r3
 8004806:	d022      	beq.n	800484e <ai_platform_get_activations_map+0x72>
 8004808:	6a30      	ldr	r0, [r6, #32]
 800480a:	2800      	cmp	r0, #0
 800480c:	d0f2      	beq.n	80047f4 <ai_platform_get_activations_map+0x18>
 800480e:	6806      	ldr	r6, [r0, #0]
 8004810:	429e      	cmp	r6, r3
 8004812:	d006      	beq.n	8004822 <ai_platform_get_activations_map+0x46>
 8004814:	f1a1 0401 	sub.w	r4, r1, #1
 8004818:	6028      	str	r0, [r5, #0]
 800481a:	fab4 f484 	clz	r4, r4
 800481e:	0964      	lsrs	r4, r4, #5
 8004820:	e7e9      	b.n	80047f6 <ai_platform_get_activations_map+0x1a>
 8004822:	3d04      	subs	r5, #4
 8004824:	4602      	mov	r2, r0
 8004826:	4621      	mov	r1, r4
 8004828:	e000      	b.n	800482c <ai_platform_get_activations_map+0x50>
 800482a:	4619      	mov	r1, r3
 800482c:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8004830:	42b3      	cmp	r3, r6
 8004832:	d026      	beq.n	8004882 <ai_platform_get_activations_map+0xa6>
 8004834:	f845 3f04 	str.w	r3, [r5, #4]!
 8004838:	1c4b      	adds	r3, r1, #1
 800483a:	429f      	cmp	r7, r3
 800483c:	d8f5      	bhi.n	800482a <ai_platform_get_activations_map+0x4e>
 800483e:	d1da      	bne.n	80047f6 <ai_platform_get_activations_map+0x1a>
 8004840:	3102      	adds	r1, #2
 8004842:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8004846:	42b3      	cmp	r3, r6
 8004848:	d1d5      	bne.n	80047f6 <ai_platform_get_activations_map+0x1a>
 800484a:	2401      	movs	r4, #1
 800484c:	e7d3      	b.n	80047f6 <ai_platform_get_activations_map+0x1a>
 800484e:	f106 000c 	add.w	r0, r6, #12
 8004852:	f7ff febb 	bl	80045cc <ai_buffer_array_sane>
 8004856:	2800      	cmp	r0, #0
 8004858:	d0cc      	beq.n	80047f4 <ai_platform_get_activations_map+0x18>
 800485a:	89f3      	ldrh	r3, [r6, #14]
 800485c:	429f      	cmp	r7, r3
 800485e:	d1c9      	bne.n	80047f4 <ai_platform_get_activations_map+0x18>
 8004860:	3d04      	subs	r5, #4
 8004862:	4622      	mov	r2, r4
 8004864:	6933      	ldr	r3, [r6, #16]
 8004866:	4423      	add	r3, r4
 8004868:	341c      	adds	r4, #28
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	b123      	cbz	r3, 8004878 <ai_platform_get_activations_map+0x9c>
 800486e:	3201      	adds	r2, #1
 8004870:	f845 3f04 	str.w	r3, [r5, #4]!
 8004874:	4297      	cmp	r7, r2
 8004876:	d8f5      	bhi.n	8004864 <ai_platform_get_activations_map+0x88>
 8004878:	1abc      	subs	r4, r7, r2
 800487a:	fab4 f484 	clz	r4, r4
 800487e:	0964      	lsrs	r4, r4, #5
 8004880:	e7b9      	b.n	80047f6 <ai_platform_get_activations_map+0x1a>
 8004882:	428f      	cmp	r7, r1
 8004884:	d1b7      	bne.n	80047f6 <ai_platform_get_activations_map+0x1a>
 8004886:	e7e0      	b.n	800484a <ai_platform_get_activations_map+0x6e>
 8004888:	a1facade 	.word	0xa1facade

0800488c <ai_platform_bind_network_params>:
 800488c:	2a00      	cmp	r2, #0
 800488e:	bf18      	it	ne
 8004890:	2900      	cmpne	r1, #0
 8004892:	d010      	beq.n	80048b6 <ai_platform_bind_network_params+0x2a>
 8004894:	b178      	cbz	r0, 80048b6 <ai_platform_bind_network_params+0x2a>
 8004896:	4603      	mov	r3, r0
 8004898:	4808      	ldr	r0, [pc, #32]	; (80048bc <ai_platform_bind_network_params+0x30>)
 800489a:	f103 0c0c 	add.w	ip, r3, #12
 800489e:	f843 0b04 	str.w	r0, [r3], #4
 80048a2:	c903      	ldmia	r1, {r0, r1}
 80048a4:	e883 0003 	stmia.w	r3, {r0, r1}
 80048a8:	2301      	movs	r3, #1
 80048aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80048ae:	e88c 0003 	stmia.w	ip, {r0, r1}
 80048b2:	4618      	mov	r0, r3
 80048b4:	4770      	bx	lr
 80048b6:	2300      	movs	r3, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	4770      	bx	lr
 80048bc:	a1facade 	.word	0xa1facade

080048c0 <ai_platform_runtime_get_revision>:
 80048c0:	b508      	push	{r3, lr}
 80048c2:	f7ff ff2f 	bl	8004724 <_ai_platform_acquire_crc>
 80048c6:	4b39      	ldr	r3, [pc, #228]	; (80049ac <ai_platform_runtime_get_revision+0xec>)
 80048c8:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048d2:	189a      	adds	r2, r3, r2
 80048d4:	2a01      	cmp	r2, #1
 80048d6:	d929      	bls.n	800492c <ai_platform_runtime_get_revision+0x6c>
 80048d8:	f240 4249 	movw	r2, #1097	; 0x449
 80048dc:	4293      	cmp	r3, r2
 80048de:	d025      	beq.n	800492c <ai_platform_runtime_get_revision+0x6c>
 80048e0:	4a33      	ldr	r2, [pc, #204]	; (80049b0 <ai_platform_runtime_get_revision+0xf0>)
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048e8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80048ec:	d02b      	beq.n	8004946 <ai_platform_runtime_get_revision+0x86>
 80048ee:	6813      	ldr	r3, [r2, #0]
 80048f0:	f240 4183 	movw	r1, #1155	; 0x483
 80048f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80048f8:	428b      	cmp	r3, r1
 80048fa:	d046      	beq.n	800498a <ai_platform_runtime_get_revision+0xca>
 80048fc:	6813      	ldr	r3, [r2, #0]
 80048fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004902:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004906:	d032      	beq.n	800496e <ai_platform_runtime_get_revision+0xae>
 8004908:	6813      	ldr	r3, [r2, #0]
 800490a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800490e:	2b00      	cmp	r3, #0
 8004910:	d129      	bne.n	8004966 <ai_platform_runtime_get_revision+0xa6>
 8004912:	4a28      	ldr	r2, [pc, #160]	; (80049b4 <ai_platform_runtime_get_revision+0xf4>)
 8004914:	2301      	movs	r3, #1
 8004916:	6093      	str	r3, [r2, #8]
 8004918:	6893      	ldr	r3, [r2, #8]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1fc      	bne.n	8004918 <ai_platform_runtime_get_revision+0x58>
 800491e:	4926      	ldr	r1, [pc, #152]	; (80049b8 <ai_platform_runtime_get_revision+0xf8>)
 8004920:	4b26      	ldr	r3, [pc, #152]	; (80049bc <ai_platform_runtime_get_revision+0xfc>)
 8004922:	6011      	str	r1, [r2, #0]
 8004924:	6812      	ldr	r2, [r2, #0]
 8004926:	429a      	cmp	r2, r3
 8004928:	d01d      	beq.n	8004966 <ai_platform_runtime_get_revision+0xa6>
 800492a:	e7fe      	b.n	800492a <ai_platform_runtime_get_revision+0x6a>
 800492c:	4a21      	ldr	r2, [pc, #132]	; (80049b4 <ai_platform_runtime_get_revision+0xf4>)
 800492e:	2301      	movs	r3, #1
 8004930:	6093      	str	r3, [r2, #8]
 8004932:	6893      	ldr	r3, [r2, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d1fc      	bne.n	8004932 <ai_platform_runtime_get_revision+0x72>
 8004938:	491f      	ldr	r1, [pc, #124]	; (80049b8 <ai_platform_runtime_get_revision+0xf8>)
 800493a:	4b20      	ldr	r3, [pc, #128]	; (80049bc <ai_platform_runtime_get_revision+0xfc>)
 800493c:	6011      	str	r1, [r2, #0]
 800493e:	6812      	ldr	r2, [r2, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d010      	beq.n	8004966 <ai_platform_runtime_get_revision+0xa6>
 8004944:	e7fe      	b.n	8004944 <ai_platform_runtime_get_revision+0x84>
 8004946:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <ai_platform_runtime_get_revision+0x100>)
 8004948:	2301      	movs	r3, #1
 800494a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800494e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1fb      	bne.n	800494e <ai_platform_runtime_get_revision+0x8e>
 8004956:	4918      	ldr	r1, [pc, #96]	; (80049b8 <ai_platform_runtime_get_revision+0xf8>)
 8004958:	4b18      	ldr	r3, [pc, #96]	; (80049bc <ai_platform_runtime_get_revision+0xfc>)
 800495a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800495e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004962:	429a      	cmp	r2, r3
 8004964:	d110      	bne.n	8004988 <ai_platform_runtime_get_revision+0xc8>
 8004966:	f7ff fedf 	bl	8004728 <_ai_platform_release_crc>
 800496a:	4816      	ldr	r0, [pc, #88]	; (80049c4 <ai_platform_runtime_get_revision+0x104>)
 800496c:	bd08      	pop	{r3, pc}
 800496e:	4a11      	ldr	r2, [pc, #68]	; (80049b4 <ai_platform_runtime_get_revision+0xf4>)
 8004970:	2301      	movs	r3, #1
 8004972:	6093      	str	r3, [r2, #8]
 8004974:	6893      	ldr	r3, [r2, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d1fc      	bne.n	8004974 <ai_platform_runtime_get_revision+0xb4>
 800497a:	490f      	ldr	r1, [pc, #60]	; (80049b8 <ai_platform_runtime_get_revision+0xf8>)
 800497c:	4b0f      	ldr	r3, [pc, #60]	; (80049bc <ai_platform_runtime_get_revision+0xfc>)
 800497e:	6011      	str	r1, [r2, #0]
 8004980:	6812      	ldr	r2, [r2, #0]
 8004982:	429a      	cmp	r2, r3
 8004984:	d0ef      	beq.n	8004966 <ai_platform_runtime_get_revision+0xa6>
 8004986:	e7fe      	b.n	8004986 <ai_platform_runtime_get_revision+0xc6>
 8004988:	e7fe      	b.n	8004988 <ai_platform_runtime_get_revision+0xc8>
 800498a:	4a0d      	ldr	r2, [pc, #52]	; (80049c0 <ai_platform_runtime_get_revision+0x100>)
 800498c:	2301      	movs	r3, #1
 800498e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004992:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1fb      	bne.n	8004992 <ai_platform_runtime_get_revision+0xd2>
 800499a:	4907      	ldr	r1, [pc, #28]	; (80049b8 <ai_platform_runtime_get_revision+0xf8>)
 800499c:	4b07      	ldr	r3, [pc, #28]	; (80049bc <ai_platform_runtime_get_revision+0xfc>)
 800499e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80049a2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d0dd      	beq.n	8004966 <ai_platform_runtime_get_revision+0xa6>
 80049aa:	e7fe      	b.n	80049aa <ai_platform_runtime_get_revision+0xea>
 80049ac:	e0042000 	.word	0xe0042000
 80049b0:	5c001000 	.word	0x5c001000
 80049b4:	40023000 	.word	0x40023000
 80049b8:	f407a5c2 	.word	0xf407a5c2
 80049bc:	b5e8b5cd 	.word	0xb5e8b5cd
 80049c0:	58024000 	.word	0x58024000
 80049c4:	08010314 	.word	0x08010314

080049c8 <ai_platform_runtime_get_version>:
 80049c8:	b500      	push	{lr}
 80049ca:	b083      	sub	sp, #12
 80049cc:	f7ff feaa 	bl	8004724 <_ai_platform_acquire_crc>
 80049d0:	4b42      	ldr	r3, [pc, #264]	; (8004adc <ai_platform_runtime_get_version+0x114>)
 80049d2:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049dc:	189a      	adds	r2, r3, r2
 80049de:	2a01      	cmp	r2, #1
 80049e0:	d929      	bls.n	8004a36 <ai_platform_runtime_get_version+0x6e>
 80049e2:	f240 4249 	movw	r2, #1097	; 0x449
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d025      	beq.n	8004a36 <ai_platform_runtime_get_version+0x6e>
 80049ea:	4a3d      	ldr	r2, [pc, #244]	; (8004ae0 <ai_platform_runtime_get_version+0x118>)
 80049ec:	6813      	ldr	r3, [r2, #0]
 80049ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80049f2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80049f6:	d02b      	beq.n	8004a50 <ai_platform_runtime_get_version+0x88>
 80049f8:	6813      	ldr	r3, [r2, #0]
 80049fa:	f240 4183 	movw	r1, #1155	; 0x483
 80049fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a02:	428b      	cmp	r3, r1
 8004a04:	d059      	beq.n	8004aba <ai_platform_runtime_get_version+0xf2>
 8004a06:	6813      	ldr	r3, [r2, #0]
 8004a08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a0c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004a10:	d045      	beq.n	8004a9e <ai_platform_runtime_get_version+0xd6>
 8004a12:	6813      	ldr	r3, [r2, #0]
 8004a14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d129      	bne.n	8004a70 <ai_platform_runtime_get_version+0xa8>
 8004a1c:	4a31      	ldr	r2, [pc, #196]	; (8004ae4 <ai_platform_runtime_get_version+0x11c>)
 8004a1e:	2301      	movs	r3, #1
 8004a20:	6093      	str	r3, [r2, #8]
 8004a22:	6893      	ldr	r3, [r2, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d1fc      	bne.n	8004a22 <ai_platform_runtime_get_version+0x5a>
 8004a28:	492f      	ldr	r1, [pc, #188]	; (8004ae8 <ai_platform_runtime_get_version+0x120>)
 8004a2a:	4b30      	ldr	r3, [pc, #192]	; (8004aec <ai_platform_runtime_get_version+0x124>)
 8004a2c:	6011      	str	r1, [r2, #0]
 8004a2e:	6812      	ldr	r2, [r2, #0]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d01d      	beq.n	8004a70 <ai_platform_runtime_get_version+0xa8>
 8004a34:	e7fe      	b.n	8004a34 <ai_platform_runtime_get_version+0x6c>
 8004a36:	4a2b      	ldr	r2, [pc, #172]	; (8004ae4 <ai_platform_runtime_get_version+0x11c>)
 8004a38:	2301      	movs	r3, #1
 8004a3a:	6093      	str	r3, [r2, #8]
 8004a3c:	6893      	ldr	r3, [r2, #8]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1fc      	bne.n	8004a3c <ai_platform_runtime_get_version+0x74>
 8004a42:	4929      	ldr	r1, [pc, #164]	; (8004ae8 <ai_platform_runtime_get_version+0x120>)
 8004a44:	4b29      	ldr	r3, [pc, #164]	; (8004aec <ai_platform_runtime_get_version+0x124>)
 8004a46:	6011      	str	r1, [r2, #0]
 8004a48:	6812      	ldr	r2, [r2, #0]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d010      	beq.n	8004a70 <ai_platform_runtime_get_version+0xa8>
 8004a4e:	e7fe      	b.n	8004a4e <ai_platform_runtime_get_version+0x86>
 8004a50:	4a27      	ldr	r2, [pc, #156]	; (8004af0 <ai_platform_runtime_get_version+0x128>)
 8004a52:	2301      	movs	r3, #1
 8004a54:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004a58:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d1fb      	bne.n	8004a58 <ai_platform_runtime_get_version+0x90>
 8004a60:	4921      	ldr	r1, [pc, #132]	; (8004ae8 <ai_platform_runtime_get_version+0x120>)
 8004a62:	4b22      	ldr	r3, [pc, #136]	; (8004aec <ai_platform_runtime_get_version+0x124>)
 8004a64:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8004a68:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d123      	bne.n	8004ab8 <ai_platform_runtime_get_version+0xf0>
 8004a70:	f7ff fe5a 	bl	8004728 <_ai_platform_release_crc>
 8004a74:	4b1f      	ldr	r3, [pc, #124]	; (8004af4 <ai_platform_runtime_get_version+0x12c>)
 8004a76:	2000      	movs	r0, #0
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	fa5f fc83 	uxtb.w	ip, r3
 8004a7e:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8004a82:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004a86:	0e1b      	lsrs	r3, r3, #24
 8004a88:	f36c 0007 	bfi	r0, ip, #0, #8
 8004a8c:	f361 200f 	bfi	r0, r1, #8, #8
 8004a90:	f362 4017 	bfi	r0, r2, #16, #8
 8004a94:	f363 601f 	bfi	r0, r3, #24, #8
 8004a98:	b003      	add	sp, #12
 8004a9a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a9e:	4a11      	ldr	r2, [pc, #68]	; (8004ae4 <ai_platform_runtime_get_version+0x11c>)
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	6093      	str	r3, [r2, #8]
 8004aa4:	6893      	ldr	r3, [r2, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d1fc      	bne.n	8004aa4 <ai_platform_runtime_get_version+0xdc>
 8004aaa:	490f      	ldr	r1, [pc, #60]	; (8004ae8 <ai_platform_runtime_get_version+0x120>)
 8004aac:	4b0f      	ldr	r3, [pc, #60]	; (8004aec <ai_platform_runtime_get_version+0x124>)
 8004aae:	6011      	str	r1, [r2, #0]
 8004ab0:	6812      	ldr	r2, [r2, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d0dc      	beq.n	8004a70 <ai_platform_runtime_get_version+0xa8>
 8004ab6:	e7fe      	b.n	8004ab6 <ai_platform_runtime_get_version+0xee>
 8004ab8:	e7fe      	b.n	8004ab8 <ai_platform_runtime_get_version+0xf0>
 8004aba:	4a0d      	ldr	r2, [pc, #52]	; (8004af0 <ai_platform_runtime_get_version+0x128>)
 8004abc:	2301      	movs	r3, #1
 8004abe:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004ac2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d1fb      	bne.n	8004ac2 <ai_platform_runtime_get_version+0xfa>
 8004aca:	4907      	ldr	r1, [pc, #28]	; (8004ae8 <ai_platform_runtime_get_version+0x120>)
 8004acc:	4b07      	ldr	r3, [pc, #28]	; (8004aec <ai_platform_runtime_get_version+0x124>)
 8004ace:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8004ad2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d0ca      	beq.n	8004a70 <ai_platform_runtime_get_version+0xa8>
 8004ada:	e7fe      	b.n	8004ada <ai_platform_runtime_get_version+0x112>
 8004adc:	e0042000 	.word	0xe0042000
 8004ae0:	5c001000 	.word	0x5c001000
 8004ae4:	40023000 	.word	0x40023000
 8004ae8:	f407a5c2 	.word	0xf407a5c2
 8004aec:	b5e8b5cd 	.word	0xb5e8b5cd
 8004af0:	58024000 	.word	0x58024000
 8004af4:	080102c8 	.word	0x080102c8

08004af8 <ai_platform_api_get_version>:
 8004af8:	b500      	push	{lr}
 8004afa:	b083      	sub	sp, #12
 8004afc:	f7ff fe12 	bl	8004724 <_ai_platform_acquire_crc>
 8004b00:	4b42      	ldr	r3, [pc, #264]	; (8004c0c <ai_platform_api_get_version+0x114>)
 8004b02:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b0c:	189a      	adds	r2, r3, r2
 8004b0e:	2a01      	cmp	r2, #1
 8004b10:	d929      	bls.n	8004b66 <ai_platform_api_get_version+0x6e>
 8004b12:	f240 4249 	movw	r2, #1097	; 0x449
 8004b16:	4293      	cmp	r3, r2
 8004b18:	d025      	beq.n	8004b66 <ai_platform_api_get_version+0x6e>
 8004b1a:	4a3d      	ldr	r2, [pc, #244]	; (8004c10 <ai_platform_api_get_version+0x118>)
 8004b1c:	6813      	ldr	r3, [r2, #0]
 8004b1e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b22:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004b26:	d02b      	beq.n	8004b80 <ai_platform_api_get_version+0x88>
 8004b28:	6813      	ldr	r3, [r2, #0]
 8004b2a:	f240 4183 	movw	r1, #1155	; 0x483
 8004b2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b32:	428b      	cmp	r3, r1
 8004b34:	d059      	beq.n	8004bea <ai_platform_api_get_version+0xf2>
 8004b36:	6813      	ldr	r3, [r2, #0]
 8004b38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b3c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004b40:	d045      	beq.n	8004bce <ai_platform_api_get_version+0xd6>
 8004b42:	6813      	ldr	r3, [r2, #0]
 8004b44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d129      	bne.n	8004ba0 <ai_platform_api_get_version+0xa8>
 8004b4c:	4a31      	ldr	r2, [pc, #196]	; (8004c14 <ai_platform_api_get_version+0x11c>)
 8004b4e:	2301      	movs	r3, #1
 8004b50:	6093      	str	r3, [r2, #8]
 8004b52:	6893      	ldr	r3, [r2, #8]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d1fc      	bne.n	8004b52 <ai_platform_api_get_version+0x5a>
 8004b58:	492f      	ldr	r1, [pc, #188]	; (8004c18 <ai_platform_api_get_version+0x120>)
 8004b5a:	4b30      	ldr	r3, [pc, #192]	; (8004c1c <ai_platform_api_get_version+0x124>)
 8004b5c:	6011      	str	r1, [r2, #0]
 8004b5e:	6812      	ldr	r2, [r2, #0]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d01d      	beq.n	8004ba0 <ai_platform_api_get_version+0xa8>
 8004b64:	e7fe      	b.n	8004b64 <ai_platform_api_get_version+0x6c>
 8004b66:	4a2b      	ldr	r2, [pc, #172]	; (8004c14 <ai_platform_api_get_version+0x11c>)
 8004b68:	2301      	movs	r3, #1
 8004b6a:	6093      	str	r3, [r2, #8]
 8004b6c:	6893      	ldr	r3, [r2, #8]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1fc      	bne.n	8004b6c <ai_platform_api_get_version+0x74>
 8004b72:	4929      	ldr	r1, [pc, #164]	; (8004c18 <ai_platform_api_get_version+0x120>)
 8004b74:	4b29      	ldr	r3, [pc, #164]	; (8004c1c <ai_platform_api_get_version+0x124>)
 8004b76:	6011      	str	r1, [r2, #0]
 8004b78:	6812      	ldr	r2, [r2, #0]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d010      	beq.n	8004ba0 <ai_platform_api_get_version+0xa8>
 8004b7e:	e7fe      	b.n	8004b7e <ai_platform_api_get_version+0x86>
 8004b80:	4a27      	ldr	r2, [pc, #156]	; (8004c20 <ai_platform_api_get_version+0x128>)
 8004b82:	2301      	movs	r3, #1
 8004b84:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004b88:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1fb      	bne.n	8004b88 <ai_platform_api_get_version+0x90>
 8004b90:	4921      	ldr	r1, [pc, #132]	; (8004c18 <ai_platform_api_get_version+0x120>)
 8004b92:	4b22      	ldr	r3, [pc, #136]	; (8004c1c <ai_platform_api_get_version+0x124>)
 8004b94:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8004b98:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d123      	bne.n	8004be8 <ai_platform_api_get_version+0xf0>
 8004ba0:	f7ff fdc2 	bl	8004728 <_ai_platform_release_crc>
 8004ba4:	4b1f      	ldr	r3, [pc, #124]	; (8004c24 <ai_platform_api_get_version+0x12c>)
 8004ba6:	2000      	movs	r0, #0
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	fa5f fc83 	uxtb.w	ip, r3
 8004bae:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8004bb2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004bb6:	0e1b      	lsrs	r3, r3, #24
 8004bb8:	f36c 0007 	bfi	r0, ip, #0, #8
 8004bbc:	f361 200f 	bfi	r0, r1, #8, #8
 8004bc0:	f362 4017 	bfi	r0, r2, #16, #8
 8004bc4:	f363 601f 	bfi	r0, r3, #24, #8
 8004bc8:	b003      	add	sp, #12
 8004bca:	f85d fb04 	ldr.w	pc, [sp], #4
 8004bce:	4a11      	ldr	r2, [pc, #68]	; (8004c14 <ai_platform_api_get_version+0x11c>)
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	6093      	str	r3, [r2, #8]
 8004bd4:	6893      	ldr	r3, [r2, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1fc      	bne.n	8004bd4 <ai_platform_api_get_version+0xdc>
 8004bda:	490f      	ldr	r1, [pc, #60]	; (8004c18 <ai_platform_api_get_version+0x120>)
 8004bdc:	4b0f      	ldr	r3, [pc, #60]	; (8004c1c <ai_platform_api_get_version+0x124>)
 8004bde:	6011      	str	r1, [r2, #0]
 8004be0:	6812      	ldr	r2, [r2, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d0dc      	beq.n	8004ba0 <ai_platform_api_get_version+0xa8>
 8004be6:	e7fe      	b.n	8004be6 <ai_platform_api_get_version+0xee>
 8004be8:	e7fe      	b.n	8004be8 <ai_platform_api_get_version+0xf0>
 8004bea:	4a0d      	ldr	r2, [pc, #52]	; (8004c20 <ai_platform_api_get_version+0x128>)
 8004bec:	2301      	movs	r3, #1
 8004bee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004bf2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1fb      	bne.n	8004bf2 <ai_platform_api_get_version+0xfa>
 8004bfa:	4907      	ldr	r1, [pc, #28]	; (8004c18 <ai_platform_api_get_version+0x120>)
 8004bfc:	4b07      	ldr	r3, [pc, #28]	; (8004c1c <ai_platform_api_get_version+0x124>)
 8004bfe:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8004c02:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d0ca      	beq.n	8004ba0 <ai_platform_api_get_version+0xa8>
 8004c0a:	e7fe      	b.n	8004c0a <ai_platform_api_get_version+0x112>
 8004c0c:	e0042000 	.word	0xe0042000
 8004c10:	5c001000 	.word	0x5c001000
 8004c14:	40023000 	.word	0x40023000
 8004c18:	f407a5c2 	.word	0xf407a5c2
 8004c1c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004c20:	58024000 	.word	0x58024000
 8004c24:	080102cc 	.word	0x080102cc

08004c28 <ai_platform_interface_api_get_version>:
 8004c28:	b500      	push	{lr}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	f7ff fd7a 	bl	8004724 <_ai_platform_acquire_crc>
 8004c30:	4b42      	ldr	r3, [pc, #264]	; (8004d3c <ai_platform_interface_api_get_version+0x114>)
 8004c32:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c3c:	189a      	adds	r2, r3, r2
 8004c3e:	2a01      	cmp	r2, #1
 8004c40:	d929      	bls.n	8004c96 <ai_platform_interface_api_get_version+0x6e>
 8004c42:	f240 4249 	movw	r2, #1097	; 0x449
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d025      	beq.n	8004c96 <ai_platform_interface_api_get_version+0x6e>
 8004c4a:	4a3d      	ldr	r2, [pc, #244]	; (8004d40 <ai_platform_interface_api_get_version+0x118>)
 8004c4c:	6813      	ldr	r3, [r2, #0]
 8004c4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c52:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004c56:	d02b      	beq.n	8004cb0 <ai_platform_interface_api_get_version+0x88>
 8004c58:	6813      	ldr	r3, [r2, #0]
 8004c5a:	f240 4183 	movw	r1, #1155	; 0x483
 8004c5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c62:	428b      	cmp	r3, r1
 8004c64:	d059      	beq.n	8004d1a <ai_platform_interface_api_get_version+0xf2>
 8004c66:	6813      	ldr	r3, [r2, #0]
 8004c68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c6c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004c70:	d045      	beq.n	8004cfe <ai_platform_interface_api_get_version+0xd6>
 8004c72:	6813      	ldr	r3, [r2, #0]
 8004c74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d129      	bne.n	8004cd0 <ai_platform_interface_api_get_version+0xa8>
 8004c7c:	4a31      	ldr	r2, [pc, #196]	; (8004d44 <ai_platform_interface_api_get_version+0x11c>)
 8004c7e:	2301      	movs	r3, #1
 8004c80:	6093      	str	r3, [r2, #8]
 8004c82:	6893      	ldr	r3, [r2, #8]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1fc      	bne.n	8004c82 <ai_platform_interface_api_get_version+0x5a>
 8004c88:	492f      	ldr	r1, [pc, #188]	; (8004d48 <ai_platform_interface_api_get_version+0x120>)
 8004c8a:	4b30      	ldr	r3, [pc, #192]	; (8004d4c <ai_platform_interface_api_get_version+0x124>)
 8004c8c:	6011      	str	r1, [r2, #0]
 8004c8e:	6812      	ldr	r2, [r2, #0]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d01d      	beq.n	8004cd0 <ai_platform_interface_api_get_version+0xa8>
 8004c94:	e7fe      	b.n	8004c94 <ai_platform_interface_api_get_version+0x6c>
 8004c96:	4a2b      	ldr	r2, [pc, #172]	; (8004d44 <ai_platform_interface_api_get_version+0x11c>)
 8004c98:	2301      	movs	r3, #1
 8004c9a:	6093      	str	r3, [r2, #8]
 8004c9c:	6893      	ldr	r3, [r2, #8]
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1fc      	bne.n	8004c9c <ai_platform_interface_api_get_version+0x74>
 8004ca2:	4929      	ldr	r1, [pc, #164]	; (8004d48 <ai_platform_interface_api_get_version+0x120>)
 8004ca4:	4b29      	ldr	r3, [pc, #164]	; (8004d4c <ai_platform_interface_api_get_version+0x124>)
 8004ca6:	6011      	str	r1, [r2, #0]
 8004ca8:	6812      	ldr	r2, [r2, #0]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d010      	beq.n	8004cd0 <ai_platform_interface_api_get_version+0xa8>
 8004cae:	e7fe      	b.n	8004cae <ai_platform_interface_api_get_version+0x86>
 8004cb0:	4a27      	ldr	r2, [pc, #156]	; (8004d50 <ai_platform_interface_api_get_version+0x128>)
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004cb8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d1fb      	bne.n	8004cb8 <ai_platform_interface_api_get_version+0x90>
 8004cc0:	4921      	ldr	r1, [pc, #132]	; (8004d48 <ai_platform_interface_api_get_version+0x120>)
 8004cc2:	4b22      	ldr	r3, [pc, #136]	; (8004d4c <ai_platform_interface_api_get_version+0x124>)
 8004cc4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8004cc8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d123      	bne.n	8004d18 <ai_platform_interface_api_get_version+0xf0>
 8004cd0:	f7ff fd2a 	bl	8004728 <_ai_platform_release_crc>
 8004cd4:	4b1f      	ldr	r3, [pc, #124]	; (8004d54 <ai_platform_interface_api_get_version+0x12c>)
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	fa5f fc83 	uxtb.w	ip, r3
 8004cde:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8004ce2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8004ce6:	0e1b      	lsrs	r3, r3, #24
 8004ce8:	f36c 0007 	bfi	r0, ip, #0, #8
 8004cec:	f361 200f 	bfi	r0, r1, #8, #8
 8004cf0:	f362 4017 	bfi	r0, r2, #16, #8
 8004cf4:	f363 601f 	bfi	r0, r3, #24, #8
 8004cf8:	b003      	add	sp, #12
 8004cfa:	f85d fb04 	ldr.w	pc, [sp], #4
 8004cfe:	4a11      	ldr	r2, [pc, #68]	; (8004d44 <ai_platform_interface_api_get_version+0x11c>)
 8004d00:	2301      	movs	r3, #1
 8004d02:	6093      	str	r3, [r2, #8]
 8004d04:	6893      	ldr	r3, [r2, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d1fc      	bne.n	8004d04 <ai_platform_interface_api_get_version+0xdc>
 8004d0a:	490f      	ldr	r1, [pc, #60]	; (8004d48 <ai_platform_interface_api_get_version+0x120>)
 8004d0c:	4b0f      	ldr	r3, [pc, #60]	; (8004d4c <ai_platform_interface_api_get_version+0x124>)
 8004d0e:	6011      	str	r1, [r2, #0]
 8004d10:	6812      	ldr	r2, [r2, #0]
 8004d12:	429a      	cmp	r2, r3
 8004d14:	d0dc      	beq.n	8004cd0 <ai_platform_interface_api_get_version+0xa8>
 8004d16:	e7fe      	b.n	8004d16 <ai_platform_interface_api_get_version+0xee>
 8004d18:	e7fe      	b.n	8004d18 <ai_platform_interface_api_get_version+0xf0>
 8004d1a:	4a0d      	ldr	r2, [pc, #52]	; (8004d50 <ai_platform_interface_api_get_version+0x128>)
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004d22:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1fb      	bne.n	8004d22 <ai_platform_interface_api_get_version+0xfa>
 8004d2a:	4907      	ldr	r1, [pc, #28]	; (8004d48 <ai_platform_interface_api_get_version+0x120>)
 8004d2c:	4b07      	ldr	r3, [pc, #28]	; (8004d4c <ai_platform_interface_api_get_version+0x124>)
 8004d2e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8004d32:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d0ca      	beq.n	8004cd0 <ai_platform_interface_api_get_version+0xa8>
 8004d3a:	e7fe      	b.n	8004d3a <ai_platform_interface_api_get_version+0x112>
 8004d3c:	e0042000 	.word	0xe0042000
 8004d40:	5c001000 	.word	0x5c001000
 8004d44:	40023000 	.word	0x40023000
 8004d48:	f407a5c2 	.word	0xf407a5c2
 8004d4c:	b5e8b5cd 	.word	0xb5e8b5cd
 8004d50:	58024000 	.word	0x58024000
 8004d54:	080102d0 	.word	0x080102d0

08004d58 <ai_platform_context_acquire>:
 8004d58:	b510      	push	{r4, lr}
 8004d5a:	4604      	mov	r4, r0
 8004d5c:	b120      	cbz	r0, 8004d68 <ai_platform_context_acquire+0x10>
 8004d5e:	4b3d      	ldr	r3, [pc, #244]	; (8004e54 <ai_platform_context_acquire+0xfc>)
 8004d60:	6802      	ldr	r2, [r0, #0]
 8004d62:	429a      	cmp	r2, r3
 8004d64:	bf18      	it	ne
 8004d66:	2400      	movne	r4, #0
 8004d68:	f7ff fcdc 	bl	8004724 <_ai_platform_acquire_crc>
 8004d6c:	4b3a      	ldr	r3, [pc, #232]	; (8004e58 <ai_platform_context_acquire+0x100>)
 8004d6e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d78:	189a      	adds	r2, r3, r2
 8004d7a:	2a01      	cmp	r2, #1
 8004d7c:	d929      	bls.n	8004dd2 <ai_platform_context_acquire+0x7a>
 8004d7e:	f240 4249 	movw	r2, #1097	; 0x449
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d025      	beq.n	8004dd2 <ai_platform_context_acquire+0x7a>
 8004d86:	4a35      	ldr	r2, [pc, #212]	; (8004e5c <ai_platform_context_acquire+0x104>)
 8004d88:	6813      	ldr	r3, [r2, #0]
 8004d8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d8e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004d92:	d02b      	beq.n	8004dec <ai_platform_context_acquire+0x94>
 8004d94:	6813      	ldr	r3, [r2, #0]
 8004d96:	f240 4183 	movw	r1, #1155	; 0x483
 8004d9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d9e:	428b      	cmp	r3, r1
 8004da0:	d046      	beq.n	8004e30 <ai_platform_context_acquire+0xd8>
 8004da2:	6813      	ldr	r3, [r2, #0]
 8004da4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004da8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004dac:	d033      	beq.n	8004e16 <ai_platform_context_acquire+0xbe>
 8004dae:	6813      	ldr	r3, [r2, #0]
 8004db0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d129      	bne.n	8004e0c <ai_platform_context_acquire+0xb4>
 8004db8:	4a29      	ldr	r2, [pc, #164]	; (8004e60 <ai_platform_context_acquire+0x108>)
 8004dba:	2301      	movs	r3, #1
 8004dbc:	6093      	str	r3, [r2, #8]
 8004dbe:	6893      	ldr	r3, [r2, #8]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d1fc      	bne.n	8004dbe <ai_platform_context_acquire+0x66>
 8004dc4:	4927      	ldr	r1, [pc, #156]	; (8004e64 <ai_platform_context_acquire+0x10c>)
 8004dc6:	4b28      	ldr	r3, [pc, #160]	; (8004e68 <ai_platform_context_acquire+0x110>)
 8004dc8:	6011      	str	r1, [r2, #0]
 8004dca:	6812      	ldr	r2, [r2, #0]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d01d      	beq.n	8004e0c <ai_platform_context_acquire+0xb4>
 8004dd0:	e7fe      	b.n	8004dd0 <ai_platform_context_acquire+0x78>
 8004dd2:	4a23      	ldr	r2, [pc, #140]	; (8004e60 <ai_platform_context_acquire+0x108>)
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	6093      	str	r3, [r2, #8]
 8004dd8:	6893      	ldr	r3, [r2, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1fc      	bne.n	8004dd8 <ai_platform_context_acquire+0x80>
 8004dde:	4921      	ldr	r1, [pc, #132]	; (8004e64 <ai_platform_context_acquire+0x10c>)
 8004de0:	4b21      	ldr	r3, [pc, #132]	; (8004e68 <ai_platform_context_acquire+0x110>)
 8004de2:	6011      	str	r1, [r2, #0]
 8004de4:	6812      	ldr	r2, [r2, #0]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d010      	beq.n	8004e0c <ai_platform_context_acquire+0xb4>
 8004dea:	e7fe      	b.n	8004dea <ai_platform_context_acquire+0x92>
 8004dec:	4a1f      	ldr	r2, [pc, #124]	; (8004e6c <ai_platform_context_acquire+0x114>)
 8004dee:	2301      	movs	r3, #1
 8004df0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004df4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1fb      	bne.n	8004df4 <ai_platform_context_acquire+0x9c>
 8004dfc:	4919      	ldr	r1, [pc, #100]	; (8004e64 <ai_platform_context_acquire+0x10c>)
 8004dfe:	4b1a      	ldr	r3, [pc, #104]	; (8004e68 <ai_platform_context_acquire+0x110>)
 8004e00:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8004e04:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d103      	bne.n	8004e14 <ai_platform_context_acquire+0xbc>
 8004e0c:	f7ff fc8c 	bl	8004728 <_ai_platform_release_crc>
 8004e10:	4620      	mov	r0, r4
 8004e12:	bd10      	pop	{r4, pc}
 8004e14:	e7fe      	b.n	8004e14 <ai_platform_context_acquire+0xbc>
 8004e16:	4a12      	ldr	r2, [pc, #72]	; (8004e60 <ai_platform_context_acquire+0x108>)
 8004e18:	2301      	movs	r3, #1
 8004e1a:	6093      	str	r3, [r2, #8]
 8004e1c:	6893      	ldr	r3, [r2, #8]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1fc      	bne.n	8004e1c <ai_platform_context_acquire+0xc4>
 8004e22:	4910      	ldr	r1, [pc, #64]	; (8004e64 <ai_platform_context_acquire+0x10c>)
 8004e24:	4b10      	ldr	r3, [pc, #64]	; (8004e68 <ai_platform_context_acquire+0x110>)
 8004e26:	6011      	str	r1, [r2, #0]
 8004e28:	6812      	ldr	r2, [r2, #0]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	d0ee      	beq.n	8004e0c <ai_platform_context_acquire+0xb4>
 8004e2e:	e7fe      	b.n	8004e2e <ai_platform_context_acquire+0xd6>
 8004e30:	4a0e      	ldr	r2, [pc, #56]	; (8004e6c <ai_platform_context_acquire+0x114>)
 8004e32:	2301      	movs	r3, #1
 8004e34:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004e38:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d1fb      	bne.n	8004e38 <ai_platform_context_acquire+0xe0>
 8004e40:	4908      	ldr	r1, [pc, #32]	; (8004e64 <ai_platform_context_acquire+0x10c>)
 8004e42:	4b09      	ldr	r3, [pc, #36]	; (8004e68 <ai_platform_context_acquire+0x110>)
 8004e44:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8004e48:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d0dd      	beq.n	8004e0c <ai_platform_context_acquire+0xb4>
 8004e50:	e7fe      	b.n	8004e50 <ai_platform_context_acquire+0xf8>
 8004e52:	bf00      	nop
 8004e54:	a1c00100 	.word	0xa1c00100
 8004e58:	e0042000 	.word	0xe0042000
 8004e5c:	5c001000 	.word	0x5c001000
 8004e60:	40023000 	.word	0x40023000
 8004e64:	f407a5c2 	.word	0xf407a5c2
 8004e68:	b5e8b5cd 	.word	0xb5e8b5cd
 8004e6c:	58024000 	.word	0x58024000

08004e70 <ai_platform_network_get_error>:
 8004e70:	b510      	push	{r4, lr}
 8004e72:	2800      	cmp	r0, #0
 8004e74:	d03f      	beq.n	8004ef6 <ai_platform_network_get_error+0x86>
 8004e76:	4b7d      	ldr	r3, [pc, #500]	; (800506c <ai_platform_network_get_error+0x1fc>)
 8004e78:	4604      	mov	r4, r0
 8004e7a:	6802      	ldr	r2, [r0, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d13a      	bne.n	8004ef6 <ai_platform_network_get_error+0x86>
 8004e80:	f7ff fc50 	bl	8004724 <_ai_platform_acquire_crc>
 8004e84:	4b7a      	ldr	r3, [pc, #488]	; (8005070 <ai_platform_network_get_error+0x200>)
 8004e86:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004e90:	189a      	adds	r2, r3, r2
 8004e92:	2a01      	cmp	r2, #1
 8004e94:	f240 8086 	bls.w	8004fa4 <ai_platform_network_get_error+0x134>
 8004e98:	f240 4249 	movw	r2, #1097	; 0x449
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	f000 8081 	beq.w	8004fa4 <ai_platform_network_get_error+0x134>
 8004ea2:	4a74      	ldr	r2, [pc, #464]	; (8005074 <ai_platform_network_get_error+0x204>)
 8004ea4:	6813      	ldr	r3, [r2, #0]
 8004ea6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eaa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004eae:	f000 8087 	beq.w	8004fc0 <ai_platform_network_get_error+0x150>
 8004eb2:	6813      	ldr	r3, [r2, #0]
 8004eb4:	f240 4183 	movw	r1, #1155	; 0x483
 8004eb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ebc:	428b      	cmp	r3, r1
 8004ebe:	f000 80a9 	beq.w	8005014 <ai_platform_network_get_error+0x1a4>
 8004ec2:	6813      	ldr	r3, [r2, #0]
 8004ec4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ec8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004ecc:	f000 80c0 	beq.w	8005050 <ai_platform_network_get_error+0x1e0>
 8004ed0:	6813      	ldr	r3, [r2, #0]
 8004ed2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	f040 8082 	bne.w	8004fe0 <ai_platform_network_get_error+0x170>
 8004edc:	4a66      	ldr	r2, [pc, #408]	; (8005078 <ai_platform_network_get_error+0x208>)
 8004ede:	2301      	movs	r3, #1
 8004ee0:	6093      	str	r3, [r2, #8]
 8004ee2:	6893      	ldr	r3, [r2, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d1fc      	bne.n	8004ee2 <ai_platform_network_get_error+0x72>
 8004ee8:	4964      	ldr	r1, [pc, #400]	; (800507c <ai_platform_network_get_error+0x20c>)
 8004eea:	4b65      	ldr	r3, [pc, #404]	; (8005080 <ai_platform_network_get_error+0x210>)
 8004eec:	6011      	str	r1, [r2, #0]
 8004eee:	6812      	ldr	r2, [r2, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d075      	beq.n	8004fe0 <ai_platform_network_get_error+0x170>
 8004ef4:	e7fe      	b.n	8004ef4 <ai_platform_network_get_error+0x84>
 8004ef6:	f7ff fc15 	bl	8004724 <_ai_platform_acquire_crc>
 8004efa:	4b5d      	ldr	r3, [pc, #372]	; (8005070 <ai_platform_network_get_error+0x200>)
 8004efc:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f06:	185a      	adds	r2, r3, r1
 8004f08:	2a01      	cmp	r2, #1
 8004f0a:	d929      	bls.n	8004f60 <ai_platform_network_get_error+0xf0>
 8004f0c:	f240 4249 	movw	r2, #1097	; 0x449
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d025      	beq.n	8004f60 <ai_platform_network_get_error+0xf0>
 8004f14:	4a57      	ldr	r2, [pc, #348]	; (8005074 <ai_platform_network_get_error+0x204>)
 8004f16:	6813      	ldr	r3, [r2, #0]
 8004f18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f1c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8004f20:	d02b      	beq.n	8004f7a <ai_platform_network_get_error+0x10a>
 8004f22:	6813      	ldr	r3, [r2, #0]
 8004f24:	f240 4183 	movw	r1, #1155	; 0x483
 8004f28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f2c:	428b      	cmp	r3, r1
 8004f2e:	d060      	beq.n	8004ff2 <ai_platform_network_get_error+0x182>
 8004f30:	6813      	ldr	r3, [r2, #0]
 8004f32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f36:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8004f3a:	d07c      	beq.n	8005036 <ai_platform_network_get_error+0x1c6>
 8004f3c:	6813      	ldr	r3, [r2, #0]
 8004f3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d129      	bne.n	8004f9a <ai_platform_network_get_error+0x12a>
 8004f46:	4a4c      	ldr	r2, [pc, #304]	; (8005078 <ai_platform_network_get_error+0x208>)
 8004f48:	2301      	movs	r3, #1
 8004f4a:	6093      	str	r3, [r2, #8]
 8004f4c:	6893      	ldr	r3, [r2, #8]
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d1fc      	bne.n	8004f4c <ai_platform_network_get_error+0xdc>
 8004f52:	494a      	ldr	r1, [pc, #296]	; (800507c <ai_platform_network_get_error+0x20c>)
 8004f54:	4b4a      	ldr	r3, [pc, #296]	; (8005080 <ai_platform_network_get_error+0x210>)
 8004f56:	6011      	str	r1, [r2, #0]
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d01d      	beq.n	8004f9a <ai_platform_network_get_error+0x12a>
 8004f5e:	e7fe      	b.n	8004f5e <ai_platform_network_get_error+0xee>
 8004f60:	4a45      	ldr	r2, [pc, #276]	; (8005078 <ai_platform_network_get_error+0x208>)
 8004f62:	2301      	movs	r3, #1
 8004f64:	6093      	str	r3, [r2, #8]
 8004f66:	6893      	ldr	r3, [r2, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1fc      	bne.n	8004f66 <ai_platform_network_get_error+0xf6>
 8004f6c:	4943      	ldr	r1, [pc, #268]	; (800507c <ai_platform_network_get_error+0x20c>)
 8004f6e:	4b44      	ldr	r3, [pc, #272]	; (8005080 <ai_platform_network_get_error+0x210>)
 8004f70:	6011      	str	r1, [r2, #0]
 8004f72:	6812      	ldr	r2, [r2, #0]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d010      	beq.n	8004f9a <ai_platform_network_get_error+0x12a>
 8004f78:	e7fe      	b.n	8004f78 <ai_platform_network_get_error+0x108>
 8004f7a:	4a42      	ldr	r2, [pc, #264]	; (8005084 <ai_platform_network_get_error+0x214>)
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004f82:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1fb      	bne.n	8004f82 <ai_platform_network_get_error+0x112>
 8004f8a:	493c      	ldr	r1, [pc, #240]	; (800507c <ai_platform_network_get_error+0x20c>)
 8004f8c:	4b3c      	ldr	r3, [pc, #240]	; (8005080 <ai_platform_network_get_error+0x210>)
 8004f8e:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8004f92:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004f96:	429a      	cmp	r2, r3
 8004f98:	d111      	bne.n	8004fbe <ai_platform_network_get_error+0x14e>
 8004f9a:	f7ff fbc5 	bl	8004728 <_ai_platform_release_crc>
 8004f9e:	f241 0010 	movw	r0, #4112	; 0x1010
 8004fa2:	bd10      	pop	{r4, pc}
 8004fa4:	4a34      	ldr	r2, [pc, #208]	; (8005078 <ai_platform_network_get_error+0x208>)
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	6093      	str	r3, [r2, #8]
 8004faa:	6893      	ldr	r3, [r2, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1fc      	bne.n	8004faa <ai_platform_network_get_error+0x13a>
 8004fb0:	4932      	ldr	r1, [pc, #200]	; (800507c <ai_platform_network_get_error+0x20c>)
 8004fb2:	4b33      	ldr	r3, [pc, #204]	; (8005080 <ai_platform_network_get_error+0x210>)
 8004fb4:	6011      	str	r1, [r2, #0]
 8004fb6:	6812      	ldr	r2, [r2, #0]
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d011      	beq.n	8004fe0 <ai_platform_network_get_error+0x170>
 8004fbc:	e7fe      	b.n	8004fbc <ai_platform_network_get_error+0x14c>
 8004fbe:	e7fe      	b.n	8004fbe <ai_platform_network_get_error+0x14e>
 8004fc0:	4a30      	ldr	r2, [pc, #192]	; (8005084 <ai_platform_network_get_error+0x214>)
 8004fc2:	2301      	movs	r3, #1
 8004fc4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004fc8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d1fb      	bne.n	8004fc8 <ai_platform_network_get_error+0x158>
 8004fd0:	492a      	ldr	r1, [pc, #168]	; (800507c <ai_platform_network_get_error+0x20c>)
 8004fd2:	4b2b      	ldr	r3, [pc, #172]	; (8005080 <ai_platform_network_get_error+0x210>)
 8004fd4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8004fd8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d107      	bne.n	8004ff0 <ai_platform_network_get_error+0x180>
 8004fe0:	f7ff fba2 	bl	8004728 <_ai_platform_release_crc>
 8004fe4:	f104 0010 	add.w	r0, r4, #16
 8004fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fec:	f002 b832 	b.w	8007054 <core_get_error>
 8004ff0:	e7fe      	b.n	8004ff0 <ai_platform_network_get_error+0x180>
 8004ff2:	4a24      	ldr	r2, [pc, #144]	; (8005084 <ai_platform_network_get_error+0x214>)
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8004ffa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d1fb      	bne.n	8004ffa <ai_platform_network_get_error+0x18a>
 8005002:	491e      	ldr	r1, [pc, #120]	; (800507c <ai_platform_network_get_error+0x20c>)
 8005004:	4b1e      	ldr	r3, [pc, #120]	; (8005080 <ai_platform_network_get_error+0x210>)
 8005006:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800500a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800500e:	429a      	cmp	r2, r3
 8005010:	d0c3      	beq.n	8004f9a <ai_platform_network_get_error+0x12a>
 8005012:	e7fe      	b.n	8005012 <ai_platform_network_get_error+0x1a2>
 8005014:	4a1b      	ldr	r2, [pc, #108]	; (8005084 <ai_platform_network_get_error+0x214>)
 8005016:	2301      	movs	r3, #1
 8005018:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800501c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005020:	2b00      	cmp	r3, #0
 8005022:	d1fb      	bne.n	800501c <ai_platform_network_get_error+0x1ac>
 8005024:	4915      	ldr	r1, [pc, #84]	; (800507c <ai_platform_network_get_error+0x20c>)
 8005026:	4b16      	ldr	r3, [pc, #88]	; (8005080 <ai_platform_network_get_error+0x210>)
 8005028:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800502c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005030:	429a      	cmp	r2, r3
 8005032:	d0d5      	beq.n	8004fe0 <ai_platform_network_get_error+0x170>
 8005034:	e7fe      	b.n	8005034 <ai_platform_network_get_error+0x1c4>
 8005036:	4a10      	ldr	r2, [pc, #64]	; (8005078 <ai_platform_network_get_error+0x208>)
 8005038:	2301      	movs	r3, #1
 800503a:	6093      	str	r3, [r2, #8]
 800503c:	6893      	ldr	r3, [r2, #8]
 800503e:	2b00      	cmp	r3, #0
 8005040:	d1fc      	bne.n	800503c <ai_platform_network_get_error+0x1cc>
 8005042:	490e      	ldr	r1, [pc, #56]	; (800507c <ai_platform_network_get_error+0x20c>)
 8005044:	4b0e      	ldr	r3, [pc, #56]	; (8005080 <ai_platform_network_get_error+0x210>)
 8005046:	6011      	str	r1, [r2, #0]
 8005048:	6812      	ldr	r2, [r2, #0]
 800504a:	429a      	cmp	r2, r3
 800504c:	d0a5      	beq.n	8004f9a <ai_platform_network_get_error+0x12a>
 800504e:	e7fe      	b.n	800504e <ai_platform_network_get_error+0x1de>
 8005050:	4a09      	ldr	r2, [pc, #36]	; (8005078 <ai_platform_network_get_error+0x208>)
 8005052:	2301      	movs	r3, #1
 8005054:	6093      	str	r3, [r2, #8]
 8005056:	6893      	ldr	r3, [r2, #8]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d1fc      	bne.n	8005056 <ai_platform_network_get_error+0x1e6>
 800505c:	4907      	ldr	r1, [pc, #28]	; (800507c <ai_platform_network_get_error+0x20c>)
 800505e:	4b08      	ldr	r3, [pc, #32]	; (8005080 <ai_platform_network_get_error+0x210>)
 8005060:	6011      	str	r1, [r2, #0]
 8005062:	6812      	ldr	r2, [r2, #0]
 8005064:	429a      	cmp	r2, r3
 8005066:	d0bb      	beq.n	8004fe0 <ai_platform_network_get_error+0x170>
 8005068:	e7fe      	b.n	8005068 <ai_platform_network_get_error+0x1f8>
 800506a:	bf00      	nop
 800506c:	a1c00100 	.word	0xa1c00100
 8005070:	e0042000 	.word	0xe0042000
 8005074:	5c001000 	.word	0x5c001000
 8005078:	40023000 	.word	0x40023000
 800507c:	f407a5c2 	.word	0xf407a5c2
 8005080:	b5e8b5cd 	.word	0xb5e8b5cd
 8005084:	58024000 	.word	0x58024000

08005088 <ai_platform_network_set_error>:
 8005088:	b110      	cbz	r0, 8005090 <ai_platform_network_set_error+0x8>
 800508a:	3010      	adds	r0, #16
 800508c:	f001 bfe8 	b.w	8007060 <core_set_error>
 8005090:	4770      	bx	lr
 8005092:	bf00      	nop

08005094 <ai_platform_api_get_network_report>:
 8005094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005098:	b089      	sub	sp, #36	; 0x24
 800509a:	4607      	mov	r7, r0
 800509c:	9101      	str	r1, [sp, #4]
 800509e:	b120      	cbz	r0, 80050aa <ai_platform_api_get_network_report+0x16>
 80050a0:	4b87      	ldr	r3, [pc, #540]	; (80052c0 <ai_platform_api_get_network_report+0x22c>)
 80050a2:	6802      	ldr	r2, [r0, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	bf18      	it	ne
 80050a8:	2700      	movne	r7, #0
 80050aa:	f7ff fb3b 	bl	8004724 <_ai_platform_acquire_crc>
 80050ae:	4b85      	ldr	r3, [pc, #532]	; (80052c4 <ai_platform_api_get_network_report+0x230>)
 80050b0:	f46f 688a 	mvn.w	r8, #1104	; 0x450
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050ba:	eb03 0208 	add.w	r2, r3, r8
 80050be:	2a01      	cmp	r2, #1
 80050c0:	d92b      	bls.n	800511a <ai_platform_api_get_network_report+0x86>
 80050c2:	f240 4249 	movw	r2, #1097	; 0x449
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d027      	beq.n	800511a <ai_platform_api_get_network_report+0x86>
 80050ca:	4a7f      	ldr	r2, [pc, #508]	; (80052c8 <ai_platform_api_get_network_report+0x234>)
 80050cc:	6813      	ldr	r3, [r2, #0]
 80050ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050d2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80050d6:	d02d      	beq.n	8005134 <ai_platform_api_get_network_report+0xa0>
 80050d8:	6813      	ldr	r3, [r2, #0]
 80050da:	f240 4183 	movw	r1, #1155	; 0x483
 80050de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050e2:	428b      	cmp	r3, r1
 80050e4:	f000 80c6 	beq.w	8005274 <ai_platform_api_get_network_report+0x1e0>
 80050e8:	6813      	ldr	r3, [r2, #0]
 80050ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050ee:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80050f2:	f000 80ab 	beq.w	800524c <ai_platform_api_get_network_report+0x1b8>
 80050f6:	6813      	ldr	r3, [r2, #0]
 80050f8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d129      	bne.n	8005154 <ai_platform_api_get_network_report+0xc0>
 8005100:	4a72      	ldr	r2, [pc, #456]	; (80052cc <ai_platform_api_get_network_report+0x238>)
 8005102:	2301      	movs	r3, #1
 8005104:	6093      	str	r3, [r2, #8]
 8005106:	6893      	ldr	r3, [r2, #8]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1fc      	bne.n	8005106 <ai_platform_api_get_network_report+0x72>
 800510c:	4b70      	ldr	r3, [pc, #448]	; (80052d0 <ai_platform_api_get_network_report+0x23c>)
 800510e:	6013      	str	r3, [r2, #0]
 8005110:	4b70      	ldr	r3, [pc, #448]	; (80052d4 <ai_platform_api_get_network_report+0x240>)
 8005112:	6812      	ldr	r2, [r2, #0]
 8005114:	429a      	cmp	r2, r3
 8005116:	d01d      	beq.n	8005154 <ai_platform_api_get_network_report+0xc0>
 8005118:	e7fe      	b.n	8005118 <ai_platform_api_get_network_report+0x84>
 800511a:	4a6c      	ldr	r2, [pc, #432]	; (80052cc <ai_platform_api_get_network_report+0x238>)
 800511c:	2301      	movs	r3, #1
 800511e:	6093      	str	r3, [r2, #8]
 8005120:	6893      	ldr	r3, [r2, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1fc      	bne.n	8005120 <ai_platform_api_get_network_report+0x8c>
 8005126:	4b6a      	ldr	r3, [pc, #424]	; (80052d0 <ai_platform_api_get_network_report+0x23c>)
 8005128:	6013      	str	r3, [r2, #0]
 800512a:	4b6a      	ldr	r3, [pc, #424]	; (80052d4 <ai_platform_api_get_network_report+0x240>)
 800512c:	6812      	ldr	r2, [r2, #0]
 800512e:	429a      	cmp	r2, r3
 8005130:	d010      	beq.n	8005154 <ai_platform_api_get_network_report+0xc0>
 8005132:	e7fe      	b.n	8005132 <ai_platform_api_get_network_report+0x9e>
 8005134:	4a68      	ldr	r2, [pc, #416]	; (80052d8 <ai_platform_api_get_network_report+0x244>)
 8005136:	2301      	movs	r3, #1
 8005138:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800513c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1fb      	bne.n	800513c <ai_platform_api_get_network_report+0xa8>
 8005144:	4b62      	ldr	r3, [pc, #392]	; (80052d0 <ai_platform_api_get_network_report+0x23c>)
 8005146:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800514a:	4b62      	ldr	r3, [pc, #392]	; (80052d4 <ai_platform_api_get_network_report+0x240>)
 800514c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005150:	429a      	cmp	r2, r3
 8005152:	d16c      	bne.n	800522e <ai_platform_api_get_network_report+0x19a>
 8005154:	f7ff fae8 	bl	8004728 <_ai_platform_release_crc>
 8005158:	9801      	ldr	r0, [sp, #4]
 800515a:	2800      	cmp	r0, #0
 800515c:	bf18      	it	ne
 800515e:	2f00      	cmpne	r7, #0
 8005160:	bf0c      	ite	eq
 8005162:	2301      	moveq	r3, #1
 8005164:	2300      	movne	r3, #0
 8005166:	9302      	str	r3, [sp, #8]
 8005168:	d07e      	beq.n	8005268 <ai_platform_api_get_network_report+0x1d4>
 800516a:	67c3      	str	r3, [r0, #124]	; 0x7c
 800516c:	4619      	mov	r1, r3
 800516e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005170:	b13b      	cbz	r3, 8005182 <ai_platform_api_get_network_report+0xee>
 8005172:	3101      	adds	r1, #1
 8005174:	67c1      	str	r1, [r0, #124]	; 0x7c
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	b11a      	cbz	r2, 8005182 <ai_platform_api_get_network_report+0xee>
 800517a:	429a      	cmp	r2, r3
 800517c:	d001      	beq.n	8005182 <ai_platform_api_get_network_report+0xee>
 800517e:	4613      	mov	r3, r2
 8005180:	e7f6      	b.n	8005170 <ai_platform_api_get_network_report+0xdc>
 8005182:	2900      	cmp	r1, #0
 8005184:	f000 8166 	beq.w	8005454 <ai_platform_api_get_network_report+0x3c0>
 8005188:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800518a:	2b00      	cmp	r3, #0
 800518c:	d050      	beq.n	8005230 <ai_platform_api_get_network_report+0x19c>
 800518e:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8005192:	f1b9 0f00 	cmp.w	r9, #0
 8005196:	d04b      	beq.n	8005230 <ai_platform_api_get_network_report+0x19c>
 8005198:	f04f 0a00 	mov.w	sl, #0
 800519c:	9703      	str	r7, [sp, #12]
 800519e:	4655      	mov	r5, sl
 80051a0:	e016      	b.n	80051d0 <ai_platform_api_get_network_report+0x13c>
 80051a2:	2201      	movs	r2, #1
 80051a4:	f847 200e 	str.w	r2, [r7, lr]
 80051a8:	69b2      	ldr	r2, [r6, #24]
 80051aa:	6852      	ldr	r2, [r2, #4]
 80051ac:	3501      	adds	r5, #1
 80051ae:	60a3      	str	r3, [r4, #8]
 80051b0:	f04f 0301 	mov.w	r3, #1
 80051b4:	f10a 0a1c 	add.w	sl, sl, #28
 80051b8:	6122      	str	r2, [r4, #16]
 80051ba:	7523      	strb	r3, [r4, #20]
 80051bc:	2300      	movs	r3, #0
 80051be:	f8c4 8018 	str.w	r8, [r4, #24]
 80051c2:	60e3      	str	r3, [r4, #12]
 80051c4:	6963      	ldr	r3, [r4, #20]
 80051c6:	f36b 231f 	bfi	r3, fp, #8, #24
 80051ca:	e9c4 0100 	strd	r0, r1, [r4]
 80051ce:	6163      	str	r3, [r4, #20]
 80051d0:	f8b9 3000 	ldrh.w	r3, [r9]
 80051d4:	b2aa      	uxth	r2, r5
 80051d6:	42ab      	cmp	r3, r5
 80051d8:	d95e      	bls.n	8005298 <ai_platform_api_get_network_report+0x204>
 80051da:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d05a      	beq.n	8005298 <ai_platform_api_get_network_report+0x204>
 80051e2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80051e6:	2e00      	cmp	r6, #0
 80051e8:	d056      	beq.n	8005298 <ai_platform_api_get_network_report+0x204>
 80051ea:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80051ee:	69b2      	ldr	r2, [r6, #24]
 80051f0:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80051f4:	6810      	ldr	r0, [r2, #0]
 80051f6:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80051fa:	68b3      	ldr	r3, [r6, #8]
 80051fc:	4454      	add	r4, sl
 80051fe:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8005202:	f003 f9ed 	bl	80085e0 <ai_array_to_buffer_fmt>
 8005206:	69b2      	ldr	r2, [r6, #24]
 8005208:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 800520c:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8005210:	6891      	ldr	r1, [r2, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0c9      	beq.n	80051aa <ai_platform_api_get_network_report+0x116>
 8005216:	2200      	movs	r2, #0
 8005218:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 800521c:	6832      	ldr	r2, [r6, #0]
 800521e:	605a      	str	r2, [r3, #4]
 8005220:	b112      	cbz	r2, 8005228 <ai_platform_api_get_network_report+0x194>
 8005222:	8852      	ldrh	r2, [r2, #2]
 8005224:	2a00      	cmp	r2, #0
 8005226:	d1bc      	bne.n	80051a2 <ai_platform_api_get_network_report+0x10e>
 8005228:	69b2      	ldr	r2, [r6, #24]
 800522a:	2300      	movs	r3, #0
 800522c:	e7bd      	b.n	80051aa <ai_platform_api_get_network_report+0x116>
 800522e:	e7fe      	b.n	800522e <ai_platform_api_get_network_report+0x19a>
 8005230:	9901      	ldr	r1, [sp, #4]
 8005232:	2300      	movs	r3, #0
 8005234:	2218      	movs	r2, #24
 8005236:	f107 0010 	add.w	r0, r7, #16
 800523a:	63cb      	str	r3, [r1, #60]	; 0x3c
 800523c:	870b      	strh	r3, [r1, #56]	; 0x38
 800523e:	2112      	movs	r1, #18
 8005240:	f001 ff0e 	bl	8007060 <core_set_error>
 8005244:	9802      	ldr	r0, [sp, #8]
 8005246:	b009      	add	sp, #36	; 0x24
 8005248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800524c:	4a1f      	ldr	r2, [pc, #124]	; (80052cc <ai_platform_api_get_network_report+0x238>)
 800524e:	2301      	movs	r3, #1
 8005250:	6093      	str	r3, [r2, #8]
 8005252:	6893      	ldr	r3, [r2, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d1fc      	bne.n	8005252 <ai_platform_api_get_network_report+0x1be>
 8005258:	4b1d      	ldr	r3, [pc, #116]	; (80052d0 <ai_platform_api_get_network_report+0x23c>)
 800525a:	6013      	str	r3, [r2, #0]
 800525c:	4b1d      	ldr	r3, [pc, #116]	; (80052d4 <ai_platform_api_get_network_report+0x240>)
 800525e:	6812      	ldr	r2, [r2, #0]
 8005260:	429a      	cmp	r2, r3
 8005262:	f43f af77 	beq.w	8005154 <ai_platform_api_get_network_report+0xc0>
 8005266:	e7fe      	b.n	8005266 <ai_platform_api_get_network_report+0x1d2>
 8005268:	2300      	movs	r3, #0
 800526a:	9302      	str	r3, [sp, #8]
 800526c:	9802      	ldr	r0, [sp, #8]
 800526e:	b009      	add	sp, #36	; 0x24
 8005270:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005274:	4a18      	ldr	r2, [pc, #96]	; (80052d8 <ai_platform_api_get_network_report+0x244>)
 8005276:	2301      	movs	r3, #1
 8005278:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800527c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005280:	2b00      	cmp	r3, #0
 8005282:	d1fb      	bne.n	800527c <ai_platform_api_get_network_report+0x1e8>
 8005284:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <ai_platform_api_get_network_report+0x23c>)
 8005286:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800528a:	4b12      	ldr	r3, [pc, #72]	; (80052d4 <ai_platform_api_get_network_report+0x240>)
 800528c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005290:	429a      	cmp	r2, r3
 8005292:	f43f af5f 	beq.w	8005154 <ai_platform_api_get_network_report+0xc0>
 8005296:	e7fe      	b.n	8005296 <ai_platform_api_get_network_report+0x202>
 8005298:	9f03      	ldr	r7, [sp, #12]
 800529a:	2a00      	cmp	r2, #0
 800529c:	d0c8      	beq.n	8005230 <ai_platform_api_get_network_report+0x19c>
 800529e:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80052a2:	9901      	ldr	r1, [sp, #4]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	870a      	strh	r2, [r1, #56]	; 0x38
 80052a8:	63cb      	str	r3, [r1, #60]	; 0x3c
 80052aa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	f240 80c6 	bls.w	800543e <ai_platform_api_get_network_report+0x3aa>
 80052b2:	f04f 0a00 	mov.w	sl, #0
 80052b6:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 80052ba:	9703      	str	r7, [sp, #12]
 80052bc:	4655      	mov	r5, sl
 80052be:	e024      	b.n	800530a <ai_platform_api_get_network_report+0x276>
 80052c0:	a1c00100 	.word	0xa1c00100
 80052c4:	e0042000 	.word	0xe0042000
 80052c8:	5c001000 	.word	0x5c001000
 80052cc:	40023000 	.word	0x40023000
 80052d0:	f407a5c2 	.word	0xf407a5c2
 80052d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80052d8:	58024000 	.word	0x58024000
 80052dc:	2201      	movs	r2, #1
 80052de:	f847 200e 	str.w	r2, [r7, lr]
 80052e2:	69b2      	ldr	r2, [r6, #24]
 80052e4:	6852      	ldr	r2, [r2, #4]
 80052e6:	3501      	adds	r5, #1
 80052e8:	60a3      	str	r3, [r4, #8]
 80052ea:	f04f 0301 	mov.w	r3, #1
 80052ee:	f10a 0a1c 	add.w	sl, sl, #28
 80052f2:	6122      	str	r2, [r4, #16]
 80052f4:	7523      	strb	r3, [r4, #20]
 80052f6:	2300      	movs	r3, #0
 80052f8:	f8c4 8018 	str.w	r8, [r4, #24]
 80052fc:	60e3      	str	r3, [r4, #12]
 80052fe:	6963      	ldr	r3, [r4, #20]
 8005300:	f36b 231f 	bfi	r3, fp, #8, #24
 8005304:	e9c4 0100 	strd	r0, r1, [r4]
 8005308:	6163      	str	r3, [r4, #20]
 800530a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800530e:	b2aa      	uxth	r2, r5
 8005310:	42ab      	cmp	r3, r5
 8005312:	d927      	bls.n	8005364 <ai_platform_api_get_network_report+0x2d0>
 8005314:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005318:	b323      	cbz	r3, 8005364 <ai_platform_api_get_network_report+0x2d0>
 800531a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800531e:	b30e      	cbz	r6, 8005364 <ai_platform_api_get_network_report+0x2d0>
 8005320:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8005324:	69b2      	ldr	r2, [r6, #24]
 8005326:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800532a:	6810      	ldr	r0, [r2, #0]
 800532c:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8005330:	68b3      	ldr	r3, [r6, #8]
 8005332:	4454      	add	r4, sl
 8005334:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8005338:	f003 f952 	bl	80085e0 <ai_array_to_buffer_fmt>
 800533c:	69b2      	ldr	r2, [r6, #24]
 800533e:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 8005342:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 8005346:	6891      	ldr	r1, [r2, #8]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0cb      	beq.n	80052e4 <ai_platform_api_get_network_report+0x250>
 800534c:	2200      	movs	r2, #0
 800534e:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 8005352:	6832      	ldr	r2, [r6, #0]
 8005354:	605a      	str	r2, [r3, #4]
 8005356:	b112      	cbz	r2, 800535e <ai_platform_api_get_network_report+0x2ca>
 8005358:	8852      	ldrh	r2, [r2, #2]
 800535a:	2a00      	cmp	r2, #0
 800535c:	d1be      	bne.n	80052dc <ai_platform_api_get_network_report+0x248>
 800535e:	69b2      	ldr	r2, [r6, #24]
 8005360:	2300      	movs	r3, #0
 8005362:	e7bf      	b.n	80052e4 <ai_platform_api_get_network_report+0x250>
 8005364:	9f03      	ldr	r7, [sp, #12]
 8005366:	2a00      	cmp	r2, #0
 8005368:	d069      	beq.n	800543e <ai_platform_api_get_network_report+0x3aa>
 800536a:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800536e:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8005372:	9901      	ldr	r1, [sp, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	4630      	mov	r0, r6
 8005378:	874a      	strh	r2, [r1, #58]	; 0x3a
 800537a:	640b      	str	r3, [r1, #64]	; 0x40
 800537c:	f7ff f926 	bl	80045cc <ai_buffer_array_sane>
 8005380:	9002      	str	r0, [sp, #8]
 8005382:	b960      	cbnz	r0, 800539e <ai_platform_api_get_network_report+0x30a>
 8005384:	4630      	mov	r0, r6
 8005386:	f7ff f921 	bl	80045cc <ai_buffer_array_sane>
 800538a:	b140      	cbz	r0, 800539e <ai_platform_api_get_network_report+0x30a>
 800538c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800538e:	b133      	cbz	r3, 800539e <ai_platform_api_get_network_report+0x30a>
 8005390:	2213      	movs	r2, #19
 8005392:	2111      	movs	r1, #17
 8005394:	f107 0010 	add.w	r0, r7, #16
 8005398:	f001 fe62 	bl	8007060 <core_set_error>
 800539c:	e752      	b.n	8005244 <ai_platform_api_get_network_report+0x1b0>
 800539e:	f107 081c 	add.w	r8, r7, #28
 80053a2:	4640      	mov	r0, r8
 80053a4:	f7ff f912 	bl	80045cc <ai_buffer_array_sane>
 80053a8:	9002      	str	r0, [sp, #8]
 80053aa:	b960      	cbnz	r0, 80053c6 <ai_platform_api_get_network_report+0x332>
 80053ac:	4640      	mov	r0, r8
 80053ae:	f7ff f90d 	bl	80045cc <ai_buffer_array_sane>
 80053b2:	b140      	cbz	r0, 80053c6 <ai_platform_api_get_network_report+0x332>
 80053b4:	8bfb      	ldrh	r3, [r7, #30]
 80053b6:	b133      	cbz	r3, 80053c6 <ai_platform_api_get_network_report+0x332>
 80053b8:	2212      	movs	r2, #18
 80053ba:	2111      	movs	r1, #17
 80053bc:	f107 0010 	add.w	r0, r7, #16
 80053c0:	f001 fe4e 	bl	8007060 <core_set_error>
 80053c4:	e73e      	b.n	8005244 <ai_platform_api_get_network_report+0x1b0>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	9a01      	ldr	r2, [sp, #4]
 80053ca:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80053ce:	f7ff f9a9 	bl	8004724 <_ai_platform_acquire_crc>
 80053d2:	4b89      	ldr	r3, [pc, #548]	; (80055f8 <ai_platform_api_get_network_report+0x564>)
 80053d4:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053de:	eb03 020e 	add.w	r2, r3, lr
 80053e2:	2a01      	cmp	r2, #1
 80053e4:	d93d      	bls.n	8005462 <ai_platform_api_get_network_report+0x3ce>
 80053e6:	f240 4249 	movw	r2, #1097	; 0x449
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d039      	beq.n	8005462 <ai_platform_api_get_network_report+0x3ce>
 80053ee:	4b83      	ldr	r3, [pc, #524]	; (80055fc <ai_platform_api_get_network_report+0x568>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80053f6:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80053fa:	d03f      	beq.n	800547c <ai_platform_api_get_network_report+0x3e8>
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	f240 4183 	movw	r1, #1155	; 0x483
 8005402:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8005406:	428a      	cmp	r2, r1
 8005408:	f000 80e3 	beq.w	80055d2 <ai_platform_api_get_network_report+0x53e>
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8005412:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 8005416:	f000 8149 	beq.w	80056ac <ai_platform_api_get_network_report+0x618>
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005420:	2b00      	cmp	r3, #0
 8005422:	d13c      	bne.n	800549e <ai_platform_api_get_network_report+0x40a>
 8005424:	4b76      	ldr	r3, [pc, #472]	; (8005600 <ai_platform_api_get_network_report+0x56c>)
 8005426:	2201      	movs	r2, #1
 8005428:	609a      	str	r2, [r3, #8]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	2a00      	cmp	r2, #0
 800542e:	d1fc      	bne.n	800542a <ai_platform_api_get_network_report+0x396>
 8005430:	4a74      	ldr	r2, [pc, #464]	; (8005604 <ai_platform_api_get_network_report+0x570>)
 8005432:	601a      	str	r2, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	4b74      	ldr	r3, [pc, #464]	; (8005608 <ai_platform_api_get_network_report+0x574>)
 8005438:	429a      	cmp	r2, r3
 800543a:	d030      	beq.n	800549e <ai_platform_api_get_network_report+0x40a>
 800543c:	e7fe      	b.n	800543c <ai_platform_api_get_network_report+0x3a8>
 800543e:	9901      	ldr	r1, [sp, #4]
 8005440:	2300      	movs	r3, #0
 8005442:	2218      	movs	r2, #24
 8005444:	f107 0010 	add.w	r0, r7, #16
 8005448:	640b      	str	r3, [r1, #64]	; 0x40
 800544a:	874b      	strh	r3, [r1, #58]	; 0x3a
 800544c:	2113      	movs	r1, #19
 800544e:	f001 fe07 	bl	8007060 <core_set_error>
 8005452:	e6f7      	b.n	8005244 <ai_platform_api_get_network_report+0x1b0>
 8005454:	2218      	movs	r2, #24
 8005456:	2111      	movs	r1, #17
 8005458:	f107 0010 	add.w	r0, r7, #16
 800545c:	f001 fe00 	bl	8007060 <core_set_error>
 8005460:	e6f0      	b.n	8005244 <ai_platform_api_get_network_report+0x1b0>
 8005462:	4a67      	ldr	r2, [pc, #412]	; (8005600 <ai_platform_api_get_network_report+0x56c>)
 8005464:	2301      	movs	r3, #1
 8005466:	6093      	str	r3, [r2, #8]
 8005468:	6893      	ldr	r3, [r2, #8]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d1fc      	bne.n	8005468 <ai_platform_api_get_network_report+0x3d4>
 800546e:	4b65      	ldr	r3, [pc, #404]	; (8005604 <ai_platform_api_get_network_report+0x570>)
 8005470:	6013      	str	r3, [r2, #0]
 8005472:	4b65      	ldr	r3, [pc, #404]	; (8005608 <ai_platform_api_get_network_report+0x574>)
 8005474:	6812      	ldr	r2, [r2, #0]
 8005476:	429a      	cmp	r2, r3
 8005478:	d011      	beq.n	800549e <ai_platform_api_get_network_report+0x40a>
 800547a:	e7fe      	b.n	800547a <ai_platform_api_get_network_report+0x3e6>
 800547c:	4b63      	ldr	r3, [pc, #396]	; (800560c <ai_platform_api_get_network_report+0x578>)
 800547e:	2201      	movs	r2, #1
 8005480:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8005484:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8005488:	2a00      	cmp	r2, #0
 800548a:	d1fb      	bne.n	8005484 <ai_platform_api_get_network_report+0x3f0>
 800548c:	4a5d      	ldr	r2, [pc, #372]	; (8005604 <ai_platform_api_get_network_report+0x570>)
 800548e:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005492:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005496:	4b5c      	ldr	r3, [pc, #368]	; (8005608 <ai_platform_api_get_network_report+0x574>)
 8005498:	429a      	cmp	r2, r3
 800549a:	f040 8099 	bne.w	80055d0 <ai_platform_api_get_network_report+0x53c>
 800549e:	f7ff f943 	bl	8004728 <_ai_platform_release_crc>
 80054a2:	4b5b      	ldr	r3, [pc, #364]	; (8005610 <ai_platform_api_get_network_report+0x57c>)
 80054a4:	9a01      	ldr	r2, [sp, #4]
 80054a6:	6113      	str	r3, [r2, #16]
 80054a8:	f7ff f93c 	bl	8004724 <_ai_platform_acquire_crc>
 80054ac:	4b52      	ldr	r3, [pc, #328]	; (80055f8 <ai_platform_api_get_network_report+0x564>)
 80054ae:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054b8:	eb03 020c 	add.w	r2, r3, ip
 80054bc:	2a01      	cmp	r2, #1
 80054be:	d92b      	bls.n	8005518 <ai_platform_api_get_network_report+0x484>
 80054c0:	f240 4249 	movw	r2, #1097	; 0x449
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d027      	beq.n	8005518 <ai_platform_api_get_network_report+0x484>
 80054c8:	4b4c      	ldr	r3, [pc, #304]	; (80055fc <ai_platform_api_get_network_report+0x568>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80054d0:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 80054d4:	d02d      	beq.n	8005532 <ai_platform_api_get_network_report+0x49e>
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	f240 4183 	movw	r1, #1155	; 0x483
 80054dc:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80054e0:	428a      	cmp	r2, r1
 80054e2:	f000 8110 	beq.w	8005706 <ai_platform_api_get_network_report+0x672>
 80054e6:	681a      	ldr	r2, [r3, #0]
 80054e8:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80054ec:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 80054f0:	f000 80fb 	beq.w	80056ea <ai_platform_api_get_network_report+0x656>
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d12a      	bne.n	8005554 <ai_platform_api_get_network_report+0x4c0>
 80054fe:	4b40      	ldr	r3, [pc, #256]	; (8005600 <ai_platform_api_get_network_report+0x56c>)
 8005500:	2201      	movs	r2, #1
 8005502:	609a      	str	r2, [r3, #8]
 8005504:	689a      	ldr	r2, [r3, #8]
 8005506:	2a00      	cmp	r2, #0
 8005508:	d1fc      	bne.n	8005504 <ai_platform_api_get_network_report+0x470>
 800550a:	4a3e      	ldr	r2, [pc, #248]	; (8005604 <ai_platform_api_get_network_report+0x570>)
 800550c:	601a      	str	r2, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	4b3d      	ldr	r3, [pc, #244]	; (8005608 <ai_platform_api_get_network_report+0x574>)
 8005512:	429a      	cmp	r2, r3
 8005514:	d01e      	beq.n	8005554 <ai_platform_api_get_network_report+0x4c0>
 8005516:	e7fe      	b.n	8005516 <ai_platform_api_get_network_report+0x482>
 8005518:	4a39      	ldr	r2, [pc, #228]	; (8005600 <ai_platform_api_get_network_report+0x56c>)
 800551a:	2301      	movs	r3, #1
 800551c:	6093      	str	r3, [r2, #8]
 800551e:	6893      	ldr	r3, [r2, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d1fc      	bne.n	800551e <ai_platform_api_get_network_report+0x48a>
 8005524:	4b37      	ldr	r3, [pc, #220]	; (8005604 <ai_platform_api_get_network_report+0x570>)
 8005526:	6013      	str	r3, [r2, #0]
 8005528:	4b37      	ldr	r3, [pc, #220]	; (8005608 <ai_platform_api_get_network_report+0x574>)
 800552a:	6812      	ldr	r2, [r2, #0]
 800552c:	429a      	cmp	r2, r3
 800552e:	d011      	beq.n	8005554 <ai_platform_api_get_network_report+0x4c0>
 8005530:	e7fe      	b.n	8005530 <ai_platform_api_get_network_report+0x49c>
 8005532:	4b36      	ldr	r3, [pc, #216]	; (800560c <ai_platform_api_get_network_report+0x578>)
 8005534:	2201      	movs	r2, #1
 8005536:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800553a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800553e:	2a00      	cmp	r2, #0
 8005540:	d1fb      	bne.n	800553a <ai_platform_api_get_network_report+0x4a6>
 8005542:	4a30      	ldr	r2, [pc, #192]	; (8005604 <ai_platform_api_get_network_report+0x570>)
 8005544:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005548:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800554c:	4b2e      	ldr	r3, [pc, #184]	; (8005608 <ai_platform_api_get_network_report+0x574>)
 800554e:	429a      	cmp	r2, r3
 8005550:	f040 80ab 	bne.w	80056aa <ai_platform_api_get_network_report+0x616>
 8005554:	f7ff f8e8 	bl	8004728 <_ai_platform_release_crc>
 8005558:	f44f 7384 	mov.w	r3, #264	; 0x108
 800555c:	9a01      	ldr	r2, [sp, #4]
 800555e:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8005562:	6153      	str	r3, [r2, #20]
 8005564:	f7ff f8de 	bl	8004724 <_ai_platform_acquire_crc>
 8005568:	4b23      	ldr	r3, [pc, #140]	; (80055f8 <ai_platform_api_get_network_report+0x564>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005570:	195a      	adds	r2, r3, r5
 8005572:	2a01      	cmp	r2, #1
 8005574:	d94e      	bls.n	8005614 <ai_platform_api_get_network_report+0x580>
 8005576:	f240 4249 	movw	r2, #1097	; 0x449
 800557a:	4293      	cmp	r3, r2
 800557c:	d04a      	beq.n	8005614 <ai_platform_api_get_network_report+0x580>
 800557e:	4b1f      	ldr	r3, [pc, #124]	; (80055fc <ai_platform_api_get_network_report+0x568>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8005586:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800558a:	f000 809d 	beq.w	80056c8 <ai_platform_api_get_network_report+0x634>
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	f240 4183 	movw	r1, #1155	; 0x483
 8005594:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8005598:	428a      	cmp	r2, r1
 800559a:	f000 80fe 	beq.w	800579a <ai_platform_api_get_network_report+0x706>
 800559e:	681a      	ldr	r2, [r3, #0]
 80055a0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80055a4:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 80055a8:	f000 80e9 	beq.w	800577e <ai_platform_api_get_network_report+0x6ea>
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d13a      	bne.n	800562c <ai_platform_api_get_network_report+0x598>
 80055b6:	4b12      	ldr	r3, [pc, #72]	; (8005600 <ai_platform_api_get_network_report+0x56c>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	609a      	str	r2, [r3, #8]
 80055bc:	689a      	ldr	r2, [r3, #8]
 80055be:	2a00      	cmp	r2, #0
 80055c0:	d1fc      	bne.n	80055bc <ai_platform_api_get_network_report+0x528>
 80055c2:	4a10      	ldr	r2, [pc, #64]	; (8005604 <ai_platform_api_get_network_report+0x570>)
 80055c4:	601a      	str	r2, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	4b0f      	ldr	r3, [pc, #60]	; (8005608 <ai_platform_api_get_network_report+0x574>)
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d02e      	beq.n	800562c <ai_platform_api_get_network_report+0x598>
 80055ce:	e7fe      	b.n	80055ce <ai_platform_api_get_network_report+0x53a>
 80055d0:	e7fe      	b.n	80055d0 <ai_platform_api_get_network_report+0x53c>
 80055d2:	4b0e      	ldr	r3, [pc, #56]	; (800560c <ai_platform_api_get_network_report+0x578>)
 80055d4:	2201      	movs	r2, #1
 80055d6:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80055da:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80055de:	2a00      	cmp	r2, #0
 80055e0:	d1fb      	bne.n	80055da <ai_platform_api_get_network_report+0x546>
 80055e2:	4a08      	ldr	r2, [pc, #32]	; (8005604 <ai_platform_api_get_network_report+0x570>)
 80055e4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80055e8:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80055ec:	4b06      	ldr	r3, [pc, #24]	; (8005608 <ai_platform_api_get_network_report+0x574>)
 80055ee:	429a      	cmp	r2, r3
 80055f0:	f43f af55 	beq.w	800549e <ai_platform_api_get_network_report+0x40a>
 80055f4:	e7fe      	b.n	80055f4 <ai_platform_api_get_network_report+0x560>
 80055f6:	bf00      	nop
 80055f8:	e0042000 	.word	0xe0042000
 80055fc:	5c001000 	.word	0x5c001000
 8005600:	40023000 	.word	0x40023000
 8005604:	f407a5c2 	.word	0xf407a5c2
 8005608:	b5e8b5cd 	.word	0xb5e8b5cd
 800560c:	58024000 	.word	0x58024000
 8005610:	08010314 	.word	0x08010314
 8005614:	4ba4      	ldr	r3, [pc, #656]	; (80058a8 <ai_platform_api_get_network_report+0x814>)
 8005616:	2201      	movs	r2, #1
 8005618:	609a      	str	r2, [r3, #8]
 800561a:	689a      	ldr	r2, [r3, #8]
 800561c:	2a00      	cmp	r2, #0
 800561e:	d1fc      	bne.n	800561a <ai_platform_api_get_network_report+0x586>
 8005620:	4aa2      	ldr	r2, [pc, #648]	; (80058ac <ai_platform_api_get_network_report+0x818>)
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	4ba2      	ldr	r3, [pc, #648]	; (80058b0 <ai_platform_api_get_network_report+0x81c>)
 8005628:	429a      	cmp	r2, r3
 800562a:	d13d      	bne.n	80056a8 <ai_platform_api_get_network_report+0x614>
 800562c:	f7ff f87c 	bl	8004728 <_ai_platform_release_crc>
 8005630:	f240 2301 	movw	r3, #513	; 0x201
 8005634:	9a01      	ldr	r2, [sp, #4]
 8005636:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 800563a:	6253      	str	r3, [r2, #36]	; 0x24
 800563c:	f7ff f872 	bl	8004724 <_ai_platform_acquire_crc>
 8005640:	4b9c      	ldr	r3, [pc, #624]	; (80058b4 <ai_platform_api_get_network_report+0x820>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005648:	191a      	adds	r2, r3, r4
 800564a:	2a01      	cmp	r2, #1
 800564c:	d96d      	bls.n	800572a <ai_platform_api_get_network_report+0x696>
 800564e:	f240 4249 	movw	r2, #1097	; 0x449
 8005652:	4293      	cmp	r3, r2
 8005654:	d069      	beq.n	800572a <ai_platform_api_get_network_report+0x696>
 8005656:	4b98      	ldr	r3, [pc, #608]	; (80058b8 <ai_platform_api_get_network_report+0x824>)
 8005658:	681a      	ldr	r2, [r3, #0]
 800565a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800565e:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8005662:	f000 80ca 	beq.w	80057fa <ai_platform_api_get_network_report+0x766>
 8005666:	681a      	ldr	r2, [r3, #0]
 8005668:	f240 4183 	movw	r1, #1155	; 0x483
 800566c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8005670:	428a      	cmp	r2, r1
 8005672:	f000 80b1 	beq.w	80057d8 <ai_platform_api_get_network_report+0x744>
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800567c:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 8005680:	f000 809d 	beq.w	80057be <ai_platform_api_get_network_report+0x72a>
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800568a:	2b00      	cmp	r3, #0
 800568c:	d159      	bne.n	8005742 <ai_platform_api_get_network_report+0x6ae>
 800568e:	4b86      	ldr	r3, [pc, #536]	; (80058a8 <ai_platform_api_get_network_report+0x814>)
 8005690:	2201      	movs	r2, #1
 8005692:	609a      	str	r2, [r3, #8]
 8005694:	689a      	ldr	r2, [r3, #8]
 8005696:	2a00      	cmp	r2, #0
 8005698:	d1fc      	bne.n	8005694 <ai_platform_api_get_network_report+0x600>
 800569a:	4a84      	ldr	r2, [pc, #528]	; (80058ac <ai_platform_api_get_network_report+0x818>)
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	4b83      	ldr	r3, [pc, #524]	; (80058b0 <ai_platform_api_get_network_report+0x81c>)
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d04d      	beq.n	8005742 <ai_platform_api_get_network_report+0x6ae>
 80056a6:	e7fe      	b.n	80056a6 <ai_platform_api_get_network_report+0x612>
 80056a8:	e7fe      	b.n	80056a8 <ai_platform_api_get_network_report+0x614>
 80056aa:	e7fe      	b.n	80056aa <ai_platform_api_get_network_report+0x616>
 80056ac:	4b7e      	ldr	r3, [pc, #504]	; (80058a8 <ai_platform_api_get_network_report+0x814>)
 80056ae:	2201      	movs	r2, #1
 80056b0:	609a      	str	r2, [r3, #8]
 80056b2:	689a      	ldr	r2, [r3, #8]
 80056b4:	2a00      	cmp	r2, #0
 80056b6:	d1fc      	bne.n	80056b2 <ai_platform_api_get_network_report+0x61e>
 80056b8:	4a7c      	ldr	r2, [pc, #496]	; (80058ac <ai_platform_api_get_network_report+0x818>)
 80056ba:	601a      	str	r2, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4b7c      	ldr	r3, [pc, #496]	; (80058b0 <ai_platform_api_get_network_report+0x81c>)
 80056c0:	429a      	cmp	r2, r3
 80056c2:	f43f aeec 	beq.w	800549e <ai_platform_api_get_network_report+0x40a>
 80056c6:	e7fe      	b.n	80056c6 <ai_platform_api_get_network_report+0x632>
 80056c8:	4b7c      	ldr	r3, [pc, #496]	; (80058bc <ai_platform_api_get_network_report+0x828>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80056d0:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80056d4:	2a00      	cmp	r2, #0
 80056d6:	d1fb      	bne.n	80056d0 <ai_platform_api_get_network_report+0x63c>
 80056d8:	4a74      	ldr	r2, [pc, #464]	; (80058ac <ai_platform_api_get_network_report+0x818>)
 80056da:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80056de:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80056e2:	4b73      	ldr	r3, [pc, #460]	; (80058b0 <ai_platform_api_get_network_report+0x81c>)
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d0a1      	beq.n	800562c <ai_platform_api_get_network_report+0x598>
 80056e8:	e7fe      	b.n	80056e8 <ai_platform_api_get_network_report+0x654>
 80056ea:	4b6f      	ldr	r3, [pc, #444]	; (80058a8 <ai_platform_api_get_network_report+0x814>)
 80056ec:	2201      	movs	r2, #1
 80056ee:	609a      	str	r2, [r3, #8]
 80056f0:	689a      	ldr	r2, [r3, #8]
 80056f2:	2a00      	cmp	r2, #0
 80056f4:	d1fc      	bne.n	80056f0 <ai_platform_api_get_network_report+0x65c>
 80056f6:	4a6d      	ldr	r2, [pc, #436]	; (80058ac <ai_platform_api_get_network_report+0x818>)
 80056f8:	601a      	str	r2, [r3, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	4b6c      	ldr	r3, [pc, #432]	; (80058b0 <ai_platform_api_get_network_report+0x81c>)
 80056fe:	429a      	cmp	r2, r3
 8005700:	f43f af28 	beq.w	8005554 <ai_platform_api_get_network_report+0x4c0>
 8005704:	e7fe      	b.n	8005704 <ai_platform_api_get_network_report+0x670>
 8005706:	4b6d      	ldr	r3, [pc, #436]	; (80058bc <ai_platform_api_get_network_report+0x828>)
 8005708:	2201      	movs	r2, #1
 800570a:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800570e:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8005712:	2a00      	cmp	r2, #0
 8005714:	d1fb      	bne.n	800570e <ai_platform_api_get_network_report+0x67a>
 8005716:	4a65      	ldr	r2, [pc, #404]	; (80058ac <ai_platform_api_get_network_report+0x818>)
 8005718:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 800571c:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005720:	4b63      	ldr	r3, [pc, #396]	; (80058b0 <ai_platform_api_get_network_report+0x81c>)
 8005722:	429a      	cmp	r2, r3
 8005724:	f43f af16 	beq.w	8005554 <ai_platform_api_get_network_report+0x4c0>
 8005728:	e7fe      	b.n	8005728 <ai_platform_api_get_network_report+0x694>
 800572a:	4b5f      	ldr	r3, [pc, #380]	; (80058a8 <ai_platform_api_get_network_report+0x814>)
 800572c:	2201      	movs	r2, #1
 800572e:	609a      	str	r2, [r3, #8]
 8005730:	689a      	ldr	r2, [r3, #8]
 8005732:	2a00      	cmp	r2, #0
 8005734:	d1fc      	bne.n	8005730 <ai_platform_api_get_network_report+0x69c>
 8005736:	4a5d      	ldr	r2, [pc, #372]	; (80058ac <ai_platform_api_get_network_report+0x818>)
 8005738:	601a      	str	r2, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	4b5c      	ldr	r3, [pc, #368]	; (80058b0 <ai_platform_api_get_network_report+0x81c>)
 800573e:	429a      	cmp	r2, r3
 8005740:	d11c      	bne.n	800577c <ai_platform_api_get_network_report+0x6e8>
 8005742:	f7fe fff1 	bl	8004728 <_ai_platform_release_crc>
 8005746:	9c01      	ldr	r4, [sp, #4]
 8005748:	f240 5301 	movw	r3, #1281	; 0x501
 800574c:	62a3      	str	r3, [r4, #40]	; 0x28
 800574e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005750:	f002 fff0 	bl	8008734 <ai_platform_version_get>
 8005754:	4b5a      	ldr	r3, [pc, #360]	; (80058c0 <ai_platform_api_get_network_report+0x82c>)
 8005756:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8005758:	6220      	str	r0, [r4, #32]
 800575a:	429a      	cmp	r2, r3
 800575c:	d15e      	bne.n	800581c <ai_platform_api_get_network_report+0x788>
 800575e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005762:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8005766:	e896 0003 	ldmia.w	r6, {r0, r1}
 800576a:	e882 0003 	stmia.w	r2, {r0, r1}
 800576e:	2201      	movs	r2, #1
 8005770:	e898 0003 	ldmia.w	r8, {r0, r1}
 8005774:	9202      	str	r2, [sp, #8]
 8005776:	e883 0003 	stmia.w	r3, {r0, r1}
 800577a:	e563      	b.n	8005244 <ai_platform_api_get_network_report+0x1b0>
 800577c:	e7fe      	b.n	800577c <ai_platform_api_get_network_report+0x6e8>
 800577e:	4b4a      	ldr	r3, [pc, #296]	; (80058a8 <ai_platform_api_get_network_report+0x814>)
 8005780:	2201      	movs	r2, #1
 8005782:	609a      	str	r2, [r3, #8]
 8005784:	689a      	ldr	r2, [r3, #8]
 8005786:	2a00      	cmp	r2, #0
 8005788:	d1fc      	bne.n	8005784 <ai_platform_api_get_network_report+0x6f0>
 800578a:	4a48      	ldr	r2, [pc, #288]	; (80058ac <ai_platform_api_get_network_report+0x818>)
 800578c:	601a      	str	r2, [r3, #0]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	4b47      	ldr	r3, [pc, #284]	; (80058b0 <ai_platform_api_get_network_report+0x81c>)
 8005792:	429a      	cmp	r2, r3
 8005794:	f43f af4a 	beq.w	800562c <ai_platform_api_get_network_report+0x598>
 8005798:	e7fe      	b.n	8005798 <ai_platform_api_get_network_report+0x704>
 800579a:	4b48      	ldr	r3, [pc, #288]	; (80058bc <ai_platform_api_get_network_report+0x828>)
 800579c:	2201      	movs	r2, #1
 800579e:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80057a2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	d1fb      	bne.n	80057a2 <ai_platform_api_get_network_report+0x70e>
 80057aa:	4a40      	ldr	r2, [pc, #256]	; (80058ac <ai_platform_api_get_network_report+0x818>)
 80057ac:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80057b0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80057b4:	4b3e      	ldr	r3, [pc, #248]	; (80058b0 <ai_platform_api_get_network_report+0x81c>)
 80057b6:	429a      	cmp	r2, r3
 80057b8:	f43f af38 	beq.w	800562c <ai_platform_api_get_network_report+0x598>
 80057bc:	e7fe      	b.n	80057bc <ai_platform_api_get_network_report+0x728>
 80057be:	4b3a      	ldr	r3, [pc, #232]	; (80058a8 <ai_platform_api_get_network_report+0x814>)
 80057c0:	2201      	movs	r2, #1
 80057c2:	609a      	str	r2, [r3, #8]
 80057c4:	689a      	ldr	r2, [r3, #8]
 80057c6:	2a00      	cmp	r2, #0
 80057c8:	d1fc      	bne.n	80057c4 <ai_platform_api_get_network_report+0x730>
 80057ca:	4a38      	ldr	r2, [pc, #224]	; (80058ac <ai_platform_api_get_network_report+0x818>)
 80057cc:	601a      	str	r2, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	4b37      	ldr	r3, [pc, #220]	; (80058b0 <ai_platform_api_get_network_report+0x81c>)
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d0b5      	beq.n	8005742 <ai_platform_api_get_network_report+0x6ae>
 80057d6:	e7fe      	b.n	80057d6 <ai_platform_api_get_network_report+0x742>
 80057d8:	4b38      	ldr	r3, [pc, #224]	; (80058bc <ai_platform_api_get_network_report+0x828>)
 80057da:	2201      	movs	r2, #1
 80057dc:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80057e0:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80057e4:	2a00      	cmp	r2, #0
 80057e6:	d1fb      	bne.n	80057e0 <ai_platform_api_get_network_report+0x74c>
 80057e8:	4a30      	ldr	r2, [pc, #192]	; (80058ac <ai_platform_api_get_network_report+0x818>)
 80057ea:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80057ee:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80057f2:	4b2f      	ldr	r3, [pc, #188]	; (80058b0 <ai_platform_api_get_network_report+0x81c>)
 80057f4:	429a      	cmp	r2, r3
 80057f6:	d0a4      	beq.n	8005742 <ai_platform_api_get_network_report+0x6ae>
 80057f8:	e7fe      	b.n	80057f8 <ai_platform_api_get_network_report+0x764>
 80057fa:	4b30      	ldr	r3, [pc, #192]	; (80058bc <ai_platform_api_get_network_report+0x828>)
 80057fc:	2201      	movs	r2, #1
 80057fe:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8005802:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8005806:	2a00      	cmp	r2, #0
 8005808:	d1fb      	bne.n	8005802 <ai_platform_api_get_network_report+0x76e>
 800580a:	4a28      	ldr	r2, [pc, #160]	; (80058ac <ai_platform_api_get_network_report+0x818>)
 800580c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005810:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005814:	4b26      	ldr	r3, [pc, #152]	; (80058b0 <ai_platform_api_get_network_report+0x81c>)
 8005816:	429a      	cmp	r2, r3
 8005818:	d093      	beq.n	8005742 <ai_platform_api_get_network_report+0x6ae>
 800581a:	e7fe      	b.n	800581a <ai_platform_api_get_network_report+0x786>
 800581c:	9901      	ldr	r1, [sp, #4]
 800581e:	f10d 0910 	add.w	r9, sp, #16
 8005822:	4a28      	ldr	r2, [pc, #160]	; (80058c4 <ai_platform_api_get_network_report+0x830>)
 8005824:	2000      	movs	r0, #0
 8005826:	f8c1 905c 	str.w	r9, [r1, #92]	; 0x5c
 800582a:	f101 0444 	add.w	r4, r1, #68	; 0x44
 800582e:	644a      	str	r2, [r1, #68]	; 0x44
 8005830:	f240 4201 	movw	r2, #1025	; 0x401
 8005834:	f101 0560 	add.w	r5, r1, #96	; 0x60
 8005838:	4b23      	ldr	r3, [pc, #140]	; (80058c8 <ai_platform_api_get_network_report+0x834>)
 800583a:	658a      	str	r2, [r1, #88]	; 0x58
 800583c:	460a      	mov	r2, r1
 800583e:	2100      	movs	r1, #0
 8005840:	46a6      	mov	lr, r4
 8005842:	46ac      	mov	ip, r5
 8005844:	e9c2 0112 	strd	r0, r1, [r2, #72]	; 0x48
 8005848:	e9c2 0114 	strd	r0, r1, [r2, #80]	; 0x50
 800584c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800584e:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 8005852:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8005856:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800585a:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 800585e:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8005862:	4630      	mov	r0, r6
 8005864:	f7fe feb2 	bl	80045cc <ai_buffer_array_sane>
 8005868:	b990      	cbnz	r0, 8005890 <ai_platform_api_get_network_report+0x7fc>
 800586a:	4640      	mov	r0, r8
 800586c:	f7fe feae 	bl	80045cc <ai_buffer_array_sane>
 8005870:	b910      	cbnz	r0, 8005878 <ai_platform_api_get_network_report+0x7e4>
 8005872:	2301      	movs	r3, #1
 8005874:	9302      	str	r3, [sp, #8]
 8005876:	e4e5      	b.n	8005244 <ai_platform_api_get_network_report+0x1b0>
 8005878:	4640      	mov	r0, r8
 800587a:	f7fe fea7 	bl	80045cc <ai_buffer_array_sane>
 800587e:	b328      	cbz	r0, 80058cc <ai_platform_api_get_network_report+0x838>
 8005880:	6a3d      	ldr	r5, [r7, #32]
 8005882:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005886:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800588a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800588e:	e7f0      	b.n	8005872 <ai_platform_api_get_network_report+0x7de>
 8005890:	4630      	mov	r0, r6
 8005892:	f7fe fe9b 	bl	80045cc <ai_buffer_array_sane>
 8005896:	b308      	cbz	r0, 80058dc <ai_platform_api_get_network_report+0x848>
 8005898:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800589a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800589c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800589e:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 80058a2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80058a6:	e7e0      	b.n	800586a <ai_platform_api_get_network_report+0x7d6>
 80058a8:	40023000 	.word	0x40023000
 80058ac:	f407a5c2 	.word	0xf407a5c2
 80058b0:	b5e8b5cd 	.word	0xb5e8b5cd
 80058b4:	e0042000 	.word	0xe0042000
 80058b8:	5c001000 	.word	0x5c001000
 80058bc:	58024000 	.word	0x58024000
 80058c0:	a1facade 	.word	0xa1facade
 80058c4:	00040440 	.word	0x00040440
 80058c8:	0800beac 	.word	0x0800beac
 80058cc:	4605      	mov	r5, r0
 80058ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80058d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80058d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80058d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80058da:	deff      	udf	#255	; 0xff
 80058dc:	4604      	mov	r4, r0
 80058de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80058e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80058e2:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 80058e6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80058ea:	deff      	udf	#255	; 0xff

080058ec <ai_platform_network_create>:
 80058ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058f0:	b083      	sub	sp, #12
 80058f2:	4604      	mov	r4, r0
 80058f4:	4615      	mov	r5, r2
 80058f6:	461e      	mov	r6, r3
 80058f8:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 80058fc:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8005900:	f7fe ff10 	bl	8004724 <_ai_platform_acquire_crc>
 8005904:	2800      	cmp	r0, #0
 8005906:	f000 80bd 	beq.w	8005a84 <ai_platform_network_create+0x198>
 800590a:	4ba5      	ldr	r3, [pc, #660]	; (8005ba0 <ai_platform_network_create+0x2b4>)
 800590c:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8005910:	4601      	mov	r1, r0
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005918:	eb03 020c 	add.w	r2, r3, ip
 800591c:	2a01      	cmp	r2, #1
 800591e:	f240 80a8 	bls.w	8005a72 <ai_platform_network_create+0x186>
 8005922:	f240 4249 	movw	r2, #1097	; 0x449
 8005926:	4293      	cmp	r3, r2
 8005928:	f000 80a3 	beq.w	8005a72 <ai_platform_network_create+0x186>
 800592c:	4a9d      	ldr	r2, [pc, #628]	; (8005ba4 <ai_platform_network_create+0x2b8>)
 800592e:	6813      	ldr	r3, [r2, #0]
 8005930:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005934:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005938:	f000 80b9 	beq.w	8005aae <ai_platform_network_create+0x1c2>
 800593c:	6813      	ldr	r3, [r2, #0]
 800593e:	f240 4c83 	movw	ip, #1155	; 0x483
 8005942:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005946:	4563      	cmp	r3, ip
 8005948:	f000 80a1 	beq.w	8005a8e <ai_platform_network_create+0x1a2>
 800594c:	6813      	ldr	r3, [r2, #0]
 800594e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005952:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005956:	f000 8153 	beq.w	8005c00 <ai_platform_network_create+0x314>
 800595a:	6813      	ldr	r3, [r2, #0]
 800595c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005960:	2b00      	cmp	r3, #0
 8005962:	f040 808d 	bne.w	8005a80 <ai_platform_network_create+0x194>
 8005966:	4a90      	ldr	r2, [pc, #576]	; (8005ba8 <ai_platform_network_create+0x2bc>)
 8005968:	2318      	movs	r3, #24
 800596a:	6093      	str	r3, [r2, #8]
 800596c:	6893      	ldr	r3, [r2, #8]
 800596e:	2b18      	cmp	r3, #24
 8005970:	f040 8086 	bne.w	8005a80 <ai_platform_network_create+0x194>
 8005974:	2301      	movs	r3, #1
 8005976:	6093      	str	r3, [r2, #8]
 8005978:	6893      	ldr	r3, [r2, #8]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1fc      	bne.n	8005978 <ai_platform_network_create+0x8c>
 800597e:	4608      	mov	r0, r1
 8005980:	f7fe fed2 	bl	8004728 <_ai_platform_release_crc>
 8005984:	f7fe fece 	bl	8004724 <_ai_platform_acquire_crc>
 8005988:	4b85      	ldr	r3, [pc, #532]	; (8005ba0 <ai_platform_network_create+0x2b4>)
 800598a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005994:	189a      	adds	r2, r3, r2
 8005996:	2a01      	cmp	r2, #1
 8005998:	f240 809f 	bls.w	8005ada <ai_platform_network_create+0x1ee>
 800599c:	f240 4249 	movw	r2, #1097	; 0x449
 80059a0:	4293      	cmp	r3, r2
 80059a2:	f000 809a 	beq.w	8005ada <ai_platform_network_create+0x1ee>
 80059a6:	4a7f      	ldr	r2, [pc, #508]	; (8005ba4 <ai_platform_network_create+0x2b8>)
 80059a8:	6813      	ldr	r3, [r2, #0]
 80059aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ae:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80059b2:	f000 80a0 	beq.w	8005af6 <ai_platform_network_create+0x20a>
 80059b6:	6813      	ldr	r3, [r2, #0]
 80059b8:	f240 4183 	movw	r1, #1155	; 0x483
 80059bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059c0:	428b      	cmp	r3, r1
 80059c2:	f000 80bf 	beq.w	8005b44 <ai_platform_network_create+0x258>
 80059c6:	6813      	ldr	r3, [r2, #0]
 80059c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059cc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80059d0:	f000 8123 	beq.w	8005c1a <ai_platform_network_create+0x32e>
 80059d4:	6813      	ldr	r3, [r2, #0]
 80059d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 80c4 	beq.w	8005b68 <ai_platform_network_create+0x27c>
 80059e0:	f7fe fea2 	bl	8004728 <_ai_platform_release_crc>
 80059e4:	2c00      	cmp	r4, #0
 80059e6:	f000 80aa 	beq.w	8005b3e <ai_platform_network_create+0x252>
 80059ea:	4b70      	ldr	r3, [pc, #448]	; (8005bac <ai_platform_network_create+0x2c0>)
 80059ec:	602b      	str	r3, [r5, #0]
 80059ee:	6025      	str	r5, [r4, #0]
 80059f0:	f001 fb2e 	bl	8007050 <core_init>
 80059f4:	2800      	cmp	r0, #0
 80059f6:	f000 8090 	beq.w	8005b1a <ai_platform_network_create+0x22e>
 80059fa:	f7fe fe93 	bl	8004724 <_ai_platform_acquire_crc>
 80059fe:	4b68      	ldr	r3, [pc, #416]	; (8005ba0 <ai_platform_network_create+0x2b4>)
 8005a00:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a0a:	185a      	adds	r2, r3, r1
 8005a0c:	2a01      	cmp	r2, #1
 8005a0e:	f240 80b9 	bls.w	8005b84 <ai_platform_network_create+0x298>
 8005a12:	f240 4249 	movw	r2, #1097	; 0x449
 8005a16:	4293      	cmp	r3, r2
 8005a18:	f000 80b4 	beq.w	8005b84 <ai_platform_network_create+0x298>
 8005a1c:	4a61      	ldr	r2, [pc, #388]	; (8005ba4 <ai_platform_network_create+0x2b8>)
 8005a1e:	6813      	ldr	r3, [r2, #0]
 8005a20:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a24:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005a28:	f000 80c8 	beq.w	8005bbc <ai_platform_network_create+0x2d0>
 8005a2c:	6813      	ldr	r3, [r2, #0]
 8005a2e:	f240 4183 	movw	r1, #1155	; 0x483
 8005a32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a36:	428b      	cmp	r3, r1
 8005a38:	f000 8107 	beq.w	8005c4a <ai_platform_network_create+0x35e>
 8005a3c:	6813      	ldr	r3, [r2, #0]
 8005a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a42:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005a46:	f000 8111 	beq.w	8005c6c <ai_platform_network_create+0x380>
 8005a4a:	6813      	ldr	r3, [r2, #0]
 8005a4c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f040 80c3 	bne.w	8005bdc <ai_platform_network_create+0x2f0>
 8005a56:	4b54      	ldr	r3, [pc, #336]	; (8005ba8 <ai_platform_network_create+0x2bc>)
 8005a58:	2201      	movs	r2, #1
 8005a5a:	609a      	str	r2, [r3, #8]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	2a00      	cmp	r2, #0
 8005a60:	d1fc      	bne.n	8005a5c <ai_platform_network_create+0x170>
 8005a62:	4a53      	ldr	r2, [pc, #332]	; (8005bb0 <ai_platform_network_create+0x2c4>)
 8005a64:	601a      	str	r2, [r3, #0]
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	4b52      	ldr	r3, [pc, #328]	; (8005bb4 <ai_platform_network_create+0x2c8>)
 8005a6a:	429a      	cmp	r2, r3
 8005a6c:	f000 80b6 	beq.w	8005bdc <ai_platform_network_create+0x2f0>
 8005a70:	e7fe      	b.n	8005a70 <ai_platform_network_create+0x184>
 8005a72:	4b4d      	ldr	r3, [pc, #308]	; (8005ba8 <ai_platform_network_create+0x2bc>)
 8005a74:	2218      	movs	r2, #24
 8005a76:	609a      	str	r2, [r3, #8]
 8005a78:	689a      	ldr	r2, [r3, #8]
 8005a7a:	2a18      	cmp	r2, #24
 8005a7c:	d027      	beq.n	8005ace <ai_platform_network_create+0x1e2>
 8005a7e:	4608      	mov	r0, r1
 8005a80:	f7fe fe52 	bl	8004728 <_ai_platform_release_crc>
 8005a84:	f244 1033 	movw	r0, #16691	; 0x4133
 8005a88:	b003      	add	sp, #12
 8005a8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005a8e:	4a4a      	ldr	r2, [pc, #296]	; (8005bb8 <ai_platform_network_create+0x2cc>)
 8005a90:	2318      	movs	r3, #24
 8005a92:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005a96:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005a9a:	2b18      	cmp	r3, #24
 8005a9c:	d1f0      	bne.n	8005a80 <ai_platform_network_create+0x194>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005aa4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1fb      	bne.n	8005aa4 <ai_platform_network_create+0x1b8>
 8005aac:	e767      	b.n	800597e <ai_platform_network_create+0x92>
 8005aae:	4a42      	ldr	r2, [pc, #264]	; (8005bb8 <ai_platform_network_create+0x2cc>)
 8005ab0:	2318      	movs	r3, #24
 8005ab2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005ab6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005aba:	2b18      	cmp	r3, #24
 8005abc:	d1e0      	bne.n	8005a80 <ai_platform_network_create+0x194>
 8005abe:	2301      	movs	r3, #1
 8005ac0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005ac4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d1fb      	bne.n	8005ac4 <ai_platform_network_create+0x1d8>
 8005acc:	e757      	b.n	800597e <ai_platform_network_create+0x92>
 8005ace:	2201      	movs	r2, #1
 8005ad0:	609a      	str	r2, [r3, #8]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	2a00      	cmp	r2, #0
 8005ad6:	d1fc      	bne.n	8005ad2 <ai_platform_network_create+0x1e6>
 8005ad8:	e751      	b.n	800597e <ai_platform_network_create+0x92>
 8005ada:	4a33      	ldr	r2, [pc, #204]	; (8005ba8 <ai_platform_network_create+0x2bc>)
 8005adc:	2301      	movs	r3, #1
 8005ade:	6093      	str	r3, [r2, #8]
 8005ae0:	6891      	ldr	r1, [r2, #8]
 8005ae2:	2900      	cmp	r1, #0
 8005ae4:	d1fc      	bne.n	8005ae0 <ai_platform_network_create+0x1f4>
 8005ae6:	4b32      	ldr	r3, [pc, #200]	; (8005bb0 <ai_platform_network_create+0x2c4>)
 8005ae8:	6013      	str	r3, [r2, #0]
 8005aea:	4b32      	ldr	r3, [pc, #200]	; (8005bb4 <ai_platform_network_create+0x2c8>)
 8005aec:	6812      	ldr	r2, [r2, #0]
 8005aee:	429a      	cmp	r2, r3
 8005af0:	f43f af76 	beq.w	80059e0 <ai_platform_network_create+0xf4>
 8005af4:	e7fe      	b.n	8005af4 <ai_platform_network_create+0x208>
 8005af6:	4a30      	ldr	r2, [pc, #192]	; (8005bb8 <ai_platform_network_create+0x2cc>)
 8005af8:	2301      	movs	r3, #1
 8005afa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005afe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d1fb      	bne.n	8005afe <ai_platform_network_create+0x212>
 8005b06:	4b2a      	ldr	r3, [pc, #168]	; (8005bb0 <ai_platform_network_create+0x2c4>)
 8005b08:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005b0c:	4b29      	ldr	r3, [pc, #164]	; (8005bb4 <ai_platform_network_create+0x2c8>)
 8005b0e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005b12:	429a      	cmp	r2, r3
 8005b14:	f43f af64 	beq.w	80059e0 <ai_platform_network_create+0xf4>
 8005b18:	e7fe      	b.n	8005b18 <ai_platform_network_create+0x22c>
 8005b1a:	f04f 0930 	mov.w	r9, #48	; 0x30
 8005b1e:	2300      	movs	r3, #0
 8005b20:	6023      	str	r3, [r4, #0]
 8005b22:	2410      	movs	r4, #16
 8005b24:	4642      	mov	r2, r8
 8005b26:	4639      	mov	r1, r7
 8005b28:	4630      	mov	r0, r6
 8005b2a:	f002 fdfd 	bl	8008728 <ai_version_get>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	2000      	movs	r0, #0
 8005b32:	64ab      	str	r3, [r5, #72]	; 0x48
 8005b34:	f369 0007 	bfi	r0, r9, #0, #8
 8005b38:	f364 201f 	bfi	r0, r4, #8, #24
 8005b3c:	e7a4      	b.n	8005a88 <ai_platform_network_create+0x19c>
 8005b3e:	f241 0010 	movw	r0, #4112	; 0x1010
 8005b42:	e7a1      	b.n	8005a88 <ai_platform_network_create+0x19c>
 8005b44:	4a1c      	ldr	r2, [pc, #112]	; (8005bb8 <ai_platform_network_create+0x2cc>)
 8005b46:	2301      	movs	r3, #1
 8005b48:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005b4c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d1fb      	bne.n	8005b4c <ai_platform_network_create+0x260>
 8005b54:	4b16      	ldr	r3, [pc, #88]	; (8005bb0 <ai_platform_network_create+0x2c4>)
 8005b56:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005b5a:	4b16      	ldr	r3, [pc, #88]	; (8005bb4 <ai_platform_network_create+0x2c8>)
 8005b5c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005b60:	429a      	cmp	r2, r3
 8005b62:	f43f af3d 	beq.w	80059e0 <ai_platform_network_create+0xf4>
 8005b66:	e7fe      	b.n	8005b66 <ai_platform_network_create+0x27a>
 8005b68:	4a0f      	ldr	r2, [pc, #60]	; (8005ba8 <ai_platform_network_create+0x2bc>)
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	6093      	str	r3, [r2, #8]
 8005b6e:	6893      	ldr	r3, [r2, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1fc      	bne.n	8005b6e <ai_platform_network_create+0x282>
 8005b74:	4b0e      	ldr	r3, [pc, #56]	; (8005bb0 <ai_platform_network_create+0x2c4>)
 8005b76:	6013      	str	r3, [r2, #0]
 8005b78:	4b0e      	ldr	r3, [pc, #56]	; (8005bb4 <ai_platform_network_create+0x2c8>)
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	f43f af2f 	beq.w	80059e0 <ai_platform_network_create+0xf4>
 8005b82:	e7fe      	b.n	8005b82 <ai_platform_network_create+0x296>
 8005b84:	4a08      	ldr	r2, [pc, #32]	; (8005ba8 <ai_platform_network_create+0x2bc>)
 8005b86:	2301      	movs	r3, #1
 8005b88:	6093      	str	r3, [r2, #8]
 8005b8a:	6893      	ldr	r3, [r2, #8]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d1fc      	bne.n	8005b8a <ai_platform_network_create+0x29e>
 8005b90:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <ai_platform_network_create+0x2c4>)
 8005b92:	6013      	str	r3, [r2, #0]
 8005b94:	4b07      	ldr	r3, [pc, #28]	; (8005bb4 <ai_platform_network_create+0x2c8>)
 8005b96:	6812      	ldr	r2, [r2, #0]
 8005b98:	429a      	cmp	r2, r3
 8005b9a:	d01f      	beq.n	8005bdc <ai_platform_network_create+0x2f0>
 8005b9c:	e7fe      	b.n	8005b9c <ai_platform_network_create+0x2b0>
 8005b9e:	bf00      	nop
 8005ba0:	e0042000 	.word	0xe0042000
 8005ba4:	5c001000 	.word	0x5c001000
 8005ba8:	40023000 	.word	0x40023000
 8005bac:	a1c00100 	.word	0xa1c00100
 8005bb0:	f407a5c2 	.word	0xf407a5c2
 8005bb4:	b5e8b5cd 	.word	0xb5e8b5cd
 8005bb8:	58024000 	.word	0x58024000
 8005bbc:	4a33      	ldr	r2, [pc, #204]	; (8005c8c <ai_platform_network_create+0x3a0>)
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005bc4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d1fb      	bne.n	8005bc4 <ai_platform_network_create+0x2d8>
 8005bcc:	4b30      	ldr	r3, [pc, #192]	; (8005c90 <ai_platform_network_create+0x3a4>)
 8005bce:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005bd2:	4b30      	ldr	r3, [pc, #192]	; (8005c94 <ai_platform_network_create+0x3a8>)
 8005bd4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d12c      	bne.n	8005c36 <ai_platform_network_create+0x34a>
 8005bdc:	f7fe fda4 	bl	8004728 <_ai_platform_release_crc>
 8005be0:	2200      	movs	r2, #0
 8005be2:	4639      	mov	r1, r7
 8005be4:	4630      	mov	r0, r6
 8005be6:	f002 fd9f 	bl	8008728 <ai_version_get>
 8005bea:	4681      	mov	r9, r0
 8005bec:	2200      	movs	r2, #0
 8005bee:	2105      	movs	r1, #5
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f002 fd99 	bl	8008728 <ai_version_get>
 8005bf6:	4581      	cmp	r9, r0
 8005bf8:	d01e      	beq.n	8005c38 <ai_platform_network_create+0x34c>
 8005bfa:	f04f 0901 	mov.w	r9, #1
 8005bfe:	e78e      	b.n	8005b1e <ai_platform_network_create+0x232>
 8005c00:	4b25      	ldr	r3, [pc, #148]	; (8005c98 <ai_platform_network_create+0x3ac>)
 8005c02:	2218      	movs	r2, #24
 8005c04:	609a      	str	r2, [r3, #8]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	2a18      	cmp	r2, #24
 8005c0a:	f47f af39 	bne.w	8005a80 <ai_platform_network_create+0x194>
 8005c0e:	2201      	movs	r2, #1
 8005c10:	609a      	str	r2, [r3, #8]
 8005c12:	689a      	ldr	r2, [r3, #8]
 8005c14:	2a00      	cmp	r2, #0
 8005c16:	d1fc      	bne.n	8005c12 <ai_platform_network_create+0x326>
 8005c18:	e6b1      	b.n	800597e <ai_platform_network_create+0x92>
 8005c1a:	4a1f      	ldr	r2, [pc, #124]	; (8005c98 <ai_platform_network_create+0x3ac>)
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	6093      	str	r3, [r2, #8]
 8005c20:	6893      	ldr	r3, [r2, #8]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d1fc      	bne.n	8005c20 <ai_platform_network_create+0x334>
 8005c26:	4b1a      	ldr	r3, [pc, #104]	; (8005c90 <ai_platform_network_create+0x3a4>)
 8005c28:	6013      	str	r3, [r2, #0]
 8005c2a:	4b1a      	ldr	r3, [pc, #104]	; (8005c94 <ai_platform_network_create+0x3a8>)
 8005c2c:	6812      	ldr	r2, [r2, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	f43f aed6 	beq.w	80059e0 <ai_platform_network_create+0xf4>
 8005c34:	e7fe      	b.n	8005c34 <ai_platform_network_create+0x348>
 8005c36:	e7fe      	b.n	8005c36 <ai_platform_network_create+0x34a>
 8005c38:	4b18      	ldr	r3, [pc, #96]	; (8005c9c <ai_platform_network_create+0x3b0>)
 8005c3a:	a801      	add	r0, sp, #4
 8005c3c:	9301      	str	r3, [sp, #4]
 8005c3e:	f001 fa37 	bl	80070b0 <ai_check_custom_types>
 8005c42:	b300      	cbz	r0, 8005c86 <ai_platform_network_create+0x39a>
 8005c44:	2400      	movs	r4, #0
 8005c46:	46a1      	mov	r9, r4
 8005c48:	e76c      	b.n	8005b24 <ai_platform_network_create+0x238>
 8005c4a:	4b10      	ldr	r3, [pc, #64]	; (8005c8c <ai_platform_network_create+0x3a0>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8005c52:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8005c56:	2a00      	cmp	r2, #0
 8005c58:	d1fb      	bne.n	8005c52 <ai_platform_network_create+0x366>
 8005c5a:	4a0d      	ldr	r2, [pc, #52]	; (8005c90 <ai_platform_network_create+0x3a4>)
 8005c5c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8005c60:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8005c64:	4b0b      	ldr	r3, [pc, #44]	; (8005c94 <ai_platform_network_create+0x3a8>)
 8005c66:	429a      	cmp	r2, r3
 8005c68:	d0b8      	beq.n	8005bdc <ai_platform_network_create+0x2f0>
 8005c6a:	e7fe      	b.n	8005c6a <ai_platform_network_create+0x37e>
 8005c6c:	4b0a      	ldr	r3, [pc, #40]	; (8005c98 <ai_platform_network_create+0x3ac>)
 8005c6e:	2201      	movs	r2, #1
 8005c70:	609a      	str	r2, [r3, #8]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	2a00      	cmp	r2, #0
 8005c76:	d1fc      	bne.n	8005c72 <ai_platform_network_create+0x386>
 8005c78:	4a05      	ldr	r2, [pc, #20]	; (8005c90 <ai_platform_network_create+0x3a4>)
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	681a      	ldr	r2, [r3, #0]
 8005c7e:	4b05      	ldr	r3, [pc, #20]	; (8005c94 <ai_platform_network_create+0x3a8>)
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d0ab      	beq.n	8005bdc <ai_platform_network_create+0x2f0>
 8005c84:	e7fe      	b.n	8005c84 <ai_platform_network_create+0x398>
 8005c86:	f04f 0902 	mov.w	r9, #2
 8005c8a:	e748      	b.n	8005b1e <ai_platform_network_create+0x232>
 8005c8c:	58024000 	.word	0x58024000
 8005c90:	f407a5c2 	.word	0xf407a5c2
 8005c94:	b5e8b5cd 	.word	0xb5e8b5cd
 8005c98:	40023000 	.word	0x40023000
 8005c9c:	84048403 	.word	0x84048403

08005ca0 <ai_platform_network_destroy>:
 8005ca0:	b510      	push	{r4, lr}
 8005ca2:	4604      	mov	r4, r0
 8005ca4:	2800      	cmp	r0, #0
 8005ca6:	d03d      	beq.n	8005d24 <ai_platform_network_destroy+0x84>
 8005ca8:	4b7a      	ldr	r3, [pc, #488]	; (8005e94 <ai_platform_network_destroy+0x1f4>)
 8005caa:	6802      	ldr	r2, [r0, #0]
 8005cac:	429a      	cmp	r2, r3
 8005cae:	d139      	bne.n	8005d24 <ai_platform_network_destroy+0x84>
 8005cb0:	f7fe fd38 	bl	8004724 <_ai_platform_acquire_crc>
 8005cb4:	4b78      	ldr	r3, [pc, #480]	; (8005e98 <ai_platform_network_destroy+0x1f8>)
 8005cb6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cc0:	189a      	adds	r2, r3, r2
 8005cc2:	2a01      	cmp	r2, #1
 8005cc4:	f240 8084 	bls.w	8005dd0 <ai_platform_network_destroy+0x130>
 8005cc8:	f240 4249 	movw	r2, #1097	; 0x449
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d07f      	beq.n	8005dd0 <ai_platform_network_destroy+0x130>
 8005cd0:	4a72      	ldr	r2, [pc, #456]	; (8005e9c <ai_platform_network_destroy+0x1fc>)
 8005cd2:	6813      	ldr	r3, [r2, #0]
 8005cd4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cd8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005cdc:	f000 8086 	beq.w	8005dec <ai_platform_network_destroy+0x14c>
 8005ce0:	6813      	ldr	r3, [r2, #0]
 8005ce2:	f240 4183 	movw	r1, #1155	; 0x483
 8005ce6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cea:	428b      	cmp	r3, r1
 8005cec:	f000 80a7 	beq.w	8005e3e <ai_platform_network_destroy+0x19e>
 8005cf0:	6813      	ldr	r3, [r2, #0]
 8005cf2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cf6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005cfa:	f000 80be 	beq.w	8005e7a <ai_platform_network_destroy+0x1da>
 8005cfe:	6813      	ldr	r3, [r2, #0]
 8005d00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	f040 8081 	bne.w	8005e0c <ai_platform_network_destroy+0x16c>
 8005d0a:	4a65      	ldr	r2, [pc, #404]	; (8005ea0 <ai_platform_network_destroy+0x200>)
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	6093      	str	r3, [r2, #8]
 8005d10:	6893      	ldr	r3, [r2, #8]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d1fc      	bne.n	8005d10 <ai_platform_network_destroy+0x70>
 8005d16:	4963      	ldr	r1, [pc, #396]	; (8005ea4 <ai_platform_network_destroy+0x204>)
 8005d18:	4b63      	ldr	r3, [pc, #396]	; (8005ea8 <ai_platform_network_destroy+0x208>)
 8005d1a:	6011      	str	r1, [r2, #0]
 8005d1c:	6812      	ldr	r2, [r2, #0]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d074      	beq.n	8005e0c <ai_platform_network_destroy+0x16c>
 8005d22:	e7fe      	b.n	8005d22 <ai_platform_network_destroy+0x82>
 8005d24:	f7fe fcfe 	bl	8004724 <_ai_platform_acquire_crc>
 8005d28:	4b5b      	ldr	r3, [pc, #364]	; (8005e98 <ai_platform_network_destroy+0x1f8>)
 8005d2a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d34:	185a      	adds	r2, r3, r1
 8005d36:	2a01      	cmp	r2, #1
 8005d38:	d929      	bls.n	8005d8e <ai_platform_network_destroy+0xee>
 8005d3a:	f240 4249 	movw	r2, #1097	; 0x449
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d025      	beq.n	8005d8e <ai_platform_network_destroy+0xee>
 8005d42:	4a56      	ldr	r2, [pc, #344]	; (8005e9c <ai_platform_network_destroy+0x1fc>)
 8005d44:	6813      	ldr	r3, [r2, #0]
 8005d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d4a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005d4e:	d02b      	beq.n	8005da8 <ai_platform_network_destroy+0x108>
 8005d50:	6813      	ldr	r3, [r2, #0]
 8005d52:	f240 4183 	movw	r1, #1155	; 0x483
 8005d56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d5a:	428b      	cmp	r3, r1
 8005d5c:	d05e      	beq.n	8005e1c <ai_platform_network_destroy+0x17c>
 8005d5e:	6813      	ldr	r3, [r2, #0]
 8005d60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d64:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005d68:	d07a      	beq.n	8005e60 <ai_platform_network_destroy+0x1c0>
 8005d6a:	6813      	ldr	r3, [r2, #0]
 8005d6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d129      	bne.n	8005dc8 <ai_platform_network_destroy+0x128>
 8005d74:	4a4a      	ldr	r2, [pc, #296]	; (8005ea0 <ai_platform_network_destroy+0x200>)
 8005d76:	2301      	movs	r3, #1
 8005d78:	6093      	str	r3, [r2, #8]
 8005d7a:	6893      	ldr	r3, [r2, #8]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1fc      	bne.n	8005d7a <ai_platform_network_destroy+0xda>
 8005d80:	4948      	ldr	r1, [pc, #288]	; (8005ea4 <ai_platform_network_destroy+0x204>)
 8005d82:	4b49      	ldr	r3, [pc, #292]	; (8005ea8 <ai_platform_network_destroy+0x208>)
 8005d84:	6011      	str	r1, [r2, #0]
 8005d86:	6812      	ldr	r2, [r2, #0]
 8005d88:	429a      	cmp	r2, r3
 8005d8a:	d01d      	beq.n	8005dc8 <ai_platform_network_destroy+0x128>
 8005d8c:	e7fe      	b.n	8005d8c <ai_platform_network_destroy+0xec>
 8005d8e:	4a44      	ldr	r2, [pc, #272]	; (8005ea0 <ai_platform_network_destroy+0x200>)
 8005d90:	2301      	movs	r3, #1
 8005d92:	6093      	str	r3, [r2, #8]
 8005d94:	6893      	ldr	r3, [r2, #8]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d1fc      	bne.n	8005d94 <ai_platform_network_destroy+0xf4>
 8005d9a:	4942      	ldr	r1, [pc, #264]	; (8005ea4 <ai_platform_network_destroy+0x204>)
 8005d9c:	4b42      	ldr	r3, [pc, #264]	; (8005ea8 <ai_platform_network_destroy+0x208>)
 8005d9e:	6011      	str	r1, [r2, #0]
 8005da0:	6812      	ldr	r2, [r2, #0]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d010      	beq.n	8005dc8 <ai_platform_network_destroy+0x128>
 8005da6:	e7fe      	b.n	8005da6 <ai_platform_network_destroy+0x106>
 8005da8:	4a40      	ldr	r2, [pc, #256]	; (8005eac <ai_platform_network_destroy+0x20c>)
 8005daa:	2301      	movs	r3, #1
 8005dac:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005db0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1fb      	bne.n	8005db0 <ai_platform_network_destroy+0x110>
 8005db8:	493a      	ldr	r1, [pc, #232]	; (8005ea4 <ai_platform_network_destroy+0x204>)
 8005dba:	4b3b      	ldr	r3, [pc, #236]	; (8005ea8 <ai_platform_network_destroy+0x208>)
 8005dbc:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005dc0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d110      	bne.n	8005dea <ai_platform_network_destroy+0x14a>
 8005dc8:	f7fe fcae 	bl	8004728 <_ai_platform_release_crc>
 8005dcc:	4620      	mov	r0, r4
 8005dce:	bd10      	pop	{r4, pc}
 8005dd0:	4a33      	ldr	r2, [pc, #204]	; (8005ea0 <ai_platform_network_destroy+0x200>)
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	6093      	str	r3, [r2, #8]
 8005dd6:	6893      	ldr	r3, [r2, #8]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d1fc      	bne.n	8005dd6 <ai_platform_network_destroy+0x136>
 8005ddc:	4931      	ldr	r1, [pc, #196]	; (8005ea4 <ai_platform_network_destroy+0x204>)
 8005dde:	4b32      	ldr	r3, [pc, #200]	; (8005ea8 <ai_platform_network_destroy+0x208>)
 8005de0:	6011      	str	r1, [r2, #0]
 8005de2:	6812      	ldr	r2, [r2, #0]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	d011      	beq.n	8005e0c <ai_platform_network_destroy+0x16c>
 8005de8:	e7fe      	b.n	8005de8 <ai_platform_network_destroy+0x148>
 8005dea:	e7fe      	b.n	8005dea <ai_platform_network_destroy+0x14a>
 8005dec:	4a2f      	ldr	r2, [pc, #188]	; (8005eac <ai_platform_network_destroy+0x20c>)
 8005dee:	2301      	movs	r3, #1
 8005df0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005df4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d1fb      	bne.n	8005df4 <ai_platform_network_destroy+0x154>
 8005dfc:	4929      	ldr	r1, [pc, #164]	; (8005ea4 <ai_platform_network_destroy+0x204>)
 8005dfe:	4b2a      	ldr	r3, [pc, #168]	; (8005ea8 <ai_platform_network_destroy+0x208>)
 8005e00:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005e04:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005e08:	429a      	cmp	r2, r3
 8005e0a:	d106      	bne.n	8005e1a <ai_platform_network_destroy+0x17a>
 8005e0c:	f7fe fc8c 	bl	8004728 <_ai_platform_release_crc>
 8005e10:	4620      	mov	r0, r4
 8005e12:	f001 fa0f 	bl	8007234 <ai_layers_destroy_all>
 8005e16:	2000      	movs	r0, #0
 8005e18:	bd10      	pop	{r4, pc}
 8005e1a:	e7fe      	b.n	8005e1a <ai_platform_network_destroy+0x17a>
 8005e1c:	4a23      	ldr	r2, [pc, #140]	; (8005eac <ai_platform_network_destroy+0x20c>)
 8005e1e:	2301      	movs	r3, #1
 8005e20:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005e24:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1fb      	bne.n	8005e24 <ai_platform_network_destroy+0x184>
 8005e2c:	491d      	ldr	r1, [pc, #116]	; (8005ea4 <ai_platform_network_destroy+0x204>)
 8005e2e:	4b1e      	ldr	r3, [pc, #120]	; (8005ea8 <ai_platform_network_destroy+0x208>)
 8005e30:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005e34:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d0c5      	beq.n	8005dc8 <ai_platform_network_destroy+0x128>
 8005e3c:	e7fe      	b.n	8005e3c <ai_platform_network_destroy+0x19c>
 8005e3e:	4a1b      	ldr	r2, [pc, #108]	; (8005eac <ai_platform_network_destroy+0x20c>)
 8005e40:	2301      	movs	r3, #1
 8005e42:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005e46:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1fb      	bne.n	8005e46 <ai_platform_network_destroy+0x1a6>
 8005e4e:	4915      	ldr	r1, [pc, #84]	; (8005ea4 <ai_platform_network_destroy+0x204>)
 8005e50:	4b15      	ldr	r3, [pc, #84]	; (8005ea8 <ai_platform_network_destroy+0x208>)
 8005e52:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005e56:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d0d6      	beq.n	8005e0c <ai_platform_network_destroy+0x16c>
 8005e5e:	e7fe      	b.n	8005e5e <ai_platform_network_destroy+0x1be>
 8005e60:	4a0f      	ldr	r2, [pc, #60]	; (8005ea0 <ai_platform_network_destroy+0x200>)
 8005e62:	2301      	movs	r3, #1
 8005e64:	6093      	str	r3, [r2, #8]
 8005e66:	6893      	ldr	r3, [r2, #8]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d1fc      	bne.n	8005e66 <ai_platform_network_destroy+0x1c6>
 8005e6c:	490d      	ldr	r1, [pc, #52]	; (8005ea4 <ai_platform_network_destroy+0x204>)
 8005e6e:	4b0e      	ldr	r3, [pc, #56]	; (8005ea8 <ai_platform_network_destroy+0x208>)
 8005e70:	6011      	str	r1, [r2, #0]
 8005e72:	6812      	ldr	r2, [r2, #0]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d0a7      	beq.n	8005dc8 <ai_platform_network_destroy+0x128>
 8005e78:	e7fe      	b.n	8005e78 <ai_platform_network_destroy+0x1d8>
 8005e7a:	4a09      	ldr	r2, [pc, #36]	; (8005ea0 <ai_platform_network_destroy+0x200>)
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	6093      	str	r3, [r2, #8]
 8005e80:	6893      	ldr	r3, [r2, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d1fc      	bne.n	8005e80 <ai_platform_network_destroy+0x1e0>
 8005e86:	4907      	ldr	r1, [pc, #28]	; (8005ea4 <ai_platform_network_destroy+0x204>)
 8005e88:	4b07      	ldr	r3, [pc, #28]	; (8005ea8 <ai_platform_network_destroy+0x208>)
 8005e8a:	6011      	str	r1, [r2, #0]
 8005e8c:	6812      	ldr	r2, [r2, #0]
 8005e8e:	429a      	cmp	r2, r3
 8005e90:	d0bc      	beq.n	8005e0c <ai_platform_network_destroy+0x16c>
 8005e92:	e7fe      	b.n	8005e92 <ai_platform_network_destroy+0x1f2>
 8005e94:	a1c00100 	.word	0xa1c00100
 8005e98:	e0042000 	.word	0xe0042000
 8005e9c:	5c001000 	.word	0x5c001000
 8005ea0:	40023000 	.word	0x40023000
 8005ea4:	f407a5c2 	.word	0xf407a5c2
 8005ea8:	b5e8b5cd 	.word	0xb5e8b5cd
 8005eac:	58024000 	.word	0x58024000

08005eb0 <ai_platform_network_init>:
 8005eb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	d052      	beq.n	8005f5e <ai_platform_network_init+0xae>
 8005eb8:	4bab      	ldr	r3, [pc, #684]	; (8006168 <ai_platform_network_init+0x2b8>)
 8005eba:	4604      	mov	r4, r0
 8005ebc:	6802      	ldr	r2, [r0, #0]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d14d      	bne.n	8005f5e <ai_platform_network_init+0xae>
 8005ec2:	460d      	mov	r5, r1
 8005ec4:	f7fe fc2e 	bl	8004724 <_ai_platform_acquire_crc>
 8005ec8:	4ba8      	ldr	r3, [pc, #672]	; (800616c <ai_platform_network_init+0x2bc>)
 8005eca:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ed4:	189a      	adds	r2, r3, r2
 8005ed6:	2a01      	cmp	r2, #1
 8005ed8:	f240 809b 	bls.w	8006012 <ai_platform_network_init+0x162>
 8005edc:	f240 4249 	movw	r2, #1097	; 0x449
 8005ee0:	4293      	cmp	r3, r2
 8005ee2:	f000 8096 	beq.w	8006012 <ai_platform_network_init+0x162>
 8005ee6:	4aa2      	ldr	r2, [pc, #648]	; (8006170 <ai_platform_network_init+0x2c0>)
 8005ee8:	6813      	ldr	r3, [r2, #0]
 8005eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005eee:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005ef2:	f000 809d 	beq.w	8006030 <ai_platform_network_init+0x180>
 8005ef6:	6813      	ldr	r3, [r2, #0]
 8005ef8:	f240 4183 	movw	r1, #1155	; 0x483
 8005efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f00:	428b      	cmp	r3, r1
 8005f02:	f000 80e4 	beq.w	80060ce <ai_platform_network_init+0x21e>
 8005f06:	6813      	ldr	r3, [r2, #0]
 8005f08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f0c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005f10:	f000 811b 	beq.w	800614a <ai_platform_network_init+0x29a>
 8005f14:	6813      	ldr	r3, [r2, #0]
 8005f16:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	f000 80f9 	beq.w	8006112 <ai_platform_network_init+0x262>
 8005f20:	f7fe fc02 	bl	8004728 <_ai_platform_release_crc>
 8005f24:	2d00      	cmp	r5, #0
 8005f26:	f000 8147 	beq.w	80061b8 <ai_platform_network_init+0x308>
 8005f2a:	4b92      	ldr	r3, [pc, #584]	; (8006174 <ai_platform_network_init+0x2c4>)
 8005f2c:	682a      	ldr	r2, [r5, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	f040 8090 	bne.w	8006054 <ai_platform_network_init+0x1a4>
 8005f34:	692b      	ldr	r3, [r5, #16]
 8005f36:	89ae      	ldrh	r6, [r5, #12]
 8005f38:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8005f3c:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 8005f40:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f42:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8005f46:	2303      	movs	r3, #3
 8005f48:	84a6      	strh	r6, [r4, #36]	; 0x24
 8005f4a:	4626      	mov	r6, r4
 8005f4c:	4620      	mov	r0, r4
 8005f4e:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 8005f52:	60e3      	str	r3, [r4, #12]
 8005f54:	f001 f904 	bl	8007160 <ai_layers_init_all>
 8005f58:	4630      	mov	r0, r6
 8005f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f5e:	f7fe fbe1 	bl	8004724 <_ai_platform_acquire_crc>
 8005f62:	4b82      	ldr	r3, [pc, #520]	; (800616c <ai_platform_network_init+0x2bc>)
 8005f64:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f6e:	185a      	adds	r2, r3, r1
 8005f70:	2a01      	cmp	r2, #1
 8005f72:	d92b      	bls.n	8005fcc <ai_platform_network_init+0x11c>
 8005f74:	f240 4249 	movw	r2, #1097	; 0x449
 8005f78:	4293      	cmp	r3, r2
 8005f7a:	d027      	beq.n	8005fcc <ai_platform_network_init+0x11c>
 8005f7c:	4a7c      	ldr	r2, [pc, #496]	; (8006170 <ai_platform_network_init+0x2c0>)
 8005f7e:	6813      	ldr	r3, [r2, #0]
 8005f80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f84:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005f88:	d02d      	beq.n	8005fe6 <ai_platform_network_init+0x136>
 8005f8a:	6813      	ldr	r3, [r2, #0]
 8005f8c:	f240 4183 	movw	r1, #1155	; 0x483
 8005f90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f94:	428b      	cmp	r3, r1
 8005f96:	f000 8089 	beq.w	80060ac <ai_platform_network_init+0x1fc>
 8005f9a:	6813      	ldr	r3, [r2, #0]
 8005f9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fa0:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005fa4:	f000 80c3 	beq.w	800612e <ai_platform_network_init+0x27e>
 8005fa8:	6813      	ldr	r3, [r2, #0]
 8005faa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d129      	bne.n	8006006 <ai_platform_network_init+0x156>
 8005fb2:	4a71      	ldr	r2, [pc, #452]	; (8006178 <ai_platform_network_init+0x2c8>)
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	6093      	str	r3, [r2, #8]
 8005fb8:	6893      	ldr	r3, [r2, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1fc      	bne.n	8005fb8 <ai_platform_network_init+0x108>
 8005fbe:	496f      	ldr	r1, [pc, #444]	; (800617c <ai_platform_network_init+0x2cc>)
 8005fc0:	4b6f      	ldr	r3, [pc, #444]	; (8006180 <ai_platform_network_init+0x2d0>)
 8005fc2:	6011      	str	r1, [r2, #0]
 8005fc4:	6812      	ldr	r2, [r2, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d01d      	beq.n	8006006 <ai_platform_network_init+0x156>
 8005fca:	e7fe      	b.n	8005fca <ai_platform_network_init+0x11a>
 8005fcc:	4a6a      	ldr	r2, [pc, #424]	; (8006178 <ai_platform_network_init+0x2c8>)
 8005fce:	2301      	movs	r3, #1
 8005fd0:	6093      	str	r3, [r2, #8]
 8005fd2:	6893      	ldr	r3, [r2, #8]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d1fc      	bne.n	8005fd2 <ai_platform_network_init+0x122>
 8005fd8:	4968      	ldr	r1, [pc, #416]	; (800617c <ai_platform_network_init+0x2cc>)
 8005fda:	4b69      	ldr	r3, [pc, #420]	; (8006180 <ai_platform_network_init+0x2d0>)
 8005fdc:	6011      	str	r1, [r2, #0]
 8005fde:	6812      	ldr	r2, [r2, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d010      	beq.n	8006006 <ai_platform_network_init+0x156>
 8005fe4:	e7fe      	b.n	8005fe4 <ai_platform_network_init+0x134>
 8005fe6:	4a67      	ldr	r2, [pc, #412]	; (8006184 <ai_platform_network_init+0x2d4>)
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005fee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1fb      	bne.n	8005fee <ai_platform_network_init+0x13e>
 8005ff6:	4961      	ldr	r1, [pc, #388]	; (800617c <ai_platform_network_init+0x2cc>)
 8005ff8:	4b61      	ldr	r3, [pc, #388]	; (8006180 <ai_platform_network_init+0x2d0>)
 8005ffa:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005ffe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006002:	429a      	cmp	r2, r3
 8006004:	d113      	bne.n	800602e <ai_platform_network_init+0x17e>
 8006006:	2600      	movs	r6, #0
 8006008:	f7fe fb8e 	bl	8004728 <_ai_platform_release_crc>
 800600c:	4630      	mov	r0, r6
 800600e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006012:	4a59      	ldr	r2, [pc, #356]	; (8006178 <ai_platform_network_init+0x2c8>)
 8006014:	2301      	movs	r3, #1
 8006016:	6093      	str	r3, [r2, #8]
 8006018:	6893      	ldr	r3, [r2, #8]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d1fc      	bne.n	8006018 <ai_platform_network_init+0x168>
 800601e:	4b57      	ldr	r3, [pc, #348]	; (800617c <ai_platform_network_init+0x2cc>)
 8006020:	6013      	str	r3, [r2, #0]
 8006022:	4b57      	ldr	r3, [pc, #348]	; (8006180 <ai_platform_network_init+0x2d0>)
 8006024:	6812      	ldr	r2, [r2, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	f43f af7a 	beq.w	8005f20 <ai_platform_network_init+0x70>
 800602c:	e7fe      	b.n	800602c <ai_platform_network_init+0x17c>
 800602e:	e7fe      	b.n	800602e <ai_platform_network_init+0x17e>
 8006030:	4a54      	ldr	r2, [pc, #336]	; (8006184 <ai_platform_network_init+0x2d4>)
 8006032:	2301      	movs	r3, #1
 8006034:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006038:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1fb      	bne.n	8006038 <ai_platform_network_init+0x188>
 8006040:	4b4e      	ldr	r3, [pc, #312]	; (800617c <ai_platform_network_init+0x2cc>)
 8006042:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006046:	4b4e      	ldr	r3, [pc, #312]	; (8006180 <ai_platform_network_init+0x2d0>)
 8006048:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800604c:	429a      	cmp	r2, r3
 800604e:	f43f af67 	beq.w	8005f20 <ai_platform_network_init+0x70>
 8006052:	e7fe      	b.n	8006052 <ai_platform_network_init+0x1a2>
 8006054:	2101      	movs	r1, #1
 8006056:	4628      	mov	r0, r5
 8006058:	f105 081c 	add.w	r8, r5, #28
 800605c:	686e      	ldr	r6, [r5, #4]
 800605e:	f7fe fa79 	bl	8004554 <ai_buffer_get_size>
 8006062:	4607      	mov	r7, r0
 8006064:	2101      	movs	r1, #1
 8006066:	4640      	mov	r0, r8
 8006068:	f8d5 9020 	ldr.w	r9, [r5, #32]
 800606c:	f7fe fa72 	bl	8004554 <ai_buffer_get_size>
 8006070:	2f00      	cmp	r7, #0
 8006072:	d13e      	bne.n	80060f2 <ai_platform_network_init+0x242>
 8006074:	2800      	cmp	r0, #0
 8006076:	f000 808e 	beq.w	8006196 <ai_platform_network_init+0x2e6>
 800607a:	f1b9 0f00 	cmp.w	r9, #0
 800607e:	f000 8094 	beq.w	80061aa <ai_platform_network_init+0x2fa>
 8006082:	f04f 0c01 	mov.w	ip, #1
 8006086:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006088:	2600      	movs	r6, #0
 800608a:	83e7      	strh	r7, [r4, #30]
 800608c:	4563      	cmp	r3, ip
 800608e:	83a6      	strh	r6, [r4, #28]
 8006090:	d37a      	bcc.n	8006188 <ai_platform_network_init+0x2d8>
 8006092:	f1bc 0f00 	cmp.w	ip, #0
 8006096:	f000 809c 	beq.w	80061d2 <ai_platform_network_init+0x322>
 800609a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800609c:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80060a0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80060a2:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80060a6:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80060aa:	e74c      	b.n	8005f46 <ai_platform_network_init+0x96>
 80060ac:	4a35      	ldr	r2, [pc, #212]	; (8006184 <ai_platform_network_init+0x2d4>)
 80060ae:	2301      	movs	r3, #1
 80060b0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80060b4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d1fb      	bne.n	80060b4 <ai_platform_network_init+0x204>
 80060bc:	492f      	ldr	r1, [pc, #188]	; (800617c <ai_platform_network_init+0x2cc>)
 80060be:	4b30      	ldr	r3, [pc, #192]	; (8006180 <ai_platform_network_init+0x2d0>)
 80060c0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80060c4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d09c      	beq.n	8006006 <ai_platform_network_init+0x156>
 80060cc:	e7fe      	b.n	80060cc <ai_platform_network_init+0x21c>
 80060ce:	4a2d      	ldr	r2, [pc, #180]	; (8006184 <ai_platform_network_init+0x2d4>)
 80060d0:	2301      	movs	r3, #1
 80060d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80060d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1fb      	bne.n	80060d6 <ai_platform_network_init+0x226>
 80060de:	4b27      	ldr	r3, [pc, #156]	; (800617c <ai_platform_network_init+0x2cc>)
 80060e0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80060e4:	4b26      	ldr	r3, [pc, #152]	; (8006180 <ai_platform_network_init+0x2d0>)
 80060e6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80060ea:	429a      	cmp	r2, r3
 80060ec:	f43f af18 	beq.w	8005f20 <ai_platform_network_init+0x70>
 80060f0:	e7fe      	b.n	80060f0 <ai_platform_network_init+0x240>
 80060f2:	2800      	cmp	r0, #0
 80060f4:	d153      	bne.n	800619e <ai_platform_network_init+0x2ee>
 80060f6:	4680      	mov	r8, r0
 80060f8:	4684      	mov	ip, r0
 80060fa:	2e00      	cmp	r6, #0
 80060fc:	d063      	beq.n	80061c6 <ai_platform_network_init+0x316>
 80060fe:	8be6      	ldrh	r6, [r4, #30]
 8006100:	2e00      	cmp	r6, #0
 8006102:	d168      	bne.n	80061d6 <ai_platform_network_init+0x326>
 8006104:	2212      	movs	r2, #18
 8006106:	2116      	movs	r1, #22
 8006108:	f104 0010 	add.w	r0, r4, #16
 800610c:	f000 ffa8 	bl	8007060 <core_set_error>
 8006110:	e77c      	b.n	800600c <ai_platform_network_init+0x15c>
 8006112:	4a19      	ldr	r2, [pc, #100]	; (8006178 <ai_platform_network_init+0x2c8>)
 8006114:	2301      	movs	r3, #1
 8006116:	6093      	str	r3, [r2, #8]
 8006118:	6893      	ldr	r3, [r2, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d1fc      	bne.n	8006118 <ai_platform_network_init+0x268>
 800611e:	4b17      	ldr	r3, [pc, #92]	; (800617c <ai_platform_network_init+0x2cc>)
 8006120:	6013      	str	r3, [r2, #0]
 8006122:	4b17      	ldr	r3, [pc, #92]	; (8006180 <ai_platform_network_init+0x2d0>)
 8006124:	6812      	ldr	r2, [r2, #0]
 8006126:	429a      	cmp	r2, r3
 8006128:	f43f aefa 	beq.w	8005f20 <ai_platform_network_init+0x70>
 800612c:	e7fe      	b.n	800612c <ai_platform_network_init+0x27c>
 800612e:	4a12      	ldr	r2, [pc, #72]	; (8006178 <ai_platform_network_init+0x2c8>)
 8006130:	2301      	movs	r3, #1
 8006132:	6093      	str	r3, [r2, #8]
 8006134:	6893      	ldr	r3, [r2, #8]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1fc      	bne.n	8006134 <ai_platform_network_init+0x284>
 800613a:	4910      	ldr	r1, [pc, #64]	; (800617c <ai_platform_network_init+0x2cc>)
 800613c:	4b10      	ldr	r3, [pc, #64]	; (8006180 <ai_platform_network_init+0x2d0>)
 800613e:	6011      	str	r1, [r2, #0]
 8006140:	6812      	ldr	r2, [r2, #0]
 8006142:	429a      	cmp	r2, r3
 8006144:	f43f af5f 	beq.w	8006006 <ai_platform_network_init+0x156>
 8006148:	e7fe      	b.n	8006148 <ai_platform_network_init+0x298>
 800614a:	4a0b      	ldr	r2, [pc, #44]	; (8006178 <ai_platform_network_init+0x2c8>)
 800614c:	2301      	movs	r3, #1
 800614e:	6093      	str	r3, [r2, #8]
 8006150:	6893      	ldr	r3, [r2, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d1fc      	bne.n	8006150 <ai_platform_network_init+0x2a0>
 8006156:	4b09      	ldr	r3, [pc, #36]	; (800617c <ai_platform_network_init+0x2cc>)
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	4b09      	ldr	r3, [pc, #36]	; (8006180 <ai_platform_network_init+0x2d0>)
 800615c:	6812      	ldr	r2, [r2, #0]
 800615e:	429a      	cmp	r2, r3
 8006160:	f43f aede 	beq.w	8005f20 <ai_platform_network_init+0x70>
 8006164:	e7fe      	b.n	8006164 <ai_platform_network_init+0x2b4>
 8006166:	bf00      	nop
 8006168:	a1c00100 	.word	0xa1c00100
 800616c:	e0042000 	.word	0xe0042000
 8006170:	5c001000 	.word	0x5c001000
 8006174:	a1facade 	.word	0xa1facade
 8006178:	40023000 	.word	0x40023000
 800617c:	f407a5c2 	.word	0xf407a5c2
 8006180:	b5e8b5cd 	.word	0xb5e8b5cd
 8006184:	58024000 	.word	0x58024000
 8006188:	2213      	movs	r2, #19
 800618a:	2116      	movs	r1, #22
 800618c:	f104 0010 	add.w	r0, r4, #16
 8006190:	f000 ff66 	bl	8007060 <core_set_error>
 8006194:	e73a      	b.n	800600c <ai_platform_network_init+0x15c>
 8006196:	4607      	mov	r7, r0
 8006198:	4680      	mov	r8, r0
 800619a:	4684      	mov	ip, r0
 800619c:	e773      	b.n	8006086 <ai_platform_network_init+0x1d6>
 800619e:	f1b9 0f00 	cmp.w	r9, #0
 80061a2:	d002      	beq.n	80061aa <ai_platform_network_init+0x2fa>
 80061a4:	f04f 0c01 	mov.w	ip, #1
 80061a8:	e7a7      	b.n	80060fa <ai_platform_network_init+0x24a>
 80061aa:	2110      	movs	r1, #16
 80061ac:	2213      	movs	r2, #19
 80061ae:	2600      	movs	r6, #0
 80061b0:	1860      	adds	r0, r4, r1
 80061b2:	f000 ff55 	bl	8007060 <core_set_error>
 80061b6:	e729      	b.n	800600c <ai_platform_network_init+0x15c>
 80061b8:	2110      	movs	r1, #16
 80061ba:	2211      	movs	r2, #17
 80061bc:	462e      	mov	r6, r5
 80061be:	1860      	adds	r0, r4, r1
 80061c0:	f000 ff4e 	bl	8007060 <core_set_error>
 80061c4:	e722      	b.n	800600c <ai_platform_network_init+0x15c>
 80061c6:	2110      	movs	r1, #16
 80061c8:	2212      	movs	r2, #18
 80061ca:	1860      	adds	r0, r4, r1
 80061cc:	f000 ff48 	bl	8007060 <core_set_error>
 80061d0:	e71c      	b.n	800600c <ai_platform_network_init+0x15c>
 80061d2:	4666      	mov	r6, ip
 80061d4:	e6b7      	b.n	8005f46 <ai_platform_network_init+0x96>
 80061d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80061d8:	6a26      	ldr	r6, [r4, #32]
 80061da:	2701      	movs	r7, #1
 80061dc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80061de:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80061e2:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 80061e6:	e74e      	b.n	8006086 <ai_platform_network_init+0x1d6>

080061e8 <ai_platform_network_post_init>:
 80061e8:	b538      	push	{r3, r4, r5, lr}
 80061ea:	2800      	cmp	r0, #0
 80061ec:	d04e      	beq.n	800628c <ai_platform_network_post_init+0xa4>
 80061ee:	4b8c      	ldr	r3, [pc, #560]	; (8006420 <ai_platform_network_post_init+0x238>)
 80061f0:	4604      	mov	r4, r0
 80061f2:	6802      	ldr	r2, [r0, #0]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d149      	bne.n	800628c <ai_platform_network_post_init+0xa4>
 80061f8:	f7fe fa94 	bl	8004724 <_ai_platform_acquire_crc>
 80061fc:	4b89      	ldr	r3, [pc, #548]	; (8006424 <ai_platform_network_post_init+0x23c>)
 80061fe:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006208:	189a      	adds	r2, r3, r2
 800620a:	2a01      	cmp	r2, #1
 800620c:	f240 8095 	bls.w	800633a <ai_platform_network_post_init+0x152>
 8006210:	f240 4249 	movw	r2, #1097	; 0x449
 8006214:	4293      	cmp	r3, r2
 8006216:	f000 8090 	beq.w	800633a <ai_platform_network_post_init+0x152>
 800621a:	4a83      	ldr	r2, [pc, #524]	; (8006428 <ai_platform_network_post_init+0x240>)
 800621c:	6813      	ldr	r3, [r2, #0]
 800621e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006222:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006226:	f000 8096 	beq.w	8006356 <ai_platform_network_post_init+0x16e>
 800622a:	6813      	ldr	r3, [r2, #0]
 800622c:	f240 4183 	movw	r1, #1155	; 0x483
 8006230:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006234:	428b      	cmp	r3, r1
 8006236:	f000 80b8 	beq.w	80063aa <ai_platform_network_post_init+0x1c2>
 800623a:	6813      	ldr	r3, [r2, #0]
 800623c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006240:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006244:	f000 80de 	beq.w	8006404 <ai_platform_network_post_init+0x21c>
 8006248:	6813      	ldr	r3, [r2, #0]
 800624a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800624e:	2b00      	cmp	r3, #0
 8006250:	f000 80bd 	beq.w	80063ce <ai_platform_network_post_init+0x1e6>
 8006254:	f7fe fa68 	bl	8004728 <_ai_platform_release_crc>
 8006258:	68e3      	ldr	r3, [r4, #12]
 800625a:	f013 0502 	ands.w	r5, r3, #2
 800625e:	f000 808c 	beq.w	800637a <ai_platform_network_post_init+0x192>
 8006262:	4620      	mov	r0, r4
 8006264:	f000 ff8a 	bl	800717c <ai_layers_post_init_all>
 8006268:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800626a:	b16b      	cbz	r3, 8006288 <ai_platform_network_post_init+0xa0>
 800626c:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800626e:	e007      	b.n	8006280 <ai_platform_network_post_init+0x98>
 8006270:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8006274:	4798      	blx	r3
 8006276:	692b      	ldr	r3, [r5, #16]
 8006278:	b133      	cbz	r3, 8006288 <ai_platform_network_post_init+0xa0>
 800627a:	42ab      	cmp	r3, r5
 800627c:	461d      	mov	r5, r3
 800627e:	d003      	beq.n	8006288 <ai_platform_network_post_init+0xa0>
 8006280:	4629      	mov	r1, r5
 8006282:	2000      	movs	r0, #0
 8006284:	2d00      	cmp	r5, #0
 8006286:	d1f3      	bne.n	8006270 <ai_platform_network_post_init+0x88>
 8006288:	2001      	movs	r0, #1
 800628a:	bd38      	pop	{r3, r4, r5, pc}
 800628c:	f7fe fa4a 	bl	8004724 <_ai_platform_acquire_crc>
 8006290:	4b64      	ldr	r3, [pc, #400]	; (8006424 <ai_platform_network_post_init+0x23c>)
 8006292:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800629c:	185a      	adds	r2, r3, r1
 800629e:	2a01      	cmp	r2, #1
 80062a0:	d92a      	bls.n	80062f8 <ai_platform_network_post_init+0x110>
 80062a2:	f240 4249 	movw	r2, #1097	; 0x449
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d026      	beq.n	80062f8 <ai_platform_network_post_init+0x110>
 80062aa:	4a5f      	ldr	r2, [pc, #380]	; (8006428 <ai_platform_network_post_init+0x240>)
 80062ac:	6813      	ldr	r3, [r2, #0]
 80062ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062b2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80062b6:	d02c      	beq.n	8006312 <ai_platform_network_post_init+0x12a>
 80062b8:	6813      	ldr	r3, [r2, #0]
 80062ba:	f240 4183 	movw	r1, #1155	; 0x483
 80062be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062c2:	428b      	cmp	r3, r1
 80062c4:	d060      	beq.n	8006388 <ai_platform_network_post_init+0x1a0>
 80062c6:	6813      	ldr	r3, [r2, #0]
 80062c8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062cc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80062d0:	f000 808b 	beq.w	80063ea <ai_platform_network_post_init+0x202>
 80062d4:	6813      	ldr	r3, [r2, #0]
 80062d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d129      	bne.n	8006332 <ai_platform_network_post_init+0x14a>
 80062de:	4a53      	ldr	r2, [pc, #332]	; (800642c <ai_platform_network_post_init+0x244>)
 80062e0:	2301      	movs	r3, #1
 80062e2:	6093      	str	r3, [r2, #8]
 80062e4:	6893      	ldr	r3, [r2, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d1fc      	bne.n	80062e4 <ai_platform_network_post_init+0xfc>
 80062ea:	4951      	ldr	r1, [pc, #324]	; (8006430 <ai_platform_network_post_init+0x248>)
 80062ec:	4b51      	ldr	r3, [pc, #324]	; (8006434 <ai_platform_network_post_init+0x24c>)
 80062ee:	6011      	str	r1, [r2, #0]
 80062f0:	6812      	ldr	r2, [r2, #0]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d01d      	beq.n	8006332 <ai_platform_network_post_init+0x14a>
 80062f6:	e7fe      	b.n	80062f6 <ai_platform_network_post_init+0x10e>
 80062f8:	4a4c      	ldr	r2, [pc, #304]	; (800642c <ai_platform_network_post_init+0x244>)
 80062fa:	2301      	movs	r3, #1
 80062fc:	6093      	str	r3, [r2, #8]
 80062fe:	6893      	ldr	r3, [r2, #8]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d1fc      	bne.n	80062fe <ai_platform_network_post_init+0x116>
 8006304:	494a      	ldr	r1, [pc, #296]	; (8006430 <ai_platform_network_post_init+0x248>)
 8006306:	4b4b      	ldr	r3, [pc, #300]	; (8006434 <ai_platform_network_post_init+0x24c>)
 8006308:	6011      	str	r1, [r2, #0]
 800630a:	6812      	ldr	r2, [r2, #0]
 800630c:	429a      	cmp	r2, r3
 800630e:	d010      	beq.n	8006332 <ai_platform_network_post_init+0x14a>
 8006310:	e7fe      	b.n	8006310 <ai_platform_network_post_init+0x128>
 8006312:	4a49      	ldr	r2, [pc, #292]	; (8006438 <ai_platform_network_post_init+0x250>)
 8006314:	2301      	movs	r3, #1
 8006316:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800631a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1fb      	bne.n	800631a <ai_platform_network_post_init+0x132>
 8006322:	4943      	ldr	r1, [pc, #268]	; (8006430 <ai_platform_network_post_init+0x248>)
 8006324:	4b43      	ldr	r3, [pc, #268]	; (8006434 <ai_platform_network_post_init+0x24c>)
 8006326:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800632a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800632e:	429a      	cmp	r2, r3
 8006330:	d110      	bne.n	8006354 <ai_platform_network_post_init+0x16c>
 8006332:	f7fe f9f9 	bl	8004728 <_ai_platform_release_crc>
 8006336:	2000      	movs	r0, #0
 8006338:	bd38      	pop	{r3, r4, r5, pc}
 800633a:	4a3c      	ldr	r2, [pc, #240]	; (800642c <ai_platform_network_post_init+0x244>)
 800633c:	2301      	movs	r3, #1
 800633e:	6093      	str	r3, [r2, #8]
 8006340:	6893      	ldr	r3, [r2, #8]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1fc      	bne.n	8006340 <ai_platform_network_post_init+0x158>
 8006346:	493a      	ldr	r1, [pc, #232]	; (8006430 <ai_platform_network_post_init+0x248>)
 8006348:	4b3a      	ldr	r3, [pc, #232]	; (8006434 <ai_platform_network_post_init+0x24c>)
 800634a:	6011      	str	r1, [r2, #0]
 800634c:	6812      	ldr	r2, [r2, #0]
 800634e:	429a      	cmp	r2, r3
 8006350:	d080      	beq.n	8006254 <ai_platform_network_post_init+0x6c>
 8006352:	e7fe      	b.n	8006352 <ai_platform_network_post_init+0x16a>
 8006354:	e7fe      	b.n	8006354 <ai_platform_network_post_init+0x16c>
 8006356:	4a38      	ldr	r2, [pc, #224]	; (8006438 <ai_platform_network_post_init+0x250>)
 8006358:	2301      	movs	r3, #1
 800635a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800635e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006362:	2b00      	cmp	r3, #0
 8006364:	d1fb      	bne.n	800635e <ai_platform_network_post_init+0x176>
 8006366:	4932      	ldr	r1, [pc, #200]	; (8006430 <ai_platform_network_post_init+0x248>)
 8006368:	4b32      	ldr	r3, [pc, #200]	; (8006434 <ai_platform_network_post_init+0x24c>)
 800636a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800636e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006372:	429a      	cmp	r2, r3
 8006374:	f43f af6e 	beq.w	8006254 <ai_platform_network_post_init+0x6c>
 8006378:	e7fe      	b.n	8006378 <ai_platform_network_post_init+0x190>
 800637a:	2210      	movs	r2, #16
 800637c:	2111      	movs	r1, #17
 800637e:	18a0      	adds	r0, r4, r2
 8006380:	f000 fe6e 	bl	8007060 <core_set_error>
 8006384:	4628      	mov	r0, r5
 8006386:	bd38      	pop	{r3, r4, r5, pc}
 8006388:	4a2b      	ldr	r2, [pc, #172]	; (8006438 <ai_platform_network_post_init+0x250>)
 800638a:	2301      	movs	r3, #1
 800638c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006390:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1fb      	bne.n	8006390 <ai_platform_network_post_init+0x1a8>
 8006398:	4925      	ldr	r1, [pc, #148]	; (8006430 <ai_platform_network_post_init+0x248>)
 800639a:	4b26      	ldr	r3, [pc, #152]	; (8006434 <ai_platform_network_post_init+0x24c>)
 800639c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80063a0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d0c4      	beq.n	8006332 <ai_platform_network_post_init+0x14a>
 80063a8:	e7fe      	b.n	80063a8 <ai_platform_network_post_init+0x1c0>
 80063aa:	4a23      	ldr	r2, [pc, #140]	; (8006438 <ai_platform_network_post_init+0x250>)
 80063ac:	2301      	movs	r3, #1
 80063ae:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80063b2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d1fb      	bne.n	80063b2 <ai_platform_network_post_init+0x1ca>
 80063ba:	491d      	ldr	r1, [pc, #116]	; (8006430 <ai_platform_network_post_init+0x248>)
 80063bc:	4b1d      	ldr	r3, [pc, #116]	; (8006434 <ai_platform_network_post_init+0x24c>)
 80063be:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80063c2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80063c6:	429a      	cmp	r2, r3
 80063c8:	f43f af44 	beq.w	8006254 <ai_platform_network_post_init+0x6c>
 80063cc:	e7fe      	b.n	80063cc <ai_platform_network_post_init+0x1e4>
 80063ce:	4a17      	ldr	r2, [pc, #92]	; (800642c <ai_platform_network_post_init+0x244>)
 80063d0:	2301      	movs	r3, #1
 80063d2:	6093      	str	r3, [r2, #8]
 80063d4:	6893      	ldr	r3, [r2, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1fc      	bne.n	80063d4 <ai_platform_network_post_init+0x1ec>
 80063da:	4915      	ldr	r1, [pc, #84]	; (8006430 <ai_platform_network_post_init+0x248>)
 80063dc:	4b15      	ldr	r3, [pc, #84]	; (8006434 <ai_platform_network_post_init+0x24c>)
 80063de:	6011      	str	r1, [r2, #0]
 80063e0:	6812      	ldr	r2, [r2, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	f43f af36 	beq.w	8006254 <ai_platform_network_post_init+0x6c>
 80063e8:	e7fe      	b.n	80063e8 <ai_platform_network_post_init+0x200>
 80063ea:	4a10      	ldr	r2, [pc, #64]	; (800642c <ai_platform_network_post_init+0x244>)
 80063ec:	2301      	movs	r3, #1
 80063ee:	6093      	str	r3, [r2, #8]
 80063f0:	6893      	ldr	r3, [r2, #8]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d1fc      	bne.n	80063f0 <ai_platform_network_post_init+0x208>
 80063f6:	490e      	ldr	r1, [pc, #56]	; (8006430 <ai_platform_network_post_init+0x248>)
 80063f8:	4b0e      	ldr	r3, [pc, #56]	; (8006434 <ai_platform_network_post_init+0x24c>)
 80063fa:	6011      	str	r1, [r2, #0]
 80063fc:	6812      	ldr	r2, [r2, #0]
 80063fe:	429a      	cmp	r2, r3
 8006400:	d097      	beq.n	8006332 <ai_platform_network_post_init+0x14a>
 8006402:	e7fe      	b.n	8006402 <ai_platform_network_post_init+0x21a>
 8006404:	4a09      	ldr	r2, [pc, #36]	; (800642c <ai_platform_network_post_init+0x244>)
 8006406:	2301      	movs	r3, #1
 8006408:	6093      	str	r3, [r2, #8]
 800640a:	6893      	ldr	r3, [r2, #8]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1fc      	bne.n	800640a <ai_platform_network_post_init+0x222>
 8006410:	4907      	ldr	r1, [pc, #28]	; (8006430 <ai_platform_network_post_init+0x248>)
 8006412:	4b08      	ldr	r3, [pc, #32]	; (8006434 <ai_platform_network_post_init+0x24c>)
 8006414:	6011      	str	r1, [r2, #0]
 8006416:	6812      	ldr	r2, [r2, #0]
 8006418:	429a      	cmp	r2, r3
 800641a:	f43f af1b 	beq.w	8006254 <ai_platform_network_post_init+0x6c>
 800641e:	e7fe      	b.n	800641e <ai_platform_network_post_init+0x236>
 8006420:	a1c00100 	.word	0xa1c00100
 8006424:	e0042000 	.word	0xe0042000
 8006428:	5c001000 	.word	0x5c001000
 800642c:	40023000 	.word	0x40023000
 8006430:	f407a5c2 	.word	0xf407a5c2
 8006434:	b5e8b5cd 	.word	0xb5e8b5cd
 8006438:	58024000 	.word	0x58024000

0800643c <ai_platform_network_process>:
 800643c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006440:	b085      	sub	sp, #20
 8006442:	460e      	mov	r6, r1
 8006444:	4605      	mov	r5, r0
 8006446:	9201      	str	r2, [sp, #4]
 8006448:	b120      	cbz	r0, 8006454 <ai_platform_network_process+0x18>
 800644a:	4b24      	ldr	r3, [pc, #144]	; (80064dc <ai_platform_network_process+0xa0>)
 800644c:	6802      	ldr	r2, [r0, #0]
 800644e:	429a      	cmp	r2, r3
 8006450:	bf18      	it	ne
 8006452:	2500      	movne	r5, #0
 8006454:	f7fe f966 	bl	8004724 <_ai_platform_acquire_crc>
 8006458:	4b21      	ldr	r3, [pc, #132]	; (80064e0 <ai_platform_network_process+0xa4>)
 800645a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006464:	185a      	adds	r2, r3, r1
 8006466:	2a01      	cmp	r2, #1
 8006468:	d92b      	bls.n	80064c2 <ai_platform_network_process+0x86>
 800646a:	f240 4249 	movw	r2, #1097	; 0x449
 800646e:	4293      	cmp	r3, r2
 8006470:	d027      	beq.n	80064c2 <ai_platform_network_process+0x86>
 8006472:	4a1c      	ldr	r2, [pc, #112]	; (80064e4 <ai_platform_network_process+0xa8>)
 8006474:	6813      	ldr	r3, [r2, #0]
 8006476:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800647a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800647e:	d039      	beq.n	80064f4 <ai_platform_network_process+0xb8>
 8006480:	6813      	ldr	r3, [r2, #0]
 8006482:	f240 4183 	movw	r1, #1155	; 0x483
 8006486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800648a:	428b      	cmp	r3, r1
 800648c:	f000 819c 	beq.w	80067c8 <ai_platform_network_process+0x38c>
 8006490:	6813      	ldr	r3, [r2, #0]
 8006492:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006496:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800649a:	f000 8179 	beq.w	8006790 <ai_platform_network_process+0x354>
 800649e:	6813      	ldr	r3, [r2, #0]
 80064a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d136      	bne.n	8006516 <ai_platform_network_process+0xda>
 80064a8:	4a0f      	ldr	r2, [pc, #60]	; (80064e8 <ai_platform_network_process+0xac>)
 80064aa:	2301      	movs	r3, #1
 80064ac:	6093      	str	r3, [r2, #8]
 80064ae:	6893      	ldr	r3, [r2, #8]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1fc      	bne.n	80064ae <ai_platform_network_process+0x72>
 80064b4:	4b0d      	ldr	r3, [pc, #52]	; (80064ec <ai_platform_network_process+0xb0>)
 80064b6:	6013      	str	r3, [r2, #0]
 80064b8:	4b0d      	ldr	r3, [pc, #52]	; (80064f0 <ai_platform_network_process+0xb4>)
 80064ba:	6812      	ldr	r2, [r2, #0]
 80064bc:	429a      	cmp	r2, r3
 80064be:	d02a      	beq.n	8006516 <ai_platform_network_process+0xda>
 80064c0:	e7fe      	b.n	80064c0 <ai_platform_network_process+0x84>
 80064c2:	4a09      	ldr	r2, [pc, #36]	; (80064e8 <ai_platform_network_process+0xac>)
 80064c4:	2301      	movs	r3, #1
 80064c6:	6093      	str	r3, [r2, #8]
 80064c8:	6893      	ldr	r3, [r2, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d1fc      	bne.n	80064c8 <ai_platform_network_process+0x8c>
 80064ce:	4b07      	ldr	r3, [pc, #28]	; (80064ec <ai_platform_network_process+0xb0>)
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	4b07      	ldr	r3, [pc, #28]	; (80064f0 <ai_platform_network_process+0xb4>)
 80064d4:	6812      	ldr	r2, [r2, #0]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d01d      	beq.n	8006516 <ai_platform_network_process+0xda>
 80064da:	e7fe      	b.n	80064da <ai_platform_network_process+0x9e>
 80064dc:	a1c00100 	.word	0xa1c00100
 80064e0:	e0042000 	.word	0xe0042000
 80064e4:	5c001000 	.word	0x5c001000
 80064e8:	40023000 	.word	0x40023000
 80064ec:	f407a5c2 	.word	0xf407a5c2
 80064f0:	b5e8b5cd 	.word	0xb5e8b5cd
 80064f4:	4ab0      	ldr	r2, [pc, #704]	; (80067b8 <ai_platform_network_process+0x37c>)
 80064f6:	2301      	movs	r3, #1
 80064f8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80064fc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1fb      	bne.n	80064fc <ai_platform_network_process+0xc0>
 8006504:	4bad      	ldr	r3, [pc, #692]	; (80067bc <ai_platform_network_process+0x380>)
 8006506:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800650a:	4bad      	ldr	r3, [pc, #692]	; (80067c0 <ai_platform_network_process+0x384>)
 800650c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006510:	429a      	cmp	r2, r3
 8006512:	f040 812b 	bne.w	800676c <ai_platform_network_process+0x330>
 8006516:	f7fe f907 	bl	8004728 <_ai_platform_release_crc>
 800651a:	2d00      	cmp	r5, #0
 800651c:	f000 8172 	beq.w	8006804 <ai_platform_network_process+0x3c8>
 8006520:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8006522:	2b00      	cmp	r3, #0
 8006524:	f000 8123 	beq.w	800676e <ai_platform_network_process+0x332>
 8006528:	68eb      	ldr	r3, [r5, #12]
 800652a:	2200      	movs	r2, #0
 800652c:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8006530:	f003 0303 	and.w	r3, r3, #3
 8006534:	616a      	str	r2, [r5, #20]
 8006536:	2b03      	cmp	r3, #3
 8006538:	f040 811f 	bne.w	800677a <ai_platform_network_process+0x33e>
 800653c:	2e00      	cmp	r6, #0
 800653e:	f000 8156 	beq.w	80067ee <ai_platform_network_process+0x3b2>
 8006542:	fab8 f788 	clz	r7, r8
 8006546:	097f      	lsrs	r7, r7, #5
 8006548:	f1b8 0f00 	cmp.w	r8, #0
 800654c:	f000 814f 	beq.w	80067ee <ai_platform_network_process+0x3b2>
 8006550:	f8b8 3000 	ldrh.w	r3, [r8]
 8006554:	2b00      	cmp	r3, #0
 8006556:	f000 814a 	beq.w	80067ee <ai_platform_network_process+0x3b2>
 800655a:	69b3      	ldr	r3, [r6, #24]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8006562:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d072      	beq.n	8006650 <ai_platform_network_process+0x214>
 800656a:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 800656e:	2c00      	cmp	r4, #0
 8006570:	d06e      	beq.n	8006650 <ai_platform_network_process+0x214>
 8006572:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006576:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 800657a:	f8d3 a000 	ldr.w	sl, [r3]
 800657e:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8006582:	f000 8133 	beq.w	80067ec <ai_platform_network_process+0x3b0>
 8006586:	69a3      	ldr	r3, [r4, #24]
 8006588:	2101      	movs	r1, #1
 800658a:	4630      	mov	r0, r6
 800658c:	685d      	ldr	r5, [r3, #4]
 800658e:	f7fd ffe1 	bl	8004554 <ai_buffer_get_size>
 8006592:	4285      	cmp	r5, r0
 8006594:	f0c0 8138 	bcc.w	8006808 <ai_platform_network_process+0x3cc>
 8006598:	68e0      	ldr	r0, [r4, #12]
 800659a:	69b1      	ldr	r1, [r6, #24]
 800659c:	68c2      	ldr	r2, [r0, #12]
 800659e:	68cb      	ldr	r3, [r1, #12]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	f040 8131 	bne.w	8006808 <ai_platform_network_process+0x3cc>
 80065a6:	6882      	ldr	r2, [r0, #8]
 80065a8:	688b      	ldr	r3, [r1, #8]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	f040 812c 	bne.w	8006808 <ai_platform_network_process+0x3cc>
 80065b0:	6842      	ldr	r2, [r0, #4]
 80065b2:	684b      	ldr	r3, [r1, #4]
 80065b4:	429a      	cmp	r2, r3
 80065b6:	f040 8127 	bne.w	8006808 <ai_platform_network_process+0x3cc>
 80065ba:	69a3      	ldr	r3, [r4, #24]
 80065bc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80065c0:	f002 f8a2 	bl	8008708 <ai_array_get_data_byte_size>
 80065c4:	4605      	mov	r5, r0
 80065c6:	4620      	mov	r0, r4
 80065c8:	f002 f8c6 	bl	8008758 <get_tensor_byte_size>
 80065cc:	4285      	cmp	r5, r0
 80065ce:	f0c0 811b 	bcc.w	8006808 <ai_platform_network_process+0x3cc>
 80065d2:	69a3      	ldr	r3, [r4, #24]
 80065d4:	6818      	ldr	r0, [r3, #0]
 80065d6:	f002 f803 	bl	80085e0 <ai_array_to_buffer_fmt>
 80065da:	6833      	ldr	r3, [r6, #0]
 80065dc:	4058      	eors	r0, r3
 80065de:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80065e2:	f040 81c8 	bne.w	8006976 <ai_platform_network_process+0x53a>
 80065e6:	6873      	ldr	r3, [r6, #4]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	f000 81bb 	beq.w	8006964 <ai_platform_network_process+0x528>
 80065ee:	69b3      	ldr	r3, [r6, #24]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	f000 81c8 	beq.w	8006988 <ai_platform_network_process+0x54c>
 80065f8:	9a02      	ldr	r2, [sp, #8]
 80065fa:	4620      	mov	r0, r4
 80065fc:	3701      	adds	r7, #1
 80065fe:	361c      	adds	r6, #28
 8006600:	429a      	cmp	r2, r3
 8006602:	bf38      	it	cc
 8006604:	461a      	movcc	r2, r3
 8006606:	9202      	str	r2, [sp, #8]
 8006608:	f002 f8a6 	bl	8008758 <get_tensor_byte_size>
 800660c:	f8c9 0008 	str.w	r0, [r9, #8]
 8006610:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	fb00 f303 	mul.w	r3, r0, r3
 800661a:	f8c9 300c 	str.w	r3, [r9, #12]
 800661e:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8006622:	440b      	add	r3, r1
 8006624:	f8c9 1004 	str.w	r1, [r9, #4]
 8006628:	f84a 300b 	str.w	r3, [sl, fp]
 800662c:	69a0      	ldr	r0, [r4, #24]
 800662e:	6803      	ldr	r3, [r0, #0]
 8006630:	009a      	lsls	r2, r3, #2
 8006632:	f100 80bb 	bmi.w	80067ac <ai_platform_network_process+0x370>
 8006636:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800663a:	1a9b      	subs	r3, r3, r2
 800663c:	4419      	add	r1, r3
 800663e:	6081      	str	r1, [r0, #8]
 8006640:	69a3      	ldr	r3, [r4, #24]
 8006642:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006646:	60da      	str	r2, [r3, #12]
 8006648:	f8b8 3000 	ldrh.w	r3, [r8]
 800664c:	42bb      	cmp	r3, r7
 800664e:	d888      	bhi.n	8006562 <ai_platform_network_process+0x126>
 8006650:	9d03      	ldr	r5, [sp, #12]
 8006652:	9b01      	ldr	r3, [sp, #4]
 8006654:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 819f 	beq.w	800699a <ai_platform_network_process+0x55e>
 800665c:	2a01      	cmp	r2, #1
 800665e:	f240 8179 	bls.w	8006954 <ai_platform_network_process+0x518>
 8006662:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8006666:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 8172 	beq.w	8006954 <ai_platform_network_process+0x518>
 8006670:	9e01      	ldr	r6, [sp, #4]
 8006672:	2700      	movs	r7, #0
 8006674:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006678:	2b00      	cmp	r3, #0
 800667a:	f000 80d3 	beq.w	8006824 <ai_platform_network_process+0x3e8>
 800667e:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006682:	2c00      	cmp	r4, #0
 8006684:	f000 80ce 	beq.w	8006824 <ai_platform_network_process+0x3e8>
 8006688:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800668c:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006690:	f8d3 8000 	ldr.w	r8, [r3]
 8006694:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8006698:	f000 819d 	beq.w	80069d6 <ai_platform_network_process+0x59a>
 800669c:	69a3      	ldr	r3, [r4, #24]
 800669e:	2101      	movs	r1, #1
 80066a0:	4630      	mov	r0, r6
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	9301      	str	r3, [sp, #4]
 80066a6:	f7fd ff55 	bl	8004554 <ai_buffer_get_size>
 80066aa:	9b01      	ldr	r3, [sp, #4]
 80066ac:	4283      	cmp	r3, r0
 80066ae:	f0c0 8151 	bcc.w	8006954 <ai_platform_network_process+0x518>
 80066b2:	68e0      	ldr	r0, [r4, #12]
 80066b4:	69b1      	ldr	r1, [r6, #24]
 80066b6:	68c2      	ldr	r2, [r0, #12]
 80066b8:	68cb      	ldr	r3, [r1, #12]
 80066ba:	429a      	cmp	r2, r3
 80066bc:	f040 814a 	bne.w	8006954 <ai_platform_network_process+0x518>
 80066c0:	6882      	ldr	r2, [r0, #8]
 80066c2:	688b      	ldr	r3, [r1, #8]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	f040 8145 	bne.w	8006954 <ai_platform_network_process+0x518>
 80066ca:	6842      	ldr	r2, [r0, #4]
 80066cc:	684b      	ldr	r3, [r1, #4]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	f040 8140 	bne.w	8006954 <ai_platform_network_process+0x518>
 80066d4:	69a3      	ldr	r3, [r4, #24]
 80066d6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066da:	f002 f815 	bl	8008708 <ai_array_get_data_byte_size>
 80066de:	9001      	str	r0, [sp, #4]
 80066e0:	4620      	mov	r0, r4
 80066e2:	f002 f839 	bl	8008758 <get_tensor_byte_size>
 80066e6:	9b01      	ldr	r3, [sp, #4]
 80066e8:	4283      	cmp	r3, r0
 80066ea:	f0c0 8133 	bcc.w	8006954 <ai_platform_network_process+0x518>
 80066ee:	69a3      	ldr	r3, [r4, #24]
 80066f0:	6818      	ldr	r0, [r3, #0]
 80066f2:	f001 ff75 	bl	80085e0 <ai_array_to_buffer_fmt>
 80066f6:	6833      	ldr	r3, [r6, #0]
 80066f8:	4058      	eors	r0, r3
 80066fa:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80066fe:	f040 815a 	bne.w	80069b6 <ai_platform_network_process+0x57a>
 8006702:	6873      	ldr	r3, [r6, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 814e 	beq.w	80069a6 <ai_platform_network_process+0x56a>
 800670a:	69b3      	ldr	r3, [r6, #24]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 8159 	beq.w	80069c6 <ai_platform_network_process+0x58a>
 8006714:	9a02      	ldr	r2, [sp, #8]
 8006716:	4620      	mov	r0, r4
 8006718:	3701      	adds	r7, #1
 800671a:	361c      	adds	r6, #28
 800671c:	429a      	cmp	r2, r3
 800671e:	bf38      	it	cc
 8006720:	461a      	movcc	r2, r3
 8006722:	9202      	str	r2, [sp, #8]
 8006724:	f002 f818 	bl	8008758 <get_tensor_byte_size>
 8006728:	f8ca 0008 	str.w	r0, [sl, #8]
 800672c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	fb00 f303 	mul.w	r3, r0, r3
 8006736:	f8ca 300c 	str.w	r3, [sl, #12]
 800673a:	f856 1c18 	ldr.w	r1, [r6, #-24]
 800673e:	440b      	add	r3, r1
 8006740:	f8ca 1004 	str.w	r1, [sl, #4]
 8006744:	f848 300b 	str.w	r3, [r8, fp]
 8006748:	69a0      	ldr	r0, [r4, #24]
 800674a:	6803      	ldr	r3, [r0, #0]
 800674c:	009b      	lsls	r3, r3, #2
 800674e:	d464      	bmi.n	800681a <ai_platform_network_process+0x3de>
 8006750:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006754:	1a9b      	subs	r3, r3, r2
 8006756:	4419      	add	r1, r3
 8006758:	6081      	str	r1, [r0, #8]
 800675a:	69a3      	ldr	r3, [r4, #24]
 800675c:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006760:	60da      	str	r2, [r3, #12]
 8006762:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006766:	429f      	cmp	r7, r3
 8006768:	d384      	bcc.n	8006674 <ai_platform_network_process+0x238>
 800676a:	e05b      	b.n	8006824 <ai_platform_network_process+0x3e8>
 800676c:	e7fe      	b.n	800676c <ai_platform_network_process+0x330>
 800676e:	68ea      	ldr	r2, [r5, #12]
 8006770:	616b      	str	r3, [r5, #20]
 8006772:	f002 0203 	and.w	r2, r2, #3
 8006776:	2a03      	cmp	r2, #3
 8006778:	d039      	beq.n	80067ee <ai_platform_network_process+0x3b2>
 800677a:	2230      	movs	r2, #48	; 0x30
 800677c:	2111      	movs	r1, #17
 800677e:	f105 0010 	add.w	r0, r5, #16
 8006782:	2400      	movs	r4, #0
 8006784:	f000 fc6c 	bl	8007060 <core_set_error>
 8006788:	4620      	mov	r0, r4
 800678a:	b005      	add	sp, #20
 800678c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006790:	4a0c      	ldr	r2, [pc, #48]	; (80067c4 <ai_platform_network_process+0x388>)
 8006792:	2301      	movs	r3, #1
 8006794:	6093      	str	r3, [r2, #8]
 8006796:	6893      	ldr	r3, [r2, #8]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d1fc      	bne.n	8006796 <ai_platform_network_process+0x35a>
 800679c:	4b07      	ldr	r3, [pc, #28]	; (80067bc <ai_platform_network_process+0x380>)
 800679e:	6013      	str	r3, [r2, #0]
 80067a0:	4b07      	ldr	r3, [pc, #28]	; (80067c0 <ai_platform_network_process+0x384>)
 80067a2:	6812      	ldr	r2, [r2, #0]
 80067a4:	429a      	cmp	r2, r3
 80067a6:	f43f aeb6 	beq.w	8006516 <ai_platform_network_process+0xda>
 80067aa:	e7fe      	b.n	80067aa <ai_platform_network_process+0x36e>
 80067ac:	f8b8 3000 	ldrh.w	r3, [r8]
 80067b0:	429f      	cmp	r7, r3
 80067b2:	f4ff aed6 	bcc.w	8006562 <ai_platform_network_process+0x126>
 80067b6:	e74b      	b.n	8006650 <ai_platform_network_process+0x214>
 80067b8:	58024000 	.word	0x58024000
 80067bc:	f407a5c2 	.word	0xf407a5c2
 80067c0:	b5e8b5cd 	.word	0xb5e8b5cd
 80067c4:	40023000 	.word	0x40023000
 80067c8:	4a87      	ldr	r2, [pc, #540]	; (80069e8 <ai_platform_network_process+0x5ac>)
 80067ca:	2301      	movs	r3, #1
 80067cc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80067d0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1fb      	bne.n	80067d0 <ai_platform_network_process+0x394>
 80067d8:	4b84      	ldr	r3, [pc, #528]	; (80069ec <ai_platform_network_process+0x5b0>)
 80067da:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80067de:	4b84      	ldr	r3, [pc, #528]	; (80069f0 <ai_platform_network_process+0x5b4>)
 80067e0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80067e4:	429a      	cmp	r2, r3
 80067e6:	f43f ae96 	beq.w	8006516 <ai_platform_network_process+0xda>
 80067ea:	e7fe      	b.n	80067ea <ai_platform_network_process+0x3ae>
 80067ec:	9d03      	ldr	r5, [sp, #12]
 80067ee:	2400      	movs	r4, #0
 80067f0:	2217      	movs	r2, #23
 80067f2:	2112      	movs	r1, #18
 80067f4:	f105 0010 	add.w	r0, r5, #16
 80067f8:	f000 fc32 	bl	8007060 <core_set_error>
 80067fc:	4620      	mov	r0, r4
 80067fe:	b005      	add	sp, #20
 8006800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006804:	462c      	mov	r4, r5
 8006806:	e7bf      	b.n	8006788 <ai_platform_network_process+0x34c>
 8006808:	9d03      	ldr	r5, [sp, #12]
 800680a:	2218      	movs	r2, #24
 800680c:	2112      	movs	r1, #18
 800680e:	2400      	movs	r4, #0
 8006810:	f105 0010 	add.w	r0, r5, #16
 8006814:	f000 fc24 	bl	8007060 <core_set_error>
 8006818:	e7b6      	b.n	8006788 <ai_platform_network_process+0x34c>
 800681a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800681e:	429f      	cmp	r7, r3
 8006820:	f4ff af28 	bcc.w	8006674 <ai_platform_network_process+0x238>
 8006824:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8006828:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 800682a:	82ab      	strh	r3, [r5, #20]
 800682c:	2a00      	cmp	r2, #0
 800682e:	f040 808b 	bne.w	8006948 <ai_platform_network_process+0x50c>
 8006832:	4616      	mov	r6, r2
 8006834:	4617      	mov	r7, r2
 8006836:	8aec      	ldrh	r4, [r5, #22]
 8006838:	429c      	cmp	r4, r3
 800683a:	d2a5      	bcs.n	8006788 <ai_platform_network_process+0x34c>
 800683c:	46ab      	mov	fp, r5
 800683e:	2e00      	cmp	r6, #0
 8006840:	d030      	beq.n	80068a4 <ai_platform_network_process+0x468>
 8006842:	f04f 0800 	mov.w	r8, #0
 8006846:	e014      	b.n	8006872 <ai_platform_network_process+0x436>
 8006848:	6882      	ldr	r2, [r0, #8]
 800684a:	68c5      	ldr	r5, [r0, #12]
 800684c:	6863      	ldr	r3, [r4, #4]
 800684e:	1b52      	subs	r2, r2, r5
 8006850:	4413      	add	r3, r2
 8006852:	6083      	str	r3, [r0, #8]
 8006854:	698b      	ldr	r3, [r1, #24]
 8006856:	6862      	ldr	r2, [r4, #4]
 8006858:	60da      	str	r2, [r3, #12]
 800685a:	f859 200a 	ldr.w	r2, [r9, sl]
 800685e:	f108 0801 	add.w	r8, r8, #1
 8006862:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8006866:	440b      	add	r3, r1
 8006868:	4293      	cmp	r3, r2
 800686a:	d301      	bcc.n	8006870 <ai_platform_network_process+0x434>
 800686c:	68e3      	ldr	r3, [r4, #12]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	6063      	str	r3, [r4, #4]
 8006872:	8833      	ldrh	r3, [r6, #0]
 8006874:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8006878:	4543      	cmp	r3, r8
 800687a:	d913      	bls.n	80068a4 <ai_platform_network_process+0x468>
 800687c:	6873      	ldr	r3, [r6, #4]
 800687e:	b18b      	cbz	r3, 80068a4 <ai_platform_network_process+0x468>
 8006880:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8006884:	b171      	cbz	r1, 80068a4 <ai_platform_network_process+0x468>
 8006886:	6988      	ldr	r0, [r1, #24]
 8006888:	68b2      	ldr	r2, [r6, #8]
 800688a:	6803      	ldr	r3, [r0, #0]
 800688c:	f8d2 9000 	ldr.w	r9, [r2]
 8006890:	009d      	lsls	r5, r3, #2
 8006892:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8006896:	d5d7      	bpl.n	8006848 <ai_platform_network_process+0x40c>
 8006898:	6881      	ldr	r1, [r0, #8]
 800689a:	68a2      	ldr	r2, [r4, #8]
 800689c:	6860      	ldr	r0, [r4, #4]
 800689e:	f001 fe17 	bl	80084d0 <st_int8_copy>
 80068a2:	e7da      	b.n	800685a <ai_platform_network_process+0x41e>
 80068a4:	4658      	mov	r0, fp
 80068a6:	f000 fc7d 	bl	80071a4 <ai_layers_forward_all>
 80068aa:	2f00      	cmp	r7, #0
 80068ac:	d03d      	beq.n	800692a <ai_platform_network_process+0x4ee>
 80068ae:	2400      	movs	r4, #0
 80068b0:	e016      	b.n	80068e0 <ai_platform_network_process+0x4a4>
 80068b2:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 80068b6:	f859 100a 	ldr.w	r1, [r9, sl]
 80068ba:	4413      	add	r3, r2
 80068bc:	428b      	cmp	r3, r1
 80068be:	d302      	bcc.n	80068c6 <ai_platform_network_process+0x48a>
 80068c0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80068c4:	1acb      	subs	r3, r1, r3
 80068c6:	f8c8 3004 	str.w	r3, [r8, #4]
 80068ca:	6981      	ldr	r1, [r0, #24]
 80068cc:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80068d0:	1b52      	subs	r2, r2, r5
 80068d2:	4413      	add	r3, r2
 80068d4:	608b      	str	r3, [r1, #8]
 80068d6:	6983      	ldr	r3, [r0, #24]
 80068d8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80068dc:	60da      	str	r2, [r3, #12]
 80068de:	3401      	adds	r4, #1
 80068e0:	883b      	ldrh	r3, [r7, #0]
 80068e2:	42a3      	cmp	r3, r4
 80068e4:	d921      	bls.n	800692a <ai_platform_network_process+0x4ee>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	b1fb      	cbz	r3, 800692a <ai_platform_network_process+0x4ee>
 80068ea:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80068ee:	b1e0      	cbz	r0, 800692a <ai_platform_network_process+0x4ee>
 80068f0:	68ba      	ldr	r2, [r7, #8]
 80068f2:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 80068f6:	6983      	ldr	r3, [r0, #24]
 80068f8:	f8d2 9000 	ldr.w	r9, [r2]
 80068fc:	681a      	ldr	r2, [r3, #0]
 80068fe:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8006902:	0092      	lsls	r2, r2, #2
 8006904:	d5d5      	bpl.n	80068b2 <ai_platform_network_process+0x476>
 8006906:	6898      	ldr	r0, [r3, #8]
 8006908:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 800690c:	f001 fde0 	bl	80084d0 <st_int8_copy>
 8006910:	f859 200a 	ldr.w	r2, [r9, sl]
 8006914:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8006918:	440b      	add	r3, r1
 800691a:	4293      	cmp	r3, r2
 800691c:	d302      	bcc.n	8006924 <ai_platform_network_process+0x4e8>
 800691e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006922:	1ad3      	subs	r3, r2, r3
 8006924:	f8c8 3004 	str.w	r3, [r8, #4]
 8006928:	e7d9      	b.n	80068de <ai_platform_network_process+0x4a2>
 800692a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800692e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8006932:	3401      	adds	r4, #1
 8006934:	b2a4      	uxth	r4, r4
 8006936:	42a3      	cmp	r3, r4
 8006938:	f8ab 4016 	strh.w	r4, [fp, #22]
 800693c:	f63f af7f 	bhi.w	800683e <ai_platform_network_process+0x402>
 8006940:	4620      	mov	r0, r4
 8006942:	b005      	add	sp, #20
 8006944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006948:	2a01      	cmp	r2, #1
 800694a:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 800694c:	d029      	beq.n	80069a2 <ai_platform_network_process+0x566>
 800694e:	f106 070c 	add.w	r7, r6, #12
 8006952:	e770      	b.n	8006836 <ai_platform_network_process+0x3fa>
 8006954:	2218      	movs	r2, #24
 8006956:	2113      	movs	r1, #19
 8006958:	f105 0010 	add.w	r0, r5, #16
 800695c:	2400      	movs	r4, #0
 800695e:	f000 fb7f 	bl	8007060 <core_set_error>
 8006962:	e711      	b.n	8006788 <ai_platform_network_process+0x34c>
 8006964:	9d03      	ldr	r5, [sp, #12]
 8006966:	4604      	mov	r4, r0
 8006968:	2217      	movs	r2, #23
 800696a:	2112      	movs	r1, #18
 800696c:	f105 0010 	add.w	r0, r5, #16
 8006970:	f000 fb76 	bl	8007060 <core_set_error>
 8006974:	e708      	b.n	8006788 <ai_platform_network_process+0x34c>
 8006976:	9d03      	ldr	r5, [sp, #12]
 8006978:	2219      	movs	r2, #25
 800697a:	2112      	movs	r1, #18
 800697c:	2400      	movs	r4, #0
 800697e:	f105 0010 	add.w	r0, r5, #16
 8006982:	f000 fb6d 	bl	8007060 <core_set_error>
 8006986:	e6ff      	b.n	8006788 <ai_platform_network_process+0x34c>
 8006988:	9d03      	ldr	r5, [sp, #12]
 800698a:	4604      	mov	r4, r0
 800698c:	2221      	movs	r2, #33	; 0x21
 800698e:	2112      	movs	r1, #18
 8006990:	f105 0010 	add.w	r0, r5, #16
 8006994:	f000 fb64 	bl	8007060 <core_set_error>
 8006998:	e6f6      	b.n	8006788 <ai_platform_network_process+0x34c>
 800699a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 800699e:	82ab      	strh	r3, [r5, #20]
 80069a0:	e744      	b.n	800682c <ai_platform_network_process+0x3f0>
 80069a2:	2700      	movs	r7, #0
 80069a4:	e747      	b.n	8006836 <ai_platform_network_process+0x3fa>
 80069a6:	4604      	mov	r4, r0
 80069a8:	2217      	movs	r2, #23
 80069aa:	2113      	movs	r1, #19
 80069ac:	f105 0010 	add.w	r0, r5, #16
 80069b0:	f000 fb56 	bl	8007060 <core_set_error>
 80069b4:	e6e8      	b.n	8006788 <ai_platform_network_process+0x34c>
 80069b6:	2219      	movs	r2, #25
 80069b8:	2113      	movs	r1, #19
 80069ba:	f105 0010 	add.w	r0, r5, #16
 80069be:	2400      	movs	r4, #0
 80069c0:	f000 fb4e 	bl	8007060 <core_set_error>
 80069c4:	e6e0      	b.n	8006788 <ai_platform_network_process+0x34c>
 80069c6:	4604      	mov	r4, r0
 80069c8:	2221      	movs	r2, #33	; 0x21
 80069ca:	2113      	movs	r1, #19
 80069cc:	f105 0010 	add.w	r0, r5, #16
 80069d0:	f000 fb46 	bl	8007060 <core_set_error>
 80069d4:	e6d8      	b.n	8006788 <ai_platform_network_process+0x34c>
 80069d6:	2217      	movs	r2, #23
 80069d8:	2113      	movs	r1, #19
 80069da:	f105 0010 	add.w	r0, r5, #16
 80069de:	4654      	mov	r4, sl
 80069e0:	f000 fb3e 	bl	8007060 <core_set_error>
 80069e4:	e6d0      	b.n	8006788 <ai_platform_network_process+0x34c>
 80069e6:	bf00      	nop
 80069e8:	58024000 	.word	0x58024000
 80069ec:	f407a5c2 	.word	0xf407a5c2
 80069f0:	b5e8b5cd 	.word	0xb5e8b5cd

080069f4 <ai_platform_observer_node_info>:
 80069f4:	b570      	push	{r4, r5, r6, lr}
 80069f6:	4604      	mov	r4, r0
 80069f8:	460d      	mov	r5, r1
 80069fa:	b120      	cbz	r0, 8006a06 <ai_platform_observer_node_info+0x12>
 80069fc:	4b61      	ldr	r3, [pc, #388]	; (8006b84 <ai_platform_observer_node_info+0x190>)
 80069fe:	6802      	ldr	r2, [r0, #0]
 8006a00:	429a      	cmp	r2, r3
 8006a02:	bf18      	it	ne
 8006a04:	2400      	movne	r4, #0
 8006a06:	f7fd fe8d 	bl	8004724 <_ai_platform_acquire_crc>
 8006a0a:	4b5f      	ldr	r3, [pc, #380]	; (8006b88 <ai_platform_observer_node_info+0x194>)
 8006a0c:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a16:	189a      	adds	r2, r3, r2
 8006a18:	2a01      	cmp	r2, #1
 8006a1a:	d929      	bls.n	8006a70 <ai_platform_observer_node_info+0x7c>
 8006a1c:	f240 4249 	movw	r2, #1097	; 0x449
 8006a20:	4293      	cmp	r3, r2
 8006a22:	d025      	beq.n	8006a70 <ai_platform_observer_node_info+0x7c>
 8006a24:	4a59      	ldr	r2, [pc, #356]	; (8006b8c <ai_platform_observer_node_info+0x198>)
 8006a26:	6813      	ldr	r3, [r2, #0]
 8006a28:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a2c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006a30:	d02b      	beq.n	8006a8a <ai_platform_observer_node_info+0x96>
 8006a32:	6813      	ldr	r3, [r2, #0]
 8006a34:	f240 4183 	movw	r1, #1155	; 0x483
 8006a38:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a3c:	428b      	cmp	r3, r1
 8006a3e:	d06c      	beq.n	8006b1a <ai_platform_observer_node_info+0x126>
 8006a40:	6813      	ldr	r3, [r2, #0]
 8006a42:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a46:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006a4a:	d051      	beq.n	8006af0 <ai_platform_observer_node_info+0xfc>
 8006a4c:	6813      	ldr	r3, [r2, #0]
 8006a4e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d129      	bne.n	8006aaa <ai_platform_observer_node_info+0xb6>
 8006a56:	4a4e      	ldr	r2, [pc, #312]	; (8006b90 <ai_platform_observer_node_info+0x19c>)
 8006a58:	2301      	movs	r3, #1
 8006a5a:	6093      	str	r3, [r2, #8]
 8006a5c:	6893      	ldr	r3, [r2, #8]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d1fc      	bne.n	8006a5c <ai_platform_observer_node_info+0x68>
 8006a62:	4b4c      	ldr	r3, [pc, #304]	; (8006b94 <ai_platform_observer_node_info+0x1a0>)
 8006a64:	6013      	str	r3, [r2, #0]
 8006a66:	4b4c      	ldr	r3, [pc, #304]	; (8006b98 <ai_platform_observer_node_info+0x1a4>)
 8006a68:	6812      	ldr	r2, [r2, #0]
 8006a6a:	429a      	cmp	r2, r3
 8006a6c:	d01d      	beq.n	8006aaa <ai_platform_observer_node_info+0xb6>
 8006a6e:	e7fe      	b.n	8006a6e <ai_platform_observer_node_info+0x7a>
 8006a70:	4a47      	ldr	r2, [pc, #284]	; (8006b90 <ai_platform_observer_node_info+0x19c>)
 8006a72:	2301      	movs	r3, #1
 8006a74:	6093      	str	r3, [r2, #8]
 8006a76:	6893      	ldr	r3, [r2, #8]
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d1fc      	bne.n	8006a76 <ai_platform_observer_node_info+0x82>
 8006a7c:	4b45      	ldr	r3, [pc, #276]	; (8006b94 <ai_platform_observer_node_info+0x1a0>)
 8006a7e:	6013      	str	r3, [r2, #0]
 8006a80:	4b45      	ldr	r3, [pc, #276]	; (8006b98 <ai_platform_observer_node_info+0x1a4>)
 8006a82:	6812      	ldr	r2, [r2, #0]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d010      	beq.n	8006aaa <ai_platform_observer_node_info+0xb6>
 8006a88:	e7fe      	b.n	8006a88 <ai_platform_observer_node_info+0x94>
 8006a8a:	4a44      	ldr	r2, [pc, #272]	; (8006b9c <ai_platform_observer_node_info+0x1a8>)
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006a92:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d1fb      	bne.n	8006a92 <ai_platform_observer_node_info+0x9e>
 8006a9a:	4b3e      	ldr	r3, [pc, #248]	; (8006b94 <ai_platform_observer_node_info+0x1a0>)
 8006a9c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006aa0:	4b3d      	ldr	r3, [pc, #244]	; (8006b98 <ai_platform_observer_node_info+0x1a4>)
 8006aa2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d121      	bne.n	8006aee <ai_platform_observer_node_info+0xfa>
 8006aaa:	f7fd fe3d 	bl	8004728 <_ai_platform_release_crc>
 8006aae:	2d00      	cmp	r5, #0
 8006ab0:	bf18      	it	ne
 8006ab2:	2c00      	cmpne	r4, #0
 8006ab4:	bf0c      	ite	eq
 8006ab6:	2601      	moveq	r6, #1
 8006ab8:	2600      	movne	r6, #0
 8006aba:	d026      	beq.n	8006b0a <ai_platform_observer_node_info+0x116>
 8006abc:	68e3      	ldr	r3, [r4, #12]
 8006abe:	079b      	lsls	r3, r3, #30
 8006ac0:	d54b      	bpl.n	8006b5a <ai_platform_observer_node_info+0x166>
 8006ac2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006ac4:	4631      	mov	r1, r6
 8006ac6:	e000      	b.n	8006aca <ai_platform_observer_node_info+0xd6>
 8006ac8:	b14a      	cbz	r2, 8006ade <ai_platform_observer_node_info+0xea>
 8006aca:	b288      	uxth	r0, r1
 8006acc:	3101      	adds	r1, #1
 8006ace:	b133      	cbz	r3, 8006ade <ai_platform_observer_node_info+0xea>
 8006ad0:	882a      	ldrh	r2, [r5, #0]
 8006ad2:	4282      	cmp	r2, r0
 8006ad4:	d032      	beq.n	8006b3c <ai_platform_observer_node_info+0x148>
 8006ad6:	691a      	ldr	r2, [r3, #16]
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	4613      	mov	r3, r2
 8006adc:	d1f4      	bne.n	8006ac8 <ai_platform_observer_node_info+0xd4>
 8006ade:	2214      	movs	r2, #20
 8006ae0:	f104 0010 	add.w	r0, r4, #16
 8006ae4:	4611      	mov	r1, r2
 8006ae6:	f000 fabb 	bl	8007060 <core_set_error>
 8006aea:	4630      	mov	r0, r6
 8006aec:	bd70      	pop	{r4, r5, r6, pc}
 8006aee:	e7fe      	b.n	8006aee <ai_platform_observer_node_info+0xfa>
 8006af0:	4a27      	ldr	r2, [pc, #156]	; (8006b90 <ai_platform_observer_node_info+0x19c>)
 8006af2:	2301      	movs	r3, #1
 8006af4:	6093      	str	r3, [r2, #8]
 8006af6:	6893      	ldr	r3, [r2, #8]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1fc      	bne.n	8006af6 <ai_platform_observer_node_info+0x102>
 8006afc:	4b25      	ldr	r3, [pc, #148]	; (8006b94 <ai_platform_observer_node_info+0x1a0>)
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	4b25      	ldr	r3, [pc, #148]	; (8006b98 <ai_platform_observer_node_info+0x1a4>)
 8006b02:	6812      	ldr	r2, [r2, #0]
 8006b04:	429a      	cmp	r2, r3
 8006b06:	d0d0      	beq.n	8006aaa <ai_platform_observer_node_info+0xb6>
 8006b08:	e7fe      	b.n	8006b08 <ai_platform_observer_node_info+0x114>
 8006b0a:	b364      	cbz	r4, 8006b66 <ai_platform_observer_node_info+0x172>
 8006b0c:	2210      	movs	r2, #16
 8006b0e:	2600      	movs	r6, #0
 8006b10:	18a0      	adds	r0, r4, r2
 8006b12:	4611      	mov	r1, r2
 8006b14:	f000 faa4 	bl	8007060 <core_set_error>
 8006b18:	e7e7      	b.n	8006aea <ai_platform_observer_node_info+0xf6>
 8006b1a:	4a20      	ldr	r2, [pc, #128]	; (8006b9c <ai_platform_observer_node_info+0x1a8>)
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006b22:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d1fb      	bne.n	8006b22 <ai_platform_observer_node_info+0x12e>
 8006b2a:	4b1a      	ldr	r3, [pc, #104]	; (8006b94 <ai_platform_observer_node_info+0x1a0>)
 8006b2c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006b30:	4b19      	ldr	r3, [pc, #100]	; (8006b98 <ai_platform_observer_node_info+0x1a4>)
 8006b32:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d0b7      	beq.n	8006aaa <ai_platform_observer_node_info+0xb6>
 8006b3a:	e7fe      	b.n	8006b3a <ai_platform_observer_node_info+0x146>
 8006b3c:	6999      	ldr	r1, [r3, #24]
 8006b3e:	f240 120f 	movw	r2, #271	; 0x10f
 8006b42:	60e9      	str	r1, [r5, #12]
 8006b44:	8819      	ldrh	r1, [r3, #0]
 8006b46:	4291      	cmp	r1, r2
 8006b48:	d00f      	beq.n	8006b6a <ai_platform_observer_node_info+0x176>
 8006b4a:	8859      	ldrh	r1, [r3, #2]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	2601      	movs	r6, #1
 8006b50:	80a9      	strh	r1, [r5, #4]
 8006b52:	881b      	ldrh	r3, [r3, #0]
 8006b54:	60aa      	str	r2, [r5, #8]
 8006b56:	806b      	strh	r3, [r5, #2]
 8006b58:	e7c7      	b.n	8006aea <ai_platform_observer_node_info+0xf6>
 8006b5a:	2210      	movs	r2, #16
 8006b5c:	2111      	movs	r1, #17
 8006b5e:	18a0      	adds	r0, r4, r2
 8006b60:	f000 fa7e 	bl	8007060 <core_set_error>
 8006b64:	e7c1      	b.n	8006aea <ai_platform_observer_node_info+0xf6>
 8006b66:	4626      	mov	r6, r4
 8006b68:	e7bf      	b.n	8006aea <ai_platform_observer_node_info+0xf6>
 8006b6a:	69da      	ldr	r2, [r3, #28]
 8006b6c:	2601      	movs	r6, #1
 8006b6e:	8853      	ldrh	r3, [r2, #2]
 8006b70:	80ab      	strh	r3, [r5, #4]
 8006b72:	8813      	ldrh	r3, [r2, #0]
 8006b74:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b78:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b7c:	806b      	strh	r3, [r5, #2]
 8006b7e:	6993      	ldr	r3, [r2, #24]
 8006b80:	60ab      	str	r3, [r5, #8]
 8006b82:	e7b2      	b.n	8006aea <ai_platform_observer_node_info+0xf6>
 8006b84:	a1c00100 	.word	0xa1c00100
 8006b88:	e0042000 	.word	0xe0042000
 8006b8c:	5c001000 	.word	0x5c001000
 8006b90:	40023000 	.word	0x40023000
 8006b94:	f407a5c2 	.word	0xf407a5c2
 8006b98:	b5e8b5cd 	.word	0xb5e8b5cd
 8006b9c:	58024000 	.word	0x58024000

08006ba0 <ai_platform_observer_register>:
 8006ba0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ba4:	2800      	cmp	r0, #0
 8006ba6:	d042      	beq.n	8006c2e <ai_platform_observer_register+0x8e>
 8006ba8:	4690      	mov	r8, r2
 8006baa:	461e      	mov	r6, r3
 8006bac:	6802      	ldr	r2, [r0, #0]
 8006bae:	4604      	mov	r4, r0
 8006bb0:	4b96      	ldr	r3, [pc, #600]	; (8006e0c <ai_platform_observer_register+0x26c>)
 8006bb2:	429a      	cmp	r2, r3
 8006bb4:	d13b      	bne.n	8006c2e <ai_platform_observer_register+0x8e>
 8006bb6:	460f      	mov	r7, r1
 8006bb8:	f7fd fdb4 	bl	8004724 <_ai_platform_acquire_crc>
 8006bbc:	4b94      	ldr	r3, [pc, #592]	; (8006e10 <ai_platform_observer_register+0x270>)
 8006bbe:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bc8:	189a      	adds	r2, r3, r2
 8006bca:	2a01      	cmp	r2, #1
 8006bcc:	f240 8088 	bls.w	8006ce0 <ai_platform_observer_register+0x140>
 8006bd0:	f240 4249 	movw	r2, #1097	; 0x449
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	f000 8083 	beq.w	8006ce0 <ai_platform_observer_register+0x140>
 8006bda:	4a8e      	ldr	r2, [pc, #568]	; (8006e14 <ai_platform_observer_register+0x274>)
 8006bdc:	6813      	ldr	r3, [r2, #0]
 8006bde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006be2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006be6:	f000 8089 	beq.w	8006cfc <ai_platform_observer_register+0x15c>
 8006bea:	6813      	ldr	r3, [r2, #0]
 8006bec:	f240 4183 	movw	r1, #1155	; 0x483
 8006bf0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bf4:	428b      	cmp	r3, r1
 8006bf6:	f000 80d6 	beq.w	8006da6 <ai_platform_observer_register+0x206>
 8006bfa:	6813      	ldr	r3, [r2, #0]
 8006bfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c00:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006c04:	f000 80ee 	beq.w	8006de4 <ai_platform_observer_register+0x244>
 8006c08:	6813      	ldr	r3, [r2, #0]
 8006c0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	f040 8084 	bne.w	8006d1c <ai_platform_observer_register+0x17c>
 8006c14:	4a80      	ldr	r2, [pc, #512]	; (8006e18 <ai_platform_observer_register+0x278>)
 8006c16:	2301      	movs	r3, #1
 8006c18:	6093      	str	r3, [r2, #8]
 8006c1a:	6893      	ldr	r3, [r2, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d1fc      	bne.n	8006c1a <ai_platform_observer_register+0x7a>
 8006c20:	4b7e      	ldr	r3, [pc, #504]	; (8006e1c <ai_platform_observer_register+0x27c>)
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	4b7e      	ldr	r3, [pc, #504]	; (8006e20 <ai_platform_observer_register+0x280>)
 8006c26:	6812      	ldr	r2, [r2, #0]
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d077      	beq.n	8006d1c <ai_platform_observer_register+0x17c>
 8006c2c:	e7fe      	b.n	8006c2c <ai_platform_observer_register+0x8c>
 8006c2e:	f7fd fd79 	bl	8004724 <_ai_platform_acquire_crc>
 8006c32:	4b77      	ldr	r3, [pc, #476]	; (8006e10 <ai_platform_observer_register+0x270>)
 8006c34:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c3e:	185a      	adds	r2, r3, r1
 8006c40:	2a01      	cmp	r2, #1
 8006c42:	d92b      	bls.n	8006c9c <ai_platform_observer_register+0xfc>
 8006c44:	f240 4249 	movw	r2, #1097	; 0x449
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d027      	beq.n	8006c9c <ai_platform_observer_register+0xfc>
 8006c4c:	4a71      	ldr	r2, [pc, #452]	; (8006e14 <ai_platform_observer_register+0x274>)
 8006c4e:	6813      	ldr	r3, [r2, #0]
 8006c50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c54:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006c58:	d02d      	beq.n	8006cb6 <ai_platform_observer_register+0x116>
 8006c5a:	6813      	ldr	r3, [r2, #0]
 8006c5c:	f240 4183 	movw	r1, #1155	; 0x483
 8006c60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c64:	428b      	cmp	r3, r1
 8006c66:	f000 808d 	beq.w	8006d84 <ai_platform_observer_register+0x1e4>
 8006c6a:	6813      	ldr	r3, [r2, #0]
 8006c6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c70:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006c74:	f000 80a8 	beq.w	8006dc8 <ai_platform_observer_register+0x228>
 8006c78:	6813      	ldr	r3, [r2, #0]
 8006c7a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d129      	bne.n	8006cd6 <ai_platform_observer_register+0x136>
 8006c82:	4a65      	ldr	r2, [pc, #404]	; (8006e18 <ai_platform_observer_register+0x278>)
 8006c84:	2301      	movs	r3, #1
 8006c86:	6093      	str	r3, [r2, #8]
 8006c88:	6893      	ldr	r3, [r2, #8]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d1fc      	bne.n	8006c88 <ai_platform_observer_register+0xe8>
 8006c8e:	4963      	ldr	r1, [pc, #396]	; (8006e1c <ai_platform_observer_register+0x27c>)
 8006c90:	4b63      	ldr	r3, [pc, #396]	; (8006e20 <ai_platform_observer_register+0x280>)
 8006c92:	6011      	str	r1, [r2, #0]
 8006c94:	6812      	ldr	r2, [r2, #0]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d01d      	beq.n	8006cd6 <ai_platform_observer_register+0x136>
 8006c9a:	e7fe      	b.n	8006c9a <ai_platform_observer_register+0xfa>
 8006c9c:	4a5e      	ldr	r2, [pc, #376]	; (8006e18 <ai_platform_observer_register+0x278>)
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	6093      	str	r3, [r2, #8]
 8006ca2:	6893      	ldr	r3, [r2, #8]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1fc      	bne.n	8006ca2 <ai_platform_observer_register+0x102>
 8006ca8:	495c      	ldr	r1, [pc, #368]	; (8006e1c <ai_platform_observer_register+0x27c>)
 8006caa:	4b5d      	ldr	r3, [pc, #372]	; (8006e20 <ai_platform_observer_register+0x280>)
 8006cac:	6011      	str	r1, [r2, #0]
 8006cae:	6812      	ldr	r2, [r2, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d010      	beq.n	8006cd6 <ai_platform_observer_register+0x136>
 8006cb4:	e7fe      	b.n	8006cb4 <ai_platform_observer_register+0x114>
 8006cb6:	4a5b      	ldr	r2, [pc, #364]	; (8006e24 <ai_platform_observer_register+0x284>)
 8006cb8:	2301      	movs	r3, #1
 8006cba:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006cbe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d1fb      	bne.n	8006cbe <ai_platform_observer_register+0x11e>
 8006cc6:	4955      	ldr	r1, [pc, #340]	; (8006e1c <ai_platform_observer_register+0x27c>)
 8006cc8:	4b55      	ldr	r3, [pc, #340]	; (8006e20 <ai_platform_observer_register+0x280>)
 8006cca:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006cce:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006cd2:	429a      	cmp	r2, r3
 8006cd4:	d111      	bne.n	8006cfa <ai_platform_observer_register+0x15a>
 8006cd6:	f7fd fd27 	bl	8004728 <_ai_platform_release_crc>
 8006cda:	2000      	movs	r0, #0
 8006cdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ce0:	4b4d      	ldr	r3, [pc, #308]	; (8006e18 <ai_platform_observer_register+0x278>)
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	609a      	str	r2, [r3, #8]
 8006ce6:	689d      	ldr	r5, [r3, #8]
 8006ce8:	2d00      	cmp	r5, #0
 8006cea:	d1fc      	bne.n	8006ce6 <ai_platform_observer_register+0x146>
 8006cec:	4a4b      	ldr	r2, [pc, #300]	; (8006e1c <ai_platform_observer_register+0x27c>)
 8006cee:	601a      	str	r2, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	4b4b      	ldr	r3, [pc, #300]	; (8006e20 <ai_platform_observer_register+0x280>)
 8006cf4:	429a      	cmp	r2, r3
 8006cf6:	d011      	beq.n	8006d1c <ai_platform_observer_register+0x17c>
 8006cf8:	e7fe      	b.n	8006cf8 <ai_platform_observer_register+0x158>
 8006cfa:	e7fe      	b.n	8006cfa <ai_platform_observer_register+0x15a>
 8006cfc:	4a49      	ldr	r2, [pc, #292]	; (8006e24 <ai_platform_observer_register+0x284>)
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d04:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1fb      	bne.n	8006d04 <ai_platform_observer_register+0x164>
 8006d0c:	4b43      	ldr	r3, [pc, #268]	; (8006e1c <ai_platform_observer_register+0x27c>)
 8006d0e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006d12:	4b43      	ldr	r3, [pc, #268]	; (8006e20 <ai_platform_observer_register+0x280>)
 8006d14:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d10c      	bne.n	8006d36 <ai_platform_observer_register+0x196>
 8006d1c:	f7fd fd04 	bl	8004728 <_ai_platform_release_crc>
 8006d20:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8006d22:	b14d      	cbz	r5, 8006d38 <ai_platform_observer_register+0x198>
 8006d24:	2240      	movs	r2, #64	; 0x40
 8006d26:	2111      	movs	r1, #17
 8006d28:	f104 0010 	add.w	r0, r4, #16
 8006d2c:	f000 f998 	bl	8007060 <core_set_error>
 8006d30:	2000      	movs	r0, #0
 8006d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006d36:	e7fe      	b.n	8006d36 <ai_platform_observer_register+0x196>
 8006d38:	2014      	movs	r0, #20
 8006d3a:	f000 f99d 	bl	8007078 <core_mem_alloc>
 8006d3e:	4681      	mov	r9, r0
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d05c      	beq.n	8006dfe <ai_platform_observer_register+0x25e>
 8006d44:	81c5      	strh	r5, [r0, #14]
 8006d46:	2101      	movs	r1, #1
 8006d48:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006d4a:	e007      	b.n	8006d5c <ai_platform_observer_register+0x1bc>
 8006d4c:	f8a9 100e 	strh.w	r1, [r9, #14]
 8006d50:	b2a9      	uxth	r1, r5
 8006d52:	691a      	ldr	r2, [r3, #16]
 8006d54:	b12a      	cbz	r2, 8006d62 <ai_platform_observer_register+0x1c2>
 8006d56:	429a      	cmp	r2, r3
 8006d58:	4613      	mov	r3, r2
 8006d5a:	d002      	beq.n	8006d62 <ai_platform_observer_register+0x1c2>
 8006d5c:	1c4d      	adds	r5, r1, #1
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d1f4      	bne.n	8006d4c <ai_platform_observer_register+0x1ac>
 8006d62:	2200      	movs	r2, #0
 8006d64:	b2f3      	uxtb	r3, r6
 8006d66:	f8c9 7000 	str.w	r7, [r9]
 8006d6a:	2001      	movs	r0, #1
 8006d6c:	f8a9 200c 	strh.w	r2, [r9, #12]
 8006d70:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006d74:	4a2c      	ldr	r2, [pc, #176]	; (8006e28 <ai_platform_observer_register+0x288>)
 8006d76:	f8c9 8004 	str.w	r8, [r9, #4]
 8006d7a:	f8c9 3008 	str.w	r3, [r9, #8]
 8006d7e:	e9c4 290f 	strd	r2, r9, [r4, #60]	; 0x3c
 8006d82:	e7ab      	b.n	8006cdc <ai_platform_observer_register+0x13c>
 8006d84:	4a27      	ldr	r2, [pc, #156]	; (8006e24 <ai_platform_observer_register+0x284>)
 8006d86:	2301      	movs	r3, #1
 8006d88:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d8c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d1fb      	bne.n	8006d8c <ai_platform_observer_register+0x1ec>
 8006d94:	4921      	ldr	r1, [pc, #132]	; (8006e1c <ai_platform_observer_register+0x27c>)
 8006d96:	4b22      	ldr	r3, [pc, #136]	; (8006e20 <ai_platform_observer_register+0x280>)
 8006d98:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006d9c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d098      	beq.n	8006cd6 <ai_platform_observer_register+0x136>
 8006da4:	e7fe      	b.n	8006da4 <ai_platform_observer_register+0x204>
 8006da6:	4a1f      	ldr	r2, [pc, #124]	; (8006e24 <ai_platform_observer_register+0x284>)
 8006da8:	2301      	movs	r3, #1
 8006daa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006dae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1fb      	bne.n	8006dae <ai_platform_observer_register+0x20e>
 8006db6:	4b19      	ldr	r3, [pc, #100]	; (8006e1c <ai_platform_observer_register+0x27c>)
 8006db8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006dbc:	4b18      	ldr	r3, [pc, #96]	; (8006e20 <ai_platform_observer_register+0x280>)
 8006dbe:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d0aa      	beq.n	8006d1c <ai_platform_observer_register+0x17c>
 8006dc6:	e7fe      	b.n	8006dc6 <ai_platform_observer_register+0x226>
 8006dc8:	4a13      	ldr	r2, [pc, #76]	; (8006e18 <ai_platform_observer_register+0x278>)
 8006dca:	2301      	movs	r3, #1
 8006dcc:	6093      	str	r3, [r2, #8]
 8006dce:	6893      	ldr	r3, [r2, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1fc      	bne.n	8006dce <ai_platform_observer_register+0x22e>
 8006dd4:	4911      	ldr	r1, [pc, #68]	; (8006e1c <ai_platform_observer_register+0x27c>)
 8006dd6:	4b12      	ldr	r3, [pc, #72]	; (8006e20 <ai_platform_observer_register+0x280>)
 8006dd8:	6011      	str	r1, [r2, #0]
 8006dda:	6812      	ldr	r2, [r2, #0]
 8006ddc:	429a      	cmp	r2, r3
 8006dde:	f43f af7a 	beq.w	8006cd6 <ai_platform_observer_register+0x136>
 8006de2:	e7fe      	b.n	8006de2 <ai_platform_observer_register+0x242>
 8006de4:	4a0c      	ldr	r2, [pc, #48]	; (8006e18 <ai_platform_observer_register+0x278>)
 8006de6:	2301      	movs	r3, #1
 8006de8:	6093      	str	r3, [r2, #8]
 8006dea:	6893      	ldr	r3, [r2, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1fc      	bne.n	8006dea <ai_platform_observer_register+0x24a>
 8006df0:	4b0a      	ldr	r3, [pc, #40]	; (8006e1c <ai_platform_observer_register+0x27c>)
 8006df2:	6013      	str	r3, [r2, #0]
 8006df4:	4b0a      	ldr	r3, [pc, #40]	; (8006e20 <ai_platform_observer_register+0x280>)
 8006df6:	6812      	ldr	r2, [r2, #0]
 8006df8:	429a      	cmp	r2, r3
 8006dfa:	d08f      	beq.n	8006d1c <ai_platform_observer_register+0x17c>
 8006dfc:	e7fe      	b.n	8006dfc <ai_platform_observer_register+0x25c>
 8006dfe:	2210      	movs	r2, #16
 8006e00:	2131      	movs	r1, #49	; 0x31
 8006e02:	18a0      	adds	r0, r4, r2
 8006e04:	f000 f92c 	bl	8007060 <core_set_error>
 8006e08:	4648      	mov	r0, r9
 8006e0a:	e767      	b.n	8006cdc <ai_platform_observer_register+0x13c>
 8006e0c:	a1c00100 	.word	0xa1c00100
 8006e10:	e0042000 	.word	0xe0042000
 8006e14:	5c001000 	.word	0x5c001000
 8006e18:	40023000 	.word	0x40023000
 8006e1c:	f407a5c2 	.word	0xf407a5c2
 8006e20:	b5e8b5cd 	.word	0xb5e8b5cd
 8006e24:	58024000 	.word	0x58024000
 8006e28:	08004601 	.word	0x08004601

08006e2c <ai_platform_observer_unregister>:
 8006e2c:	b510      	push	{r4, lr}
 8006e2e:	2800      	cmp	r0, #0
 8006e30:	d03c      	beq.n	8006eac <ai_platform_observer_unregister+0x80>
 8006e32:	4b80      	ldr	r3, [pc, #512]	; (8007034 <ai_platform_observer_unregister+0x208>)
 8006e34:	4604      	mov	r4, r0
 8006e36:	6802      	ldr	r2, [r0, #0]
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d137      	bne.n	8006eac <ai_platform_observer_unregister+0x80>
 8006e3c:	f7fd fc72 	bl	8004724 <_ai_platform_acquire_crc>
 8006e40:	4b7d      	ldr	r3, [pc, #500]	; (8007038 <ai_platform_observer_unregister+0x20c>)
 8006e42:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e4c:	189a      	adds	r2, r3, r2
 8006e4e:	2a01      	cmp	r2, #1
 8006e50:	f240 8083 	bls.w	8006f5a <ai_platform_observer_unregister+0x12e>
 8006e54:	f240 4249 	movw	r2, #1097	; 0x449
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	d07e      	beq.n	8006f5a <ai_platform_observer_unregister+0x12e>
 8006e5c:	4a77      	ldr	r2, [pc, #476]	; (800703c <ai_platform_observer_unregister+0x210>)
 8006e5e:	6813      	ldr	r3, [r2, #0]
 8006e60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e64:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006e68:	f000 8085 	beq.w	8006f76 <ai_platform_observer_unregister+0x14a>
 8006e6c:	6813      	ldr	r3, [r2, #0]
 8006e6e:	f240 4183 	movw	r1, #1155	; 0x483
 8006e72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e76:	428b      	cmp	r3, r1
 8006e78:	f000 80a0 	beq.w	8006fbc <ai_platform_observer_unregister+0x190>
 8006e7c:	6813      	ldr	r3, [r2, #0]
 8006e7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e82:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006e86:	f000 80c6 	beq.w	8007016 <ai_platform_observer_unregister+0x1ea>
 8006e8a:	6813      	ldr	r3, [r2, #0]
 8006e8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	f000 80a5 	beq.w	8006fe0 <ai_platform_observer_unregister+0x1b4>
 8006e96:	f7fd fc47 	bl	8004728 <_ai_platform_release_crc>
 8006e9a:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006e9c:	b108      	cbz	r0, 8006ea2 <ai_platform_observer_unregister+0x76>
 8006e9e:	f000 f8f9 	bl	8007094 <core_mem_free>
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	2001      	movs	r0, #1
 8006ea6:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 8006eaa:	bd10      	pop	{r4, pc}
 8006eac:	f7fd fc3a 	bl	8004724 <_ai_platform_acquire_crc>
 8006eb0:	4b61      	ldr	r3, [pc, #388]	; (8007038 <ai_platform_observer_unregister+0x20c>)
 8006eb2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ebc:	185a      	adds	r2, r3, r1
 8006ebe:	2a01      	cmp	r2, #1
 8006ec0:	d92a      	bls.n	8006f18 <ai_platform_observer_unregister+0xec>
 8006ec2:	f240 4249 	movw	r2, #1097	; 0x449
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d026      	beq.n	8006f18 <ai_platform_observer_unregister+0xec>
 8006eca:	4a5c      	ldr	r2, [pc, #368]	; (800703c <ai_platform_observer_unregister+0x210>)
 8006ecc:	6813      	ldr	r3, [r2, #0]
 8006ece:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ed2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006ed6:	d02c      	beq.n	8006f32 <ai_platform_observer_unregister+0x106>
 8006ed8:	6813      	ldr	r3, [r2, #0]
 8006eda:	f240 4183 	movw	r1, #1155	; 0x483
 8006ede:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ee2:	428b      	cmp	r3, r1
 8006ee4:	d059      	beq.n	8006f9a <ai_platform_observer_unregister+0x16e>
 8006ee6:	6813      	ldr	r3, [r2, #0]
 8006ee8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006eec:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006ef0:	f000 8084 	beq.w	8006ffc <ai_platform_observer_unregister+0x1d0>
 8006ef4:	6813      	ldr	r3, [r2, #0]
 8006ef6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d129      	bne.n	8006f52 <ai_platform_observer_unregister+0x126>
 8006efe:	4a50      	ldr	r2, [pc, #320]	; (8007040 <ai_platform_observer_unregister+0x214>)
 8006f00:	2301      	movs	r3, #1
 8006f02:	6093      	str	r3, [r2, #8]
 8006f04:	6893      	ldr	r3, [r2, #8]
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1fc      	bne.n	8006f04 <ai_platform_observer_unregister+0xd8>
 8006f0a:	494e      	ldr	r1, [pc, #312]	; (8007044 <ai_platform_observer_unregister+0x218>)
 8006f0c:	4b4e      	ldr	r3, [pc, #312]	; (8007048 <ai_platform_observer_unregister+0x21c>)
 8006f0e:	6011      	str	r1, [r2, #0]
 8006f10:	6812      	ldr	r2, [r2, #0]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d01d      	beq.n	8006f52 <ai_platform_observer_unregister+0x126>
 8006f16:	e7fe      	b.n	8006f16 <ai_platform_observer_unregister+0xea>
 8006f18:	4a49      	ldr	r2, [pc, #292]	; (8007040 <ai_platform_observer_unregister+0x214>)
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	6093      	str	r3, [r2, #8]
 8006f1e:	6893      	ldr	r3, [r2, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1fc      	bne.n	8006f1e <ai_platform_observer_unregister+0xf2>
 8006f24:	4947      	ldr	r1, [pc, #284]	; (8007044 <ai_platform_observer_unregister+0x218>)
 8006f26:	4b48      	ldr	r3, [pc, #288]	; (8007048 <ai_platform_observer_unregister+0x21c>)
 8006f28:	6011      	str	r1, [r2, #0]
 8006f2a:	6812      	ldr	r2, [r2, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d010      	beq.n	8006f52 <ai_platform_observer_unregister+0x126>
 8006f30:	e7fe      	b.n	8006f30 <ai_platform_observer_unregister+0x104>
 8006f32:	4a46      	ldr	r2, [pc, #280]	; (800704c <ai_platform_observer_unregister+0x220>)
 8006f34:	2301      	movs	r3, #1
 8006f36:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006f3a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1fb      	bne.n	8006f3a <ai_platform_observer_unregister+0x10e>
 8006f42:	4940      	ldr	r1, [pc, #256]	; (8007044 <ai_platform_observer_unregister+0x218>)
 8006f44:	4b40      	ldr	r3, [pc, #256]	; (8007048 <ai_platform_observer_unregister+0x21c>)
 8006f46:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006f4a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006f4e:	429a      	cmp	r2, r3
 8006f50:	d110      	bne.n	8006f74 <ai_platform_observer_unregister+0x148>
 8006f52:	f7fd fbe9 	bl	8004728 <_ai_platform_release_crc>
 8006f56:	2000      	movs	r0, #0
 8006f58:	bd10      	pop	{r4, pc}
 8006f5a:	4a39      	ldr	r2, [pc, #228]	; (8007040 <ai_platform_observer_unregister+0x214>)
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	6093      	str	r3, [r2, #8]
 8006f60:	6893      	ldr	r3, [r2, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1fc      	bne.n	8006f60 <ai_platform_observer_unregister+0x134>
 8006f66:	4937      	ldr	r1, [pc, #220]	; (8007044 <ai_platform_observer_unregister+0x218>)
 8006f68:	4b37      	ldr	r3, [pc, #220]	; (8007048 <ai_platform_observer_unregister+0x21c>)
 8006f6a:	6011      	str	r1, [r2, #0]
 8006f6c:	6812      	ldr	r2, [r2, #0]
 8006f6e:	429a      	cmp	r2, r3
 8006f70:	d091      	beq.n	8006e96 <ai_platform_observer_unregister+0x6a>
 8006f72:	e7fe      	b.n	8006f72 <ai_platform_observer_unregister+0x146>
 8006f74:	e7fe      	b.n	8006f74 <ai_platform_observer_unregister+0x148>
 8006f76:	4a35      	ldr	r2, [pc, #212]	; (800704c <ai_platform_observer_unregister+0x220>)
 8006f78:	2301      	movs	r3, #1
 8006f7a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006f7e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1fb      	bne.n	8006f7e <ai_platform_observer_unregister+0x152>
 8006f86:	492f      	ldr	r1, [pc, #188]	; (8007044 <ai_platform_observer_unregister+0x218>)
 8006f88:	4b2f      	ldr	r3, [pc, #188]	; (8007048 <ai_platform_observer_unregister+0x21c>)
 8006f8a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006f8e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006f92:	429a      	cmp	r2, r3
 8006f94:	f43f af7f 	beq.w	8006e96 <ai_platform_observer_unregister+0x6a>
 8006f98:	e7fe      	b.n	8006f98 <ai_platform_observer_unregister+0x16c>
 8006f9a:	4a2c      	ldr	r2, [pc, #176]	; (800704c <ai_platform_observer_unregister+0x220>)
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006fa2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d1fb      	bne.n	8006fa2 <ai_platform_observer_unregister+0x176>
 8006faa:	4926      	ldr	r1, [pc, #152]	; (8007044 <ai_platform_observer_unregister+0x218>)
 8006fac:	4b26      	ldr	r3, [pc, #152]	; (8007048 <ai_platform_observer_unregister+0x21c>)
 8006fae:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006fb2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d0cb      	beq.n	8006f52 <ai_platform_observer_unregister+0x126>
 8006fba:	e7fe      	b.n	8006fba <ai_platform_observer_unregister+0x18e>
 8006fbc:	4a23      	ldr	r2, [pc, #140]	; (800704c <ai_platform_observer_unregister+0x220>)
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006fc4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d1fb      	bne.n	8006fc4 <ai_platform_observer_unregister+0x198>
 8006fcc:	491d      	ldr	r1, [pc, #116]	; (8007044 <ai_platform_observer_unregister+0x218>)
 8006fce:	4b1e      	ldr	r3, [pc, #120]	; (8007048 <ai_platform_observer_unregister+0x21c>)
 8006fd0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006fd4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006fd8:	429a      	cmp	r2, r3
 8006fda:	f43f af5c 	beq.w	8006e96 <ai_platform_observer_unregister+0x6a>
 8006fde:	e7fe      	b.n	8006fde <ai_platform_observer_unregister+0x1b2>
 8006fe0:	4a17      	ldr	r2, [pc, #92]	; (8007040 <ai_platform_observer_unregister+0x214>)
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	6093      	str	r3, [r2, #8]
 8006fe6:	6893      	ldr	r3, [r2, #8]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d1fc      	bne.n	8006fe6 <ai_platform_observer_unregister+0x1ba>
 8006fec:	4915      	ldr	r1, [pc, #84]	; (8007044 <ai_platform_observer_unregister+0x218>)
 8006fee:	4b16      	ldr	r3, [pc, #88]	; (8007048 <ai_platform_observer_unregister+0x21c>)
 8006ff0:	6011      	str	r1, [r2, #0]
 8006ff2:	6812      	ldr	r2, [r2, #0]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	f43f af4e 	beq.w	8006e96 <ai_platform_observer_unregister+0x6a>
 8006ffa:	e7fe      	b.n	8006ffa <ai_platform_observer_unregister+0x1ce>
 8006ffc:	4a10      	ldr	r2, [pc, #64]	; (8007040 <ai_platform_observer_unregister+0x214>)
 8006ffe:	2301      	movs	r3, #1
 8007000:	6093      	str	r3, [r2, #8]
 8007002:	6893      	ldr	r3, [r2, #8]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1fc      	bne.n	8007002 <ai_platform_observer_unregister+0x1d6>
 8007008:	490e      	ldr	r1, [pc, #56]	; (8007044 <ai_platform_observer_unregister+0x218>)
 800700a:	4b0f      	ldr	r3, [pc, #60]	; (8007048 <ai_platform_observer_unregister+0x21c>)
 800700c:	6011      	str	r1, [r2, #0]
 800700e:	6812      	ldr	r2, [r2, #0]
 8007010:	429a      	cmp	r2, r3
 8007012:	d09e      	beq.n	8006f52 <ai_platform_observer_unregister+0x126>
 8007014:	e7fe      	b.n	8007014 <ai_platform_observer_unregister+0x1e8>
 8007016:	4a0a      	ldr	r2, [pc, #40]	; (8007040 <ai_platform_observer_unregister+0x214>)
 8007018:	2301      	movs	r3, #1
 800701a:	6093      	str	r3, [r2, #8]
 800701c:	6893      	ldr	r3, [r2, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d1fc      	bne.n	800701c <ai_platform_observer_unregister+0x1f0>
 8007022:	4908      	ldr	r1, [pc, #32]	; (8007044 <ai_platform_observer_unregister+0x218>)
 8007024:	4b08      	ldr	r3, [pc, #32]	; (8007048 <ai_platform_observer_unregister+0x21c>)
 8007026:	6011      	str	r1, [r2, #0]
 8007028:	6812      	ldr	r2, [r2, #0]
 800702a:	429a      	cmp	r2, r3
 800702c:	f43f af33 	beq.w	8006e96 <ai_platform_observer_unregister+0x6a>
 8007030:	e7fe      	b.n	8007030 <ai_platform_observer_unregister+0x204>
 8007032:	bf00      	nop
 8007034:	a1c00100 	.word	0xa1c00100
 8007038:	e0042000 	.word	0xe0042000
 800703c:	5c001000 	.word	0x5c001000
 8007040:	40023000 	.word	0x40023000
 8007044:	f407a5c2 	.word	0xf407a5c2
 8007048:	b5e8b5cd 	.word	0xb5e8b5cd
 800704c:	58024000 	.word	0x58024000

08007050 <core_init>:
 8007050:	2001      	movs	r0, #1
 8007052:	4770      	bx	lr

08007054 <core_get_error>:
 8007054:	4603      	mov	r3, r0
 8007056:	2200      	movs	r2, #0
 8007058:	6800      	ldr	r0, [r0, #0]
 800705a:	601a      	str	r2, [r3, #0]
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop

08007060 <core_set_error>:
 8007060:	4603      	mov	r3, r0
 8007062:	7800      	ldrb	r0, [r0, #0]
 8007064:	b108      	cbz	r0, 800706a <core_set_error+0xa>
 8007066:	2000      	movs	r0, #0
 8007068:	4770      	bx	lr
 800706a:	7019      	strb	r1, [r3, #0]
 800706c:	2001      	movs	r0, #1
 800706e:	6819      	ldr	r1, [r3, #0]
 8007070:	f362 211f 	bfi	r1, r2, #8, #24
 8007074:	6019      	str	r1, [r3, #0]
 8007076:	4770      	bx	lr

08007078 <core_mem_alloc>:
 8007078:	b150      	cbz	r0, 8007090 <core_mem_alloc+0x18>
 800707a:	3004      	adds	r0, #4
 800707c:	b508      	push	{r3, lr}
 800707e:	f7fc fbdb 	bl	8003838 <__wrap_malloc>
 8007082:	4603      	mov	r3, r0
 8007084:	b110      	cbz	r0, 800708c <core_mem_alloc+0x14>
 8007086:	3004      	adds	r0, #4
 8007088:	601b      	str	r3, [r3, #0]
 800708a:	bd08      	pop	{r3, pc}
 800708c:	2000      	movs	r0, #0
 800708e:	bd08      	pop	{r3, pc}
 8007090:	2000      	movs	r0, #0
 8007092:	4770      	bx	lr

08007094 <core_mem_free>:
 8007094:	b150      	cbz	r0, 80070ac <core_mem_free+0x18>
 8007096:	b508      	push	{r3, lr}
 8007098:	1f03      	subs	r3, r0, #4
 800709a:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800709e:	4293      	cmp	r3, r2
 80070a0:	d103      	bne.n	80070aa <core_mem_free+0x16>
 80070a2:	4618      	mov	r0, r3
 80070a4:	f7fc fbf0 	bl	8003888 <__wrap_free>
 80070a8:	2000      	movs	r0, #0
 80070aa:	bd08      	pop	{r3, pc}
 80070ac:	4770      	bx	lr
 80070ae:	bf00      	nop

080070b0 <ai_check_custom_types>:
 80070b0:	b082      	sub	sp, #8
 80070b2:	4b12      	ldr	r3, [pc, #72]	; (80070fc <ai_check_custom_types+0x4c>)
 80070b4:	9301      	str	r3, [sp, #4]
 80070b6:	b118      	cbz	r0, 80070c0 <ai_check_custom_types+0x10>
 80070b8:	7803      	ldrb	r3, [r0, #0]
 80070ba:	2b03      	cmp	r3, #3
 80070bc:	d002      	beq.n	80070c4 <ai_check_custom_types+0x14>
 80070be:	2000      	movs	r0, #0
 80070c0:	b002      	add	sp, #8
 80070c2:	4770      	bx	lr
 80070c4:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d004      	beq.n	80070d6 <ai_check_custom_types+0x26>
 80070cc:	2001      	movs	r0, #1
 80070ce:	f080 0001 	eor.w	r0, r0, #1
 80070d2:	b002      	add	sp, #8
 80070d4:	4770      	bx	lr
 80070d6:	7842      	ldrb	r2, [r0, #1]
 80070d8:	3001      	adds	r0, #1
 80070da:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80070de:	429a      	cmp	r2, r3
 80070e0:	d1f4      	bne.n	80070cc <ai_check_custom_types+0x1c>
 80070e2:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80070e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d1ee      	bne.n	80070cc <ai_check_custom_types+0x1c>
 80070ee:	7842      	ldrb	r2, [r0, #1]
 80070f0:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	d1e9      	bne.n	80070cc <ai_check_custom_types+0x1c>
 80070f8:	2000      	movs	r0, #0
 80070fa:	e7e8      	b.n	80070ce <ai_check_custom_types+0x1e>
 80070fc:	84048403 	.word	0x84048403

08007100 <ai_layer_type_name>:
 8007100:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
 8007104:	d809      	bhi.n	800711a <ai_layer_type_name+0x1a>
 8007106:	f5b0 7f99 	cmp.w	r0, #306	; 0x132
 800710a:	d217      	bcs.n	800713c <ai_layer_type_name+0x3c>
 800710c:	f5b0 7f82 	cmp.w	r0, #260	; 0x104
 8007110:	d80e      	bhi.n	8007130 <ai_layer_type_name+0x30>
 8007112:	28ff      	cmp	r0, #255	; 0xff
 8007114:	d805      	bhi.n	8007122 <ai_layer_type_name+0x22>
 8007116:	480f      	ldr	r0, [pc, #60]	; (8007154 <ai_layer_type_name+0x54>)
 8007118:	4770      	bx	lr
 800711a:	f5a0 73c0 	sub.w	r3, r0, #384	; 0x180
 800711e:	2b03      	cmp	r3, #3
 8007120:	d8f9      	bhi.n	8007116 <ai_layer_type_name+0x16>
 8007122:	f5a0 7080 	sub.w	r0, r0, #256	; 0x100
 8007126:	4b0c      	ldr	r3, [pc, #48]	; (8007158 <ai_layer_type_name+0x58>)
 8007128:	b280      	uxth	r0, r0
 800712a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800712e:	4770      	bx	lr
 8007130:	f5a0 7383 	sub.w	r3, r0, #262	; 0x106
 8007134:	2b27      	cmp	r3, #39	; 0x27
 8007136:	d9f4      	bls.n	8007122 <ai_layer_type_name+0x22>
 8007138:	4806      	ldr	r0, [pc, #24]	; (8007154 <ai_layer_type_name+0x54>)
 800713a:	4770      	bx	lr
 800713c:	f5a0 7399 	sub.w	r3, r0, #306	; 0x132
 8007140:	2201      	movs	r2, #1
 8007142:	4906      	ldr	r1, [pc, #24]	; (800715c <ai_layer_type_name+0x5c>)
 8007144:	b29b      	uxth	r3, r3
 8007146:	fa02 f303 	lsl.w	r3, r2, r3
 800714a:	420b      	tst	r3, r1
 800714c:	d1e9      	bne.n	8007122 <ai_layer_type_name+0x22>
 800714e:	4801      	ldr	r0, [pc, #4]	; (8007154 <ai_layer_type_name+0x54>)
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	08010314 	.word	0x08010314
 8007158:	08010500 	.word	0x08010500
 800715c:	00012007 	.word	0x00012007

08007160 <ai_layers_init_all>:
 8007160:	2100      	movs	r1, #0
 8007162:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007164:	b13b      	cbz	r3, 8007176 <ai_layers_init_all+0x16>
 8007166:	691a      	ldr	r2, [r3, #16]
 8007168:	3101      	adds	r1, #1
 800716a:	60d8      	str	r0, [r3, #12]
 800716c:	429a      	cmp	r2, r3
 800716e:	4613      	mov	r3, r2
 8007170:	d001      	beq.n	8007176 <ai_layers_init_all+0x16>
 8007172:	2a00      	cmp	r2, #0
 8007174:	d1f6      	bne.n	8007164 <ai_layers_init_all+0x4>
 8007176:	4608      	mov	r0, r1
 8007178:	4770      	bx	lr
 800717a:	bf00      	nop

0800717c <ai_layers_post_init_all>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	2500      	movs	r5, #0
 8007180:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007182:	b16c      	cbz	r4, 80071a0 <ai_layers_post_init_all+0x24>
 8007184:	6863      	ldr	r3, [r4, #4]
 8007186:	07db      	lsls	r3, r3, #31
 8007188:	d504      	bpl.n	8007194 <ai_layers_post_init_all+0x18>
 800718a:	6a23      	ldr	r3, [r4, #32]
 800718c:	4620      	mov	r0, r4
 800718e:	b10b      	cbz	r3, 8007194 <ai_layers_post_init_all+0x18>
 8007190:	3501      	adds	r5, #1
 8007192:	4798      	blx	r3
 8007194:	6923      	ldr	r3, [r4, #16]
 8007196:	42a3      	cmp	r3, r4
 8007198:	461c      	mov	r4, r3
 800719a:	d001      	beq.n	80071a0 <ai_layers_post_init_all+0x24>
 800719c:	2b00      	cmp	r3, #0
 800719e:	d1f0      	bne.n	8007182 <ai_layers_post_init_all+0x6>
 80071a0:	4628      	mov	r0, r5
 80071a2:	bd38      	pop	{r3, r4, r5, pc}

080071a4 <ai_layers_forward_all>:
 80071a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071a8:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 80071ac:	4604      	mov	r4, r0
 80071ae:	f1b8 0f00 	cmp.w	r8, #0
 80071b2:	d02a      	beq.n	800720a <ai_layers_forward_all+0x66>
 80071b4:	6b41      	ldr	r1, [r0, #52]	; 0x34
 80071b6:	6381      	str	r1, [r0, #56]	; 0x38
 80071b8:	b319      	cbz	r1, 8007202 <ai_layers_forward_all+0x5e>
 80071ba:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80071bc:	2001      	movs	r0, #1
 80071be:	47c0      	blx	r8
 80071c0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80071c2:	b1f6      	cbz	r6, 8007202 <ai_layers_forward_all+0x5e>
 80071c4:	2700      	movs	r7, #0
 80071c6:	4631      	mov	r1, r6
 80071c8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80071ca:	2002      	movs	r0, #2
 80071cc:	47c0      	blx	r8
 80071ce:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80071d0:	4628      	mov	r0, r5
 80071d2:	696b      	ldr	r3, [r5, #20]
 80071d4:	4798      	blx	r3
 80071d6:	692e      	ldr	r6, [r5, #16]
 80071d8:	2003      	movs	r0, #3
 80071da:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80071dc:	42b5      	cmp	r5, r6
 80071de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80071e0:	d007      	beq.n	80071f2 <ai_layers_forward_all+0x4e>
 80071e2:	47c0      	blx	r8
 80071e4:	3701      	adds	r7, #1
 80071e6:	63a6      	str	r6, [r4, #56]	; 0x38
 80071e8:	2e00      	cmp	r6, #0
 80071ea:	d1ec      	bne.n	80071c6 <ai_layers_forward_all+0x22>
 80071ec:	4638      	mov	r0, r7
 80071ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f2:	2003      	movs	r0, #3
 80071f4:	3701      	adds	r7, #1
 80071f6:	47c0      	blx	r8
 80071f8:	2300      	movs	r3, #0
 80071fa:	4638      	mov	r0, r7
 80071fc:	63a3      	str	r3, [r4, #56]	; 0x38
 80071fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007202:	2700      	movs	r7, #0
 8007204:	4638      	mov	r0, r7
 8007206:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800720a:	6b45      	ldr	r5, [r0, #52]	; 0x34
 800720c:	6385      	str	r5, [r0, #56]	; 0x38
 800720e:	2d00      	cmp	r5, #0
 8007210:	d0f7      	beq.n	8007202 <ai_layers_forward_all+0x5e>
 8007212:	4647      	mov	r7, r8
 8007214:	696b      	ldr	r3, [r5, #20]
 8007216:	4628      	mov	r0, r5
 8007218:	4798      	blx	r3
 800721a:	462b      	mov	r3, r5
 800721c:	692d      	ldr	r5, [r5, #16]
 800721e:	429d      	cmp	r5, r3
 8007220:	d004      	beq.n	800722c <ai_layers_forward_all+0x88>
 8007222:	3701      	adds	r7, #1
 8007224:	63a5      	str	r5, [r4, #56]	; 0x38
 8007226:	2d00      	cmp	r5, #0
 8007228:	d1f4      	bne.n	8007214 <ai_layers_forward_all+0x70>
 800722a:	e7df      	b.n	80071ec <ai_layers_forward_all+0x48>
 800722c:	2300      	movs	r3, #0
 800722e:	3701      	adds	r7, #1
 8007230:	63a3      	str	r3, [r4, #56]	; 0x38
 8007232:	e7db      	b.n	80071ec <ai_layers_forward_all+0x48>

08007234 <ai_layers_destroy_all>:
 8007234:	b538      	push	{r3, r4, r5, lr}
 8007236:	2500      	movs	r5, #0
 8007238:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800723a:	b16c      	cbz	r4, 8007258 <ai_layers_destroy_all+0x24>
 800723c:	6863      	ldr	r3, [r4, #4]
 800723e:	075b      	lsls	r3, r3, #29
 8007240:	d504      	bpl.n	800724c <ai_layers_destroy_all+0x18>
 8007242:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007244:	4620      	mov	r0, r4
 8007246:	b10b      	cbz	r3, 800724c <ai_layers_destroy_all+0x18>
 8007248:	3501      	adds	r5, #1
 800724a:	4798      	blx	r3
 800724c:	6923      	ldr	r3, [r4, #16]
 800724e:	42a3      	cmp	r3, r4
 8007250:	461c      	mov	r4, r3
 8007252:	d001      	beq.n	8007258 <ai_layers_destroy_all+0x24>
 8007254:	2b00      	cmp	r3, #0
 8007256:	d1f0      	bne.n	800723a <ai_layers_destroy_all+0x6>
 8007258:	4628      	mov	r0, r5
 800725a:	bd38      	pop	{r3, r4, r5, pc}

0800725c <forward_dense>:
 800725c:	6983      	ldr	r3, [r0, #24]
 800725e:	881a      	ldrh	r2, [r3, #0]
 8007260:	2a00      	cmp	r2, #0
 8007262:	f000 80f0 	beq.w	8007446 <forward_dense+0x1ea>
 8007266:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726a:	ed2d 8b02 	vpush	{d8}
 800726e:	6858      	ldr	r0, [r3, #4]
 8007270:	b09b      	sub	sp, #108	; 0x6c
 8007272:	6845      	ldr	r5, [r0, #4]
 8007274:	b105      	cbz	r5, 8007278 <forward_dense+0x1c>
 8007276:	682d      	ldr	r5, [r5, #0]
 8007278:	2a01      	cmp	r2, #1
 800727a:	f000 840a 	beq.w	8007a92 <forward_dense+0x836>
 800727e:	6906      	ldr	r6, [r0, #16]
 8007280:	b106      	cbz	r6, 8007284 <forward_dense+0x28>
 8007282:	6836      	ldr	r6, [r6, #0]
 8007284:	2a02      	cmp	r2, #2
 8007286:	f000 80e0 	beq.w	800744a <forward_dense+0x1ee>
 800728a:	69c3      	ldr	r3, [r0, #28]
 800728c:	930d      	str	r3, [sp, #52]	; 0x34
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 83f1 	beq.w	8007a76 <forward_dense+0x81a>
 8007294:	4619      	mov	r1, r3
 8007296:	8b03      	ldrh	r3, [r0, #24]
 8007298:	6809      	ldr	r1, [r1, #0]
 800729a:	2b01      	cmp	r3, #1
 800729c:	910f      	str	r1, [sp, #60]	; 0x3c
 800729e:	f240 83ec 	bls.w	8007a7a <forward_dense+0x81e>
 80072a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	930d      	str	r3, [sp, #52]	; 0x34
 80072a8:	460b      	mov	r3, r1
 80072aa:	f8d3 8018 	ldr.w	r8, [r3, #24]
 80072ae:	2a03      	cmp	r2, #3
 80072b0:	68eb      	ldr	r3, [r5, #12]
 80072b2:	68f7      	ldr	r7, [r6, #12]
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	687c      	ldr	r4, [r7, #4]
 80072b8:	9317      	str	r3, [sp, #92]	; 0x5c
 80072ba:	f8d8 3000 	ldr.w	r3, [r8]
 80072be:	4621      	mov	r1, r4
 80072c0:	9419      	str	r4, [sp, #100]	; 0x64
 80072c2:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 80072c6:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 80072ca:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 80072ce:	fb01 f404 	mul.w	r4, r1, r4
 80072d2:	fa4e f10c 	asr.w	r1, lr, ip
 80072d6:	9116      	str	r1, [sp, #88]	; 0x58
 80072d8:	f000 83d8 	beq.w	8007a8c <forward_dense+0x830>
 80072dc:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80072de:	f3c3 4343 	ubfx	r3, r3, #17, #4
 80072e2:	2a00      	cmp	r2, #0
 80072e4:	f000 83c2 	beq.w	8007a6c <forward_dense+0x810>
 80072e8:	6812      	ldr	r2, [r2, #0]
 80072ea:	2a00      	cmp	r2, #0
 80072ec:	f000 83be 	beq.w	8007a6c <forward_dense+0x810>
 80072f0:	2b04      	cmp	r3, #4
 80072f2:	f8d2 9018 	ldr.w	r9, [r2, #24]
 80072f6:	f000 83a8 	beq.w	8007a4a <forward_dense+0x7ee>
 80072fa:	2b08      	cmp	r3, #8
 80072fc:	f000 83a5 	beq.w	8007a4a <forward_dense+0x7ee>
 8007300:	f04f 0a00 	mov.w	sl, #0
 8007304:	69ab      	ldr	r3, [r5, #24]
 8007306:	fb07 f404 	mul.w	r4, r7, r4
 800730a:	69b2      	ldr	r2, [r6, #24]
 800730c:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8007310:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007312:	6892      	ldr	r2, [r2, #8]
 8007314:	695b      	ldr	r3, [r3, #20]
 8007316:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800731a:	9206      	str	r2, [sp, #24]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	428a      	cmp	r2, r1
 8007320:	9110      	str	r1, [sp, #64]	; 0x40
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007326:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800732a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800732e:	900e      	str	r0, [sp, #56]	; 0x38
 8007330:	9303      	str	r3, [sp, #12]
 8007332:	f080 8380 	bcs.w	8007a36 <forward_dense+0x7da>
 8007336:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007338:	4654      	mov	r4, sl
 800733a:	4bb9      	ldr	r3, [pc, #740]	; (8007620 <forward_dense+0x3c4>)
 800733c:	46ca      	mov	sl, r9
 800733e:	08d0      	lsrs	r0, r2, #3
 8007340:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 8007624 <forward_dense+0x3c8>
 8007344:	4413      	add	r3, r2
 8007346:	9009      	str	r0, [sp, #36]	; 0x24
 8007348:	0099      	lsls	r1, r3, #2
 800734a:	f022 0301 	bic.w	r3, r2, #1
 800734e:	f002 0201 	and.w	r2, r2, #1
 8007352:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8007356:	9118      	str	r1, [sp, #96]	; 0x60
 8007358:	920a      	str	r2, [sp, #40]	; 0x28
 800735a:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 800735e:	9305      	str	r3, [sp, #20]
 8007360:	f101 0320 	add.w	r3, r1, #32
 8007364:	9207      	str	r2, [sp, #28]
 8007366:	9311      	str	r3, [sp, #68]	; 0x44
 8007368:	444b      	add	r3, r9
 800736a:	469b      	mov	fp, r3
 800736c:	930b      	str	r3, [sp, #44]	; 0x2c
 800736e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	689a      	ldr	r2, [r3, #8]
 8007374:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007376:	b10b      	cbz	r3, 800737c <forward_dense+0x120>
 8007378:	699b      	ldr	r3, [r3, #24]
 800737a:	689b      	ldr	r3, [r3, #8]
 800737c:	2c00      	cmp	r4, #0
 800737e:	f000 834b 	beq.w	8007a18 <forward_dense+0x7bc>
 8007382:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007384:	2904      	cmp	r1, #4
 8007386:	f000 826a 	beq.w	800785e <forward_dense+0x602>
 800738a:	9903      	ldr	r1, [sp, #12]
 800738c:	9806      	ldr	r0, [sp, #24]
 800738e:	4281      	cmp	r1, r0
 8007390:	f240 8356 	bls.w	8007a40 <forward_dense+0x7e4>
 8007394:	4686      	mov	lr, r0
 8007396:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007398:	eb00 090a 	add.w	r9, r0, sl
 800739c:	0941      	lsrs	r1, r0, #5
 800739e:	f10a 0004 	add.w	r0, sl, #4
 80073a2:	f8cd 9020 	str.w	r9, [sp, #32]
 80073a6:	9012      	str	r0, [sp, #72]	; 0x48
 80073a8:	1c48      	adds	r0, r1, #1
 80073aa:	00c9      	lsls	r1, r1, #3
 80073ac:	3110      	adds	r1, #16
 80073ae:	9115      	str	r1, [sp, #84]	; 0x54
 80073b0:	00c1      	lsls	r1, r0, #3
 80073b2:	9113      	str	r1, [sp, #76]	; 0x4c
 80073b4:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 80073b8:	9114      	str	r1, [sp, #80]	; 0x50
 80073ba:	f1a9 0104 	sub.w	r1, r9, #4
 80073be:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 80073c2:	910c      	str	r1, [sp, #48]	; 0x30
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 8128 	beq.w	800761a <forward_dense+0x3be>
 80073ca:	ecb3 5a01 	vldmia	r3!, {s10}
 80073ce:	f1b9 0f07 	cmp.w	r9, #7
 80073d2:	d83d      	bhi.n	8007450 <forward_dense+0x1f4>
 80073d4:	45da      	cmp	sl, fp
 80073d6:	d211      	bcs.n	80073fc <forward_dense+0x1a0>
 80073d8:	eddf 7a92 	vldr	s15, [pc, #584]	; 8007624 <forward_dense+0x3c8>
 80073dc:	4650      	mov	r0, sl
 80073de:	4615      	mov	r5, r2
 80073e0:	f815 1b01 	ldrb.w	r1, [r5], #1
 80073e4:	ecb0 7a01 	vldmia	r0!, {s14}
 80073e8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80073ec:	4558      	cmp	r0, fp
 80073ee:	edd1 6a00 	vldr	s13, [r1]
 80073f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 80073f6:	d3f3      	bcc.n	80073e0 <forward_dense+0x184>
 80073f8:	ee35 5a27 	vadd.f32	s10, s10, s15
 80073fc:	9904      	ldr	r1, [sp, #16]
 80073fe:	ecae 5a01 	vstmia	lr!, {s10}
 8007402:	440a      	add	r2, r1
 8007404:	9903      	ldr	r1, [sp, #12]
 8007406:	458e      	cmp	lr, r1
 8007408:	d3dc      	bcc.n	80073c4 <forward_dense+0x168>
 800740a:	9a06      	ldr	r2, [sp, #24]
 800740c:	1a8b      	subs	r3, r1, r2
 800740e:	3b01      	subs	r3, #1
 8007410:	f023 0303 	bic.w	r3, r3, #3
 8007414:	3304      	adds	r3, #4
 8007416:	18d3      	adds	r3, r2, r3
 8007418:	4619      	mov	r1, r3
 800741a:	9306      	str	r3, [sp, #24]
 800741c:	9b03      	ldr	r3, [sp, #12]
 800741e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007420:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007422:	4413      	add	r3, r2
 8007424:	9a07      	ldr	r2, [sp, #28]
 8007426:	4281      	cmp	r1, r0
 8007428:	9303      	str	r3, [sp, #12]
 800742a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800742c:	441a      	add	r2, r3
 800742e:	449b      	add	fp, r3
 8007430:	9207      	str	r2, [sp, #28]
 8007432:	9a05      	ldr	r2, [sp, #20]
 8007434:	441a      	add	r2, r3
 8007436:	9205      	str	r2, [sp, #20]
 8007438:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800743a:	4692      	mov	sl, r2
 800743c:	f080 82fb 	bcs.w	8007a36 <forward_dense+0x7da>
 8007440:	441a      	add	r2, r3
 8007442:	920b      	str	r2, [sp, #44]	; 0x2c
 8007444:	e793      	b.n	800736e <forward_dense+0x112>
 8007446:	6853      	ldr	r3, [r2, #4]
 8007448:	deff      	udf	#255	; 0xff
 800744a:	2300      	movs	r3, #0
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	deff      	udf	#255	; 0xff
 8007450:	f002 0103 	and.w	r1, r2, #3
 8007454:	2902      	cmp	r1, #2
 8007456:	f000 81e6 	beq.w	8007826 <forward_dense+0x5ca>
 800745a:	2903      	cmp	r1, #3
 800745c:	f000 80e4 	beq.w	8007628 <forward_dense+0x3cc>
 8007460:	2901      	cmp	r1, #1
 8007462:	f000 81ef 	beq.w	8007844 <forward_dense+0x5e8>
 8007466:	9908      	ldr	r1, [sp, #32]
 8007468:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8007624 <forward_dense+0x3c8>
 800746c:	458a      	cmp	sl, r1
 800746e:	f200 82e9 	bhi.w	8007a44 <forward_dense+0x7e8>
 8007472:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007474:	f102 0108 	add.w	r1, r2, #8
 8007478:	f10a 0020 	add.w	r0, sl, #32
 800747c:	18ae      	adds	r6, r5, r2
 800747e:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007482:	3108      	adds	r1, #8
 8007484:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8007488:	3020      	adds	r0, #32
 800748a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800748e:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8007492:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8007496:	edd5 7a00 	vldr	s15, [r5]
 800749a:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 800749e:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80074a2:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 80074a6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80074aa:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 80074ae:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 80074b2:	edd5 2a00 	vldr	s5, [r5]
 80074b6:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 80074ba:	eee2 7a83 	vfma.f32	s15, s5, s6
 80074be:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 80074c2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80074c6:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 80074ca:	ed95 3a00 	vldr	s6, [r5]
 80074ce:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80074d2:	eee3 7a23 	vfma.f32	s15, s6, s7
 80074d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80074da:	edd5 3a00 	vldr	s7, [r5]
 80074de:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80074e2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80074e6:	eee3 7a84 	vfma.f32	s15, s7, s8
 80074ea:	ed95 4a00 	vldr	s8, [r5]
 80074ee:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80074f2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80074f6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80074fa:	edd5 4a00 	vldr	s9, [r5]
 80074fe:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8007502:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007506:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800750a:	edd5 5a00 	vldr	s11, [r5]
 800750e:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8007512:	428e      	cmp	r6, r1
 8007514:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007518:	eee5 7a86 	vfma.f32	s15, s11, s12
 800751c:	ed95 6a00 	vldr	s12, [r5]
 8007520:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007524:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007528:	d1a9      	bne.n	800747e <forward_dense+0x222>
 800752a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800752c:	1850      	adds	r0, r2, r1
 800752e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007530:	4559      	cmp	r1, fp
 8007532:	d26f      	bcs.n	8007614 <forward_dense+0x3b8>
 8007534:	7805      	ldrb	r5, [r0, #0]
 8007536:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800753a:	edd5 7a00 	vldr	s15, [r5]
 800753e:	460d      	mov	r5, r1
 8007540:	ecf5 6a01 	vldmia	r5!, {s13}
 8007544:	45ab      	cmp	fp, r5
 8007546:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800754a:	d963      	bls.n	8007614 <forward_dense+0x3b8>
 800754c:	7845      	ldrb	r5, [r0, #1]
 800754e:	edd1 6a01 	vldr	s13, [r1, #4]
 8007552:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007556:	edd5 7a00 	vldr	s15, [r5]
 800755a:	f101 0508 	add.w	r5, r1, #8
 800755e:	45ab      	cmp	fp, r5
 8007560:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007564:	d956      	bls.n	8007614 <forward_dense+0x3b8>
 8007566:	7885      	ldrb	r5, [r0, #2]
 8007568:	edd1 6a02 	vldr	s13, [r1, #8]
 800756c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007570:	edd5 7a00 	vldr	s15, [r5]
 8007574:	f101 050c 	add.w	r5, r1, #12
 8007578:	45ab      	cmp	fp, r5
 800757a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800757e:	d949      	bls.n	8007614 <forward_dense+0x3b8>
 8007580:	78c5      	ldrb	r5, [r0, #3]
 8007582:	edd1 6a03 	vldr	s13, [r1, #12]
 8007586:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800758a:	edd5 7a00 	vldr	s15, [r5]
 800758e:	f101 0510 	add.w	r5, r1, #16
 8007592:	45ab      	cmp	fp, r5
 8007594:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007598:	d93c      	bls.n	8007614 <forward_dense+0x3b8>
 800759a:	7905      	ldrb	r5, [r0, #4]
 800759c:	edd1 6a04 	vldr	s13, [r1, #16]
 80075a0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80075a4:	edd5 7a00 	vldr	s15, [r5]
 80075a8:	f101 0514 	add.w	r5, r1, #20
 80075ac:	45ab      	cmp	fp, r5
 80075ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075b2:	d92f      	bls.n	8007614 <forward_dense+0x3b8>
 80075b4:	7945      	ldrb	r5, [r0, #5]
 80075b6:	edd1 6a05 	vldr	s13, [r1, #20]
 80075ba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80075be:	edd5 7a00 	vldr	s15, [r5]
 80075c2:	f101 0518 	add.w	r5, r1, #24
 80075c6:	45ab      	cmp	fp, r5
 80075c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075cc:	d922      	bls.n	8007614 <forward_dense+0x3b8>
 80075ce:	7985      	ldrb	r5, [r0, #6]
 80075d0:	edd1 6a06 	vldr	s13, [r1, #24]
 80075d4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80075d8:	edd5 7a00 	vldr	s15, [r5]
 80075dc:	f101 051c 	add.w	r5, r1, #28
 80075e0:	45ab      	cmp	fp, r5
 80075e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80075e6:	d915      	bls.n	8007614 <forward_dense+0x3b8>
 80075e8:	79c5      	ldrb	r5, [r0, #7]
 80075ea:	edd1 6a07 	vldr	s13, [r1, #28]
 80075ee:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80075f2:	edd5 7a00 	vldr	s15, [r5]
 80075f6:	f101 0520 	add.w	r5, r1, #32
 80075fa:	45ab      	cmp	fp, r5
 80075fc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007600:	d908      	bls.n	8007614 <forward_dense+0x3b8>
 8007602:	edd1 7a08 	vldr	s15, [r1, #32]
 8007606:	7a01      	ldrb	r1, [r0, #8]
 8007608:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800760c:	edd1 6a00 	vldr	s13, [r1]
 8007610:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007614:	ee35 5a07 	vadd.f32	s10, s10, s14
 8007618:	e6f0      	b.n	80073fc <forward_dense+0x1a0>
 800761a:	ed9f 5a02 	vldr	s10, [pc, #8]	; 8007624 <forward_dense+0x3c8>
 800761e:	e6d6      	b.n	80073ce <forward_dense+0x172>
 8007620:	3ffffff8 	.word	0x3ffffff8
 8007624:	00000000 	.word	0x00000000
 8007628:	eeb0 7a48 	vmov.f32	s14, s16
 800762c:	4650      	mov	r0, sl
 800762e:	4611      	mov	r1, r2
 8007630:	468c      	mov	ip, r1
 8007632:	4606      	mov	r6, r0
 8007634:	f81c 5b01 	ldrb.w	r5, [ip], #1
 8007638:	ecf6 7a01 	vldmia	r6!, {s15}
 800763c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007640:	edd5 6a00 	vldr	s13, [r5]
 8007644:	9d08      	ldr	r5, [sp, #32]
 8007646:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800764a:	42ae      	cmp	r6, r5
 800764c:	d866      	bhi.n	800771c <forward_dense+0x4c0>
 800764e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007650:	f101 0711 	add.w	r7, r1, #17
 8007654:	3109      	adds	r1, #9
 8007656:	eba5 0800 	sub.w	r8, r5, r0
 800765a:	3024      	adds	r0, #36	; 0x24
 800765c:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8007660:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8007664:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007668:	3108      	adds	r1, #8
 800766a:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800766e:	3020      	adds	r0, #32
 8007670:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007674:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8007678:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800767c:	edd5 7a00 	vldr	s15, [r5]
 8007680:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8007684:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8007688:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800768c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007690:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 8007694:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8007698:	edd5 2a00 	vldr	s5, [r5]
 800769c:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 80076a0:	eee2 7a83 	vfma.f32	s15, s5, s6
 80076a4:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 80076a8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80076ac:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 80076b0:	ed95 3a00 	vldr	s6, [r5]
 80076b4:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80076b8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80076bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80076c0:	edd5 3a00 	vldr	s7, [r5]
 80076c4:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80076c8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80076cc:	eee3 7a84 	vfma.f32	s15, s7, s8
 80076d0:	ed95 4a00 	vldr	s8, [r5]
 80076d4:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 80076d8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80076dc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80076e0:	edd5 4a00 	vldr	s9, [r5]
 80076e4:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80076e8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80076ec:	eee4 7aa5 	vfma.f32	s15, s9, s11
 80076f0:	edd5 5a00 	vldr	s11, [r5]
 80076f4:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80076f8:	428f      	cmp	r7, r1
 80076fa:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80076fe:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007702:	ed95 6a00 	vldr	s12, [r5]
 8007706:	eee6 7a26 	vfma.f32	s15, s12, s13
 800770a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800770e:	d1a9      	bne.n	8007664 <forward_dense+0x408>
 8007710:	f108 0801 	add.w	r8, r8, #1
 8007714:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8007718:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 800771c:	455e      	cmp	r6, fp
 800771e:	f4bf af79 	bcs.w	8007614 <forward_dense+0x3b8>
 8007722:	f89c 1000 	ldrb.w	r1, [ip]
 8007726:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800772a:	edd1 7a00 	vldr	s15, [r1]
 800772e:	4631      	mov	r1, r6
 8007730:	ecf1 6a01 	vldmia	r1!, {s13}
 8007734:	458b      	cmp	fp, r1
 8007736:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800773a:	f67f af6b 	bls.w	8007614 <forward_dense+0x3b8>
 800773e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8007742:	edd6 6a01 	vldr	s13, [r6, #4]
 8007746:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800774a:	edd1 7a00 	vldr	s15, [r1]
 800774e:	f106 0108 	add.w	r1, r6, #8
 8007752:	458b      	cmp	fp, r1
 8007754:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007758:	f67f af5c 	bls.w	8007614 <forward_dense+0x3b8>
 800775c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8007760:	edd6 6a02 	vldr	s13, [r6, #8]
 8007764:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007768:	edd1 7a00 	vldr	s15, [r1]
 800776c:	f106 010c 	add.w	r1, r6, #12
 8007770:	458b      	cmp	fp, r1
 8007772:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007776:	f67f af4d 	bls.w	8007614 <forward_dense+0x3b8>
 800777a:	f89c 1003 	ldrb.w	r1, [ip, #3]
 800777e:	edd6 6a03 	vldr	s13, [r6, #12]
 8007782:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007786:	edd1 7a00 	vldr	s15, [r1]
 800778a:	f106 0110 	add.w	r1, r6, #16
 800778e:	458b      	cmp	fp, r1
 8007790:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007794:	f67f af3e 	bls.w	8007614 <forward_dense+0x3b8>
 8007798:	f89c 1004 	ldrb.w	r1, [ip, #4]
 800779c:	edd6 6a04 	vldr	s13, [r6, #16]
 80077a0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80077a4:	edd1 7a00 	vldr	s15, [r1]
 80077a8:	f106 0114 	add.w	r1, r6, #20
 80077ac:	458b      	cmp	fp, r1
 80077ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077b2:	f67f af2f 	bls.w	8007614 <forward_dense+0x3b8>
 80077b6:	f89c 1005 	ldrb.w	r1, [ip, #5]
 80077ba:	edd6 6a05 	vldr	s13, [r6, #20]
 80077be:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80077c2:	edd1 7a00 	vldr	s15, [r1]
 80077c6:	f106 0118 	add.w	r1, r6, #24
 80077ca:	458b      	cmp	fp, r1
 80077cc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077d0:	f67f af20 	bls.w	8007614 <forward_dense+0x3b8>
 80077d4:	f89c 1006 	ldrb.w	r1, [ip, #6]
 80077d8:	edd6 6a06 	vldr	s13, [r6, #24]
 80077dc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80077e0:	edd1 7a00 	vldr	s15, [r1]
 80077e4:	f106 011c 	add.w	r1, r6, #28
 80077e8:	458b      	cmp	fp, r1
 80077ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80077ee:	f67f af11 	bls.w	8007614 <forward_dense+0x3b8>
 80077f2:	f89c 1007 	ldrb.w	r1, [ip, #7]
 80077f6:	edd6 6a07 	vldr	s13, [r6, #28]
 80077fa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80077fe:	edd1 7a00 	vldr	s15, [r1]
 8007802:	f106 0120 	add.w	r1, r6, #32
 8007806:	458b      	cmp	fp, r1
 8007808:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800780c:	f67f af02 	bls.w	8007614 <forward_dense+0x3b8>
 8007810:	f89c 1008 	ldrb.w	r1, [ip, #8]
 8007814:	edd6 7a08 	vldr	s15, [r6, #32]
 8007818:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800781c:	edd1 6a00 	vldr	s13, [r1]
 8007820:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007824:	e6f6      	b.n	8007614 <forward_dense+0x3b8>
 8007826:	eeb0 7a48 	vmov.f32	s14, s16
 800782a:	4650      	mov	r0, sl
 800782c:	4611      	mov	r1, r2
 800782e:	f811 5b01 	ldrb.w	r5, [r1], #1
 8007832:	ecf0 7a01 	vldmia	r0!, {s15}
 8007836:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800783a:	edd5 6a00 	vldr	s13, [r5]
 800783e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007842:	e6f5      	b.n	8007630 <forward_dense+0x3d4>
 8007844:	4611      	mov	r1, r2
 8007846:	edda 7a00 	vldr	s15, [sl]
 800784a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800784c:	f811 5b01 	ldrb.w	r5, [r1], #1
 8007850:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007854:	ed95 7a00 	vldr	s14, [r5]
 8007858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800785c:	e7e7      	b.n	800782e <forward_dense+0x5d2>
 800785e:	9803      	ldr	r0, [sp, #12]
 8007860:	9906      	ldr	r1, [sp, #24]
 8007862:	4288      	cmp	r0, r1
 8007864:	f67f adda 	bls.w	800741c <forward_dense+0x1c0>
 8007868:	9809      	ldr	r0, [sp, #36]	; 0x24
 800786a:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 800786e:	468b      	mov	fp, r1
 8007870:	f100 0c01 	add.w	ip, r0, #1
 8007874:	9805      	ldr	r0, [sp, #20]
 8007876:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800787a:	3801      	subs	r0, #1
 800787c:	9008      	str	r0, [sp, #32]
 800787e:	2b00      	cmp	r3, #0
 8007880:	f000 80bf 	beq.w	8007a02 <forward_dense+0x7a6>
 8007884:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007886:	ecf3 2a01 	vldmia	r3!, {s5}
 800788a:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 8007624 <forward_dense+0x3c8>
 800788e:	2900      	cmp	r1, #0
 8007890:	f000 80bf 	beq.w	8007a12 <forward_dense+0x7b6>
 8007894:	1d10      	adds	r0, r2, #4
 8007896:	f10a 0120 	add.w	r1, sl, #32
 800789a:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 800789e:	3004      	adds	r0, #4
 80078a0:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 80078a4:	3120      	adds	r1, #32
 80078a6:	f007 0e0f 	and.w	lr, r7, #15
 80078aa:	093f      	lsrs	r7, r7, #4
 80078ac:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 80078b0:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 80078b4:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 80078b8:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80078bc:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 80078c0:	edde 7a00 	vldr	s15, [lr]
 80078c4:	ed97 3a00 	vldr	s6, [r7]
 80078c8:	0937      	lsrs	r7, r6, #4
 80078ca:	ee67 7a82 	vmul.f32	s15, s15, s4
 80078ce:	f006 060f 	and.w	r6, r6, #15
 80078d2:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80078d6:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 80078da:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80078de:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 80078e2:	eee3 7a04 	vfma.f32	s15, s6, s8
 80078e6:	ed97 3a00 	vldr	s6, [r7]
 80078ea:	ed96 4a00 	vldr	s8, [r6]
 80078ee:	092e      	lsrs	r6, r5, #4
 80078f0:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 80078f4:	f005 050f 	and.w	r5, r5, #15
 80078f8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80078fc:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 8007900:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007904:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 8007908:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 800790c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007910:	eee4 7a05 	vfma.f32	s15, s8, s10
 8007914:	ed96 4a00 	vldr	s8, [r6]
 8007918:	ed95 5a00 	vldr	s10, [r5]
 800791c:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 8007920:	4560      	cmp	r0, ip
 8007922:	ea4f 1615 	mov.w	r6, r5, lsr #4
 8007926:	f005 050f 	and.w	r5, r5, #15
 800792a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800792e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007932:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007936:	eee5 7a06 	vfma.f32	s15, s10, s12
 800793a:	ed96 5a00 	vldr	s10, [r6]
 800793e:	ed95 6a00 	vldr	s12, [r5]
 8007942:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007946:	eee6 7a26 	vfma.f32	s15, s12, s13
 800794a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800794e:	d1a4      	bne.n	800789a <forward_dense+0x63e>
 8007950:	f1ac 0804 	sub.w	r8, ip, #4
 8007954:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8007958:	9905      	ldr	r1, [sp, #20]
 800795a:	458e      	cmp	lr, r1
 800795c:	d229      	bcs.n	80079b2 <forward_dense+0x756>
 800795e:	9908      	ldr	r1, [sp, #32]
 8007960:	f10e 0008 	add.w	r0, lr, #8
 8007964:	f108 36ff 	add.w	r6, r8, #4294967295
 8007968:	eba1 070e 	sub.w	r7, r1, lr
 800796c:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 8007970:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8007974:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007978:	3008      	adds	r0, #8
 800797a:	ed50 5a03 	vldr	s11, [r0, #-12]
 800797e:	f001 050f 	and.w	r5, r1, #15
 8007982:	0909      	lsrs	r1, r1, #4
 8007984:	ed50 6a04 	vldr	s13, [r0, #-16]
 8007988:	42b7      	cmp	r7, r6
 800798a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800798e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007992:	edd5 7a00 	vldr	s15, [r5]
 8007996:	ed91 6a00 	vldr	s12, [r1]
 800799a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800799e:	eee6 7a26 	vfma.f32	s15, s12, s13
 80079a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80079a6:	d1e5      	bne.n	8007974 <forward_dense+0x718>
 80079a8:	f109 0901 	add.w	r9, r9, #1
 80079ac:	44c8      	add	r8, r9
 80079ae:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 80079b2:	990a      	ldr	r1, [sp, #40]	; 0x28
 80079b4:	b1c1      	cbz	r1, 80079e8 <forward_dense+0x78c>
 80079b6:	f898 1000 	ldrb.w	r1, [r8]
 80079ba:	edde 7a00 	vldr	s15, [lr]
 80079be:	0909      	lsrs	r1, r1, #4
 80079c0:	9804      	ldr	r0, [sp, #16]
 80079c2:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80079c6:	4402      	add	r2, r0
 80079c8:	4484      	add	ip, r0
 80079ca:	edd1 6a00 	vldr	s13, [r1]
 80079ce:	9903      	ldr	r1, [sp, #12]
 80079d0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80079d4:	ee72 2a87 	vadd.f32	s5, s5, s14
 80079d8:	eceb 2a01 	vstmia	fp!, {s5}
 80079dc:	4559      	cmp	r1, fp
 80079de:	f63f af4e 	bhi.w	800787e <forward_dense+0x622>
 80079e2:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80079e6:	e510      	b.n	800740a <forward_dense+0x1ae>
 80079e8:	9904      	ldr	r1, [sp, #16]
 80079ea:	ee32 7a87 	vadd.f32	s14, s5, s14
 80079ee:	440a      	add	r2, r1
 80079f0:	448c      	add	ip, r1
 80079f2:	9903      	ldr	r1, [sp, #12]
 80079f4:	ecab 7a01 	vstmia	fp!, {s14}
 80079f8:	458b      	cmp	fp, r1
 80079fa:	d2f2      	bcs.n	80079e2 <forward_dense+0x786>
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	f47f af41 	bne.w	8007884 <forward_dense+0x628>
 8007a02:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007a04:	eef0 2a48 	vmov.f32	s5, s16
 8007a08:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8007a98 <forward_dense+0x83c>
 8007a0c:	2900      	cmp	r1, #0
 8007a0e:	f47f af41 	bne.w	8007894 <forward_dense+0x638>
 8007a12:	46d6      	mov	lr, sl
 8007a14:	4690      	mov	r8, r2
 8007a16:	e79f      	b.n	8007958 <forward_dense+0x6fc>
 8007a18:	9819      	ldr	r0, [sp, #100]	; 0x64
 8007a1a:	4651      	mov	r1, sl
 8007a1c:	9d06      	ldr	r5, [sp, #24]
 8007a1e:	9001      	str	r0, [sp, #4]
 8007a20:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8007a22:	9000      	str	r0, [sp, #0]
 8007a24:	4628      	mov	r0, r5
 8007a26:	f000 fbcd 	bl	80081c4 <forward_lite_dense_if32of32wf32>
 8007a2a:	462b      	mov	r3, r5
 8007a2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a2e:	4413      	add	r3, r2
 8007a30:	4619      	mov	r1, r3
 8007a32:	9306      	str	r3, [sp, #24]
 8007a34:	e4f2      	b.n	800741c <forward_dense+0x1c0>
 8007a36:	b01b      	add	sp, #108	; 0x6c
 8007a38:	ecbd 8b02 	vpop	{d8}
 8007a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a40:	4601      	mov	r1, r0
 8007a42:	e4eb      	b.n	800741c <forward_dense+0x1c0>
 8007a44:	4651      	mov	r1, sl
 8007a46:	4610      	mov	r0, r2
 8007a48:	e572      	b.n	8007530 <forward_dense+0x2d4>
 8007a4a:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8007a4e:	f1b9 0f00 	cmp.w	r9, #0
 8007a52:	d016      	beq.n	8007a82 <forward_dense+0x826>
 8007a54:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007a58:	f000 fe2e 	bl	80086b8 <ai_array_get_byte_size>
 8007a5c:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8007a60:	4602      	mov	r2, r0
 8007a62:	4640      	mov	r0, r8
 8007a64:	4651      	mov	r1, sl
 8007a66:	f000 fd33 	bl	80084d0 <st_int8_copy>
 8007a6a:	e44b      	b.n	8007304 <forward_dense+0xa8>
 8007a6c:	2b04      	cmp	r3, #4
 8007a6e:	d00a      	beq.n	8007a86 <forward_dense+0x82a>
 8007a70:	f04f 0900 	mov.w	r9, #0
 8007a74:	e441      	b.n	80072fa <forward_dense+0x9e>
 8007a76:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a78:	e417      	b.n	80072aa <forward_dense+0x4e>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	930d      	str	r3, [sp, #52]	; 0x34
 8007a7e:	460b      	mov	r3, r1
 8007a80:	e413      	b.n	80072aa <forward_dense+0x4e>
 8007a82:	46c2      	mov	sl, r8
 8007a84:	e43e      	b.n	8007304 <forward_dense+0xa8>
 8007a86:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8007a8a:	e43b      	b.n	8007304 <forward_dense+0xa8>
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	deff      	udf	#255	; 0xff
 8007a92:	2300      	movs	r3, #0
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	deff      	udf	#255	; 0xff
 8007a98:	00000000 	.word	0x00000000

08007a9c <forward_sigmoid>:
 8007a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a9e:	ed2d 8b02 	vpush	{d8}
 8007aa2:	6982      	ldr	r2, [r0, #24]
 8007aa4:	8813      	ldrh	r3, [r2, #0]
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d03b      	beq.n	8007b22 <forward_sigmoid+0x86>
 8007aaa:	6852      	ldr	r2, [r2, #4]
 8007aac:	6854      	ldr	r4, [r2, #4]
 8007aae:	b104      	cbz	r4, 8007ab2 <forward_sigmoid+0x16>
 8007ab0:	6824      	ldr	r4, [r4, #0]
 8007ab2:	2b01      	cmp	r3, #1
 8007ab4:	d034      	beq.n	8007b20 <forward_sigmoid+0x84>
 8007ab6:	6915      	ldr	r5, [r2, #16]
 8007ab8:	b105      	cbz	r5, 8007abc <forward_sigmoid+0x20>
 8007aba:	682d      	ldr	r5, [r5, #0]
 8007abc:	68a3      	ldr	r3, [r4, #8]
 8007abe:	0a1b      	lsrs	r3, r3, #8
 8007ac0:	d031      	beq.n	8007b26 <forward_sigmoid+0x8a>
 8007ac2:	68e0      	ldr	r0, [r4, #12]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007aca:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007ace:	4298      	cmp	r0, r3
 8007ad0:	fb01 f202 	mul.w	r2, r1, r2
 8007ad4:	d1f9      	bne.n	8007aca <forward_sigmoid+0x2e>
 8007ad6:	69a7      	ldr	r7, [r4, #24]
 8007ad8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007adc:	69a9      	ldr	r1, [r5, #24]
 8007ade:	4413      	add	r3, r2
 8007ae0:	68ba      	ldr	r2, [r7, #8]
 8007ae2:	688e      	ldr	r6, [r1, #8]
 8007ae4:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8007ae8:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8007aec:	42aa      	cmp	r2, r5
 8007aee:	d814      	bhi.n	8007b1a <forward_sigmoid+0x7e>
 8007af0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007af4:	3504      	adds	r5, #4
 8007af6:	3604      	adds	r6, #4
 8007af8:	462c      	mov	r4, r5
 8007afa:	ed35 0a01 	vldmdb	r5!, {s0}
 8007afe:	eeb1 0a40 	vneg.f32	s0, s0
 8007b02:	3c08      	subs	r4, #8
 8007b04:	f003 fad0 	bl	800b0a8 <expf>
 8007b08:	ee30 0a08 	vadd.f32	s0, s0, s16
 8007b0c:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8007b10:	ed66 7a01 	vstmdb	r6!, {s15}
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	42a3      	cmp	r3, r4
 8007b18:	d9ee      	bls.n	8007af8 <forward_sigmoid+0x5c>
 8007b1a:	ecbd 8b02 	vpop	{d8}
 8007b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007b20:	2300      	movs	r3, #0
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	deff      	udf	#255	; 0xff
 8007b26:	69ab      	ldr	r3, [r5, #24]
 8007b28:	69a7      	ldr	r7, [r4, #24]
 8007b2a:	689e      	ldr	r6, [r3, #8]
 8007b2c:	68bd      	ldr	r5, [r7, #8]
 8007b2e:	e7df      	b.n	8007af0 <forward_sigmoid+0x54>

08007b30 <nl_func_relu_array_f32>:
 8007b30:	b410      	push	{r4}
 8007b32:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8007b36:	698c      	ldr	r4, [r1, #24]
 8007b38:	6981      	ldr	r1, [r0, #24]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	68a0      	ldr	r0, [r4, #8]
 8007b3e:	6889      	ldr	r1, [r1, #8]
 8007b40:	009a      	lsls	r2, r3, #2
 8007b42:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8007b46:	4298      	cmp	r0, r3
 8007b48:	d80f      	bhi.n	8007b6a <nl_func_relu_array_f32+0x3a>
 8007b4a:	3204      	adds	r2, #4
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8007b70 <nl_func_relu_array_f32+0x40>
 8007b52:	4411      	add	r1, r2
 8007b54:	461a      	mov	r2, r3
 8007b56:	ed73 7a01 	vldmdb	r3!, {s15}
 8007b5a:	3a08      	subs	r2, #8
 8007b5c:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8007b60:	ed61 7a01 	vstmdb	r1!, {s15}
 8007b64:	68a0      	ldr	r0, [r4, #8]
 8007b66:	4290      	cmp	r0, r2
 8007b68:	d9f4      	bls.n	8007b54 <nl_func_relu_array_f32+0x24>
 8007b6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b6e:	4770      	bx	lr
 8007b70:	00000000 	.word	0x00000000

08007b74 <array_f32_identity>:
 8007b74:	6980      	ldr	r0, [r0, #24]
 8007b76:	698b      	ldr	r3, [r1, #24]
 8007b78:	4298      	cmp	r0, r3
 8007b7a:	d004      	beq.n	8007b86 <array_f32_identity+0x12>
 8007b7c:	68c1      	ldr	r1, [r0, #12]
 8007b7e:	0092      	lsls	r2, r2, #2
 8007b80:	68d8      	ldr	r0, [r3, #12]
 8007b82:	f000 bca5 	b.w	80084d0 <st_int8_copy>
 8007b86:	4770      	bx	lr

08007b88 <forward_rnn>:
 8007b88:	6983      	ldr	r3, [r0, #24]
 8007b8a:	881a      	ldrh	r2, [r3, #0]
 8007b8c:	2a00      	cmp	r2, #0
 8007b8e:	f000 82e8 	beq.w	8008162 <forward_rnn+0x5da>
 8007b92:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b96:	ed2d 8b0c 	vpush	{d8-d13}
 8007b9a:	6859      	ldr	r1, [r3, #4]
 8007b9c:	b0a3      	sub	sp, #140	; 0x8c
 8007b9e:	4606      	mov	r6, r0
 8007ba0:	684b      	ldr	r3, [r1, #4]
 8007ba2:	930b      	str	r3, [sp, #44]	; 0x2c
 8007ba4:	b10b      	cbz	r3, 8007baa <forward_rnn+0x22>
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	930b      	str	r3, [sp, #44]	; 0x2c
 8007baa:	2a01      	cmp	r2, #1
 8007bac:	f000 8303 	beq.w	80081b6 <forward_rnn+0x62e>
 8007bb0:	690b      	ldr	r3, [r1, #16]
 8007bb2:	b103      	cbz	r3, 8007bb6 <forward_rnn+0x2e>
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2a02      	cmp	r2, #2
 8007bb8:	f000 82fa 	beq.w	80081b0 <forward_rnn+0x628>
 8007bbc:	69cc      	ldr	r4, [r1, #28]
 8007bbe:	940a      	str	r4, [sp, #40]	; 0x28
 8007bc0:	2c00      	cmp	r4, #0
 8007bc2:	f000 82d0 	beq.w	8008166 <forward_rnn+0x5de>
 8007bc6:	8b08      	ldrh	r0, [r1, #24]
 8007bc8:	6825      	ldr	r5, [r4, #0]
 8007bca:	2801      	cmp	r0, #1
 8007bcc:	9510      	str	r5, [sp, #64]	; 0x40
 8007bce:	bf8c      	ite	hi
 8007bd0:	6860      	ldrhi	r0, [r4, #4]
 8007bd2:	2000      	movls	r0, #0
 8007bd4:	900f      	str	r0, [sp, #60]	; 0x3c
 8007bd6:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8007bd8:	68c5      	ldr	r5, [r0, #12]
 8007bda:	e9d4 0402 	ldrd	r0, r4, [r4, #8]
 8007bde:	940a      	str	r4, [sp, #40]	; 0x28
 8007be0:	68dc      	ldr	r4, [r3, #12]
 8007be2:	699b      	ldr	r3, [r3, #24]
 8007be4:	68e7      	ldr	r7, [r4, #12]
 8007be6:	689c      	ldr	r4, [r3, #8]
 8007be8:	68eb      	ldr	r3, [r5, #12]
 8007bea:	9414      	str	r4, [sp, #80]	; 0x50
 8007bec:	930d      	str	r3, [sp, #52]	; 0x34
 8007bee:	69f4      	ldr	r4, [r6, #28]
 8007bf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bf2:	686d      	ldr	r5, [r5, #4]
 8007bf4:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8007bf8:	b113      	cbz	r3, 8007c00 <forward_rnn+0x78>
 8007bfa:	699b      	ldr	r3, [r3, #24]
 8007bfc:	689b      	ldr	r3, [r3, #8]
 8007bfe:	930a      	str	r3, [sp, #40]	; 0x28
 8007c00:	2a03      	cmp	r2, #3
 8007c02:	f000 82d2 	beq.w	80081aa <forward_rnn+0x622>
 8007c06:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8007c08:	b103      	cbz	r3, 8007c0c <forward_rnn+0x84>
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	6a32      	ldr	r2, [r6, #32]
 8007c0e:	9211      	str	r2, [sp, #68]	; 0x44
 8007c10:	2a00      	cmp	r2, #0
 8007c12:	f000 82c7 	beq.w	80081a4 <forward_rnn+0x61c>
 8007c16:	699a      	ldr	r2, [r3, #24]
 8007c18:	6983      	ldr	r3, [r0, #24]
 8007c1a:	2000      	movs	r0, #0
 8007c1c:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8007c20:	00e2      	lsls	r2, r4, #3
 8007c22:	689b      	ldr	r3, [r3, #8]
 8007c24:	4649      	mov	r1, r9
 8007c26:	9312      	str	r3, [sp, #72]	; 0x48
 8007c28:	eb09 030a 	add.w	r3, r9, sl
 8007c2c:	9307      	str	r3, [sp, #28]
 8007c2e:	f000 fbf1 	bl	8008414 <st_int8_fill>
 8007c32:	2f01      	cmp	r7, #1
 8007c34:	f240 82a8 	bls.w	8008188 <forward_rnn+0x600>
 8007c38:	940c      	str	r4, [sp, #48]	; 0x30
 8007c3a:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8007c3e:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	f000 8289 	beq.w	800815a <forward_rnn+0x5d2>
 8007c48:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	9308      	str	r3, [sp, #32]
 8007c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c52:	930e      	str	r3, [sp, #56]	; 0x38
 8007c54:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
 8007c58:	b173      	cbz	r3, 8007c78 <forward_rnn+0xf0>
 8007c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c5c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007c62:	fb02 f303 	mul.w	r3, r2, r3
 8007c66:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8007c6a:	9314      	str	r3, [sp, #80]	; 0x50
 8007c6c:	ebc2 7382 	rsb	r3, r2, r2, lsl #30
 8007c70:	009b      	lsls	r3, r3, #2
 8007c72:	9315      	str	r3, [sp, #84]	; 0x54
 8007c74:	4253      	negs	r3, r2
 8007c76:	930c      	str	r3, [sp, #48]	; 0x30
 8007c78:	f1a5 0310 	sub.w	r3, r5, #16
 8007c7c:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8007c80:	f004 060f 	and.w	r6, r4, #15
 8007c84:	091b      	lsrs	r3, r3, #4
 8007c86:	3301      	adds	r3, #1
 8007c88:	019b      	lsls	r3, r3, #6
 8007c8a:	9302      	str	r3, [sp, #8]
 8007c8c:	f1a4 0310 	sub.w	r3, r4, #16
 8007c90:	091b      	lsrs	r3, r3, #4
 8007c92:	3301      	adds	r3, #1
 8007c94:	019b      	lsls	r3, r3, #6
 8007c96:	9303      	str	r3, [sp, #12]
 8007c98:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007c9a:	4453      	add	r3, sl
 8007c9c:	9301      	str	r3, [sp, #4]
 8007c9e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007ca0:	fb08 f303 	mul.w	r3, r8, r3
 8007ca4:	9313      	str	r3, [sp, #76]	; 0x4c
 8007ca6:	9b08      	ldr	r3, [sp, #32]
 8007ca8:	fb08 f303 	mul.w	r3, r8, r3
 8007cac:	9309      	str	r3, [sp, #36]	; 0x24
 8007cae:	9b08      	ldr	r3, [sp, #32]
 8007cb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007cb2:	4413      	add	r3, r2
 8007cb4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007cb6:	9308      	str	r3, [sp, #32]
 8007cb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007cba:	699b      	ldr	r3, [r3, #24]
 8007cbc:	689b      	ldr	r3, [r3, #8]
 8007cbe:	eb03 0e02 	add.w	lr, r3, r2
 8007cc2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	689f      	ldr	r7, [r3, #8]
 8007cc8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007cca:	699b      	ldr	r3, [r3, #24]
 8007ccc:	6898      	ldr	r0, [r3, #8]
 8007cce:	2c00      	cmp	r4, #0
 8007cd0:	f000 8204 	beq.w	80080dc <forward_rnn+0x554>
 8007cd4:	9b02      	ldr	r3, [sp, #8]
 8007cd6:	9907      	ldr	r1, [sp, #28]
 8007cd8:	4473      	add	r3, lr
 8007cda:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 8007cde:	9304      	str	r3, [sp, #16]
 8007ce0:	9b03      	ldr	r3, [sp, #12]
 8007ce2:	444b      	add	r3, r9
 8007ce4:	9306      	str	r3, [sp, #24]
 8007ce6:	f005 030f 	and.w	r3, r5, #15
 8007cea:	9305      	str	r3, [sp, #20]
 8007cec:	ecbc 0a01 	vldmia	ip!, {s0}
 8007cf0:	2d0f      	cmp	r5, #15
 8007cf2:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8007fd8 <forward_rnn+0x450>
 8007cf6:	eca1 0a01 	vstmia	r1!, {s0}
 8007cfa:	f240 8212 	bls.w	8008122 <forward_rnn+0x59a>
 8007cfe:	f10e 0240 	add.w	r2, lr, #64	; 0x40
 8007d02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007d06:	46ab      	mov	fp, r5
 8007d08:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8007d0c:	f1ab 0b10 	sub.w	fp, fp, #16
 8007d10:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8007d14:	3340      	adds	r3, #64	; 0x40
 8007d16:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8007d1a:	f1bb 0f0f 	cmp.w	fp, #15
 8007d1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d22:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8007d26:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8007d2a:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8007d2e:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 8007d32:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007d36:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 8007d3a:	ed52 da1d 	vldr	s27, [r2, #-116]	; 0xffffff8c
 8007d3e:	ed12 da1c 	vldr	s26, [r2, #-112]	; 0xffffff90
 8007d42:	ed53 ca1c 	vldr	s25, [r3, #-112]	; 0xffffff90
 8007d46:	ed12 ca1b 	vldr	s24, [r2, #-108]	; 0xffffff94
 8007d4a:	ed53 ba1b 	vldr	s23, [r3, #-108]	; 0xffffff94
 8007d4e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007d52:	ed12 ba1a 	vldr	s22, [r2, #-104]	; 0xffffff98
 8007d56:	ed53 aa1a 	vldr	s21, [r3, #-104]	; 0xffffff98
 8007d5a:	ed12 aa19 	vldr	s20, [r2, #-100]	; 0xffffff9c
 8007d5e:	ed53 9a19 	vldr	s19, [r3, #-100]	; 0xffffff9c
 8007d62:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8007d66:	ed53 8a18 	vldr	s17, [r3, #-96]	; 0xffffffa0
 8007d6a:	eeed 7aa6 	vfma.f32	s15, s27, s13
 8007d6e:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8007d72:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 8007d76:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 8007d7a:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 8007d7e:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 8007d82:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 8007d86:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8007d8a:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8007d8e:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8007d92:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8007d96:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8007d9a:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8007d9e:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8007da2:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8007da6:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8007daa:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8007dae:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8007db2:	eeea 7a29 	vfma.f32	s15, s20, s19
 8007db6:	eee9 7a28 	vfma.f32	s15, s18, s17
 8007dba:	eee8 7a20 	vfma.f32	s15, s16, s1
 8007dbe:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007dc2:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007dc6:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007dca:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007dce:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007dd2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007dd6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007dda:	d895      	bhi.n	8007d08 <forward_rnn+0x180>
 8007ddc:	9b02      	ldr	r3, [sp, #8]
 8007dde:	eb07 0b03 	add.w	fp, r7, r3
 8007de2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d075      	beq.n	8007ed6 <forward_rnn+0x34e>
 8007dea:	edd2 6a00 	vldr	s13, [r2]
 8007dee:	2b01      	cmp	r3, #1
 8007df0:	eddb 7a00 	vldr	s15, [fp]
 8007df4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007df8:	d06d      	beq.n	8007ed6 <forward_rnn+0x34e>
 8007dfa:	edd2 6a01 	vldr	s13, [r2, #4]
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	eddb 7a01 	vldr	s15, [fp, #4]
 8007e04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e08:	d065      	beq.n	8007ed6 <forward_rnn+0x34e>
 8007e0a:	edd2 6a02 	vldr	s13, [r2, #8]
 8007e0e:	2b03      	cmp	r3, #3
 8007e10:	eddb 7a02 	vldr	s15, [fp, #8]
 8007e14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e18:	d05d      	beq.n	8007ed6 <forward_rnn+0x34e>
 8007e1a:	edd2 6a03 	vldr	s13, [r2, #12]
 8007e1e:	2b04      	cmp	r3, #4
 8007e20:	eddb 7a03 	vldr	s15, [fp, #12]
 8007e24:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e28:	d055      	beq.n	8007ed6 <forward_rnn+0x34e>
 8007e2a:	edd2 6a04 	vldr	s13, [r2, #16]
 8007e2e:	2b05      	cmp	r3, #5
 8007e30:	eddb 7a04 	vldr	s15, [fp, #16]
 8007e34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e38:	d04d      	beq.n	8007ed6 <forward_rnn+0x34e>
 8007e3a:	edd2 6a05 	vldr	s13, [r2, #20]
 8007e3e:	2b06      	cmp	r3, #6
 8007e40:	eddb 7a05 	vldr	s15, [fp, #20]
 8007e44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e48:	d045      	beq.n	8007ed6 <forward_rnn+0x34e>
 8007e4a:	edd2 6a06 	vldr	s13, [r2, #24]
 8007e4e:	2b07      	cmp	r3, #7
 8007e50:	eddb 7a06 	vldr	s15, [fp, #24]
 8007e54:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e58:	d03d      	beq.n	8007ed6 <forward_rnn+0x34e>
 8007e5a:	edd2 6a07 	vldr	s13, [r2, #28]
 8007e5e:	2b08      	cmp	r3, #8
 8007e60:	eddb 7a07 	vldr	s15, [fp, #28]
 8007e64:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e68:	d035      	beq.n	8007ed6 <forward_rnn+0x34e>
 8007e6a:	edd2 6a08 	vldr	s13, [r2, #32]
 8007e6e:	2b09      	cmp	r3, #9
 8007e70:	eddb 7a08 	vldr	s15, [fp, #32]
 8007e74:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e78:	d02d      	beq.n	8007ed6 <forward_rnn+0x34e>
 8007e7a:	edd2 6a09 	vldr	s13, [r2, #36]	; 0x24
 8007e7e:	2b0a      	cmp	r3, #10
 8007e80:	eddb 7a09 	vldr	s15, [fp, #36]	; 0x24
 8007e84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e88:	d025      	beq.n	8007ed6 <forward_rnn+0x34e>
 8007e8a:	edd2 6a0a 	vldr	s13, [r2, #40]	; 0x28
 8007e8e:	2b0b      	cmp	r3, #11
 8007e90:	eddb 7a0a 	vldr	s15, [fp, #40]	; 0x28
 8007e94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e98:	d01d      	beq.n	8007ed6 <forward_rnn+0x34e>
 8007e9a:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
 8007e9e:	2b0c      	cmp	r3, #12
 8007ea0:	eddb 7a0b 	vldr	s15, [fp, #44]	; 0x2c
 8007ea4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ea8:	d015      	beq.n	8007ed6 <forward_rnn+0x34e>
 8007eaa:	edd2 6a0c 	vldr	s13, [r2, #48]	; 0x30
 8007eae:	3b0d      	subs	r3, #13
 8007eb0:	eddb 7a0c 	vldr	s15, [fp, #48]	; 0x30
 8007eb4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007eb8:	d00d      	beq.n	8007ed6 <forward_rnn+0x34e>
 8007eba:	edd2 6a0d 	vldr	s13, [r2, #52]	; 0x34
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	eddb 7a0d 	vldr	s15, [fp, #52]	; 0x34
 8007ec4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ec8:	d005      	beq.n	8007ed6 <forward_rnn+0x34e>
 8007eca:	eddb 6a0e 	vldr	s13, [fp, #56]	; 0x38
 8007ece:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8007ed2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ed6:	ee30 0a07 	vadd.f32	s0, s0, s14
 8007eda:	2c0f      	cmp	r4, #15
 8007edc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8007fd8 <forward_rnn+0x450>
 8007ee0:	ed01 0a01 	vstr	s0, [r1, #-4]
 8007ee4:	f240 8119 	bls.w	800811a <forward_rnn+0x592>
 8007ee8:	f109 0240 	add.w	r2, r9, #64	; 0x40
 8007eec:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8007ef0:	46a3      	mov	fp, r4
 8007ef2:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8007ef6:	f1ab 0b10 	sub.w	fp, fp, #16
 8007efa:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8007efe:	3340      	adds	r3, #64	; 0x40
 8007f00:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8007f04:	f1bb 0f0f 	cmp.w	fp, #15
 8007f08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007f0c:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8007f10:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8007f14:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8007f18:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 8007f1c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007f20:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 8007f24:	ed52 da1d 	vldr	s27, [r2, #-116]	; 0xffffff8c
 8007f28:	ed12 da1c 	vldr	s26, [r2, #-112]	; 0xffffff90
 8007f2c:	ed53 ca1c 	vldr	s25, [r3, #-112]	; 0xffffff90
 8007f30:	ed12 ca1b 	vldr	s24, [r2, #-108]	; 0xffffff94
 8007f34:	ed53 ba1b 	vldr	s23, [r3, #-108]	; 0xffffff94
 8007f38:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007f3c:	ed12 ba1a 	vldr	s22, [r2, #-104]	; 0xffffff98
 8007f40:	ed53 aa1a 	vldr	s21, [r3, #-104]	; 0xffffff98
 8007f44:	ed12 aa19 	vldr	s20, [r2, #-100]	; 0xffffff9c
 8007f48:	ed53 9a19 	vldr	s19, [r3, #-100]	; 0xffffff9c
 8007f4c:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8007f50:	ed53 8a18 	vldr	s17, [r3, #-96]	; 0xffffffa0
 8007f54:	eeed 7aa6 	vfma.f32	s15, s27, s13
 8007f58:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8007f5c:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 8007f60:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 8007f64:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 8007f68:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 8007f6c:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 8007f70:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8007f74:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8007f78:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8007f7c:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8007f80:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8007f84:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8007f88:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8007f8c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8007f90:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8007f94:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8007f98:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8007f9c:	eeea 7a29 	vfma.f32	s15, s20, s19
 8007fa0:	eee9 7a28 	vfma.f32	s15, s18, s17
 8007fa4:	eee8 7a20 	vfma.f32	s15, s16, s1
 8007fa8:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007fac:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007fb0:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007fb4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007fb8:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007fbc:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007fc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007fc4:	d895      	bhi.n	8007ef2 <forward_rnn+0x36a>
 8007fc6:	9b03      	ldr	r3, [sp, #12]
 8007fc8:	18c2      	adds	r2, r0, r3
 8007fca:	2e00      	cmp	r6, #0
 8007fcc:	d07c      	beq.n	80080c8 <forward_rnn+0x540>
 8007fce:	4633      	mov	r3, r6
 8007fd0:	f8dd b018 	ldr.w	fp, [sp, #24]
 8007fd4:	e002      	b.n	8007fdc <forward_rnn+0x454>
 8007fd6:	bf00      	nop
 8007fd8:	00000000 	.word	0x00000000
 8007fdc:	edd2 6a00 	vldr	s13, [r2]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	eddb 7a00 	vldr	s15, [fp]
 8007fe6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007fea:	d06d      	beq.n	80080c8 <forward_rnn+0x540>
 8007fec:	eddb 6a01 	vldr	s13, [fp, #4]
 8007ff0:	2b02      	cmp	r3, #2
 8007ff2:	edd2 7a01 	vldr	s15, [r2, #4]
 8007ff6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ffa:	d065      	beq.n	80080c8 <forward_rnn+0x540>
 8007ffc:	eddb 6a02 	vldr	s13, [fp, #8]
 8008000:	2b03      	cmp	r3, #3
 8008002:	edd2 7a02 	vldr	s15, [r2, #8]
 8008006:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800800a:	d05d      	beq.n	80080c8 <forward_rnn+0x540>
 800800c:	eddb 6a03 	vldr	s13, [fp, #12]
 8008010:	2b04      	cmp	r3, #4
 8008012:	edd2 7a03 	vldr	s15, [r2, #12]
 8008016:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800801a:	d055      	beq.n	80080c8 <forward_rnn+0x540>
 800801c:	eddb 6a04 	vldr	s13, [fp, #16]
 8008020:	2b05      	cmp	r3, #5
 8008022:	edd2 7a04 	vldr	s15, [r2, #16]
 8008026:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800802a:	d04d      	beq.n	80080c8 <forward_rnn+0x540>
 800802c:	eddb 6a05 	vldr	s13, [fp, #20]
 8008030:	2b06      	cmp	r3, #6
 8008032:	edd2 7a05 	vldr	s15, [r2, #20]
 8008036:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800803a:	d045      	beq.n	80080c8 <forward_rnn+0x540>
 800803c:	eddb 6a06 	vldr	s13, [fp, #24]
 8008040:	2b07      	cmp	r3, #7
 8008042:	edd2 7a06 	vldr	s15, [r2, #24]
 8008046:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800804a:	d03d      	beq.n	80080c8 <forward_rnn+0x540>
 800804c:	eddb 6a07 	vldr	s13, [fp, #28]
 8008050:	2b08      	cmp	r3, #8
 8008052:	edd2 7a07 	vldr	s15, [r2, #28]
 8008056:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800805a:	d035      	beq.n	80080c8 <forward_rnn+0x540>
 800805c:	eddb 6a08 	vldr	s13, [fp, #32]
 8008060:	2b09      	cmp	r3, #9
 8008062:	edd2 7a08 	vldr	s15, [r2, #32]
 8008066:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800806a:	d02d      	beq.n	80080c8 <forward_rnn+0x540>
 800806c:	eddb 6a09 	vldr	s13, [fp, #36]	; 0x24
 8008070:	2b0a      	cmp	r3, #10
 8008072:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8008076:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800807a:	d025      	beq.n	80080c8 <forward_rnn+0x540>
 800807c:	eddb 6a0a 	vldr	s13, [fp, #40]	; 0x28
 8008080:	2b0b      	cmp	r3, #11
 8008082:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8008086:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800808a:	d01d      	beq.n	80080c8 <forward_rnn+0x540>
 800808c:	eddb 6a0b 	vldr	s13, [fp, #44]	; 0x2c
 8008090:	2b0c      	cmp	r3, #12
 8008092:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8008096:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800809a:	d015      	beq.n	80080c8 <forward_rnn+0x540>
 800809c:	eddb 6a0c 	vldr	s13, [fp, #48]	; 0x30
 80080a0:	3b0d      	subs	r3, #13
 80080a2:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80080a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080aa:	d00d      	beq.n	80080c8 <forward_rnn+0x540>
 80080ac:	eddb 6a0d 	vldr	s13, [fp, #52]	; 0x34
 80080b0:	2b01      	cmp	r3, #1
 80080b2:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80080b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080ba:	d005      	beq.n	80080c8 <forward_rnn+0x540>
 80080bc:	eddb 6a0e 	vldr	s13, [fp, #56]	; 0x38
 80080c0:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80080c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080c8:	9b01      	ldr	r3, [sp, #4]
 80080ca:	ee30 7a07 	vadd.f32	s14, s0, s14
 80080ce:	4447      	add	r7, r8
 80080d0:	4450      	add	r0, sl
 80080d2:	4563      	cmp	r3, ip
 80080d4:	ed01 7a01 	vstr	s14, [r1, #-4]
 80080d8:	f47f ae08 	bne.w	8007cec <forward_rnn+0x164>
 80080dc:	4b37      	ldr	r3, [pc, #220]	; (80081bc <forward_rnn+0x634>)
 80080de:	a91b      	add	r1, sp, #108	; 0x6c
 80080e0:	4622      	mov	r2, r4
 80080e2:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80080e4:	4608      	mov	r0, r1
 80080e6:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 80080ea:	9b07      	ldr	r3, [sp, #28]
 80080ec:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
 80080f0:	ab16      	add	r3, sp, #88	; 0x58
 80080f2:	9321      	str	r3, [sp, #132]	; 0x84
 80080f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80080f6:	47b8      	blx	r7
 80080f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80080fa:	b9b3      	cbnz	r3, 800812a <forward_rnn+0x5a2>
 80080fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80080fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008100:	4413      	add	r3, r2
 8008102:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008104:	9309      	str	r3, [sp, #36]	; 0x24
 8008106:	9b08      	ldr	r3, [sp, #32]
 8008108:	4293      	cmp	r3, r2
 800810a:	da41      	bge.n	8008190 <forward_rnn+0x608>
 800810c:	2b00      	cmp	r3, #0
 800810e:	db3f      	blt.n	8008190 <forward_rnn+0x608>
 8008110:	464b      	mov	r3, r9
 8008112:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8008116:	9307      	str	r3, [sp, #28]
 8008118:	e5c9      	b.n	8007cae <forward_rnn+0x126>
 800811a:	4623      	mov	r3, r4
 800811c:	46cb      	mov	fp, r9
 800811e:	4602      	mov	r2, r0
 8008120:	e75c      	b.n	8007fdc <forward_rnn+0x454>
 8008122:	462b      	mov	r3, r5
 8008124:	46bb      	mov	fp, r7
 8008126:	4672      	mov	r2, lr
 8008128:	e65d      	b.n	8007de6 <forward_rnn+0x25e>
 800812a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800812c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800812e:	9807      	ldr	r0, [sp, #28]
 8008130:	4413      	add	r3, r2
 8008132:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8008134:	9309      	str	r3, [sp, #36]	; 0x24
 8008136:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008138:	4619      	mov	r1, r3
 800813a:	4413      	add	r3, r2
 800813c:	4652      	mov	r2, sl
 800813e:	9314      	str	r3, [sp, #80]	; 0x50
 8008140:	f000 f9c6 	bl	80084d0 <st_int8_copy>
 8008144:	9b08      	ldr	r3, [sp, #32]
 8008146:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008148:	4293      	cmp	r3, r2
 800814a:	da01      	bge.n	8008150 <forward_rnn+0x5c8>
 800814c:	2b00      	cmp	r3, #0
 800814e:	dadf      	bge.n	8008110 <forward_rnn+0x588>
 8008150:	b023      	add	sp, #140	; 0x8c
 8008152:	ecbd 8b0c 	vpop	{d8-d13}
 8008156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800815a:	9308      	str	r3, [sp, #32]
 800815c:	2301      	movs	r3, #1
 800815e:	930e      	str	r3, [sp, #56]	; 0x38
 8008160:	e578      	b.n	8007c54 <forward_rnn+0xcc>
 8008162:	6853      	ldr	r3, [r2, #4]
 8008164:	deff      	udf	#255	; 0xff
 8008166:	68dc      	ldr	r4, [r3, #12]
 8008168:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800816a:	699b      	ldr	r3, [r3, #24]
 800816c:	68c0      	ldr	r0, [r0, #12]
 800816e:	689b      	ldr	r3, [r3, #8]
 8008170:	68e7      	ldr	r7, [r4, #12]
 8008172:	6845      	ldr	r5, [r0, #4]
 8008174:	69f4      	ldr	r4, [r6, #28]
 8008176:	9314      	str	r3, [sp, #80]	; 0x50
 8008178:	68c3      	ldr	r3, [r0, #12]
 800817a:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 800817e:	980a      	ldr	r0, [sp, #40]	; 0x28
 8008180:	930d      	str	r3, [sp, #52]	; 0x34
 8008182:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 8008186:	e53b      	b.n	8007c00 <forward_rnn+0x78>
 8008188:	2300      	movs	r3, #0
 800818a:	9315      	str	r3, [sp, #84]	; 0x54
 800818c:	930c      	str	r3, [sp, #48]	; 0x30
 800818e:	e556      	b.n	8007c3e <forward_rnn+0xb6>
 8008190:	4652      	mov	r2, sl
 8008192:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008194:	9807      	ldr	r0, [sp, #28]
 8008196:	b023      	add	sp, #140	; 0x8c
 8008198:	ecbd 8b0c 	vpop	{d8-d13}
 800819c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a0:	f000 b996 	b.w	80084d0 <st_int8_copy>
 80081a4:	4a06      	ldr	r2, [pc, #24]	; (80081c0 <forward_rnn+0x638>)
 80081a6:	9211      	str	r2, [sp, #68]	; 0x44
 80081a8:	e535      	b.n	8007c16 <forward_rnn+0x8e>
 80081aa:	2300      	movs	r3, #0
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	deff      	udf	#255	; 0xff
 80081b0:	2300      	movs	r3, #0
 80081b2:	685b      	ldr	r3, [r3, #4]
 80081b4:	deff      	udf	#255	; 0xff
 80081b6:	2300      	movs	r3, #0
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	deff      	udf	#255	; 0xff
 80081bc:	01821040 	.word	0x01821040
 80081c0:	08007b75 	.word	0x08007b75

080081c4 <forward_lite_dense_if32of32wf32>:
 80081c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081c8:	ed2d 8b0c 	vpush	{d8-d13}
 80081cc:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 80081d0:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 80081d4:	4287      	cmp	r7, r0
 80081d6:	f240 8105 	bls.w	80083e4 <forward_lite_dense_if32of32wf32+0x220>
 80081da:	f1a6 0810 	sub.w	r8, r6, #16
 80081de:	ea4f 0986 	mov.w	r9, r6, lsl #2
 80081e2:	4605      	mov	r5, r0
 80081e4:	f006 0b0f 	and.w	fp, r6, #15
 80081e8:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80081ec:	f108 0801 	add.w	r8, r8, #1
 80081f0:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 80081f4:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 80081f8:	2e0f      	cmp	r6, #15
 80081fa:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8008410 <forward_lite_dense_if32of32wf32+0x24c>
 80081fe:	f240 8102 	bls.w	8008406 <forward_lite_dense_if32of32wf32+0x242>
 8008202:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8008206:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800820a:	46b6      	mov	lr, r6
 800820c:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 8008210:	f1ae 0e10 	sub.w	lr, lr, #16
 8008214:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8008218:	3440      	adds	r4, #64	; 0x40
 800821a:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 800821e:	f1be 0f0f 	cmp.w	lr, #15
 8008222:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008226:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 800822a:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 800822e:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8008232:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 8008236:	eee4 7a85 	vfma.f32	s15, s9, s10
 800823a:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 800823e:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 8008242:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 8008246:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 800824a:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 800824e:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 8008252:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008256:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 800825a:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 800825e:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 8008262:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 8008266:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 800826a:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 800826e:	eeed 7a26 	vfma.f32	s15, s26, s13
 8008272:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 8008276:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 800827a:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 800827e:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 8008282:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 8008286:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 800828a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 800828e:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8008292:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8008296:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800829a:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800829e:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 80082a2:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 80082a6:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 80082aa:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 80082ae:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 80082b2:	eeea 7a8a 	vfma.f32	s15, s21, s20
 80082b6:	eee9 7a89 	vfma.f32	s15, s19, s18
 80082ba:	eee8 7a88 	vfma.f32	s15, s17, s16
 80082be:	eee0 7a20 	vfma.f32	s15, s0, s1
 80082c2:	eee1 7a21 	vfma.f32	s15, s2, s3
 80082c6:	eee2 7a22 	vfma.f32	s15, s4, s5
 80082ca:	eee3 7a23 	vfma.f32	s15, s6, s7
 80082ce:	eee4 7a24 	vfma.f32	s15, s8, s9
 80082d2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80082d6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80082da:	ee37 7a27 	vadd.f32	s14, s14, s15
 80082de:	d895      	bhi.n	800820c <forward_lite_dense_if32of32wf32+0x48>
 80082e0:	eb02 0e0a 	add.w	lr, r2, sl
 80082e4:	465c      	mov	r4, fp
 80082e6:	46c4      	mov	ip, r8
 80082e8:	2c00      	cmp	r4, #0
 80082ea:	d075      	beq.n	80083d8 <forward_lite_dense_if32of32wf32+0x214>
 80082ec:	eddc 6a00 	vldr	s13, [ip]
 80082f0:	2c01      	cmp	r4, #1
 80082f2:	edde 7a00 	vldr	s15, [lr]
 80082f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80082fa:	d06d      	beq.n	80083d8 <forward_lite_dense_if32of32wf32+0x214>
 80082fc:	eddc 6a01 	vldr	s13, [ip, #4]
 8008300:	2c02      	cmp	r4, #2
 8008302:	edde 7a01 	vldr	s15, [lr, #4]
 8008306:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800830a:	d065      	beq.n	80083d8 <forward_lite_dense_if32of32wf32+0x214>
 800830c:	eddc 6a02 	vldr	s13, [ip, #8]
 8008310:	2c03      	cmp	r4, #3
 8008312:	edde 7a02 	vldr	s15, [lr, #8]
 8008316:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800831a:	d05d      	beq.n	80083d8 <forward_lite_dense_if32of32wf32+0x214>
 800831c:	eddc 6a03 	vldr	s13, [ip, #12]
 8008320:	2c04      	cmp	r4, #4
 8008322:	edde 7a03 	vldr	s15, [lr, #12]
 8008326:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800832a:	d055      	beq.n	80083d8 <forward_lite_dense_if32of32wf32+0x214>
 800832c:	eddc 6a04 	vldr	s13, [ip, #16]
 8008330:	2c05      	cmp	r4, #5
 8008332:	edde 7a04 	vldr	s15, [lr, #16]
 8008336:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800833a:	d04d      	beq.n	80083d8 <forward_lite_dense_if32of32wf32+0x214>
 800833c:	eddc 6a05 	vldr	s13, [ip, #20]
 8008340:	2c06      	cmp	r4, #6
 8008342:	edde 7a05 	vldr	s15, [lr, #20]
 8008346:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800834a:	d045      	beq.n	80083d8 <forward_lite_dense_if32of32wf32+0x214>
 800834c:	eddc 6a06 	vldr	s13, [ip, #24]
 8008350:	2c07      	cmp	r4, #7
 8008352:	edde 7a06 	vldr	s15, [lr, #24]
 8008356:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800835a:	d03d      	beq.n	80083d8 <forward_lite_dense_if32of32wf32+0x214>
 800835c:	eddc 6a07 	vldr	s13, [ip, #28]
 8008360:	2c08      	cmp	r4, #8
 8008362:	edde 7a07 	vldr	s15, [lr, #28]
 8008366:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800836a:	d035      	beq.n	80083d8 <forward_lite_dense_if32of32wf32+0x214>
 800836c:	eddc 6a08 	vldr	s13, [ip, #32]
 8008370:	2c09      	cmp	r4, #9
 8008372:	edde 7a08 	vldr	s15, [lr, #32]
 8008376:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800837a:	d02d      	beq.n	80083d8 <forward_lite_dense_if32of32wf32+0x214>
 800837c:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8008380:	2c0a      	cmp	r4, #10
 8008382:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8008386:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800838a:	d025      	beq.n	80083d8 <forward_lite_dense_if32of32wf32+0x214>
 800838c:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8008390:	2c0b      	cmp	r4, #11
 8008392:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8008396:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800839a:	d01d      	beq.n	80083d8 <forward_lite_dense_if32of32wf32+0x214>
 800839c:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 80083a0:	2c0c      	cmp	r4, #12
 80083a2:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 80083a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083aa:	d015      	beq.n	80083d8 <forward_lite_dense_if32of32wf32+0x214>
 80083ac:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 80083b0:	3c0d      	subs	r4, #13
 80083b2:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80083b6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083ba:	d00d      	beq.n	80083d8 <forward_lite_dense_if32of32wf32+0x214>
 80083bc:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80083c0:	2c01      	cmp	r4, #1
 80083c2:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80083c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083ca:	d005      	beq.n	80083d8 <forward_lite_dense_if32of32wf32+0x214>
 80083cc:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 80083d0:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 80083d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80083d8:	eca5 7a01 	vstmia	r5!, {s14}
 80083dc:	42af      	cmp	r7, r5
 80083de:	444a      	add	r2, r9
 80083e0:	f63f af0a 	bhi.w	80081f8 <forward_lite_dense_if32of32wf32+0x34>
 80083e4:	b15b      	cbz	r3, 80083fe <forward_lite_dense_if32of32wf32+0x23a>
 80083e6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80083e8:	b14a      	cbz	r2, 80083fe <forward_lite_dense_if32of32wf32+0x23a>
 80083ea:	edd0 7a00 	vldr	s15, [r0]
 80083ee:	ecb3 7a01 	vldmia	r3!, {s14}
 80083f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80083f6:	ece0 7a01 	vstmia	r0!, {s15}
 80083fa:	4287      	cmp	r7, r0
 80083fc:	d1f5      	bne.n	80083ea <forward_lite_dense_if32of32wf32+0x226>
 80083fe:	ecbd 8b0c 	vpop	{d8-d13}
 8008402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008406:	4634      	mov	r4, r6
 8008408:	4696      	mov	lr, r2
 800840a:	468c      	mov	ip, r1
 800840c:	e76c      	b.n	80082e8 <forward_lite_dense_if32of32wf32+0x124>
 800840e:	bf00      	nop
 8008410:	00000000 	.word	0x00000000

08008414 <st_int8_fill>:
 8008414:	0203      	lsls	r3, r0, #8
 8008416:	468c      	mov	ip, r1
 8008418:	b510      	push	{r4, lr}
 800841a:	b2c4      	uxtb	r4, r0
 800841c:	b29b      	uxth	r3, r3
 800841e:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 8008422:	431c      	orrs	r4, r3
 8008424:	0403      	lsls	r3, r0, #16
 8008426:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800842a:	431c      	orrs	r4, r3
 800842c:	078b      	lsls	r3, r1, #30
 800842e:	d007      	beq.n	8008440 <st_int8_fill+0x2c>
 8008430:	b3a2      	cbz	r2, 800849c <st_int8_fill+0x88>
 8008432:	f80c 0b01 	strb.w	r0, [ip], #1
 8008436:	f01c 0f03 	tst.w	ip, #3
 800843a:	f102 32ff 	add.w	r2, r2, #4294967295
 800843e:	d1f7      	bne.n	8008430 <st_int8_fill+0x1c>
 8008440:	0911      	lsrs	r1, r2, #4
 8008442:	d041      	beq.n	80084c8 <st_int8_fill+0xb4>
 8008444:	1e4b      	subs	r3, r1, #1
 8008446:	2b04      	cmp	r3, #4
 8008448:	d929      	bls.n	800849e <st_int8_fill+0x8a>
 800844a:	f01c 0f07 	tst.w	ip, #7
 800844e:	d126      	bne.n	800849e <st_int8_fill+0x8a>
 8008450:	f10c 0310 	add.w	r3, ip, #16
 8008454:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8008458:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 800845c:	e943 4404 	strd	r4, r4, [r3, #-16]
 8008460:	e943 4402 	strd	r4, r4, [r3, #-8]
 8008464:	3310      	adds	r3, #16
 8008466:	428b      	cmp	r3, r1
 8008468:	d1f8      	bne.n	800845c <st_int8_fill+0x48>
 800846a:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800846e:	44f4      	add	ip, lr
 8008470:	f002 0203 	and.w	r2, r2, #3
 8008474:	b15b      	cbz	r3, 800848e <st_int8_fill+0x7a>
 8008476:	1e59      	subs	r1, r3, #1
 8008478:	f8cc 4000 	str.w	r4, [ip]
 800847c:	d005      	beq.n	800848a <st_int8_fill+0x76>
 800847e:	2901      	cmp	r1, #1
 8008480:	f8cc 4004 	str.w	r4, [ip, #4]
 8008484:	bf18      	it	ne
 8008486:	f8cc 4008 	strne.w	r4, [ip, #8]
 800848a:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 800848e:	b12a      	cbz	r2, 800849c <st_int8_fill+0x88>
 8008490:	4601      	mov	r1, r0
 8008492:	4660      	mov	r0, ip
 8008494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008498:	f001 b88d 	b.w	80095b6 <memset>
 800849c:	bd10      	pop	{r4, pc}
 800849e:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 80084a2:	4663      	mov	r3, ip
 80084a4:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 80084a8:	601c      	str	r4, [r3, #0]
 80084aa:	3310      	adds	r3, #16
 80084ac:	f843 4c0c 	str.w	r4, [r3, #-12]
 80084b0:	f843 4c08 	str.w	r4, [r3, #-8]
 80084b4:	f843 4c04 	str.w	r4, [r3, #-4]
 80084b8:	4299      	cmp	r1, r3
 80084ba:	d1f5      	bne.n	80084a8 <st_int8_fill+0x94>
 80084bc:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80084c0:	44f4      	add	ip, lr
 80084c2:	f002 0203 	and.w	r2, r2, #3
 80084c6:	e7d5      	b.n	8008474 <st_int8_fill+0x60>
 80084c8:	0893      	lsrs	r3, r2, #2
 80084ca:	f002 0203 	and.w	r2, r2, #3
 80084ce:	e7d1      	b.n	8008474 <st_int8_fill+0x60>

080084d0 <st_int8_copy>:
 80084d0:	4288      	cmp	r0, r1
 80084d2:	d010      	beq.n	80084f6 <st_int8_copy+0x26>
 80084d4:	b17a      	cbz	r2, 80084f6 <st_int8_copy+0x26>
 80084d6:	4288      	cmp	r0, r1
 80084d8:	eb00 0302 	add.w	r3, r0, r2
 80084dc:	d20c      	bcs.n	80084f8 <st_int8_copy+0x28>
 80084de:	428b      	cmp	r3, r1
 80084e0:	d90a      	bls.n	80084f8 <st_int8_copy+0x28>
 80084e2:	4283      	cmp	r3, r0
 80084e4:	440a      	add	r2, r1
 80084e6:	d906      	bls.n	80084f6 <st_int8_copy+0x26>
 80084e8:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80084ec:	4283      	cmp	r3, r0
 80084ee:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80084f2:	d1f9      	bne.n	80084e8 <st_int8_copy+0x18>
 80084f4:	4770      	bx	lr
 80084f6:	4770      	bx	lr
 80084f8:	078b      	lsls	r3, r1, #30
 80084fa:	d102      	bne.n	8008502 <st_int8_copy+0x32>
 80084fc:	e008      	b.n	8008510 <st_int8_copy+0x40>
 80084fe:	2a00      	cmp	r2, #0
 8008500:	d04d      	beq.n	800859e <st_int8_copy+0xce>
 8008502:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8008506:	3a01      	subs	r2, #1
 8008508:	f801 3b01 	strb.w	r3, [r1], #1
 800850c:	078b      	lsls	r3, r1, #30
 800850e:	d1f6      	bne.n	80084fe <st_int8_copy+0x2e>
 8008510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008514:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8008518:	d05e      	beq.n	80085d8 <st_int8_copy+0x108>
 800851a:	ea40 0301 	orr.w	r3, r0, r1
 800851e:	075b      	lsls	r3, r3, #29
 8008520:	d13e      	bne.n	80085a0 <st_int8_copy+0xd0>
 8008522:	f10e 33ff 	add.w	r3, lr, #4294967295
 8008526:	2b01      	cmp	r3, #1
 8008528:	d93a      	bls.n	80085a0 <st_int8_copy+0xd0>
 800852a:	f100 0310 	add.w	r3, r0, #16
 800852e:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008532:	f101 0c10 	add.w	ip, r1, #16
 8008536:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 800853a:	3310      	adds	r3, #16
 800853c:	f10c 0c10 	add.w	ip, ip, #16
 8008540:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 8008544:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 8008548:	4573      	cmp	r3, lr
 800854a:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 800854e:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8008552:	d1f2      	bne.n	800853a <st_int8_copy+0x6a>
 8008554:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8008558:	4421      	add	r1, r4
 800855a:	4420      	add	r0, r4
 800855c:	f002 0203 	and.w	r2, r2, #3
 8008560:	b16b      	cbz	r3, 800857e <st_int8_copy+0xae>
 8008562:	6804      	ldr	r4, [r0, #0]
 8008564:	600c      	str	r4, [r1, #0]
 8008566:	1e5c      	subs	r4, r3, #1
 8008568:	d005      	beq.n	8008576 <st_int8_copy+0xa6>
 800856a:	6845      	ldr	r5, [r0, #4]
 800856c:	2c01      	cmp	r4, #1
 800856e:	604d      	str	r5, [r1, #4]
 8008570:	d001      	beq.n	8008576 <st_int8_copy+0xa6>
 8008572:	6884      	ldr	r4, [r0, #8]
 8008574:	608c      	str	r4, [r1, #8]
 8008576:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800857a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800857e:	b162      	cbz	r2, 800859a <st_int8_copy+0xca>
 8008580:	f990 3000 	ldrsb.w	r3, [r0]
 8008584:	3a01      	subs	r2, #1
 8008586:	700b      	strb	r3, [r1, #0]
 8008588:	d007      	beq.n	800859a <st_int8_copy+0xca>
 800858a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800858e:	2a01      	cmp	r2, #1
 8008590:	704b      	strb	r3, [r1, #1]
 8008592:	d002      	beq.n	800859a <st_int8_copy+0xca>
 8008594:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8008598:	708b      	strb	r3, [r1, #2]
 800859a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800859e:	4770      	bx	lr
 80085a0:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80085a4:	460b      	mov	r3, r1
 80085a6:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80085aa:	4684      	mov	ip, r0
 80085ac:	f8dc 8000 	ldr.w	r8, [ip]
 80085b0:	3310      	adds	r3, #16
 80085b2:	f8dc 7004 	ldr.w	r7, [ip, #4]
 80085b6:	f10c 0c10 	add.w	ip, ip, #16
 80085ba:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 80085be:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 80085c2:	f843 8c10 	str.w	r8, [r3, #-16]
 80085c6:	f843 7c0c 	str.w	r7, [r3, #-12]
 80085ca:	f843 6c08 	str.w	r6, [r3, #-8]
 80085ce:	f843 5c04 	str.w	r5, [r3, #-4]
 80085d2:	459e      	cmp	lr, r3
 80085d4:	d1ea      	bne.n	80085ac <st_int8_copy+0xdc>
 80085d6:	e7bd      	b.n	8008554 <st_int8_copy+0x84>
 80085d8:	0893      	lsrs	r3, r2, #2
 80085da:	f002 0203 	and.w	r2, r2, #3
 80085de:	e7bf      	b.n	8008560 <st_int8_copy+0x90>

080085e0 <ai_array_to_buffer_fmt>:
 80085e0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80085e4:	2b02      	cmp	r3, #2
 80085e6:	d050      	beq.n	800868a <ai_array_to_buffer_fmt+0xaa>
 80085e8:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80085ec:	4b29      	ldr	r3, [pc, #164]	; (8008694 <ai_array_to_buffer_fmt+0xb4>)
 80085ee:	429a      	cmp	r2, r3
 80085f0:	d00b      	beq.n	800860a <ai_array_to_buffer_fmt+0x2a>
 80085f2:	dc1c      	bgt.n	800862e <ai_array_to_buffer_fmt+0x4e>
 80085f4:	4b28      	ldr	r3, [pc, #160]	; (8008698 <ai_array_to_buffer_fmt+0xb8>)
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d007      	beq.n	800860a <ai_array_to_buffer_fmt+0x2a>
 80085fa:	dd0b      	ble.n	8008614 <ai_array_to_buffer_fmt+0x34>
 80085fc:	4b27      	ldr	r3, [pc, #156]	; (800869c <ai_array_to_buffer_fmt+0xbc>)
 80085fe:	429a      	cmp	r2, r3
 8008600:	d003      	beq.n	800860a <ai_array_to_buffer_fmt+0x2a>
 8008602:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8008606:	429a      	cmp	r2, r3
 8008608:	d131      	bne.n	800866e <ai_array_to_buffer_fmt+0x8e>
 800860a:	4613      	mov	r3, r2
 800860c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008610:	4318      	orrs	r0, r3
 8008612:	4770      	bx	lr
 8008614:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008618:	429a      	cmp	r2, r3
 800861a:	d0f6      	beq.n	800860a <ai_array_to_buffer_fmt+0x2a>
 800861c:	dd2c      	ble.n	8008678 <ai_array_to_buffer_fmt+0x98>
 800861e:	4b20      	ldr	r3, [pc, #128]	; (80086a0 <ai_array_to_buffer_fmt+0xc0>)
 8008620:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8008624:	429a      	cmp	r2, r3
 8008626:	bf18      	it	ne
 8008628:	2340      	movne	r3, #64	; 0x40
 800862a:	4318      	orrs	r0, r3
 800862c:	4770      	bx	lr
 800862e:	4b1d      	ldr	r3, [pc, #116]	; (80086a4 <ai_array_to_buffer_fmt+0xc4>)
 8008630:	429a      	cmp	r2, r3
 8008632:	d0ea      	beq.n	800860a <ai_array_to_buffer_fmt+0x2a>
 8008634:	dd0e      	ble.n	8008654 <ai_array_to_buffer_fmt+0x74>
 8008636:	4b1c      	ldr	r3, [pc, #112]	; (80086a8 <ai_array_to_buffer_fmt+0xc8>)
 8008638:	429a      	cmp	r2, r3
 800863a:	d0e6      	beq.n	800860a <ai_array_to_buffer_fmt+0x2a>
 800863c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8008640:	429a      	cmp	r2, r3
 8008642:	d0e2      	beq.n	800860a <ai_array_to_buffer_fmt+0x2a>
 8008644:	4b19      	ldr	r3, [pc, #100]	; (80086ac <ai_array_to_buffer_fmt+0xcc>)
 8008646:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800864a:	429a      	cmp	r2, r3
 800864c:	bf18      	it	ne
 800864e:	2340      	movne	r3, #64	; 0x40
 8008650:	4318      	orrs	r0, r3
 8008652:	4770      	bx	lr
 8008654:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8008658:	429a      	cmp	r2, r3
 800865a:	d0d6      	beq.n	800860a <ai_array_to_buffer_fmt+0x2a>
 800865c:	3307      	adds	r3, #7
 800865e:	429a      	cmp	r2, r3
 8008660:	d0d3      	beq.n	800860a <ai_array_to_buffer_fmt+0x2a>
 8008662:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8008666:	429a      	cmp	r2, r3
 8008668:	bf18      	it	ne
 800866a:	2340      	movne	r3, #64	; 0x40
 800866c:	e7ce      	b.n	800860c <ai_array_to_buffer_fmt+0x2c>
 800866e:	4b10      	ldr	r3, [pc, #64]	; (80086b0 <ai_array_to_buffer_fmt+0xd0>)
 8008670:	429a      	cmp	r2, r3
 8008672:	bf18      	it	ne
 8008674:	2340      	movne	r3, #64	; 0x40
 8008676:	e7c9      	b.n	800860c <ai_array_to_buffer_fmt+0x2c>
 8008678:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800867c:	429a      	cmp	r2, r3
 800867e:	d0c4      	beq.n	800860a <ai_array_to_buffer_fmt+0x2a>
 8008680:	3380      	adds	r3, #128	; 0x80
 8008682:	429a      	cmp	r2, r3
 8008684:	bf18      	it	ne
 8008686:	2340      	movne	r3, #64	; 0x40
 8008688:	e7c0      	b.n	800860c <ai_array_to_buffer_fmt+0x2c>
 800868a:	4b0a      	ldr	r3, [pc, #40]	; (80086b4 <ai_array_to_buffer_fmt+0xd4>)
 800868c:	4003      	ands	r3, r0
 800868e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008692:	e7bb      	b.n	800860c <ai_array_to_buffer_fmt+0x2c>
 8008694:	00840040 	.word	0x00840040
 8008698:	00040840 	.word	0x00040840
 800869c:	00041040 	.word	0x00041040
 80086a0:	00040447 	.word	0x00040447
 80086a4:	00840840 	.word	0x00840840
 80086a8:	00841040 	.word	0x00841040
 80086ac:	0084084f 	.word	0x0084084f
 80086b0:	0004084f 	.word	0x0004084f
 80086b4:	00803fff 	.word	0x00803fff

080086b8 <ai_array_get_byte_size>:
 80086b8:	b319      	cbz	r1, 8008702 <ai_array_get_byte_size+0x4a>
 80086ba:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80086be:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80086c2:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 80086c6:	11c0      	asrs	r0, r0, #7
 80086c8:	fb03 f101 	mul.w	r1, r3, r1
 80086cc:	2a04      	cmp	r2, #4
 80086ce:	f101 0107 	add.w	r1, r1, #7
 80086d2:	f021 0107 	bic.w	r1, r1, #7
 80086d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80086da:	d00b      	beq.n	80086f4 <ai_array_get_byte_size+0x3c>
 80086dc:	2a08      	cmp	r2, #8
 80086de:	d002      	beq.n	80086e6 <ai_array_get_byte_size+0x2e>
 80086e0:	3107      	adds	r1, #7
 80086e2:	08c8      	lsrs	r0, r1, #3
 80086e4:	4770      	bx	lr
 80086e6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80086ea:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80086ee:	3107      	adds	r1, #7
 80086f0:	08c8      	lsrs	r0, r1, #3
 80086f2:	4770      	bx	lr
 80086f4:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80086f8:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80086fc:	3107      	adds	r1, #7
 80086fe:	08c8      	lsrs	r0, r1, #3
 8008700:	4770      	bx	lr
 8008702:	4608      	mov	r0, r1
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop

08008708 <ai_array_get_data_byte_size>:
 8008708:	b161      	cbz	r1, 8008724 <ai_array_get_data_byte_size+0x1c>
 800870a:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 800870e:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8008712:	fb03 f101 	mul.w	r1, r3, r1
 8008716:	1dc8      	adds	r0, r1, #7
 8008718:	f020 0007 	bic.w	r0, r0, #7
 800871c:	40d0      	lsrs	r0, r2
 800871e:	3007      	adds	r0, #7
 8008720:	08c0      	lsrs	r0, r0, #3
 8008722:	4770      	bx	lr
 8008724:	4608      	mov	r0, r1
 8008726:	4770      	bx	lr

08008728 <ai_version_get>:
 8008728:	0212      	lsls	r2, r2, #8
 800872a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800872e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8008732:	4770      	bx	lr

08008734 <ai_platform_version_get>:
 8008734:	0e01      	lsrs	r1, r0, #24
 8008736:	2300      	movs	r3, #0
 8008738:	f3c0 4207 	ubfx	r2, r0, #16, #8
 800873c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8008740:	f361 0307 	bfi	r3, r1, #0, #8
 8008744:	b082      	sub	sp, #8
 8008746:	f362 230f 	bfi	r3, r2, #8, #8
 800874a:	f360 4317 	bfi	r3, r0, #16, #8
 800874e:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 8008752:	b002      	add	sp, #8
 8008754:	4770      	bx	lr
 8008756:	bf00      	nop

08008758 <get_tensor_byte_size>:
 8008758:	b430      	push	{r4, r5}
 800875a:	6985      	ldr	r5, [r0, #24]
 800875c:	68c4      	ldr	r4, [r0, #12]
 800875e:	6941      	ldr	r1, [r0, #20]
 8008760:	4b06      	ldr	r3, [pc, #24]	; (800877c <get_tensor_byte_size+0x24>)
 8008762:	6828      	ldr	r0, [r5, #0]
 8008764:	4a06      	ldr	r2, [pc, #24]	; (8008780 <get_tensor_byte_size+0x28>)
 8008766:	4003      	ands	r3, r0
 8008768:	68c9      	ldr	r1, [r1, #12]
 800876a:	68e0      	ldr	r0, [r4, #12]
 800876c:	4293      	cmp	r3, r2
 800876e:	fb01 f000 	mul.w	r0, r1, r0
 8008772:	d101      	bne.n	8008778 <get_tensor_byte_size+0x20>
 8008774:	3007      	adds	r0, #7
 8008776:	08c0      	lsrs	r0, r0, #3
 8008778:	bc30      	pop	{r4, r5}
 800877a:	4770      	bx	lr
 800877c:	017fffff 	.word	0x017fffff
 8008780:	000400c0 	.word	0x000400c0

08008784 <malloc>:
 8008784:	4b02      	ldr	r3, [pc, #8]	; (8008790 <malloc+0xc>)
 8008786:	4601      	mov	r1, r0
 8008788:	6818      	ldr	r0, [r3, #0]
 800878a:	f000 b82b 	b.w	80087e4 <_malloc_r>
 800878e:	bf00      	nop
 8008790:	200005d0 	.word	0x200005d0

08008794 <free>:
 8008794:	4b02      	ldr	r3, [pc, #8]	; (80087a0 <free+0xc>)
 8008796:	4601      	mov	r1, r0
 8008798:	6818      	ldr	r0, [r3, #0]
 800879a:	f001 bdcd 	b.w	800a338 <_free_r>
 800879e:	bf00      	nop
 80087a0:	200005d0 	.word	0x200005d0

080087a4 <sbrk_aligned>:
 80087a4:	b570      	push	{r4, r5, r6, lr}
 80087a6:	4e0e      	ldr	r6, [pc, #56]	; (80087e0 <sbrk_aligned+0x3c>)
 80087a8:	460c      	mov	r4, r1
 80087aa:	6831      	ldr	r1, [r6, #0]
 80087ac:	4605      	mov	r5, r0
 80087ae:	b911      	cbnz	r1, 80087b6 <sbrk_aligned+0x12>
 80087b0:	f000 ff54 	bl	800965c <_sbrk_r>
 80087b4:	6030      	str	r0, [r6, #0]
 80087b6:	4621      	mov	r1, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f000 ff4f 	bl	800965c <_sbrk_r>
 80087be:	1c43      	adds	r3, r0, #1
 80087c0:	d00a      	beq.n	80087d8 <sbrk_aligned+0x34>
 80087c2:	1cc4      	adds	r4, r0, #3
 80087c4:	f024 0403 	bic.w	r4, r4, #3
 80087c8:	42a0      	cmp	r0, r4
 80087ca:	d007      	beq.n	80087dc <sbrk_aligned+0x38>
 80087cc:	1a21      	subs	r1, r4, r0
 80087ce:	4628      	mov	r0, r5
 80087d0:	f000 ff44 	bl	800965c <_sbrk_r>
 80087d4:	3001      	adds	r0, #1
 80087d6:	d101      	bne.n	80087dc <sbrk_aligned+0x38>
 80087d8:	f04f 34ff 	mov.w	r4, #4294967295
 80087dc:	4620      	mov	r0, r4
 80087de:	bd70      	pop	{r4, r5, r6, pc}
 80087e0:	20000da8 	.word	0x20000da8

080087e4 <_malloc_r>:
 80087e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80087e8:	1ccd      	adds	r5, r1, #3
 80087ea:	f025 0503 	bic.w	r5, r5, #3
 80087ee:	3508      	adds	r5, #8
 80087f0:	2d0c      	cmp	r5, #12
 80087f2:	bf38      	it	cc
 80087f4:	250c      	movcc	r5, #12
 80087f6:	2d00      	cmp	r5, #0
 80087f8:	4607      	mov	r7, r0
 80087fa:	db01      	blt.n	8008800 <_malloc_r+0x1c>
 80087fc:	42a9      	cmp	r1, r5
 80087fe:	d905      	bls.n	800880c <_malloc_r+0x28>
 8008800:	230c      	movs	r3, #12
 8008802:	603b      	str	r3, [r7, #0]
 8008804:	2600      	movs	r6, #0
 8008806:	4630      	mov	r0, r6
 8008808:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800880c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80088e0 <_malloc_r+0xfc>
 8008810:	f000 f868 	bl	80088e4 <__malloc_lock>
 8008814:	f8d8 3000 	ldr.w	r3, [r8]
 8008818:	461c      	mov	r4, r3
 800881a:	bb5c      	cbnz	r4, 8008874 <_malloc_r+0x90>
 800881c:	4629      	mov	r1, r5
 800881e:	4638      	mov	r0, r7
 8008820:	f7ff ffc0 	bl	80087a4 <sbrk_aligned>
 8008824:	1c43      	adds	r3, r0, #1
 8008826:	4604      	mov	r4, r0
 8008828:	d155      	bne.n	80088d6 <_malloc_r+0xf2>
 800882a:	f8d8 4000 	ldr.w	r4, [r8]
 800882e:	4626      	mov	r6, r4
 8008830:	2e00      	cmp	r6, #0
 8008832:	d145      	bne.n	80088c0 <_malloc_r+0xdc>
 8008834:	2c00      	cmp	r4, #0
 8008836:	d048      	beq.n	80088ca <_malloc_r+0xe6>
 8008838:	6823      	ldr	r3, [r4, #0]
 800883a:	4631      	mov	r1, r6
 800883c:	4638      	mov	r0, r7
 800883e:	eb04 0903 	add.w	r9, r4, r3
 8008842:	f000 ff0b 	bl	800965c <_sbrk_r>
 8008846:	4581      	cmp	r9, r0
 8008848:	d13f      	bne.n	80088ca <_malloc_r+0xe6>
 800884a:	6821      	ldr	r1, [r4, #0]
 800884c:	1a6d      	subs	r5, r5, r1
 800884e:	4629      	mov	r1, r5
 8008850:	4638      	mov	r0, r7
 8008852:	f7ff ffa7 	bl	80087a4 <sbrk_aligned>
 8008856:	3001      	adds	r0, #1
 8008858:	d037      	beq.n	80088ca <_malloc_r+0xe6>
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	442b      	add	r3, r5
 800885e:	6023      	str	r3, [r4, #0]
 8008860:	f8d8 3000 	ldr.w	r3, [r8]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d038      	beq.n	80088da <_malloc_r+0xf6>
 8008868:	685a      	ldr	r2, [r3, #4]
 800886a:	42a2      	cmp	r2, r4
 800886c:	d12b      	bne.n	80088c6 <_malloc_r+0xe2>
 800886e:	2200      	movs	r2, #0
 8008870:	605a      	str	r2, [r3, #4]
 8008872:	e00f      	b.n	8008894 <_malloc_r+0xb0>
 8008874:	6822      	ldr	r2, [r4, #0]
 8008876:	1b52      	subs	r2, r2, r5
 8008878:	d41f      	bmi.n	80088ba <_malloc_r+0xd6>
 800887a:	2a0b      	cmp	r2, #11
 800887c:	d917      	bls.n	80088ae <_malloc_r+0xca>
 800887e:	1961      	adds	r1, r4, r5
 8008880:	42a3      	cmp	r3, r4
 8008882:	6025      	str	r5, [r4, #0]
 8008884:	bf18      	it	ne
 8008886:	6059      	strne	r1, [r3, #4]
 8008888:	6863      	ldr	r3, [r4, #4]
 800888a:	bf08      	it	eq
 800888c:	f8c8 1000 	streq.w	r1, [r8]
 8008890:	5162      	str	r2, [r4, r5]
 8008892:	604b      	str	r3, [r1, #4]
 8008894:	4638      	mov	r0, r7
 8008896:	f104 060b 	add.w	r6, r4, #11
 800889a:	f000 f829 	bl	80088f0 <__malloc_unlock>
 800889e:	f026 0607 	bic.w	r6, r6, #7
 80088a2:	1d23      	adds	r3, r4, #4
 80088a4:	1af2      	subs	r2, r6, r3
 80088a6:	d0ae      	beq.n	8008806 <_malloc_r+0x22>
 80088a8:	1b9b      	subs	r3, r3, r6
 80088aa:	50a3      	str	r3, [r4, r2]
 80088ac:	e7ab      	b.n	8008806 <_malloc_r+0x22>
 80088ae:	42a3      	cmp	r3, r4
 80088b0:	6862      	ldr	r2, [r4, #4]
 80088b2:	d1dd      	bne.n	8008870 <_malloc_r+0x8c>
 80088b4:	f8c8 2000 	str.w	r2, [r8]
 80088b8:	e7ec      	b.n	8008894 <_malloc_r+0xb0>
 80088ba:	4623      	mov	r3, r4
 80088bc:	6864      	ldr	r4, [r4, #4]
 80088be:	e7ac      	b.n	800881a <_malloc_r+0x36>
 80088c0:	4634      	mov	r4, r6
 80088c2:	6876      	ldr	r6, [r6, #4]
 80088c4:	e7b4      	b.n	8008830 <_malloc_r+0x4c>
 80088c6:	4613      	mov	r3, r2
 80088c8:	e7cc      	b.n	8008864 <_malloc_r+0x80>
 80088ca:	230c      	movs	r3, #12
 80088cc:	603b      	str	r3, [r7, #0]
 80088ce:	4638      	mov	r0, r7
 80088d0:	f000 f80e 	bl	80088f0 <__malloc_unlock>
 80088d4:	e797      	b.n	8008806 <_malloc_r+0x22>
 80088d6:	6025      	str	r5, [r4, #0]
 80088d8:	e7dc      	b.n	8008894 <_malloc_r+0xb0>
 80088da:	605b      	str	r3, [r3, #4]
 80088dc:	deff      	udf	#255	; 0xff
 80088de:	bf00      	nop
 80088e0:	20000da4 	.word	0x20000da4

080088e4 <__malloc_lock>:
 80088e4:	4801      	ldr	r0, [pc, #4]	; (80088ec <__malloc_lock+0x8>)
 80088e6:	f000 bf05 	b.w	80096f4 <__retarget_lock_acquire_recursive>
 80088ea:	bf00      	nop
 80088ec:	20000eec 	.word	0x20000eec

080088f0 <__malloc_unlock>:
 80088f0:	4801      	ldr	r0, [pc, #4]	; (80088f8 <__malloc_unlock+0x8>)
 80088f2:	f000 bf00 	b.w	80096f6 <__retarget_lock_release_recursive>
 80088f6:	bf00      	nop
 80088f8:	20000eec 	.word	0x20000eec

080088fc <srand>:
 80088fc:	b538      	push	{r3, r4, r5, lr}
 80088fe:	4b10      	ldr	r3, [pc, #64]	; (8008940 <srand+0x44>)
 8008900:	681d      	ldr	r5, [r3, #0]
 8008902:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008904:	4604      	mov	r4, r0
 8008906:	b9b3      	cbnz	r3, 8008936 <srand+0x3a>
 8008908:	2018      	movs	r0, #24
 800890a:	f7fa ff95 	bl	8003838 <__wrap_malloc>
 800890e:	4602      	mov	r2, r0
 8008910:	6328      	str	r0, [r5, #48]	; 0x30
 8008912:	b920      	cbnz	r0, 800891e <srand+0x22>
 8008914:	4b0b      	ldr	r3, [pc, #44]	; (8008944 <srand+0x48>)
 8008916:	480c      	ldr	r0, [pc, #48]	; (8008948 <srand+0x4c>)
 8008918:	2146      	movs	r1, #70	; 0x46
 800891a:	f000 fefb 	bl	8009714 <__assert_func>
 800891e:	490b      	ldr	r1, [pc, #44]	; (800894c <srand+0x50>)
 8008920:	4b0b      	ldr	r3, [pc, #44]	; (8008950 <srand+0x54>)
 8008922:	e9c0 1300 	strd	r1, r3, [r0]
 8008926:	4b0b      	ldr	r3, [pc, #44]	; (8008954 <srand+0x58>)
 8008928:	6083      	str	r3, [r0, #8]
 800892a:	230b      	movs	r3, #11
 800892c:	8183      	strh	r3, [r0, #12]
 800892e:	2100      	movs	r1, #0
 8008930:	2001      	movs	r0, #1
 8008932:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008936:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008938:	2200      	movs	r2, #0
 800893a:	611c      	str	r4, [r3, #16]
 800893c:	615a      	str	r2, [r3, #20]
 800893e:	bd38      	pop	{r3, r4, r5, pc}
 8008940:	200005d0 	.word	0x200005d0
 8008944:	08010710 	.word	0x08010710
 8008948:	08010727 	.word	0x08010727
 800894c:	abcd330e 	.word	0xabcd330e
 8008950:	e66d1234 	.word	0xe66d1234
 8008954:	0005deec 	.word	0x0005deec

08008958 <rand>:
 8008958:	4b16      	ldr	r3, [pc, #88]	; (80089b4 <rand+0x5c>)
 800895a:	b510      	push	{r4, lr}
 800895c:	681c      	ldr	r4, [r3, #0]
 800895e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008960:	b9b3      	cbnz	r3, 8008990 <rand+0x38>
 8008962:	2018      	movs	r0, #24
 8008964:	f7fa ff68 	bl	8003838 <__wrap_malloc>
 8008968:	4602      	mov	r2, r0
 800896a:	6320      	str	r0, [r4, #48]	; 0x30
 800896c:	b920      	cbnz	r0, 8008978 <rand+0x20>
 800896e:	4b12      	ldr	r3, [pc, #72]	; (80089b8 <rand+0x60>)
 8008970:	4812      	ldr	r0, [pc, #72]	; (80089bc <rand+0x64>)
 8008972:	2152      	movs	r1, #82	; 0x52
 8008974:	f000 fece 	bl	8009714 <__assert_func>
 8008978:	4911      	ldr	r1, [pc, #68]	; (80089c0 <rand+0x68>)
 800897a:	4b12      	ldr	r3, [pc, #72]	; (80089c4 <rand+0x6c>)
 800897c:	e9c0 1300 	strd	r1, r3, [r0]
 8008980:	4b11      	ldr	r3, [pc, #68]	; (80089c8 <rand+0x70>)
 8008982:	6083      	str	r3, [r0, #8]
 8008984:	230b      	movs	r3, #11
 8008986:	8183      	strh	r3, [r0, #12]
 8008988:	2100      	movs	r1, #0
 800898a:	2001      	movs	r0, #1
 800898c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008990:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008992:	480e      	ldr	r0, [pc, #56]	; (80089cc <rand+0x74>)
 8008994:	690b      	ldr	r3, [r1, #16]
 8008996:	694c      	ldr	r4, [r1, #20]
 8008998:	4a0d      	ldr	r2, [pc, #52]	; (80089d0 <rand+0x78>)
 800899a:	4358      	muls	r0, r3
 800899c:	fb02 0004 	mla	r0, r2, r4, r0
 80089a0:	fba3 3202 	umull	r3, r2, r3, r2
 80089a4:	3301      	adds	r3, #1
 80089a6:	eb40 0002 	adc.w	r0, r0, r2
 80089aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80089ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80089b2:	bd10      	pop	{r4, pc}
 80089b4:	200005d0 	.word	0x200005d0
 80089b8:	08010710 	.word	0x08010710
 80089bc:	08010727 	.word	0x08010727
 80089c0:	abcd330e 	.word	0xabcd330e
 80089c4:	e66d1234 	.word	0xe66d1234
 80089c8:	0005deec 	.word	0x0005deec
 80089cc:	5851f42d 	.word	0x5851f42d
 80089d0:	4c957f2d 	.word	0x4c957f2d

080089d4 <__cvt>:
 80089d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089d6:	ed2d 8b02 	vpush	{d8}
 80089da:	eeb0 8b40 	vmov.f64	d8, d0
 80089de:	b085      	sub	sp, #20
 80089e0:	4617      	mov	r7, r2
 80089e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80089e4:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80089e6:	ee18 2a90 	vmov	r2, s17
 80089ea:	f025 0520 	bic.w	r5, r5, #32
 80089ee:	2a00      	cmp	r2, #0
 80089f0:	bfb6      	itet	lt
 80089f2:	222d      	movlt	r2, #45	; 0x2d
 80089f4:	2200      	movge	r2, #0
 80089f6:	eeb1 8b40 	vneglt.f64	d8, d0
 80089fa:	2d46      	cmp	r5, #70	; 0x46
 80089fc:	460c      	mov	r4, r1
 80089fe:	701a      	strb	r2, [r3, #0]
 8008a00:	d004      	beq.n	8008a0c <__cvt+0x38>
 8008a02:	2d45      	cmp	r5, #69	; 0x45
 8008a04:	d100      	bne.n	8008a08 <__cvt+0x34>
 8008a06:	3401      	adds	r4, #1
 8008a08:	2102      	movs	r1, #2
 8008a0a:	e000      	b.n	8008a0e <__cvt+0x3a>
 8008a0c:	2103      	movs	r1, #3
 8008a0e:	ab03      	add	r3, sp, #12
 8008a10:	9301      	str	r3, [sp, #4]
 8008a12:	ab02      	add	r3, sp, #8
 8008a14:	9300      	str	r3, [sp, #0]
 8008a16:	4622      	mov	r2, r4
 8008a18:	4633      	mov	r3, r6
 8008a1a:	eeb0 0b48 	vmov.f64	d0, d8
 8008a1e:	f000 ff1f 	bl	8009860 <_dtoa_r>
 8008a22:	2d47      	cmp	r5, #71	; 0x47
 8008a24:	d101      	bne.n	8008a2a <__cvt+0x56>
 8008a26:	07fb      	lsls	r3, r7, #31
 8008a28:	d51a      	bpl.n	8008a60 <__cvt+0x8c>
 8008a2a:	2d46      	cmp	r5, #70	; 0x46
 8008a2c:	eb00 0204 	add.w	r2, r0, r4
 8008a30:	d10c      	bne.n	8008a4c <__cvt+0x78>
 8008a32:	7803      	ldrb	r3, [r0, #0]
 8008a34:	2b30      	cmp	r3, #48	; 0x30
 8008a36:	d107      	bne.n	8008a48 <__cvt+0x74>
 8008a38:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a40:	bf1c      	itt	ne
 8008a42:	f1c4 0401 	rsbne	r4, r4, #1
 8008a46:	6034      	strne	r4, [r6, #0]
 8008a48:	6833      	ldr	r3, [r6, #0]
 8008a4a:	441a      	add	r2, r3
 8008a4c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8008a50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008a54:	bf08      	it	eq
 8008a56:	9203      	streq	r2, [sp, #12]
 8008a58:	2130      	movs	r1, #48	; 0x30
 8008a5a:	9b03      	ldr	r3, [sp, #12]
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d307      	bcc.n	8008a70 <__cvt+0x9c>
 8008a60:	9b03      	ldr	r3, [sp, #12]
 8008a62:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008a64:	1a1b      	subs	r3, r3, r0
 8008a66:	6013      	str	r3, [r2, #0]
 8008a68:	b005      	add	sp, #20
 8008a6a:	ecbd 8b02 	vpop	{d8}
 8008a6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a70:	1c5c      	adds	r4, r3, #1
 8008a72:	9403      	str	r4, [sp, #12]
 8008a74:	7019      	strb	r1, [r3, #0]
 8008a76:	e7f0      	b.n	8008a5a <__cvt+0x86>

08008a78 <__exponent>:
 8008a78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2900      	cmp	r1, #0
 8008a7e:	bfb8      	it	lt
 8008a80:	4249      	neglt	r1, r1
 8008a82:	f803 2b02 	strb.w	r2, [r3], #2
 8008a86:	bfb4      	ite	lt
 8008a88:	222d      	movlt	r2, #45	; 0x2d
 8008a8a:	222b      	movge	r2, #43	; 0x2b
 8008a8c:	2909      	cmp	r1, #9
 8008a8e:	7042      	strb	r2, [r0, #1]
 8008a90:	dd2a      	ble.n	8008ae8 <__exponent+0x70>
 8008a92:	f10d 0207 	add.w	r2, sp, #7
 8008a96:	4617      	mov	r7, r2
 8008a98:	260a      	movs	r6, #10
 8008a9a:	4694      	mov	ip, r2
 8008a9c:	fb91 f5f6 	sdiv	r5, r1, r6
 8008aa0:	fb06 1415 	mls	r4, r6, r5, r1
 8008aa4:	3430      	adds	r4, #48	; 0x30
 8008aa6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008aaa:	460c      	mov	r4, r1
 8008aac:	2c63      	cmp	r4, #99	; 0x63
 8008aae:	f102 32ff 	add.w	r2, r2, #4294967295
 8008ab2:	4629      	mov	r1, r5
 8008ab4:	dcf1      	bgt.n	8008a9a <__exponent+0x22>
 8008ab6:	3130      	adds	r1, #48	; 0x30
 8008ab8:	f1ac 0402 	sub.w	r4, ip, #2
 8008abc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008ac0:	1c41      	adds	r1, r0, #1
 8008ac2:	4622      	mov	r2, r4
 8008ac4:	42ba      	cmp	r2, r7
 8008ac6:	d30a      	bcc.n	8008ade <__exponent+0x66>
 8008ac8:	f10d 0209 	add.w	r2, sp, #9
 8008acc:	eba2 020c 	sub.w	r2, r2, ip
 8008ad0:	42bc      	cmp	r4, r7
 8008ad2:	bf88      	it	hi
 8008ad4:	2200      	movhi	r2, #0
 8008ad6:	4413      	add	r3, r2
 8008ad8:	1a18      	subs	r0, r3, r0
 8008ada:	b003      	add	sp, #12
 8008adc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ade:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008ae2:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008ae6:	e7ed      	b.n	8008ac4 <__exponent+0x4c>
 8008ae8:	2330      	movs	r3, #48	; 0x30
 8008aea:	3130      	adds	r1, #48	; 0x30
 8008aec:	7083      	strb	r3, [r0, #2]
 8008aee:	70c1      	strb	r1, [r0, #3]
 8008af0:	1d03      	adds	r3, r0, #4
 8008af2:	e7f1      	b.n	8008ad8 <__exponent+0x60>
 8008af4:	0000      	movs	r0, r0
	...

08008af8 <_printf_float>:
 8008af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008afc:	b08b      	sub	sp, #44	; 0x2c
 8008afe:	460c      	mov	r4, r1
 8008b00:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8008b04:	4616      	mov	r6, r2
 8008b06:	461f      	mov	r7, r3
 8008b08:	4605      	mov	r5, r0
 8008b0a:	f000 fd6f 	bl	80095ec <_localeconv_r>
 8008b0e:	f8d0 b000 	ldr.w	fp, [r0]
 8008b12:	4658      	mov	r0, fp
 8008b14:	f7f7 fbe4 	bl	80002e0 <strlen>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	9308      	str	r3, [sp, #32]
 8008b1c:	f8d8 3000 	ldr.w	r3, [r8]
 8008b20:	f894 9018 	ldrb.w	r9, [r4, #24]
 8008b24:	6822      	ldr	r2, [r4, #0]
 8008b26:	3307      	adds	r3, #7
 8008b28:	f023 0307 	bic.w	r3, r3, #7
 8008b2c:	f103 0108 	add.w	r1, r3, #8
 8008b30:	f8c8 1000 	str.w	r1, [r8]
 8008b34:	ed93 0b00 	vldr	d0, [r3]
 8008b38:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8008d98 <_printf_float+0x2a0>
 8008b3c:	eeb0 7bc0 	vabs.f64	d7, d0
 8008b40:	eeb4 7b46 	vcmp.f64	d7, d6
 8008b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b48:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8008b4c:	4682      	mov	sl, r0
 8008b4e:	dd24      	ble.n	8008b9a <_printf_float+0xa2>
 8008b50:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8008b54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b58:	d502      	bpl.n	8008b60 <_printf_float+0x68>
 8008b5a:	232d      	movs	r3, #45	; 0x2d
 8008b5c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b60:	498f      	ldr	r1, [pc, #572]	; (8008da0 <_printf_float+0x2a8>)
 8008b62:	4b90      	ldr	r3, [pc, #576]	; (8008da4 <_printf_float+0x2ac>)
 8008b64:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8008b68:	bf94      	ite	ls
 8008b6a:	4688      	movls	r8, r1
 8008b6c:	4698      	movhi	r8, r3
 8008b6e:	2303      	movs	r3, #3
 8008b70:	6123      	str	r3, [r4, #16]
 8008b72:	f022 0204 	bic.w	r2, r2, #4
 8008b76:	2300      	movs	r3, #0
 8008b78:	6022      	str	r2, [r4, #0]
 8008b7a:	9304      	str	r3, [sp, #16]
 8008b7c:	9700      	str	r7, [sp, #0]
 8008b7e:	4633      	mov	r3, r6
 8008b80:	aa09      	add	r2, sp, #36	; 0x24
 8008b82:	4621      	mov	r1, r4
 8008b84:	4628      	mov	r0, r5
 8008b86:	f000 f9d1 	bl	8008f2c <_printf_common>
 8008b8a:	3001      	adds	r0, #1
 8008b8c:	f040 808a 	bne.w	8008ca4 <_printf_float+0x1ac>
 8008b90:	f04f 30ff 	mov.w	r0, #4294967295
 8008b94:	b00b      	add	sp, #44	; 0x2c
 8008b96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b9a:	eeb4 0b40 	vcmp.f64	d0, d0
 8008b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba2:	d709      	bvc.n	8008bb8 <_printf_float+0xc0>
 8008ba4:	ee10 3a90 	vmov	r3, s1
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	bfbc      	itt	lt
 8008bac:	232d      	movlt	r3, #45	; 0x2d
 8008bae:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008bb2:	497d      	ldr	r1, [pc, #500]	; (8008da8 <_printf_float+0x2b0>)
 8008bb4:	4b7d      	ldr	r3, [pc, #500]	; (8008dac <_printf_float+0x2b4>)
 8008bb6:	e7d5      	b.n	8008b64 <_printf_float+0x6c>
 8008bb8:	6863      	ldr	r3, [r4, #4]
 8008bba:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8008bbe:	9104      	str	r1, [sp, #16]
 8008bc0:	1c59      	adds	r1, r3, #1
 8008bc2:	d13c      	bne.n	8008c3e <_printf_float+0x146>
 8008bc4:	2306      	movs	r3, #6
 8008bc6:	6063      	str	r3, [r4, #4]
 8008bc8:	2300      	movs	r3, #0
 8008bca:	9303      	str	r3, [sp, #12]
 8008bcc:	ab08      	add	r3, sp, #32
 8008bce:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8008bd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008bd6:	ab07      	add	r3, sp, #28
 8008bd8:	6861      	ldr	r1, [r4, #4]
 8008bda:	9300      	str	r3, [sp, #0]
 8008bdc:	6022      	str	r2, [r4, #0]
 8008bde:	f10d 031b 	add.w	r3, sp, #27
 8008be2:	4628      	mov	r0, r5
 8008be4:	f7ff fef6 	bl	80089d4 <__cvt>
 8008be8:	9b04      	ldr	r3, [sp, #16]
 8008bea:	9907      	ldr	r1, [sp, #28]
 8008bec:	2b47      	cmp	r3, #71	; 0x47
 8008bee:	4680      	mov	r8, r0
 8008bf0:	d108      	bne.n	8008c04 <_printf_float+0x10c>
 8008bf2:	1cc8      	adds	r0, r1, #3
 8008bf4:	db02      	blt.n	8008bfc <_printf_float+0x104>
 8008bf6:	6863      	ldr	r3, [r4, #4]
 8008bf8:	4299      	cmp	r1, r3
 8008bfa:	dd41      	ble.n	8008c80 <_printf_float+0x188>
 8008bfc:	f1a9 0902 	sub.w	r9, r9, #2
 8008c00:	fa5f f989 	uxtb.w	r9, r9
 8008c04:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008c08:	d820      	bhi.n	8008c4c <_printf_float+0x154>
 8008c0a:	3901      	subs	r1, #1
 8008c0c:	464a      	mov	r2, r9
 8008c0e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008c12:	9107      	str	r1, [sp, #28]
 8008c14:	f7ff ff30 	bl	8008a78 <__exponent>
 8008c18:	9a08      	ldr	r2, [sp, #32]
 8008c1a:	9004      	str	r0, [sp, #16]
 8008c1c:	1813      	adds	r3, r2, r0
 8008c1e:	2a01      	cmp	r2, #1
 8008c20:	6123      	str	r3, [r4, #16]
 8008c22:	dc02      	bgt.n	8008c2a <_printf_float+0x132>
 8008c24:	6822      	ldr	r2, [r4, #0]
 8008c26:	07d2      	lsls	r2, r2, #31
 8008c28:	d501      	bpl.n	8008c2e <_printf_float+0x136>
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	6123      	str	r3, [r4, #16]
 8008c2e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d0a2      	beq.n	8008b7c <_printf_float+0x84>
 8008c36:	232d      	movs	r3, #45	; 0x2d
 8008c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008c3c:	e79e      	b.n	8008b7c <_printf_float+0x84>
 8008c3e:	9904      	ldr	r1, [sp, #16]
 8008c40:	2947      	cmp	r1, #71	; 0x47
 8008c42:	d1c1      	bne.n	8008bc8 <_printf_float+0xd0>
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d1bf      	bne.n	8008bc8 <_printf_float+0xd0>
 8008c48:	2301      	movs	r3, #1
 8008c4a:	e7bc      	b.n	8008bc6 <_printf_float+0xce>
 8008c4c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8008c50:	d118      	bne.n	8008c84 <_printf_float+0x18c>
 8008c52:	2900      	cmp	r1, #0
 8008c54:	6863      	ldr	r3, [r4, #4]
 8008c56:	dd0b      	ble.n	8008c70 <_printf_float+0x178>
 8008c58:	6121      	str	r1, [r4, #16]
 8008c5a:	b913      	cbnz	r3, 8008c62 <_printf_float+0x16a>
 8008c5c:	6822      	ldr	r2, [r4, #0]
 8008c5e:	07d0      	lsls	r0, r2, #31
 8008c60:	d502      	bpl.n	8008c68 <_printf_float+0x170>
 8008c62:	3301      	adds	r3, #1
 8008c64:	440b      	add	r3, r1
 8008c66:	6123      	str	r3, [r4, #16]
 8008c68:	2300      	movs	r3, #0
 8008c6a:	65a1      	str	r1, [r4, #88]	; 0x58
 8008c6c:	9304      	str	r3, [sp, #16]
 8008c6e:	e7de      	b.n	8008c2e <_printf_float+0x136>
 8008c70:	b913      	cbnz	r3, 8008c78 <_printf_float+0x180>
 8008c72:	6822      	ldr	r2, [r4, #0]
 8008c74:	07d2      	lsls	r2, r2, #31
 8008c76:	d501      	bpl.n	8008c7c <_printf_float+0x184>
 8008c78:	3302      	adds	r3, #2
 8008c7a:	e7f4      	b.n	8008c66 <_printf_float+0x16e>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	e7f2      	b.n	8008c66 <_printf_float+0x16e>
 8008c80:	f04f 0967 	mov.w	r9, #103	; 0x67
 8008c84:	9b08      	ldr	r3, [sp, #32]
 8008c86:	4299      	cmp	r1, r3
 8008c88:	db05      	blt.n	8008c96 <_printf_float+0x19e>
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	6121      	str	r1, [r4, #16]
 8008c8e:	07d8      	lsls	r0, r3, #31
 8008c90:	d5ea      	bpl.n	8008c68 <_printf_float+0x170>
 8008c92:	1c4b      	adds	r3, r1, #1
 8008c94:	e7e7      	b.n	8008c66 <_printf_float+0x16e>
 8008c96:	2900      	cmp	r1, #0
 8008c98:	bfd4      	ite	le
 8008c9a:	f1c1 0202 	rsble	r2, r1, #2
 8008c9e:	2201      	movgt	r2, #1
 8008ca0:	4413      	add	r3, r2
 8008ca2:	e7e0      	b.n	8008c66 <_printf_float+0x16e>
 8008ca4:	6823      	ldr	r3, [r4, #0]
 8008ca6:	055a      	lsls	r2, r3, #21
 8008ca8:	d407      	bmi.n	8008cba <_printf_float+0x1c2>
 8008caa:	6923      	ldr	r3, [r4, #16]
 8008cac:	4642      	mov	r2, r8
 8008cae:	4631      	mov	r1, r6
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	47b8      	blx	r7
 8008cb4:	3001      	adds	r0, #1
 8008cb6:	d12a      	bne.n	8008d0e <_printf_float+0x216>
 8008cb8:	e76a      	b.n	8008b90 <_printf_float+0x98>
 8008cba:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008cbe:	f240 80e0 	bls.w	8008e82 <_printf_float+0x38a>
 8008cc2:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008cc6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008cce:	d133      	bne.n	8008d38 <_printf_float+0x240>
 8008cd0:	4a37      	ldr	r2, [pc, #220]	; (8008db0 <_printf_float+0x2b8>)
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	4631      	mov	r1, r6
 8008cd6:	4628      	mov	r0, r5
 8008cd8:	47b8      	blx	r7
 8008cda:	3001      	adds	r0, #1
 8008cdc:	f43f af58 	beq.w	8008b90 <_printf_float+0x98>
 8008ce0:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008ce4:	429a      	cmp	r2, r3
 8008ce6:	db02      	blt.n	8008cee <_printf_float+0x1f6>
 8008ce8:	6823      	ldr	r3, [r4, #0]
 8008cea:	07d8      	lsls	r0, r3, #31
 8008cec:	d50f      	bpl.n	8008d0e <_printf_float+0x216>
 8008cee:	4653      	mov	r3, sl
 8008cf0:	465a      	mov	r2, fp
 8008cf2:	4631      	mov	r1, r6
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	47b8      	blx	r7
 8008cf8:	3001      	adds	r0, #1
 8008cfa:	f43f af49 	beq.w	8008b90 <_printf_float+0x98>
 8008cfe:	f04f 0800 	mov.w	r8, #0
 8008d02:	f104 091a 	add.w	r9, r4, #26
 8008d06:	9b08      	ldr	r3, [sp, #32]
 8008d08:	3b01      	subs	r3, #1
 8008d0a:	4543      	cmp	r3, r8
 8008d0c:	dc09      	bgt.n	8008d22 <_printf_float+0x22a>
 8008d0e:	6823      	ldr	r3, [r4, #0]
 8008d10:	079b      	lsls	r3, r3, #30
 8008d12:	f100 8106 	bmi.w	8008f22 <_printf_float+0x42a>
 8008d16:	68e0      	ldr	r0, [r4, #12]
 8008d18:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d1a:	4298      	cmp	r0, r3
 8008d1c:	bfb8      	it	lt
 8008d1e:	4618      	movlt	r0, r3
 8008d20:	e738      	b.n	8008b94 <_printf_float+0x9c>
 8008d22:	2301      	movs	r3, #1
 8008d24:	464a      	mov	r2, r9
 8008d26:	4631      	mov	r1, r6
 8008d28:	4628      	mov	r0, r5
 8008d2a:	47b8      	blx	r7
 8008d2c:	3001      	adds	r0, #1
 8008d2e:	f43f af2f 	beq.w	8008b90 <_printf_float+0x98>
 8008d32:	f108 0801 	add.w	r8, r8, #1
 8008d36:	e7e6      	b.n	8008d06 <_printf_float+0x20e>
 8008d38:	9b07      	ldr	r3, [sp, #28]
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	dc3a      	bgt.n	8008db4 <_printf_float+0x2bc>
 8008d3e:	4a1c      	ldr	r2, [pc, #112]	; (8008db0 <_printf_float+0x2b8>)
 8008d40:	2301      	movs	r3, #1
 8008d42:	4631      	mov	r1, r6
 8008d44:	4628      	mov	r0, r5
 8008d46:	47b8      	blx	r7
 8008d48:	3001      	adds	r0, #1
 8008d4a:	f43f af21 	beq.w	8008b90 <_printf_float+0x98>
 8008d4e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	d102      	bne.n	8008d5c <_printf_float+0x264>
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	07d9      	lsls	r1, r3, #31
 8008d5a:	d5d8      	bpl.n	8008d0e <_printf_float+0x216>
 8008d5c:	4653      	mov	r3, sl
 8008d5e:	465a      	mov	r2, fp
 8008d60:	4631      	mov	r1, r6
 8008d62:	4628      	mov	r0, r5
 8008d64:	47b8      	blx	r7
 8008d66:	3001      	adds	r0, #1
 8008d68:	f43f af12 	beq.w	8008b90 <_printf_float+0x98>
 8008d6c:	f04f 0900 	mov.w	r9, #0
 8008d70:	f104 0a1a 	add.w	sl, r4, #26
 8008d74:	9b07      	ldr	r3, [sp, #28]
 8008d76:	425b      	negs	r3, r3
 8008d78:	454b      	cmp	r3, r9
 8008d7a:	dc01      	bgt.n	8008d80 <_printf_float+0x288>
 8008d7c:	9b08      	ldr	r3, [sp, #32]
 8008d7e:	e795      	b.n	8008cac <_printf_float+0x1b4>
 8008d80:	2301      	movs	r3, #1
 8008d82:	4652      	mov	r2, sl
 8008d84:	4631      	mov	r1, r6
 8008d86:	4628      	mov	r0, r5
 8008d88:	47b8      	blx	r7
 8008d8a:	3001      	adds	r0, #1
 8008d8c:	f43f af00 	beq.w	8008b90 <_printf_float+0x98>
 8008d90:	f109 0901 	add.w	r9, r9, #1
 8008d94:	e7ee      	b.n	8008d74 <_printf_float+0x27c>
 8008d96:	bf00      	nop
 8008d98:	ffffffff 	.word	0xffffffff
 8008d9c:	7fefffff 	.word	0x7fefffff
 8008da0:	0801077f 	.word	0x0801077f
 8008da4:	08010783 	.word	0x08010783
 8008da8:	08010787 	.word	0x08010787
 8008dac:	0801078b 	.word	0x0801078b
 8008db0:	0801078f 	.word	0x0801078f
 8008db4:	9a08      	ldr	r2, [sp, #32]
 8008db6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008db8:	429a      	cmp	r2, r3
 8008dba:	bfa8      	it	ge
 8008dbc:	461a      	movge	r2, r3
 8008dbe:	2a00      	cmp	r2, #0
 8008dc0:	4691      	mov	r9, r2
 8008dc2:	dc38      	bgt.n	8008e36 <_printf_float+0x33e>
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	9305      	str	r3, [sp, #20]
 8008dc8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008dcc:	f104 021a 	add.w	r2, r4, #26
 8008dd0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008dd2:	9905      	ldr	r1, [sp, #20]
 8008dd4:	9304      	str	r3, [sp, #16]
 8008dd6:	eba3 0309 	sub.w	r3, r3, r9
 8008dda:	428b      	cmp	r3, r1
 8008ddc:	dc33      	bgt.n	8008e46 <_printf_float+0x34e>
 8008dde:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008de2:	429a      	cmp	r2, r3
 8008de4:	db3c      	blt.n	8008e60 <_printf_float+0x368>
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	07da      	lsls	r2, r3, #31
 8008dea:	d439      	bmi.n	8008e60 <_printf_float+0x368>
 8008dec:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8008df0:	eba2 0903 	sub.w	r9, r2, r3
 8008df4:	9b04      	ldr	r3, [sp, #16]
 8008df6:	1ad2      	subs	r2, r2, r3
 8008df8:	4591      	cmp	r9, r2
 8008dfa:	bfa8      	it	ge
 8008dfc:	4691      	movge	r9, r2
 8008dfe:	f1b9 0f00 	cmp.w	r9, #0
 8008e02:	dc35      	bgt.n	8008e70 <_printf_float+0x378>
 8008e04:	f04f 0800 	mov.w	r8, #0
 8008e08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008e0c:	f104 0a1a 	add.w	sl, r4, #26
 8008e10:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008e14:	1a9b      	subs	r3, r3, r2
 8008e16:	eba3 0309 	sub.w	r3, r3, r9
 8008e1a:	4543      	cmp	r3, r8
 8008e1c:	f77f af77 	ble.w	8008d0e <_printf_float+0x216>
 8008e20:	2301      	movs	r3, #1
 8008e22:	4652      	mov	r2, sl
 8008e24:	4631      	mov	r1, r6
 8008e26:	4628      	mov	r0, r5
 8008e28:	47b8      	blx	r7
 8008e2a:	3001      	adds	r0, #1
 8008e2c:	f43f aeb0 	beq.w	8008b90 <_printf_float+0x98>
 8008e30:	f108 0801 	add.w	r8, r8, #1
 8008e34:	e7ec      	b.n	8008e10 <_printf_float+0x318>
 8008e36:	4613      	mov	r3, r2
 8008e38:	4631      	mov	r1, r6
 8008e3a:	4642      	mov	r2, r8
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	47b8      	blx	r7
 8008e40:	3001      	adds	r0, #1
 8008e42:	d1bf      	bne.n	8008dc4 <_printf_float+0x2cc>
 8008e44:	e6a4      	b.n	8008b90 <_printf_float+0x98>
 8008e46:	2301      	movs	r3, #1
 8008e48:	4631      	mov	r1, r6
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	9204      	str	r2, [sp, #16]
 8008e4e:	47b8      	blx	r7
 8008e50:	3001      	adds	r0, #1
 8008e52:	f43f ae9d 	beq.w	8008b90 <_printf_float+0x98>
 8008e56:	9b05      	ldr	r3, [sp, #20]
 8008e58:	9a04      	ldr	r2, [sp, #16]
 8008e5a:	3301      	adds	r3, #1
 8008e5c:	9305      	str	r3, [sp, #20]
 8008e5e:	e7b7      	b.n	8008dd0 <_printf_float+0x2d8>
 8008e60:	4653      	mov	r3, sl
 8008e62:	465a      	mov	r2, fp
 8008e64:	4631      	mov	r1, r6
 8008e66:	4628      	mov	r0, r5
 8008e68:	47b8      	blx	r7
 8008e6a:	3001      	adds	r0, #1
 8008e6c:	d1be      	bne.n	8008dec <_printf_float+0x2f4>
 8008e6e:	e68f      	b.n	8008b90 <_printf_float+0x98>
 8008e70:	9a04      	ldr	r2, [sp, #16]
 8008e72:	464b      	mov	r3, r9
 8008e74:	4442      	add	r2, r8
 8008e76:	4631      	mov	r1, r6
 8008e78:	4628      	mov	r0, r5
 8008e7a:	47b8      	blx	r7
 8008e7c:	3001      	adds	r0, #1
 8008e7e:	d1c1      	bne.n	8008e04 <_printf_float+0x30c>
 8008e80:	e686      	b.n	8008b90 <_printf_float+0x98>
 8008e82:	9a08      	ldr	r2, [sp, #32]
 8008e84:	2a01      	cmp	r2, #1
 8008e86:	dc01      	bgt.n	8008e8c <_printf_float+0x394>
 8008e88:	07db      	lsls	r3, r3, #31
 8008e8a:	d537      	bpl.n	8008efc <_printf_float+0x404>
 8008e8c:	2301      	movs	r3, #1
 8008e8e:	4642      	mov	r2, r8
 8008e90:	4631      	mov	r1, r6
 8008e92:	4628      	mov	r0, r5
 8008e94:	47b8      	blx	r7
 8008e96:	3001      	adds	r0, #1
 8008e98:	f43f ae7a 	beq.w	8008b90 <_printf_float+0x98>
 8008e9c:	4653      	mov	r3, sl
 8008e9e:	465a      	mov	r2, fp
 8008ea0:	4631      	mov	r1, r6
 8008ea2:	4628      	mov	r0, r5
 8008ea4:	47b8      	blx	r7
 8008ea6:	3001      	adds	r0, #1
 8008ea8:	f43f ae72 	beq.w	8008b90 <_printf_float+0x98>
 8008eac:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008eb0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008eb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008eb8:	9b08      	ldr	r3, [sp, #32]
 8008eba:	d01a      	beq.n	8008ef2 <_printf_float+0x3fa>
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	f108 0201 	add.w	r2, r8, #1
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	4628      	mov	r0, r5
 8008ec6:	47b8      	blx	r7
 8008ec8:	3001      	adds	r0, #1
 8008eca:	d10e      	bne.n	8008eea <_printf_float+0x3f2>
 8008ecc:	e660      	b.n	8008b90 <_printf_float+0x98>
 8008ece:	2301      	movs	r3, #1
 8008ed0:	464a      	mov	r2, r9
 8008ed2:	4631      	mov	r1, r6
 8008ed4:	4628      	mov	r0, r5
 8008ed6:	47b8      	blx	r7
 8008ed8:	3001      	adds	r0, #1
 8008eda:	f43f ae59 	beq.w	8008b90 <_printf_float+0x98>
 8008ede:	f108 0801 	add.w	r8, r8, #1
 8008ee2:	9b08      	ldr	r3, [sp, #32]
 8008ee4:	3b01      	subs	r3, #1
 8008ee6:	4543      	cmp	r3, r8
 8008ee8:	dcf1      	bgt.n	8008ece <_printf_float+0x3d6>
 8008eea:	9b04      	ldr	r3, [sp, #16]
 8008eec:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008ef0:	e6dd      	b.n	8008cae <_printf_float+0x1b6>
 8008ef2:	f04f 0800 	mov.w	r8, #0
 8008ef6:	f104 091a 	add.w	r9, r4, #26
 8008efa:	e7f2      	b.n	8008ee2 <_printf_float+0x3ea>
 8008efc:	2301      	movs	r3, #1
 8008efe:	4642      	mov	r2, r8
 8008f00:	e7df      	b.n	8008ec2 <_printf_float+0x3ca>
 8008f02:	2301      	movs	r3, #1
 8008f04:	464a      	mov	r2, r9
 8008f06:	4631      	mov	r1, r6
 8008f08:	4628      	mov	r0, r5
 8008f0a:	47b8      	blx	r7
 8008f0c:	3001      	adds	r0, #1
 8008f0e:	f43f ae3f 	beq.w	8008b90 <_printf_float+0x98>
 8008f12:	f108 0801 	add.w	r8, r8, #1
 8008f16:	68e3      	ldr	r3, [r4, #12]
 8008f18:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f1a:	1a5b      	subs	r3, r3, r1
 8008f1c:	4543      	cmp	r3, r8
 8008f1e:	dcf0      	bgt.n	8008f02 <_printf_float+0x40a>
 8008f20:	e6f9      	b.n	8008d16 <_printf_float+0x21e>
 8008f22:	f04f 0800 	mov.w	r8, #0
 8008f26:	f104 0919 	add.w	r9, r4, #25
 8008f2a:	e7f4      	b.n	8008f16 <_printf_float+0x41e>

08008f2c <_printf_common>:
 8008f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f30:	4616      	mov	r6, r2
 8008f32:	4699      	mov	r9, r3
 8008f34:	688a      	ldr	r2, [r1, #8]
 8008f36:	690b      	ldr	r3, [r1, #16]
 8008f38:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	bfb8      	it	lt
 8008f40:	4613      	movlt	r3, r2
 8008f42:	6033      	str	r3, [r6, #0]
 8008f44:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008f48:	4607      	mov	r7, r0
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	b10a      	cbz	r2, 8008f52 <_printf_common+0x26>
 8008f4e:	3301      	adds	r3, #1
 8008f50:	6033      	str	r3, [r6, #0]
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	0699      	lsls	r1, r3, #26
 8008f56:	bf42      	ittt	mi
 8008f58:	6833      	ldrmi	r3, [r6, #0]
 8008f5a:	3302      	addmi	r3, #2
 8008f5c:	6033      	strmi	r3, [r6, #0]
 8008f5e:	6825      	ldr	r5, [r4, #0]
 8008f60:	f015 0506 	ands.w	r5, r5, #6
 8008f64:	d106      	bne.n	8008f74 <_printf_common+0x48>
 8008f66:	f104 0a19 	add.w	sl, r4, #25
 8008f6a:	68e3      	ldr	r3, [r4, #12]
 8008f6c:	6832      	ldr	r2, [r6, #0]
 8008f6e:	1a9b      	subs	r3, r3, r2
 8008f70:	42ab      	cmp	r3, r5
 8008f72:	dc26      	bgt.n	8008fc2 <_printf_common+0x96>
 8008f74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008f78:	1e13      	subs	r3, r2, #0
 8008f7a:	6822      	ldr	r2, [r4, #0]
 8008f7c:	bf18      	it	ne
 8008f7e:	2301      	movne	r3, #1
 8008f80:	0692      	lsls	r2, r2, #26
 8008f82:	d42b      	bmi.n	8008fdc <_printf_common+0xb0>
 8008f84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008f88:	4649      	mov	r1, r9
 8008f8a:	4638      	mov	r0, r7
 8008f8c:	47c0      	blx	r8
 8008f8e:	3001      	adds	r0, #1
 8008f90:	d01e      	beq.n	8008fd0 <_printf_common+0xa4>
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	6922      	ldr	r2, [r4, #16]
 8008f96:	f003 0306 	and.w	r3, r3, #6
 8008f9a:	2b04      	cmp	r3, #4
 8008f9c:	bf02      	ittt	eq
 8008f9e:	68e5      	ldreq	r5, [r4, #12]
 8008fa0:	6833      	ldreq	r3, [r6, #0]
 8008fa2:	1aed      	subeq	r5, r5, r3
 8008fa4:	68a3      	ldr	r3, [r4, #8]
 8008fa6:	bf0c      	ite	eq
 8008fa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008fac:	2500      	movne	r5, #0
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	bfc4      	itt	gt
 8008fb2:	1a9b      	subgt	r3, r3, r2
 8008fb4:	18ed      	addgt	r5, r5, r3
 8008fb6:	2600      	movs	r6, #0
 8008fb8:	341a      	adds	r4, #26
 8008fba:	42b5      	cmp	r5, r6
 8008fbc:	d11a      	bne.n	8008ff4 <_printf_common+0xc8>
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	e008      	b.n	8008fd4 <_printf_common+0xa8>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	4652      	mov	r2, sl
 8008fc6:	4649      	mov	r1, r9
 8008fc8:	4638      	mov	r0, r7
 8008fca:	47c0      	blx	r8
 8008fcc:	3001      	adds	r0, #1
 8008fce:	d103      	bne.n	8008fd8 <_printf_common+0xac>
 8008fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fd8:	3501      	adds	r5, #1
 8008fda:	e7c6      	b.n	8008f6a <_printf_common+0x3e>
 8008fdc:	18e1      	adds	r1, r4, r3
 8008fde:	1c5a      	adds	r2, r3, #1
 8008fe0:	2030      	movs	r0, #48	; 0x30
 8008fe2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008fe6:	4422      	add	r2, r4
 8008fe8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008fec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008ff0:	3302      	adds	r3, #2
 8008ff2:	e7c7      	b.n	8008f84 <_printf_common+0x58>
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	4622      	mov	r2, r4
 8008ff8:	4649      	mov	r1, r9
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	47c0      	blx	r8
 8008ffe:	3001      	adds	r0, #1
 8009000:	d0e6      	beq.n	8008fd0 <_printf_common+0xa4>
 8009002:	3601      	adds	r6, #1
 8009004:	e7d9      	b.n	8008fba <_printf_common+0x8e>
	...

08009008 <_printf_i>:
 8009008:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800900c:	7e0f      	ldrb	r7, [r1, #24]
 800900e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009010:	2f78      	cmp	r7, #120	; 0x78
 8009012:	4691      	mov	r9, r2
 8009014:	4680      	mov	r8, r0
 8009016:	460c      	mov	r4, r1
 8009018:	469a      	mov	sl, r3
 800901a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800901e:	d807      	bhi.n	8009030 <_printf_i+0x28>
 8009020:	2f62      	cmp	r7, #98	; 0x62
 8009022:	d80a      	bhi.n	800903a <_printf_i+0x32>
 8009024:	2f00      	cmp	r7, #0
 8009026:	f000 80d4 	beq.w	80091d2 <_printf_i+0x1ca>
 800902a:	2f58      	cmp	r7, #88	; 0x58
 800902c:	f000 80c0 	beq.w	80091b0 <_printf_i+0x1a8>
 8009030:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009034:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009038:	e03a      	b.n	80090b0 <_printf_i+0xa8>
 800903a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800903e:	2b15      	cmp	r3, #21
 8009040:	d8f6      	bhi.n	8009030 <_printf_i+0x28>
 8009042:	a101      	add	r1, pc, #4	; (adr r1, 8009048 <_printf_i+0x40>)
 8009044:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009048:	080090a1 	.word	0x080090a1
 800904c:	080090b5 	.word	0x080090b5
 8009050:	08009031 	.word	0x08009031
 8009054:	08009031 	.word	0x08009031
 8009058:	08009031 	.word	0x08009031
 800905c:	08009031 	.word	0x08009031
 8009060:	080090b5 	.word	0x080090b5
 8009064:	08009031 	.word	0x08009031
 8009068:	08009031 	.word	0x08009031
 800906c:	08009031 	.word	0x08009031
 8009070:	08009031 	.word	0x08009031
 8009074:	080091b9 	.word	0x080091b9
 8009078:	080090e1 	.word	0x080090e1
 800907c:	08009173 	.word	0x08009173
 8009080:	08009031 	.word	0x08009031
 8009084:	08009031 	.word	0x08009031
 8009088:	080091db 	.word	0x080091db
 800908c:	08009031 	.word	0x08009031
 8009090:	080090e1 	.word	0x080090e1
 8009094:	08009031 	.word	0x08009031
 8009098:	08009031 	.word	0x08009031
 800909c:	0800917b 	.word	0x0800917b
 80090a0:	682b      	ldr	r3, [r5, #0]
 80090a2:	1d1a      	adds	r2, r3, #4
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	602a      	str	r2, [r5, #0]
 80090a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80090ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80090b0:	2301      	movs	r3, #1
 80090b2:	e09f      	b.n	80091f4 <_printf_i+0x1ec>
 80090b4:	6820      	ldr	r0, [r4, #0]
 80090b6:	682b      	ldr	r3, [r5, #0]
 80090b8:	0607      	lsls	r7, r0, #24
 80090ba:	f103 0104 	add.w	r1, r3, #4
 80090be:	6029      	str	r1, [r5, #0]
 80090c0:	d501      	bpl.n	80090c6 <_printf_i+0xbe>
 80090c2:	681e      	ldr	r6, [r3, #0]
 80090c4:	e003      	b.n	80090ce <_printf_i+0xc6>
 80090c6:	0646      	lsls	r6, r0, #25
 80090c8:	d5fb      	bpl.n	80090c2 <_printf_i+0xba>
 80090ca:	f9b3 6000 	ldrsh.w	r6, [r3]
 80090ce:	2e00      	cmp	r6, #0
 80090d0:	da03      	bge.n	80090da <_printf_i+0xd2>
 80090d2:	232d      	movs	r3, #45	; 0x2d
 80090d4:	4276      	negs	r6, r6
 80090d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090da:	485a      	ldr	r0, [pc, #360]	; (8009244 <_printf_i+0x23c>)
 80090dc:	230a      	movs	r3, #10
 80090de:	e012      	b.n	8009106 <_printf_i+0xfe>
 80090e0:	682b      	ldr	r3, [r5, #0]
 80090e2:	6820      	ldr	r0, [r4, #0]
 80090e4:	1d19      	adds	r1, r3, #4
 80090e6:	6029      	str	r1, [r5, #0]
 80090e8:	0605      	lsls	r5, r0, #24
 80090ea:	d501      	bpl.n	80090f0 <_printf_i+0xe8>
 80090ec:	681e      	ldr	r6, [r3, #0]
 80090ee:	e002      	b.n	80090f6 <_printf_i+0xee>
 80090f0:	0641      	lsls	r1, r0, #25
 80090f2:	d5fb      	bpl.n	80090ec <_printf_i+0xe4>
 80090f4:	881e      	ldrh	r6, [r3, #0]
 80090f6:	4853      	ldr	r0, [pc, #332]	; (8009244 <_printf_i+0x23c>)
 80090f8:	2f6f      	cmp	r7, #111	; 0x6f
 80090fa:	bf0c      	ite	eq
 80090fc:	2308      	moveq	r3, #8
 80090fe:	230a      	movne	r3, #10
 8009100:	2100      	movs	r1, #0
 8009102:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009106:	6865      	ldr	r5, [r4, #4]
 8009108:	60a5      	str	r5, [r4, #8]
 800910a:	2d00      	cmp	r5, #0
 800910c:	bfa2      	ittt	ge
 800910e:	6821      	ldrge	r1, [r4, #0]
 8009110:	f021 0104 	bicge.w	r1, r1, #4
 8009114:	6021      	strge	r1, [r4, #0]
 8009116:	b90e      	cbnz	r6, 800911c <_printf_i+0x114>
 8009118:	2d00      	cmp	r5, #0
 800911a:	d04b      	beq.n	80091b4 <_printf_i+0x1ac>
 800911c:	4615      	mov	r5, r2
 800911e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009122:	fb03 6711 	mls	r7, r3, r1, r6
 8009126:	5dc7      	ldrb	r7, [r0, r7]
 8009128:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800912c:	4637      	mov	r7, r6
 800912e:	42bb      	cmp	r3, r7
 8009130:	460e      	mov	r6, r1
 8009132:	d9f4      	bls.n	800911e <_printf_i+0x116>
 8009134:	2b08      	cmp	r3, #8
 8009136:	d10b      	bne.n	8009150 <_printf_i+0x148>
 8009138:	6823      	ldr	r3, [r4, #0]
 800913a:	07de      	lsls	r6, r3, #31
 800913c:	d508      	bpl.n	8009150 <_printf_i+0x148>
 800913e:	6923      	ldr	r3, [r4, #16]
 8009140:	6861      	ldr	r1, [r4, #4]
 8009142:	4299      	cmp	r1, r3
 8009144:	bfde      	ittt	le
 8009146:	2330      	movle	r3, #48	; 0x30
 8009148:	f805 3c01 	strble.w	r3, [r5, #-1]
 800914c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009150:	1b52      	subs	r2, r2, r5
 8009152:	6122      	str	r2, [r4, #16]
 8009154:	f8cd a000 	str.w	sl, [sp]
 8009158:	464b      	mov	r3, r9
 800915a:	aa03      	add	r2, sp, #12
 800915c:	4621      	mov	r1, r4
 800915e:	4640      	mov	r0, r8
 8009160:	f7ff fee4 	bl	8008f2c <_printf_common>
 8009164:	3001      	adds	r0, #1
 8009166:	d14a      	bne.n	80091fe <_printf_i+0x1f6>
 8009168:	f04f 30ff 	mov.w	r0, #4294967295
 800916c:	b004      	add	sp, #16
 800916e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009172:	6823      	ldr	r3, [r4, #0]
 8009174:	f043 0320 	orr.w	r3, r3, #32
 8009178:	6023      	str	r3, [r4, #0]
 800917a:	4833      	ldr	r0, [pc, #204]	; (8009248 <_printf_i+0x240>)
 800917c:	2778      	movs	r7, #120	; 0x78
 800917e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	6829      	ldr	r1, [r5, #0]
 8009186:	061f      	lsls	r7, r3, #24
 8009188:	f851 6b04 	ldr.w	r6, [r1], #4
 800918c:	d402      	bmi.n	8009194 <_printf_i+0x18c>
 800918e:	065f      	lsls	r7, r3, #25
 8009190:	bf48      	it	mi
 8009192:	b2b6      	uxthmi	r6, r6
 8009194:	07df      	lsls	r7, r3, #31
 8009196:	bf48      	it	mi
 8009198:	f043 0320 	orrmi.w	r3, r3, #32
 800919c:	6029      	str	r1, [r5, #0]
 800919e:	bf48      	it	mi
 80091a0:	6023      	strmi	r3, [r4, #0]
 80091a2:	b91e      	cbnz	r6, 80091ac <_printf_i+0x1a4>
 80091a4:	6823      	ldr	r3, [r4, #0]
 80091a6:	f023 0320 	bic.w	r3, r3, #32
 80091aa:	6023      	str	r3, [r4, #0]
 80091ac:	2310      	movs	r3, #16
 80091ae:	e7a7      	b.n	8009100 <_printf_i+0xf8>
 80091b0:	4824      	ldr	r0, [pc, #144]	; (8009244 <_printf_i+0x23c>)
 80091b2:	e7e4      	b.n	800917e <_printf_i+0x176>
 80091b4:	4615      	mov	r5, r2
 80091b6:	e7bd      	b.n	8009134 <_printf_i+0x12c>
 80091b8:	682b      	ldr	r3, [r5, #0]
 80091ba:	6826      	ldr	r6, [r4, #0]
 80091bc:	6961      	ldr	r1, [r4, #20]
 80091be:	1d18      	adds	r0, r3, #4
 80091c0:	6028      	str	r0, [r5, #0]
 80091c2:	0635      	lsls	r5, r6, #24
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	d501      	bpl.n	80091cc <_printf_i+0x1c4>
 80091c8:	6019      	str	r1, [r3, #0]
 80091ca:	e002      	b.n	80091d2 <_printf_i+0x1ca>
 80091cc:	0670      	lsls	r0, r6, #25
 80091ce:	d5fb      	bpl.n	80091c8 <_printf_i+0x1c0>
 80091d0:	8019      	strh	r1, [r3, #0]
 80091d2:	2300      	movs	r3, #0
 80091d4:	6123      	str	r3, [r4, #16]
 80091d6:	4615      	mov	r5, r2
 80091d8:	e7bc      	b.n	8009154 <_printf_i+0x14c>
 80091da:	682b      	ldr	r3, [r5, #0]
 80091dc:	1d1a      	adds	r2, r3, #4
 80091de:	602a      	str	r2, [r5, #0]
 80091e0:	681d      	ldr	r5, [r3, #0]
 80091e2:	6862      	ldr	r2, [r4, #4]
 80091e4:	2100      	movs	r1, #0
 80091e6:	4628      	mov	r0, r5
 80091e8:	f7f7 f82a 	bl	8000240 <memchr>
 80091ec:	b108      	cbz	r0, 80091f2 <_printf_i+0x1ea>
 80091ee:	1b40      	subs	r0, r0, r5
 80091f0:	6060      	str	r0, [r4, #4]
 80091f2:	6863      	ldr	r3, [r4, #4]
 80091f4:	6123      	str	r3, [r4, #16]
 80091f6:	2300      	movs	r3, #0
 80091f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091fc:	e7aa      	b.n	8009154 <_printf_i+0x14c>
 80091fe:	6923      	ldr	r3, [r4, #16]
 8009200:	462a      	mov	r2, r5
 8009202:	4649      	mov	r1, r9
 8009204:	4640      	mov	r0, r8
 8009206:	47d0      	blx	sl
 8009208:	3001      	adds	r0, #1
 800920a:	d0ad      	beq.n	8009168 <_printf_i+0x160>
 800920c:	6823      	ldr	r3, [r4, #0]
 800920e:	079b      	lsls	r3, r3, #30
 8009210:	d413      	bmi.n	800923a <_printf_i+0x232>
 8009212:	68e0      	ldr	r0, [r4, #12]
 8009214:	9b03      	ldr	r3, [sp, #12]
 8009216:	4298      	cmp	r0, r3
 8009218:	bfb8      	it	lt
 800921a:	4618      	movlt	r0, r3
 800921c:	e7a6      	b.n	800916c <_printf_i+0x164>
 800921e:	2301      	movs	r3, #1
 8009220:	4632      	mov	r2, r6
 8009222:	4649      	mov	r1, r9
 8009224:	4640      	mov	r0, r8
 8009226:	47d0      	blx	sl
 8009228:	3001      	adds	r0, #1
 800922a:	d09d      	beq.n	8009168 <_printf_i+0x160>
 800922c:	3501      	adds	r5, #1
 800922e:	68e3      	ldr	r3, [r4, #12]
 8009230:	9903      	ldr	r1, [sp, #12]
 8009232:	1a5b      	subs	r3, r3, r1
 8009234:	42ab      	cmp	r3, r5
 8009236:	dcf2      	bgt.n	800921e <_printf_i+0x216>
 8009238:	e7eb      	b.n	8009212 <_printf_i+0x20a>
 800923a:	2500      	movs	r5, #0
 800923c:	f104 0619 	add.w	r6, r4, #25
 8009240:	e7f5      	b.n	800922e <_printf_i+0x226>
 8009242:	bf00      	nop
 8009244:	08010791 	.word	0x08010791
 8009248:	080107a2 	.word	0x080107a2

0800924c <__sflush_r>:
 800924c:	898a      	ldrh	r2, [r1, #12]
 800924e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009252:	4605      	mov	r5, r0
 8009254:	0710      	lsls	r0, r2, #28
 8009256:	460c      	mov	r4, r1
 8009258:	d458      	bmi.n	800930c <__sflush_r+0xc0>
 800925a:	684b      	ldr	r3, [r1, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	dc05      	bgt.n	800926c <__sflush_r+0x20>
 8009260:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009262:	2b00      	cmp	r3, #0
 8009264:	dc02      	bgt.n	800926c <__sflush_r+0x20>
 8009266:	2000      	movs	r0, #0
 8009268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800926c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800926e:	2e00      	cmp	r6, #0
 8009270:	d0f9      	beq.n	8009266 <__sflush_r+0x1a>
 8009272:	2300      	movs	r3, #0
 8009274:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009278:	682f      	ldr	r7, [r5, #0]
 800927a:	6a21      	ldr	r1, [r4, #32]
 800927c:	602b      	str	r3, [r5, #0]
 800927e:	d032      	beq.n	80092e6 <__sflush_r+0x9a>
 8009280:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009282:	89a3      	ldrh	r3, [r4, #12]
 8009284:	075a      	lsls	r2, r3, #29
 8009286:	d505      	bpl.n	8009294 <__sflush_r+0x48>
 8009288:	6863      	ldr	r3, [r4, #4]
 800928a:	1ac0      	subs	r0, r0, r3
 800928c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800928e:	b10b      	cbz	r3, 8009294 <__sflush_r+0x48>
 8009290:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009292:	1ac0      	subs	r0, r0, r3
 8009294:	2300      	movs	r3, #0
 8009296:	4602      	mov	r2, r0
 8009298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800929a:	6a21      	ldr	r1, [r4, #32]
 800929c:	4628      	mov	r0, r5
 800929e:	47b0      	blx	r6
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	89a3      	ldrh	r3, [r4, #12]
 80092a4:	d106      	bne.n	80092b4 <__sflush_r+0x68>
 80092a6:	6829      	ldr	r1, [r5, #0]
 80092a8:	291d      	cmp	r1, #29
 80092aa:	d82b      	bhi.n	8009304 <__sflush_r+0xb8>
 80092ac:	4a29      	ldr	r2, [pc, #164]	; (8009354 <__sflush_r+0x108>)
 80092ae:	410a      	asrs	r2, r1
 80092b0:	07d6      	lsls	r6, r2, #31
 80092b2:	d427      	bmi.n	8009304 <__sflush_r+0xb8>
 80092b4:	2200      	movs	r2, #0
 80092b6:	6062      	str	r2, [r4, #4]
 80092b8:	04d9      	lsls	r1, r3, #19
 80092ba:	6922      	ldr	r2, [r4, #16]
 80092bc:	6022      	str	r2, [r4, #0]
 80092be:	d504      	bpl.n	80092ca <__sflush_r+0x7e>
 80092c0:	1c42      	adds	r2, r0, #1
 80092c2:	d101      	bne.n	80092c8 <__sflush_r+0x7c>
 80092c4:	682b      	ldr	r3, [r5, #0]
 80092c6:	b903      	cbnz	r3, 80092ca <__sflush_r+0x7e>
 80092c8:	6560      	str	r0, [r4, #84]	; 0x54
 80092ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80092cc:	602f      	str	r7, [r5, #0]
 80092ce:	2900      	cmp	r1, #0
 80092d0:	d0c9      	beq.n	8009266 <__sflush_r+0x1a>
 80092d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80092d6:	4299      	cmp	r1, r3
 80092d8:	d002      	beq.n	80092e0 <__sflush_r+0x94>
 80092da:	4628      	mov	r0, r5
 80092dc:	f001 f82c 	bl	800a338 <_free_r>
 80092e0:	2000      	movs	r0, #0
 80092e2:	6360      	str	r0, [r4, #52]	; 0x34
 80092e4:	e7c0      	b.n	8009268 <__sflush_r+0x1c>
 80092e6:	2301      	movs	r3, #1
 80092e8:	4628      	mov	r0, r5
 80092ea:	47b0      	blx	r6
 80092ec:	1c41      	adds	r1, r0, #1
 80092ee:	d1c8      	bne.n	8009282 <__sflush_r+0x36>
 80092f0:	682b      	ldr	r3, [r5, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d0c5      	beq.n	8009282 <__sflush_r+0x36>
 80092f6:	2b1d      	cmp	r3, #29
 80092f8:	d001      	beq.n	80092fe <__sflush_r+0xb2>
 80092fa:	2b16      	cmp	r3, #22
 80092fc:	d101      	bne.n	8009302 <__sflush_r+0xb6>
 80092fe:	602f      	str	r7, [r5, #0]
 8009300:	e7b1      	b.n	8009266 <__sflush_r+0x1a>
 8009302:	89a3      	ldrh	r3, [r4, #12]
 8009304:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009308:	81a3      	strh	r3, [r4, #12]
 800930a:	e7ad      	b.n	8009268 <__sflush_r+0x1c>
 800930c:	690f      	ldr	r7, [r1, #16]
 800930e:	2f00      	cmp	r7, #0
 8009310:	d0a9      	beq.n	8009266 <__sflush_r+0x1a>
 8009312:	0793      	lsls	r3, r2, #30
 8009314:	680e      	ldr	r6, [r1, #0]
 8009316:	bf08      	it	eq
 8009318:	694b      	ldreq	r3, [r1, #20]
 800931a:	600f      	str	r7, [r1, #0]
 800931c:	bf18      	it	ne
 800931e:	2300      	movne	r3, #0
 8009320:	eba6 0807 	sub.w	r8, r6, r7
 8009324:	608b      	str	r3, [r1, #8]
 8009326:	f1b8 0f00 	cmp.w	r8, #0
 800932a:	dd9c      	ble.n	8009266 <__sflush_r+0x1a>
 800932c:	6a21      	ldr	r1, [r4, #32]
 800932e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009330:	4643      	mov	r3, r8
 8009332:	463a      	mov	r2, r7
 8009334:	4628      	mov	r0, r5
 8009336:	47b0      	blx	r6
 8009338:	2800      	cmp	r0, #0
 800933a:	dc06      	bgt.n	800934a <__sflush_r+0xfe>
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009342:	81a3      	strh	r3, [r4, #12]
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	e78e      	b.n	8009268 <__sflush_r+0x1c>
 800934a:	4407      	add	r7, r0
 800934c:	eba8 0800 	sub.w	r8, r8, r0
 8009350:	e7e9      	b.n	8009326 <__sflush_r+0xda>
 8009352:	bf00      	nop
 8009354:	dfbffffe 	.word	0xdfbffffe

08009358 <_fflush_r>:
 8009358:	b538      	push	{r3, r4, r5, lr}
 800935a:	690b      	ldr	r3, [r1, #16]
 800935c:	4605      	mov	r5, r0
 800935e:	460c      	mov	r4, r1
 8009360:	b913      	cbnz	r3, 8009368 <_fflush_r+0x10>
 8009362:	2500      	movs	r5, #0
 8009364:	4628      	mov	r0, r5
 8009366:	bd38      	pop	{r3, r4, r5, pc}
 8009368:	b118      	cbz	r0, 8009372 <_fflush_r+0x1a>
 800936a:	6a03      	ldr	r3, [r0, #32]
 800936c:	b90b      	cbnz	r3, 8009372 <_fflush_r+0x1a>
 800936e:	f000 f8a9 	bl	80094c4 <__sinit>
 8009372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d0f3      	beq.n	8009362 <_fflush_r+0xa>
 800937a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800937c:	07d0      	lsls	r0, r2, #31
 800937e:	d404      	bmi.n	800938a <_fflush_r+0x32>
 8009380:	0599      	lsls	r1, r3, #22
 8009382:	d402      	bmi.n	800938a <_fflush_r+0x32>
 8009384:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009386:	f000 f9b5 	bl	80096f4 <__retarget_lock_acquire_recursive>
 800938a:	4628      	mov	r0, r5
 800938c:	4621      	mov	r1, r4
 800938e:	f7ff ff5d 	bl	800924c <__sflush_r>
 8009392:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009394:	07da      	lsls	r2, r3, #31
 8009396:	4605      	mov	r5, r0
 8009398:	d4e4      	bmi.n	8009364 <_fflush_r+0xc>
 800939a:	89a3      	ldrh	r3, [r4, #12]
 800939c:	059b      	lsls	r3, r3, #22
 800939e:	d4e1      	bmi.n	8009364 <_fflush_r+0xc>
 80093a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80093a2:	f000 f9a8 	bl	80096f6 <__retarget_lock_release_recursive>
 80093a6:	e7dd      	b.n	8009364 <_fflush_r+0xc>

080093a8 <fflush>:
 80093a8:	4601      	mov	r1, r0
 80093aa:	b920      	cbnz	r0, 80093b6 <fflush+0xe>
 80093ac:	4a04      	ldr	r2, [pc, #16]	; (80093c0 <fflush+0x18>)
 80093ae:	4905      	ldr	r1, [pc, #20]	; (80093c4 <fflush+0x1c>)
 80093b0:	4805      	ldr	r0, [pc, #20]	; (80093c8 <fflush+0x20>)
 80093b2:	f000 b89f 	b.w	80094f4 <_fwalk_sglue>
 80093b6:	4b05      	ldr	r3, [pc, #20]	; (80093cc <fflush+0x24>)
 80093b8:	6818      	ldr	r0, [r3, #0]
 80093ba:	f7ff bfcd 	b.w	8009358 <_fflush_r>
 80093be:	bf00      	nop
 80093c0:	20000578 	.word	0x20000578
 80093c4:	08009359 	.word	0x08009359
 80093c8:	20000584 	.word	0x20000584
 80093cc:	200005d0 	.word	0x200005d0

080093d0 <std>:
 80093d0:	2300      	movs	r3, #0
 80093d2:	b510      	push	{r4, lr}
 80093d4:	4604      	mov	r4, r0
 80093d6:	e9c0 3300 	strd	r3, r3, [r0]
 80093da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093de:	6083      	str	r3, [r0, #8]
 80093e0:	8181      	strh	r1, [r0, #12]
 80093e2:	6643      	str	r3, [r0, #100]	; 0x64
 80093e4:	81c2      	strh	r2, [r0, #14]
 80093e6:	6183      	str	r3, [r0, #24]
 80093e8:	4619      	mov	r1, r3
 80093ea:	2208      	movs	r2, #8
 80093ec:	305c      	adds	r0, #92	; 0x5c
 80093ee:	f000 f8e2 	bl	80095b6 <memset>
 80093f2:	4b05      	ldr	r3, [pc, #20]	; (8009408 <std+0x38>)
 80093f4:	6263      	str	r3, [r4, #36]	; 0x24
 80093f6:	4b05      	ldr	r3, [pc, #20]	; (800940c <std+0x3c>)
 80093f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80093fa:	4b05      	ldr	r3, [pc, #20]	; (8009410 <std+0x40>)
 80093fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093fe:	4b05      	ldr	r3, [pc, #20]	; (8009414 <std+0x44>)
 8009400:	6224      	str	r4, [r4, #32]
 8009402:	6323      	str	r3, [r4, #48]	; 0x30
 8009404:	bd10      	pop	{r4, pc}
 8009406:	bf00      	nop
 8009408:	08009531 	.word	0x08009531
 800940c:	08009553 	.word	0x08009553
 8009410:	0800958b 	.word	0x0800958b
 8009414:	080095af 	.word	0x080095af

08009418 <stdio_exit_handler>:
 8009418:	4a02      	ldr	r2, [pc, #8]	; (8009424 <stdio_exit_handler+0xc>)
 800941a:	4903      	ldr	r1, [pc, #12]	; (8009428 <stdio_exit_handler+0x10>)
 800941c:	4803      	ldr	r0, [pc, #12]	; (800942c <stdio_exit_handler+0x14>)
 800941e:	f000 b869 	b.w	80094f4 <_fwalk_sglue>
 8009422:	bf00      	nop
 8009424:	20000578 	.word	0x20000578
 8009428:	08009359 	.word	0x08009359
 800942c:	20000584 	.word	0x20000584

08009430 <cleanup_stdio>:
 8009430:	6841      	ldr	r1, [r0, #4]
 8009432:	4b0c      	ldr	r3, [pc, #48]	; (8009464 <cleanup_stdio+0x34>)
 8009434:	4299      	cmp	r1, r3
 8009436:	b510      	push	{r4, lr}
 8009438:	4604      	mov	r4, r0
 800943a:	d001      	beq.n	8009440 <cleanup_stdio+0x10>
 800943c:	f7ff ff8c 	bl	8009358 <_fflush_r>
 8009440:	68a1      	ldr	r1, [r4, #8]
 8009442:	4b09      	ldr	r3, [pc, #36]	; (8009468 <cleanup_stdio+0x38>)
 8009444:	4299      	cmp	r1, r3
 8009446:	d002      	beq.n	800944e <cleanup_stdio+0x1e>
 8009448:	4620      	mov	r0, r4
 800944a:	f7ff ff85 	bl	8009358 <_fflush_r>
 800944e:	68e1      	ldr	r1, [r4, #12]
 8009450:	4b06      	ldr	r3, [pc, #24]	; (800946c <cleanup_stdio+0x3c>)
 8009452:	4299      	cmp	r1, r3
 8009454:	d004      	beq.n	8009460 <cleanup_stdio+0x30>
 8009456:	4620      	mov	r0, r4
 8009458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800945c:	f7ff bf7c 	b.w	8009358 <_fflush_r>
 8009460:	bd10      	pop	{r4, pc}
 8009462:	bf00      	nop
 8009464:	20000dac 	.word	0x20000dac
 8009468:	20000e14 	.word	0x20000e14
 800946c:	20000e7c 	.word	0x20000e7c

08009470 <global_stdio_init.part.0>:
 8009470:	b510      	push	{r4, lr}
 8009472:	4b0b      	ldr	r3, [pc, #44]	; (80094a0 <global_stdio_init.part.0+0x30>)
 8009474:	4c0b      	ldr	r4, [pc, #44]	; (80094a4 <global_stdio_init.part.0+0x34>)
 8009476:	4a0c      	ldr	r2, [pc, #48]	; (80094a8 <global_stdio_init.part.0+0x38>)
 8009478:	601a      	str	r2, [r3, #0]
 800947a:	4620      	mov	r0, r4
 800947c:	2200      	movs	r2, #0
 800947e:	2104      	movs	r1, #4
 8009480:	f7ff ffa6 	bl	80093d0 <std>
 8009484:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009488:	2201      	movs	r2, #1
 800948a:	2109      	movs	r1, #9
 800948c:	f7ff ffa0 	bl	80093d0 <std>
 8009490:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009494:	2202      	movs	r2, #2
 8009496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800949a:	2112      	movs	r1, #18
 800949c:	f7ff bf98 	b.w	80093d0 <std>
 80094a0:	20000ee4 	.word	0x20000ee4
 80094a4:	20000dac 	.word	0x20000dac
 80094a8:	08009419 	.word	0x08009419

080094ac <__sfp_lock_acquire>:
 80094ac:	4801      	ldr	r0, [pc, #4]	; (80094b4 <__sfp_lock_acquire+0x8>)
 80094ae:	f000 b921 	b.w	80096f4 <__retarget_lock_acquire_recursive>
 80094b2:	bf00      	nop
 80094b4:	20000eed 	.word	0x20000eed

080094b8 <__sfp_lock_release>:
 80094b8:	4801      	ldr	r0, [pc, #4]	; (80094c0 <__sfp_lock_release+0x8>)
 80094ba:	f000 b91c 	b.w	80096f6 <__retarget_lock_release_recursive>
 80094be:	bf00      	nop
 80094c0:	20000eed 	.word	0x20000eed

080094c4 <__sinit>:
 80094c4:	b510      	push	{r4, lr}
 80094c6:	4604      	mov	r4, r0
 80094c8:	f7ff fff0 	bl	80094ac <__sfp_lock_acquire>
 80094cc:	6a23      	ldr	r3, [r4, #32]
 80094ce:	b11b      	cbz	r3, 80094d8 <__sinit+0x14>
 80094d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094d4:	f7ff bff0 	b.w	80094b8 <__sfp_lock_release>
 80094d8:	4b04      	ldr	r3, [pc, #16]	; (80094ec <__sinit+0x28>)
 80094da:	6223      	str	r3, [r4, #32]
 80094dc:	4b04      	ldr	r3, [pc, #16]	; (80094f0 <__sinit+0x2c>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	d1f5      	bne.n	80094d0 <__sinit+0xc>
 80094e4:	f7ff ffc4 	bl	8009470 <global_stdio_init.part.0>
 80094e8:	e7f2      	b.n	80094d0 <__sinit+0xc>
 80094ea:	bf00      	nop
 80094ec:	08009431 	.word	0x08009431
 80094f0:	20000ee4 	.word	0x20000ee4

080094f4 <_fwalk_sglue>:
 80094f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094f8:	4607      	mov	r7, r0
 80094fa:	4688      	mov	r8, r1
 80094fc:	4614      	mov	r4, r2
 80094fe:	2600      	movs	r6, #0
 8009500:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009504:	f1b9 0901 	subs.w	r9, r9, #1
 8009508:	d505      	bpl.n	8009516 <_fwalk_sglue+0x22>
 800950a:	6824      	ldr	r4, [r4, #0]
 800950c:	2c00      	cmp	r4, #0
 800950e:	d1f7      	bne.n	8009500 <_fwalk_sglue+0xc>
 8009510:	4630      	mov	r0, r6
 8009512:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009516:	89ab      	ldrh	r3, [r5, #12]
 8009518:	2b01      	cmp	r3, #1
 800951a:	d907      	bls.n	800952c <_fwalk_sglue+0x38>
 800951c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009520:	3301      	adds	r3, #1
 8009522:	d003      	beq.n	800952c <_fwalk_sglue+0x38>
 8009524:	4629      	mov	r1, r5
 8009526:	4638      	mov	r0, r7
 8009528:	47c0      	blx	r8
 800952a:	4306      	orrs	r6, r0
 800952c:	3568      	adds	r5, #104	; 0x68
 800952e:	e7e9      	b.n	8009504 <_fwalk_sglue+0x10>

08009530 <__sread>:
 8009530:	b510      	push	{r4, lr}
 8009532:	460c      	mov	r4, r1
 8009534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009538:	f000 f87e 	bl	8009638 <_read_r>
 800953c:	2800      	cmp	r0, #0
 800953e:	bfab      	itete	ge
 8009540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009542:	89a3      	ldrhlt	r3, [r4, #12]
 8009544:	181b      	addge	r3, r3, r0
 8009546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800954a:	bfac      	ite	ge
 800954c:	6563      	strge	r3, [r4, #84]	; 0x54
 800954e:	81a3      	strhlt	r3, [r4, #12]
 8009550:	bd10      	pop	{r4, pc}

08009552 <__swrite>:
 8009552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009556:	461f      	mov	r7, r3
 8009558:	898b      	ldrh	r3, [r1, #12]
 800955a:	05db      	lsls	r3, r3, #23
 800955c:	4605      	mov	r5, r0
 800955e:	460c      	mov	r4, r1
 8009560:	4616      	mov	r6, r2
 8009562:	d505      	bpl.n	8009570 <__swrite+0x1e>
 8009564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009568:	2302      	movs	r3, #2
 800956a:	2200      	movs	r2, #0
 800956c:	f000 f852 	bl	8009614 <_lseek_r>
 8009570:	89a3      	ldrh	r3, [r4, #12]
 8009572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800957a:	81a3      	strh	r3, [r4, #12]
 800957c:	4632      	mov	r2, r6
 800957e:	463b      	mov	r3, r7
 8009580:	4628      	mov	r0, r5
 8009582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009586:	f000 b879 	b.w	800967c <_write_r>

0800958a <__sseek>:
 800958a:	b510      	push	{r4, lr}
 800958c:	460c      	mov	r4, r1
 800958e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009592:	f000 f83f 	bl	8009614 <_lseek_r>
 8009596:	1c43      	adds	r3, r0, #1
 8009598:	89a3      	ldrh	r3, [r4, #12]
 800959a:	bf15      	itete	ne
 800959c:	6560      	strne	r0, [r4, #84]	; 0x54
 800959e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80095a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80095a6:	81a3      	strheq	r3, [r4, #12]
 80095a8:	bf18      	it	ne
 80095aa:	81a3      	strhne	r3, [r4, #12]
 80095ac:	bd10      	pop	{r4, pc}

080095ae <__sclose>:
 80095ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095b2:	f000 b81f 	b.w	80095f4 <_close_r>

080095b6 <memset>:
 80095b6:	4402      	add	r2, r0
 80095b8:	4603      	mov	r3, r0
 80095ba:	4293      	cmp	r3, r2
 80095bc:	d100      	bne.n	80095c0 <memset+0xa>
 80095be:	4770      	bx	lr
 80095c0:	f803 1b01 	strb.w	r1, [r3], #1
 80095c4:	e7f9      	b.n	80095ba <memset+0x4>

080095c6 <strncmp>:
 80095c6:	b510      	push	{r4, lr}
 80095c8:	b16a      	cbz	r2, 80095e6 <strncmp+0x20>
 80095ca:	3901      	subs	r1, #1
 80095cc:	1884      	adds	r4, r0, r2
 80095ce:	f810 2b01 	ldrb.w	r2, [r0], #1
 80095d2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80095d6:	429a      	cmp	r2, r3
 80095d8:	d103      	bne.n	80095e2 <strncmp+0x1c>
 80095da:	42a0      	cmp	r0, r4
 80095dc:	d001      	beq.n	80095e2 <strncmp+0x1c>
 80095de:	2a00      	cmp	r2, #0
 80095e0:	d1f5      	bne.n	80095ce <strncmp+0x8>
 80095e2:	1ad0      	subs	r0, r2, r3
 80095e4:	bd10      	pop	{r4, pc}
 80095e6:	4610      	mov	r0, r2
 80095e8:	e7fc      	b.n	80095e4 <strncmp+0x1e>
	...

080095ec <_localeconv_r>:
 80095ec:	4800      	ldr	r0, [pc, #0]	; (80095f0 <_localeconv_r+0x4>)
 80095ee:	4770      	bx	lr
 80095f0:	200006c4 	.word	0x200006c4

080095f4 <_close_r>:
 80095f4:	b538      	push	{r3, r4, r5, lr}
 80095f6:	4d06      	ldr	r5, [pc, #24]	; (8009610 <_close_r+0x1c>)
 80095f8:	2300      	movs	r3, #0
 80095fa:	4604      	mov	r4, r0
 80095fc:	4608      	mov	r0, r1
 80095fe:	602b      	str	r3, [r5, #0]
 8009600:	f001 fdee 	bl	800b1e0 <_close>
 8009604:	1c43      	adds	r3, r0, #1
 8009606:	d102      	bne.n	800960e <_close_r+0x1a>
 8009608:	682b      	ldr	r3, [r5, #0]
 800960a:	b103      	cbz	r3, 800960e <_close_r+0x1a>
 800960c:	6023      	str	r3, [r4, #0]
 800960e:	bd38      	pop	{r3, r4, r5, pc}
 8009610:	20000ee8 	.word	0x20000ee8

08009614 <_lseek_r>:
 8009614:	b538      	push	{r3, r4, r5, lr}
 8009616:	4d07      	ldr	r5, [pc, #28]	; (8009634 <_lseek_r+0x20>)
 8009618:	4604      	mov	r4, r0
 800961a:	4608      	mov	r0, r1
 800961c:	4611      	mov	r1, r2
 800961e:	2200      	movs	r2, #0
 8009620:	602a      	str	r2, [r5, #0]
 8009622:	461a      	mov	r2, r3
 8009624:	f001 fe04 	bl	800b230 <_lseek>
 8009628:	1c43      	adds	r3, r0, #1
 800962a:	d102      	bne.n	8009632 <_lseek_r+0x1e>
 800962c:	682b      	ldr	r3, [r5, #0]
 800962e:	b103      	cbz	r3, 8009632 <_lseek_r+0x1e>
 8009630:	6023      	str	r3, [r4, #0]
 8009632:	bd38      	pop	{r3, r4, r5, pc}
 8009634:	20000ee8 	.word	0x20000ee8

08009638 <_read_r>:
 8009638:	b538      	push	{r3, r4, r5, lr}
 800963a:	4d07      	ldr	r5, [pc, #28]	; (8009658 <_read_r+0x20>)
 800963c:	4604      	mov	r4, r0
 800963e:	4608      	mov	r0, r1
 8009640:	4611      	mov	r1, r2
 8009642:	2200      	movs	r2, #0
 8009644:	602a      	str	r2, [r5, #0]
 8009646:	461a      	mov	r2, r3
 8009648:	f001 fdfa 	bl	800b240 <_read>
 800964c:	1c43      	adds	r3, r0, #1
 800964e:	d102      	bne.n	8009656 <_read_r+0x1e>
 8009650:	682b      	ldr	r3, [r5, #0]
 8009652:	b103      	cbz	r3, 8009656 <_read_r+0x1e>
 8009654:	6023      	str	r3, [r4, #0]
 8009656:	bd38      	pop	{r3, r4, r5, pc}
 8009658:	20000ee8 	.word	0x20000ee8

0800965c <_sbrk_r>:
 800965c:	b538      	push	{r3, r4, r5, lr}
 800965e:	4d06      	ldr	r5, [pc, #24]	; (8009678 <_sbrk_r+0x1c>)
 8009660:	2300      	movs	r3, #0
 8009662:	4604      	mov	r4, r0
 8009664:	4608      	mov	r0, r1
 8009666:	602b      	str	r3, [r5, #0]
 8009668:	f7f7 fde4 	bl	8001234 <_sbrk>
 800966c:	1c43      	adds	r3, r0, #1
 800966e:	d102      	bne.n	8009676 <_sbrk_r+0x1a>
 8009670:	682b      	ldr	r3, [r5, #0]
 8009672:	b103      	cbz	r3, 8009676 <_sbrk_r+0x1a>
 8009674:	6023      	str	r3, [r4, #0]
 8009676:	bd38      	pop	{r3, r4, r5, pc}
 8009678:	20000ee8 	.word	0x20000ee8

0800967c <_write_r>:
 800967c:	b538      	push	{r3, r4, r5, lr}
 800967e:	4d07      	ldr	r5, [pc, #28]	; (800969c <_write_r+0x20>)
 8009680:	4604      	mov	r4, r0
 8009682:	4608      	mov	r0, r1
 8009684:	4611      	mov	r1, r2
 8009686:	2200      	movs	r2, #0
 8009688:	602a      	str	r2, [r5, #0]
 800968a:	461a      	mov	r2, r3
 800968c:	f7fa f8a2 	bl	80037d4 <_write>
 8009690:	1c43      	adds	r3, r0, #1
 8009692:	d102      	bne.n	800969a <_write_r+0x1e>
 8009694:	682b      	ldr	r3, [r5, #0]
 8009696:	b103      	cbz	r3, 800969a <_write_r+0x1e>
 8009698:	6023      	str	r3, [r4, #0]
 800969a:	bd38      	pop	{r3, r4, r5, pc}
 800969c:	20000ee8 	.word	0x20000ee8

080096a0 <__errno>:
 80096a0:	4b01      	ldr	r3, [pc, #4]	; (80096a8 <__errno+0x8>)
 80096a2:	6818      	ldr	r0, [r3, #0]
 80096a4:	4770      	bx	lr
 80096a6:	bf00      	nop
 80096a8:	200005d0 	.word	0x200005d0

080096ac <__libc_init_array>:
 80096ac:	b570      	push	{r4, r5, r6, lr}
 80096ae:	4d0d      	ldr	r5, [pc, #52]	; (80096e4 <__libc_init_array+0x38>)
 80096b0:	4c0d      	ldr	r4, [pc, #52]	; (80096e8 <__libc_init_array+0x3c>)
 80096b2:	1b64      	subs	r4, r4, r5
 80096b4:	10a4      	asrs	r4, r4, #2
 80096b6:	2600      	movs	r6, #0
 80096b8:	42a6      	cmp	r6, r4
 80096ba:	d109      	bne.n	80096d0 <__libc_init_array+0x24>
 80096bc:	4d0b      	ldr	r5, [pc, #44]	; (80096ec <__libc_init_array+0x40>)
 80096be:	4c0c      	ldr	r4, [pc, #48]	; (80096f0 <__libc_init_array+0x44>)
 80096c0:	f001 fdc8 	bl	800b254 <_init>
 80096c4:	1b64      	subs	r4, r4, r5
 80096c6:	10a4      	asrs	r4, r4, #2
 80096c8:	2600      	movs	r6, #0
 80096ca:	42a6      	cmp	r6, r4
 80096cc:	d105      	bne.n	80096da <__libc_init_array+0x2e>
 80096ce:	bd70      	pop	{r4, r5, r6, pc}
 80096d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80096d4:	4798      	blx	r3
 80096d6:	3601      	adds	r6, #1
 80096d8:	e7ee      	b.n	80096b8 <__libc_init_array+0xc>
 80096da:	f855 3b04 	ldr.w	r3, [r5], #4
 80096de:	4798      	blx	r3
 80096e0:	3601      	adds	r6, #1
 80096e2:	e7f2      	b.n	80096ca <__libc_init_array+0x1e>
 80096e4:	08010c28 	.word	0x08010c28
 80096e8:	08010c28 	.word	0x08010c28
 80096ec:	08010c28 	.word	0x08010c28
 80096f0:	08010c2c 	.word	0x08010c2c

080096f4 <__retarget_lock_acquire_recursive>:
 80096f4:	4770      	bx	lr

080096f6 <__retarget_lock_release_recursive>:
 80096f6:	4770      	bx	lr

080096f8 <memcpy>:
 80096f8:	440a      	add	r2, r1
 80096fa:	4291      	cmp	r1, r2
 80096fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8009700:	d100      	bne.n	8009704 <memcpy+0xc>
 8009702:	4770      	bx	lr
 8009704:	b510      	push	{r4, lr}
 8009706:	f811 4b01 	ldrb.w	r4, [r1], #1
 800970a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800970e:	4291      	cmp	r1, r2
 8009710:	d1f9      	bne.n	8009706 <memcpy+0xe>
 8009712:	bd10      	pop	{r4, pc}

08009714 <__assert_func>:
 8009714:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009716:	4614      	mov	r4, r2
 8009718:	461a      	mov	r2, r3
 800971a:	4b09      	ldr	r3, [pc, #36]	; (8009740 <__assert_func+0x2c>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4605      	mov	r5, r0
 8009720:	68d8      	ldr	r0, [r3, #12]
 8009722:	b14c      	cbz	r4, 8009738 <__assert_func+0x24>
 8009724:	4b07      	ldr	r3, [pc, #28]	; (8009744 <__assert_func+0x30>)
 8009726:	9100      	str	r1, [sp, #0]
 8009728:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800972c:	4906      	ldr	r1, [pc, #24]	; (8009748 <__assert_func+0x34>)
 800972e:	462b      	mov	r3, r5
 8009730:	f001 f9ca 	bl	800aac8 <fiprintf>
 8009734:	f001 f9da 	bl	800aaec <abort>
 8009738:	4b04      	ldr	r3, [pc, #16]	; (800974c <__assert_func+0x38>)
 800973a:	461c      	mov	r4, r3
 800973c:	e7f3      	b.n	8009726 <__assert_func+0x12>
 800973e:	bf00      	nop
 8009740:	200005d0 	.word	0x200005d0
 8009744:	080107b3 	.word	0x080107b3
 8009748:	080107c0 	.word	0x080107c0
 800974c:	080107ee 	.word	0x080107ee

08009750 <quorem>:
 8009750:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009754:	6903      	ldr	r3, [r0, #16]
 8009756:	690c      	ldr	r4, [r1, #16]
 8009758:	42a3      	cmp	r3, r4
 800975a:	4607      	mov	r7, r0
 800975c:	db7e      	blt.n	800985c <quorem+0x10c>
 800975e:	3c01      	subs	r4, #1
 8009760:	f101 0814 	add.w	r8, r1, #20
 8009764:	f100 0514 	add.w	r5, r0, #20
 8009768:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800976c:	9301      	str	r3, [sp, #4]
 800976e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009772:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009776:	3301      	adds	r3, #1
 8009778:	429a      	cmp	r2, r3
 800977a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800977e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009782:	fbb2 f6f3 	udiv	r6, r2, r3
 8009786:	d331      	bcc.n	80097ec <quorem+0x9c>
 8009788:	f04f 0e00 	mov.w	lr, #0
 800978c:	4640      	mov	r0, r8
 800978e:	46ac      	mov	ip, r5
 8009790:	46f2      	mov	sl, lr
 8009792:	f850 2b04 	ldr.w	r2, [r0], #4
 8009796:	b293      	uxth	r3, r2
 8009798:	fb06 e303 	mla	r3, r6, r3, lr
 800979c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80097a0:	0c1a      	lsrs	r2, r3, #16
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	ebaa 0303 	sub.w	r3, sl, r3
 80097a8:	f8dc a000 	ldr.w	sl, [ip]
 80097ac:	fa13 f38a 	uxtah	r3, r3, sl
 80097b0:	fb06 220e 	mla	r2, r6, lr, r2
 80097b4:	9300      	str	r3, [sp, #0]
 80097b6:	9b00      	ldr	r3, [sp, #0]
 80097b8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80097bc:	b292      	uxth	r2, r2
 80097be:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80097c2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80097c6:	f8bd 3000 	ldrh.w	r3, [sp]
 80097ca:	4581      	cmp	r9, r0
 80097cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097d0:	f84c 3b04 	str.w	r3, [ip], #4
 80097d4:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80097d8:	d2db      	bcs.n	8009792 <quorem+0x42>
 80097da:	f855 300b 	ldr.w	r3, [r5, fp]
 80097de:	b92b      	cbnz	r3, 80097ec <quorem+0x9c>
 80097e0:	9b01      	ldr	r3, [sp, #4]
 80097e2:	3b04      	subs	r3, #4
 80097e4:	429d      	cmp	r5, r3
 80097e6:	461a      	mov	r2, r3
 80097e8:	d32c      	bcc.n	8009844 <quorem+0xf4>
 80097ea:	613c      	str	r4, [r7, #16]
 80097ec:	4638      	mov	r0, r7
 80097ee:	f001 f86b 	bl	800a8c8 <__mcmp>
 80097f2:	2800      	cmp	r0, #0
 80097f4:	db22      	blt.n	800983c <quorem+0xec>
 80097f6:	3601      	adds	r6, #1
 80097f8:	4629      	mov	r1, r5
 80097fa:	2000      	movs	r0, #0
 80097fc:	f858 2b04 	ldr.w	r2, [r8], #4
 8009800:	f8d1 c000 	ldr.w	ip, [r1]
 8009804:	b293      	uxth	r3, r2
 8009806:	1ac3      	subs	r3, r0, r3
 8009808:	0c12      	lsrs	r2, r2, #16
 800980a:	fa13 f38c 	uxtah	r3, r3, ip
 800980e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8009812:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009816:	b29b      	uxth	r3, r3
 8009818:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800981c:	45c1      	cmp	r9, r8
 800981e:	f841 3b04 	str.w	r3, [r1], #4
 8009822:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009826:	d2e9      	bcs.n	80097fc <quorem+0xac>
 8009828:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800982c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009830:	b922      	cbnz	r2, 800983c <quorem+0xec>
 8009832:	3b04      	subs	r3, #4
 8009834:	429d      	cmp	r5, r3
 8009836:	461a      	mov	r2, r3
 8009838:	d30a      	bcc.n	8009850 <quorem+0x100>
 800983a:	613c      	str	r4, [r7, #16]
 800983c:	4630      	mov	r0, r6
 800983e:	b003      	add	sp, #12
 8009840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009844:	6812      	ldr	r2, [r2, #0]
 8009846:	3b04      	subs	r3, #4
 8009848:	2a00      	cmp	r2, #0
 800984a:	d1ce      	bne.n	80097ea <quorem+0x9a>
 800984c:	3c01      	subs	r4, #1
 800984e:	e7c9      	b.n	80097e4 <quorem+0x94>
 8009850:	6812      	ldr	r2, [r2, #0]
 8009852:	3b04      	subs	r3, #4
 8009854:	2a00      	cmp	r2, #0
 8009856:	d1f0      	bne.n	800983a <quorem+0xea>
 8009858:	3c01      	subs	r4, #1
 800985a:	e7eb      	b.n	8009834 <quorem+0xe4>
 800985c:	2000      	movs	r0, #0
 800985e:	e7ee      	b.n	800983e <quorem+0xee>

08009860 <_dtoa_r>:
 8009860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009864:	ed2d 8b02 	vpush	{d8}
 8009868:	69c5      	ldr	r5, [r0, #28]
 800986a:	b091      	sub	sp, #68	; 0x44
 800986c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009870:	ec59 8b10 	vmov	r8, r9, d0
 8009874:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8009876:	9106      	str	r1, [sp, #24]
 8009878:	4606      	mov	r6, r0
 800987a:	9208      	str	r2, [sp, #32]
 800987c:	930c      	str	r3, [sp, #48]	; 0x30
 800987e:	b975      	cbnz	r5, 800989e <_dtoa_r+0x3e>
 8009880:	2010      	movs	r0, #16
 8009882:	f7f9 ffd9 	bl	8003838 <__wrap_malloc>
 8009886:	4602      	mov	r2, r0
 8009888:	61f0      	str	r0, [r6, #28]
 800988a:	b920      	cbnz	r0, 8009896 <_dtoa_r+0x36>
 800988c:	4ba6      	ldr	r3, [pc, #664]	; (8009b28 <_dtoa_r+0x2c8>)
 800988e:	21ef      	movs	r1, #239	; 0xef
 8009890:	48a6      	ldr	r0, [pc, #664]	; (8009b2c <_dtoa_r+0x2cc>)
 8009892:	f7ff ff3f 	bl	8009714 <__assert_func>
 8009896:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800989a:	6005      	str	r5, [r0, #0]
 800989c:	60c5      	str	r5, [r0, #12]
 800989e:	69f3      	ldr	r3, [r6, #28]
 80098a0:	6819      	ldr	r1, [r3, #0]
 80098a2:	b151      	cbz	r1, 80098ba <_dtoa_r+0x5a>
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	604a      	str	r2, [r1, #4]
 80098a8:	2301      	movs	r3, #1
 80098aa:	4093      	lsls	r3, r2
 80098ac:	608b      	str	r3, [r1, #8]
 80098ae:	4630      	mov	r0, r6
 80098b0:	f000 fdce 	bl	800a450 <_Bfree>
 80098b4:	69f3      	ldr	r3, [r6, #28]
 80098b6:	2200      	movs	r2, #0
 80098b8:	601a      	str	r2, [r3, #0]
 80098ba:	f1b9 0300 	subs.w	r3, r9, #0
 80098be:	bfbb      	ittet	lt
 80098c0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80098c4:	9303      	strlt	r3, [sp, #12]
 80098c6:	2300      	movge	r3, #0
 80098c8:	2201      	movlt	r2, #1
 80098ca:	bfac      	ite	ge
 80098cc:	6023      	strge	r3, [r4, #0]
 80098ce:	6022      	strlt	r2, [r4, #0]
 80098d0:	4b97      	ldr	r3, [pc, #604]	; (8009b30 <_dtoa_r+0x2d0>)
 80098d2:	9c03      	ldr	r4, [sp, #12]
 80098d4:	43a3      	bics	r3, r4
 80098d6:	d11c      	bne.n	8009912 <_dtoa_r+0xb2>
 80098d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80098da:	f242 730f 	movw	r3, #9999	; 0x270f
 80098de:	6013      	str	r3, [r2, #0]
 80098e0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80098e4:	ea53 0308 	orrs.w	r3, r3, r8
 80098e8:	f000 84fb 	beq.w	800a2e2 <_dtoa_r+0xa82>
 80098ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80098ee:	b963      	cbnz	r3, 800990a <_dtoa_r+0xaa>
 80098f0:	4b90      	ldr	r3, [pc, #576]	; (8009b34 <_dtoa_r+0x2d4>)
 80098f2:	e020      	b.n	8009936 <_dtoa_r+0xd6>
 80098f4:	4b90      	ldr	r3, [pc, #576]	; (8009b38 <_dtoa_r+0x2d8>)
 80098f6:	9301      	str	r3, [sp, #4]
 80098f8:	3308      	adds	r3, #8
 80098fa:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80098fc:	6013      	str	r3, [r2, #0]
 80098fe:	9801      	ldr	r0, [sp, #4]
 8009900:	b011      	add	sp, #68	; 0x44
 8009902:	ecbd 8b02 	vpop	{d8}
 8009906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800990a:	4b8a      	ldr	r3, [pc, #552]	; (8009b34 <_dtoa_r+0x2d4>)
 800990c:	9301      	str	r3, [sp, #4]
 800990e:	3303      	adds	r3, #3
 8009910:	e7f3      	b.n	80098fa <_dtoa_r+0x9a>
 8009912:	ed9d 8b02 	vldr	d8, [sp, #8]
 8009916:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800991a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800991e:	d10c      	bne.n	800993a <_dtoa_r+0xda>
 8009920:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009922:	2301      	movs	r3, #1
 8009924:	6013      	str	r3, [r2, #0]
 8009926:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 84d7 	beq.w	800a2dc <_dtoa_r+0xa7c>
 800992e:	4b83      	ldr	r3, [pc, #524]	; (8009b3c <_dtoa_r+0x2dc>)
 8009930:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8009932:	6013      	str	r3, [r2, #0]
 8009934:	3b01      	subs	r3, #1
 8009936:	9301      	str	r3, [sp, #4]
 8009938:	e7e1      	b.n	80098fe <_dtoa_r+0x9e>
 800993a:	aa0e      	add	r2, sp, #56	; 0x38
 800993c:	a90f      	add	r1, sp, #60	; 0x3c
 800993e:	4630      	mov	r0, r6
 8009940:	eeb0 0b48 	vmov.f64	d0, d8
 8009944:	f001 f866 	bl	800aa14 <__d2b>
 8009948:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800994c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800994e:	4605      	mov	r5, r0
 8009950:	2b00      	cmp	r3, #0
 8009952:	d046      	beq.n	80099e2 <_dtoa_r+0x182>
 8009954:	eeb0 7b48 	vmov.f64	d7, d8
 8009958:	ee18 1a90 	vmov	r1, s17
 800995c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8009960:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8009964:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8009968:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800996c:	2000      	movs	r0, #0
 800996e:	ee07 1a90 	vmov	s15, r1
 8009972:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8009976:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009b10 <_dtoa_r+0x2b0>
 800997a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800997e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8009b18 <_dtoa_r+0x2b8>
 8009982:	eea7 6b05 	vfma.f64	d6, d7, d5
 8009986:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8009b20 <_dtoa_r+0x2c0>
 800998a:	ee07 3a90 	vmov	s15, r3
 800998e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8009992:	eeb0 7b46 	vmov.f64	d7, d6
 8009996:	eea4 7b05 	vfma.f64	d7, d4, d5
 800999a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800999e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80099a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099a6:	ee16 ba90 	vmov	fp, s13
 80099aa:	9009      	str	r0, [sp, #36]	; 0x24
 80099ac:	d508      	bpl.n	80099c0 <_dtoa_r+0x160>
 80099ae:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80099b2:	eeb4 6b47 	vcmp.f64	d6, d7
 80099b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099ba:	bf18      	it	ne
 80099bc:	f10b 3bff 	addne.w	fp, fp, #4294967295
 80099c0:	f1bb 0f16 	cmp.w	fp, #22
 80099c4:	d82b      	bhi.n	8009a1e <_dtoa_r+0x1be>
 80099c6:	495e      	ldr	r1, [pc, #376]	; (8009b40 <_dtoa_r+0x2e0>)
 80099c8:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 80099cc:	ed91 7b00 	vldr	d7, [r1]
 80099d0:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80099d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80099d8:	d501      	bpl.n	80099de <_dtoa_r+0x17e>
 80099da:	f10b 3bff 	add.w	fp, fp, #4294967295
 80099de:	2100      	movs	r1, #0
 80099e0:	e01e      	b.n	8009a20 <_dtoa_r+0x1c0>
 80099e2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80099e4:	4413      	add	r3, r2
 80099e6:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80099ea:	2920      	cmp	r1, #32
 80099ec:	bfc1      	itttt	gt
 80099ee:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80099f2:	408c      	lslgt	r4, r1
 80099f4:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80099f8:	fa28 f101 	lsrgt.w	r1, r8, r1
 80099fc:	bfd6      	itet	le
 80099fe:	f1c1 0120 	rsble	r1, r1, #32
 8009a02:	4321      	orrgt	r1, r4
 8009a04:	fa08 f101 	lslle.w	r1, r8, r1
 8009a08:	ee07 1a90 	vmov	s15, r1
 8009a0c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8009a10:	3b01      	subs	r3, #1
 8009a12:	ee17 1a90 	vmov	r1, s15
 8009a16:	2001      	movs	r0, #1
 8009a18:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8009a1c:	e7a7      	b.n	800996e <_dtoa_r+0x10e>
 8009a1e:	2101      	movs	r1, #1
 8009a20:	1ad2      	subs	r2, r2, r3
 8009a22:	1e53      	subs	r3, r2, #1
 8009a24:	9305      	str	r3, [sp, #20]
 8009a26:	bf45      	ittet	mi
 8009a28:	f1c2 0301 	rsbmi	r3, r2, #1
 8009a2c:	9304      	strmi	r3, [sp, #16]
 8009a2e:	2300      	movpl	r3, #0
 8009a30:	2300      	movmi	r3, #0
 8009a32:	bf4c      	ite	mi
 8009a34:	9305      	strmi	r3, [sp, #20]
 8009a36:	9304      	strpl	r3, [sp, #16]
 8009a38:	f1bb 0f00 	cmp.w	fp, #0
 8009a3c:	910b      	str	r1, [sp, #44]	; 0x2c
 8009a3e:	db18      	blt.n	8009a72 <_dtoa_r+0x212>
 8009a40:	9b05      	ldr	r3, [sp, #20]
 8009a42:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8009a46:	445b      	add	r3, fp
 8009a48:	9305      	str	r3, [sp, #20]
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	9a06      	ldr	r2, [sp, #24]
 8009a4e:	2a09      	cmp	r2, #9
 8009a50:	d848      	bhi.n	8009ae4 <_dtoa_r+0x284>
 8009a52:	2a05      	cmp	r2, #5
 8009a54:	bfc4      	itt	gt
 8009a56:	3a04      	subgt	r2, #4
 8009a58:	9206      	strgt	r2, [sp, #24]
 8009a5a:	9a06      	ldr	r2, [sp, #24]
 8009a5c:	f1a2 0202 	sub.w	r2, r2, #2
 8009a60:	bfcc      	ite	gt
 8009a62:	2400      	movgt	r4, #0
 8009a64:	2401      	movle	r4, #1
 8009a66:	2a03      	cmp	r2, #3
 8009a68:	d847      	bhi.n	8009afa <_dtoa_r+0x29a>
 8009a6a:	e8df f002 	tbb	[pc, r2]
 8009a6e:	2d0b      	.short	0x2d0b
 8009a70:	392b      	.short	0x392b
 8009a72:	9b04      	ldr	r3, [sp, #16]
 8009a74:	2200      	movs	r2, #0
 8009a76:	eba3 030b 	sub.w	r3, r3, fp
 8009a7a:	9304      	str	r3, [sp, #16]
 8009a7c:	920a      	str	r2, [sp, #40]	; 0x28
 8009a7e:	f1cb 0300 	rsb	r3, fp, #0
 8009a82:	e7e3      	b.n	8009a4c <_dtoa_r+0x1ec>
 8009a84:	2200      	movs	r2, #0
 8009a86:	9207      	str	r2, [sp, #28]
 8009a88:	9a08      	ldr	r2, [sp, #32]
 8009a8a:	2a00      	cmp	r2, #0
 8009a8c:	dc38      	bgt.n	8009b00 <_dtoa_r+0x2a0>
 8009a8e:	f04f 0a01 	mov.w	sl, #1
 8009a92:	46d1      	mov	r9, sl
 8009a94:	4652      	mov	r2, sl
 8009a96:	f8cd a020 	str.w	sl, [sp, #32]
 8009a9a:	69f7      	ldr	r7, [r6, #28]
 8009a9c:	2100      	movs	r1, #0
 8009a9e:	2004      	movs	r0, #4
 8009aa0:	f100 0c14 	add.w	ip, r0, #20
 8009aa4:	4594      	cmp	ip, r2
 8009aa6:	d930      	bls.n	8009b0a <_dtoa_r+0x2aa>
 8009aa8:	6079      	str	r1, [r7, #4]
 8009aaa:	4630      	mov	r0, r6
 8009aac:	930d      	str	r3, [sp, #52]	; 0x34
 8009aae:	f000 fc8f 	bl	800a3d0 <_Balloc>
 8009ab2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ab4:	9001      	str	r0, [sp, #4]
 8009ab6:	4602      	mov	r2, r0
 8009ab8:	2800      	cmp	r0, #0
 8009aba:	d145      	bne.n	8009b48 <_dtoa_r+0x2e8>
 8009abc:	4b21      	ldr	r3, [pc, #132]	; (8009b44 <_dtoa_r+0x2e4>)
 8009abe:	f240 11af 	movw	r1, #431	; 0x1af
 8009ac2:	e6e5      	b.n	8009890 <_dtoa_r+0x30>
 8009ac4:	2201      	movs	r2, #1
 8009ac6:	e7de      	b.n	8009a86 <_dtoa_r+0x226>
 8009ac8:	2200      	movs	r2, #0
 8009aca:	9207      	str	r2, [sp, #28]
 8009acc:	9a08      	ldr	r2, [sp, #32]
 8009ace:	eb0b 0a02 	add.w	sl, fp, r2
 8009ad2:	f10a 0901 	add.w	r9, sl, #1
 8009ad6:	464a      	mov	r2, r9
 8009ad8:	2a01      	cmp	r2, #1
 8009ada:	bfb8      	it	lt
 8009adc:	2201      	movlt	r2, #1
 8009ade:	e7dc      	b.n	8009a9a <_dtoa_r+0x23a>
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	e7f2      	b.n	8009aca <_dtoa_r+0x26a>
 8009ae4:	2401      	movs	r4, #1
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8009aec:	f04f 3aff 	mov.w	sl, #4294967295
 8009af0:	2100      	movs	r1, #0
 8009af2:	46d1      	mov	r9, sl
 8009af4:	2212      	movs	r2, #18
 8009af6:	9108      	str	r1, [sp, #32]
 8009af8:	e7cf      	b.n	8009a9a <_dtoa_r+0x23a>
 8009afa:	2201      	movs	r2, #1
 8009afc:	9207      	str	r2, [sp, #28]
 8009afe:	e7f5      	b.n	8009aec <_dtoa_r+0x28c>
 8009b00:	f8dd a020 	ldr.w	sl, [sp, #32]
 8009b04:	46d1      	mov	r9, sl
 8009b06:	4652      	mov	r2, sl
 8009b08:	e7c7      	b.n	8009a9a <_dtoa_r+0x23a>
 8009b0a:	3101      	adds	r1, #1
 8009b0c:	0040      	lsls	r0, r0, #1
 8009b0e:	e7c7      	b.n	8009aa0 <_dtoa_r+0x240>
 8009b10:	636f4361 	.word	0x636f4361
 8009b14:	3fd287a7 	.word	0x3fd287a7
 8009b18:	8b60c8b3 	.word	0x8b60c8b3
 8009b1c:	3fc68a28 	.word	0x3fc68a28
 8009b20:	509f79fb 	.word	0x509f79fb
 8009b24:	3fd34413 	.word	0x3fd34413
 8009b28:	08010710 	.word	0x08010710
 8009b2c:	080107fc 	.word	0x080107fc
 8009b30:	7ff00000 	.word	0x7ff00000
 8009b34:	080107f8 	.word	0x080107f8
 8009b38:	080107ef 	.word	0x080107ef
 8009b3c:	08010790 	.word	0x08010790
 8009b40:	080108e8 	.word	0x080108e8
 8009b44:	08010854 	.word	0x08010854
 8009b48:	69f2      	ldr	r2, [r6, #28]
 8009b4a:	9901      	ldr	r1, [sp, #4]
 8009b4c:	6011      	str	r1, [r2, #0]
 8009b4e:	f1b9 0f0e 	cmp.w	r9, #14
 8009b52:	d86c      	bhi.n	8009c2e <_dtoa_r+0x3ce>
 8009b54:	2c00      	cmp	r4, #0
 8009b56:	d06a      	beq.n	8009c2e <_dtoa_r+0x3ce>
 8009b58:	f1bb 0f00 	cmp.w	fp, #0
 8009b5c:	f340 80a0 	ble.w	8009ca0 <_dtoa_r+0x440>
 8009b60:	4ac1      	ldr	r2, [pc, #772]	; (8009e68 <_dtoa_r+0x608>)
 8009b62:	f00b 010f 	and.w	r1, fp, #15
 8009b66:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8009b6a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009b6e:	ed92 7b00 	vldr	d7, [r2]
 8009b72:	ea4f 122b 	mov.w	r2, fp, asr #4
 8009b76:	f000 8087 	beq.w	8009c88 <_dtoa_r+0x428>
 8009b7a:	49bc      	ldr	r1, [pc, #752]	; (8009e6c <_dtoa_r+0x60c>)
 8009b7c:	ed91 6b08 	vldr	d6, [r1, #32]
 8009b80:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8009b84:	ed8d 6b02 	vstr	d6, [sp, #8]
 8009b88:	f002 020f 	and.w	r2, r2, #15
 8009b8c:	2103      	movs	r1, #3
 8009b8e:	48b7      	ldr	r0, [pc, #732]	; (8009e6c <_dtoa_r+0x60c>)
 8009b90:	2a00      	cmp	r2, #0
 8009b92:	d17b      	bne.n	8009c8c <_dtoa_r+0x42c>
 8009b94:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009b98:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8009b9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009ba0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009ba2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009ba6:	2a00      	cmp	r2, #0
 8009ba8:	f000 80a0 	beq.w	8009cec <_dtoa_r+0x48c>
 8009bac:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8009bb0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009bb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bb8:	f140 8098 	bpl.w	8009cec <_dtoa_r+0x48c>
 8009bbc:	f1b9 0f00 	cmp.w	r9, #0
 8009bc0:	f000 8094 	beq.w	8009cec <_dtoa_r+0x48c>
 8009bc4:	f1ba 0f00 	cmp.w	sl, #0
 8009bc8:	dd2f      	ble.n	8009c2a <_dtoa_r+0x3ca>
 8009bca:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8009bce:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009bd2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009bd6:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009bda:	3101      	adds	r1, #1
 8009bdc:	4654      	mov	r4, sl
 8009bde:	ed9d 6b02 	vldr	d6, [sp, #8]
 8009be2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8009be6:	ee07 1a90 	vmov	s15, r1
 8009bea:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8009bee:	eea7 5b06 	vfma.f64	d5, d7, d6
 8009bf2:	ee15 7a90 	vmov	r7, s11
 8009bf6:	ec51 0b15 	vmov	r0, r1, d5
 8009bfa:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8009bfe:	2c00      	cmp	r4, #0
 8009c00:	d177      	bne.n	8009cf2 <_dtoa_r+0x492>
 8009c02:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009c06:	ee36 6b47 	vsub.f64	d6, d6, d7
 8009c0a:	ec41 0b17 	vmov	d7, r0, r1
 8009c0e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c16:	f300 826a 	bgt.w	800a0ee <_dtoa_r+0x88e>
 8009c1a:	eeb1 7b47 	vneg.f64	d7, d7
 8009c1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c26:	f100 8260 	bmi.w	800a0ea <_dtoa_r+0x88a>
 8009c2a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8009c2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009c30:	2a00      	cmp	r2, #0
 8009c32:	f2c0 811d 	blt.w	8009e70 <_dtoa_r+0x610>
 8009c36:	f1bb 0f0e 	cmp.w	fp, #14
 8009c3a:	f300 8119 	bgt.w	8009e70 <_dtoa_r+0x610>
 8009c3e:	4b8a      	ldr	r3, [pc, #552]	; (8009e68 <_dtoa_r+0x608>)
 8009c40:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009c44:	ed93 6b00 	vldr	d6, [r3]
 8009c48:	9b08      	ldr	r3, [sp, #32]
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	f280 80b7 	bge.w	8009dbe <_dtoa_r+0x55e>
 8009c50:	f1b9 0f00 	cmp.w	r9, #0
 8009c54:	f300 80b3 	bgt.w	8009dbe <_dtoa_r+0x55e>
 8009c58:	f040 8246 	bne.w	800a0e8 <_dtoa_r+0x888>
 8009c5c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8009c60:	ee26 6b07 	vmul.f64	d6, d6, d7
 8009c64:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009c68:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c70:	464c      	mov	r4, r9
 8009c72:	464f      	mov	r7, r9
 8009c74:	f280 821c 	bge.w	800a0b0 <_dtoa_r+0x850>
 8009c78:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009c7c:	2331      	movs	r3, #49	; 0x31
 8009c7e:	f808 3b01 	strb.w	r3, [r8], #1
 8009c82:	f10b 0b01 	add.w	fp, fp, #1
 8009c86:	e218      	b.n	800a0ba <_dtoa_r+0x85a>
 8009c88:	2102      	movs	r1, #2
 8009c8a:	e780      	b.n	8009b8e <_dtoa_r+0x32e>
 8009c8c:	07d4      	lsls	r4, r2, #31
 8009c8e:	d504      	bpl.n	8009c9a <_dtoa_r+0x43a>
 8009c90:	ed90 6b00 	vldr	d6, [r0]
 8009c94:	3101      	adds	r1, #1
 8009c96:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009c9a:	1052      	asrs	r2, r2, #1
 8009c9c:	3008      	adds	r0, #8
 8009c9e:	e777      	b.n	8009b90 <_dtoa_r+0x330>
 8009ca0:	d022      	beq.n	8009ce8 <_dtoa_r+0x488>
 8009ca2:	f1cb 0200 	rsb	r2, fp, #0
 8009ca6:	4970      	ldr	r1, [pc, #448]	; (8009e68 <_dtoa_r+0x608>)
 8009ca8:	f002 000f 	and.w	r0, r2, #15
 8009cac:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8009cb0:	ed91 7b00 	vldr	d7, [r1]
 8009cb4:	ee28 7b07 	vmul.f64	d7, d8, d7
 8009cb8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cbc:	486b      	ldr	r0, [pc, #428]	; (8009e6c <_dtoa_r+0x60c>)
 8009cbe:	1112      	asrs	r2, r2, #4
 8009cc0:	2400      	movs	r4, #0
 8009cc2:	2102      	movs	r1, #2
 8009cc4:	b92a      	cbnz	r2, 8009cd2 <_dtoa_r+0x472>
 8009cc6:	2c00      	cmp	r4, #0
 8009cc8:	f43f af6a 	beq.w	8009ba0 <_dtoa_r+0x340>
 8009ccc:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009cd0:	e766      	b.n	8009ba0 <_dtoa_r+0x340>
 8009cd2:	07d7      	lsls	r7, r2, #31
 8009cd4:	d505      	bpl.n	8009ce2 <_dtoa_r+0x482>
 8009cd6:	ed90 6b00 	vldr	d6, [r0]
 8009cda:	3101      	adds	r1, #1
 8009cdc:	2401      	movs	r4, #1
 8009cde:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009ce2:	1052      	asrs	r2, r2, #1
 8009ce4:	3008      	adds	r0, #8
 8009ce6:	e7ed      	b.n	8009cc4 <_dtoa_r+0x464>
 8009ce8:	2102      	movs	r1, #2
 8009cea:	e759      	b.n	8009ba0 <_dtoa_r+0x340>
 8009cec:	465a      	mov	r2, fp
 8009cee:	464c      	mov	r4, r9
 8009cf0:	e775      	b.n	8009bde <_dtoa_r+0x37e>
 8009cf2:	ec41 0b17 	vmov	d7, r0, r1
 8009cf6:	495c      	ldr	r1, [pc, #368]	; (8009e68 <_dtoa_r+0x608>)
 8009cf8:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8009cfc:	ed11 4b02 	vldr	d4, [r1, #-8]
 8009d00:	9901      	ldr	r1, [sp, #4]
 8009d02:	440c      	add	r4, r1
 8009d04:	9907      	ldr	r1, [sp, #28]
 8009d06:	b351      	cbz	r1, 8009d5e <_dtoa_r+0x4fe>
 8009d08:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8009d0c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8009d10:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d14:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8009d18:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009d1c:	ee35 7b47 	vsub.f64	d7, d5, d7
 8009d20:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009d24:	ee14 1a90 	vmov	r1, s9
 8009d28:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009d2c:	3130      	adds	r1, #48	; 0x30
 8009d2e:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009d32:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8009d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d3a:	f808 1b01 	strb.w	r1, [r8], #1
 8009d3e:	d439      	bmi.n	8009db4 <_dtoa_r+0x554>
 8009d40:	ee32 5b46 	vsub.f64	d5, d2, d6
 8009d44:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8009d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d4c:	d472      	bmi.n	8009e34 <_dtoa_r+0x5d4>
 8009d4e:	45a0      	cmp	r8, r4
 8009d50:	f43f af6b 	beq.w	8009c2a <_dtoa_r+0x3ca>
 8009d54:	ee27 7b03 	vmul.f64	d7, d7, d3
 8009d58:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009d5c:	e7e0      	b.n	8009d20 <_dtoa_r+0x4c0>
 8009d5e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009d62:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009d66:	4620      	mov	r0, r4
 8009d68:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8009d6c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8009d70:	ee14 1a90 	vmov	r1, s9
 8009d74:	3130      	adds	r1, #48	; 0x30
 8009d76:	f808 1b01 	strb.w	r1, [r8], #1
 8009d7a:	45a0      	cmp	r8, r4
 8009d7c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8009d80:	ee36 6b45 	vsub.f64	d6, d6, d5
 8009d84:	d118      	bne.n	8009db8 <_dtoa_r+0x558>
 8009d86:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8009d8a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8009d8e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8009d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d96:	dc4d      	bgt.n	8009e34 <_dtoa_r+0x5d4>
 8009d98:	ee35 5b47 	vsub.f64	d5, d5, d7
 8009d9c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8009da0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009da4:	f57f af41 	bpl.w	8009c2a <_dtoa_r+0x3ca>
 8009da8:	4680      	mov	r8, r0
 8009daa:	3801      	subs	r0, #1
 8009dac:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8009db0:	2b30      	cmp	r3, #48	; 0x30
 8009db2:	d0f9      	beq.n	8009da8 <_dtoa_r+0x548>
 8009db4:	4693      	mov	fp, r2
 8009db6:	e02a      	b.n	8009e0e <_dtoa_r+0x5ae>
 8009db8:	ee26 6b03 	vmul.f64	d6, d6, d3
 8009dbc:	e7d6      	b.n	8009d6c <_dtoa_r+0x50c>
 8009dbe:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009dc2:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8009dc6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009dca:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8009dce:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8009dd2:	ee15 3a10 	vmov	r3, s10
 8009dd6:	3330      	adds	r3, #48	; 0x30
 8009dd8:	f808 3b01 	strb.w	r3, [r8], #1
 8009ddc:	9b01      	ldr	r3, [sp, #4]
 8009dde:	eba8 0303 	sub.w	r3, r8, r3
 8009de2:	4599      	cmp	r9, r3
 8009de4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8009de8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8009dec:	d133      	bne.n	8009e56 <_dtoa_r+0x5f6>
 8009dee:	ee37 7b07 	vadd.f64	d7, d7, d7
 8009df2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8009df6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfa:	dc1a      	bgt.n	8009e32 <_dtoa_r+0x5d2>
 8009dfc:	eeb4 7b46 	vcmp.f64	d7, d6
 8009e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e04:	d103      	bne.n	8009e0e <_dtoa_r+0x5ae>
 8009e06:	ee15 3a10 	vmov	r3, s10
 8009e0a:	07d9      	lsls	r1, r3, #31
 8009e0c:	d411      	bmi.n	8009e32 <_dtoa_r+0x5d2>
 8009e0e:	4629      	mov	r1, r5
 8009e10:	4630      	mov	r0, r6
 8009e12:	f000 fb1d 	bl	800a450 <_Bfree>
 8009e16:	2300      	movs	r3, #0
 8009e18:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009e1a:	f888 3000 	strb.w	r3, [r8]
 8009e1e:	f10b 0301 	add.w	r3, fp, #1
 8009e22:	6013      	str	r3, [r2, #0]
 8009e24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	f43f ad69 	beq.w	80098fe <_dtoa_r+0x9e>
 8009e2c:	f8c3 8000 	str.w	r8, [r3]
 8009e30:	e565      	b.n	80098fe <_dtoa_r+0x9e>
 8009e32:	465a      	mov	r2, fp
 8009e34:	4643      	mov	r3, r8
 8009e36:	4698      	mov	r8, r3
 8009e38:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8009e3c:	2939      	cmp	r1, #57	; 0x39
 8009e3e:	d106      	bne.n	8009e4e <_dtoa_r+0x5ee>
 8009e40:	9901      	ldr	r1, [sp, #4]
 8009e42:	4299      	cmp	r1, r3
 8009e44:	d1f7      	bne.n	8009e36 <_dtoa_r+0x5d6>
 8009e46:	9801      	ldr	r0, [sp, #4]
 8009e48:	2130      	movs	r1, #48	; 0x30
 8009e4a:	3201      	adds	r2, #1
 8009e4c:	7001      	strb	r1, [r0, #0]
 8009e4e:	7819      	ldrb	r1, [r3, #0]
 8009e50:	3101      	adds	r1, #1
 8009e52:	7019      	strb	r1, [r3, #0]
 8009e54:	e7ae      	b.n	8009db4 <_dtoa_r+0x554>
 8009e56:	ee27 7b04 	vmul.f64	d7, d7, d4
 8009e5a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e62:	d1b2      	bne.n	8009dca <_dtoa_r+0x56a>
 8009e64:	e7d3      	b.n	8009e0e <_dtoa_r+0x5ae>
 8009e66:	bf00      	nop
 8009e68:	080108e8 	.word	0x080108e8
 8009e6c:	080108c0 	.word	0x080108c0
 8009e70:	9907      	ldr	r1, [sp, #28]
 8009e72:	2900      	cmp	r1, #0
 8009e74:	f000 80d0 	beq.w	800a018 <_dtoa_r+0x7b8>
 8009e78:	9906      	ldr	r1, [sp, #24]
 8009e7a:	2901      	cmp	r1, #1
 8009e7c:	f300 80b4 	bgt.w	8009fe8 <_dtoa_r+0x788>
 8009e80:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009e82:	2900      	cmp	r1, #0
 8009e84:	f000 80ac 	beq.w	8009fe0 <_dtoa_r+0x780>
 8009e88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009e8c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009e90:	461c      	mov	r4, r3
 8009e92:	9309      	str	r3, [sp, #36]	; 0x24
 8009e94:	9b04      	ldr	r3, [sp, #16]
 8009e96:	4413      	add	r3, r2
 8009e98:	9304      	str	r3, [sp, #16]
 8009e9a:	9b05      	ldr	r3, [sp, #20]
 8009e9c:	2101      	movs	r1, #1
 8009e9e:	4413      	add	r3, r2
 8009ea0:	4630      	mov	r0, r6
 8009ea2:	9305      	str	r3, [sp, #20]
 8009ea4:	f000 fb8a 	bl	800a5bc <__i2b>
 8009ea8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009eaa:	4607      	mov	r7, r0
 8009eac:	f1b8 0f00 	cmp.w	r8, #0
 8009eb0:	d00d      	beq.n	8009ece <_dtoa_r+0x66e>
 8009eb2:	9a05      	ldr	r2, [sp, #20]
 8009eb4:	2a00      	cmp	r2, #0
 8009eb6:	dd0a      	ble.n	8009ece <_dtoa_r+0x66e>
 8009eb8:	4542      	cmp	r2, r8
 8009eba:	9904      	ldr	r1, [sp, #16]
 8009ebc:	bfa8      	it	ge
 8009ebe:	4642      	movge	r2, r8
 8009ec0:	1a89      	subs	r1, r1, r2
 8009ec2:	9104      	str	r1, [sp, #16]
 8009ec4:	9905      	ldr	r1, [sp, #20]
 8009ec6:	eba8 0802 	sub.w	r8, r8, r2
 8009eca:	1a8a      	subs	r2, r1, r2
 8009ecc:	9205      	str	r2, [sp, #20]
 8009ece:	b303      	cbz	r3, 8009f12 <_dtoa_r+0x6b2>
 8009ed0:	9a07      	ldr	r2, [sp, #28]
 8009ed2:	2a00      	cmp	r2, #0
 8009ed4:	f000 80a5 	beq.w	800a022 <_dtoa_r+0x7c2>
 8009ed8:	2c00      	cmp	r4, #0
 8009eda:	dd13      	ble.n	8009f04 <_dtoa_r+0x6a4>
 8009edc:	4639      	mov	r1, r7
 8009ede:	4622      	mov	r2, r4
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	930d      	str	r3, [sp, #52]	; 0x34
 8009ee4:	f000 fc2a 	bl	800a73c <__pow5mult>
 8009ee8:	462a      	mov	r2, r5
 8009eea:	4601      	mov	r1, r0
 8009eec:	4607      	mov	r7, r0
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f000 fb7a 	bl	800a5e8 <__multiply>
 8009ef4:	4629      	mov	r1, r5
 8009ef6:	9009      	str	r0, [sp, #36]	; 0x24
 8009ef8:	4630      	mov	r0, r6
 8009efa:	f000 faa9 	bl	800a450 <_Bfree>
 8009efe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f00:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f02:	4615      	mov	r5, r2
 8009f04:	1b1a      	subs	r2, r3, r4
 8009f06:	d004      	beq.n	8009f12 <_dtoa_r+0x6b2>
 8009f08:	4629      	mov	r1, r5
 8009f0a:	4630      	mov	r0, r6
 8009f0c:	f000 fc16 	bl	800a73c <__pow5mult>
 8009f10:	4605      	mov	r5, r0
 8009f12:	2101      	movs	r1, #1
 8009f14:	4630      	mov	r0, r6
 8009f16:	f000 fb51 	bl	800a5bc <__i2b>
 8009f1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	4604      	mov	r4, r0
 8009f20:	f340 8081 	ble.w	800a026 <_dtoa_r+0x7c6>
 8009f24:	461a      	mov	r2, r3
 8009f26:	4601      	mov	r1, r0
 8009f28:	4630      	mov	r0, r6
 8009f2a:	f000 fc07 	bl	800a73c <__pow5mult>
 8009f2e:	9b06      	ldr	r3, [sp, #24]
 8009f30:	2b01      	cmp	r3, #1
 8009f32:	4604      	mov	r4, r0
 8009f34:	dd7a      	ble.n	800a02c <_dtoa_r+0x7cc>
 8009f36:	2300      	movs	r3, #0
 8009f38:	9309      	str	r3, [sp, #36]	; 0x24
 8009f3a:	6922      	ldr	r2, [r4, #16]
 8009f3c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009f40:	6910      	ldr	r0, [r2, #16]
 8009f42:	f000 faed 	bl	800a520 <__hi0bits>
 8009f46:	f1c0 0020 	rsb	r0, r0, #32
 8009f4a:	9b05      	ldr	r3, [sp, #20]
 8009f4c:	4418      	add	r0, r3
 8009f4e:	f010 001f 	ands.w	r0, r0, #31
 8009f52:	f000 8093 	beq.w	800a07c <_dtoa_r+0x81c>
 8009f56:	f1c0 0220 	rsb	r2, r0, #32
 8009f5a:	2a04      	cmp	r2, #4
 8009f5c:	f340 8085 	ble.w	800a06a <_dtoa_r+0x80a>
 8009f60:	9b04      	ldr	r3, [sp, #16]
 8009f62:	f1c0 001c 	rsb	r0, r0, #28
 8009f66:	4403      	add	r3, r0
 8009f68:	9304      	str	r3, [sp, #16]
 8009f6a:	9b05      	ldr	r3, [sp, #20]
 8009f6c:	4480      	add	r8, r0
 8009f6e:	4403      	add	r3, r0
 8009f70:	9305      	str	r3, [sp, #20]
 8009f72:	9b04      	ldr	r3, [sp, #16]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	dd05      	ble.n	8009f84 <_dtoa_r+0x724>
 8009f78:	4629      	mov	r1, r5
 8009f7a:	461a      	mov	r2, r3
 8009f7c:	4630      	mov	r0, r6
 8009f7e:	f000 fc37 	bl	800a7f0 <__lshift>
 8009f82:	4605      	mov	r5, r0
 8009f84:	9b05      	ldr	r3, [sp, #20]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	dd05      	ble.n	8009f96 <_dtoa_r+0x736>
 8009f8a:	4621      	mov	r1, r4
 8009f8c:	461a      	mov	r2, r3
 8009f8e:	4630      	mov	r0, r6
 8009f90:	f000 fc2e 	bl	800a7f0 <__lshift>
 8009f94:	4604      	mov	r4, r0
 8009f96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d071      	beq.n	800a080 <_dtoa_r+0x820>
 8009f9c:	4621      	mov	r1, r4
 8009f9e:	4628      	mov	r0, r5
 8009fa0:	f000 fc92 	bl	800a8c8 <__mcmp>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	da6b      	bge.n	800a080 <_dtoa_r+0x820>
 8009fa8:	2300      	movs	r3, #0
 8009faa:	4629      	mov	r1, r5
 8009fac:	220a      	movs	r2, #10
 8009fae:	4630      	mov	r0, r6
 8009fb0:	f000 fa70 	bl	800a494 <__multadd>
 8009fb4:	9b07      	ldr	r3, [sp, #28]
 8009fb6:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009fba:	4605      	mov	r5, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	f000 8197 	beq.w	800a2f0 <_dtoa_r+0xa90>
 8009fc2:	4639      	mov	r1, r7
 8009fc4:	2300      	movs	r3, #0
 8009fc6:	220a      	movs	r2, #10
 8009fc8:	4630      	mov	r0, r6
 8009fca:	f000 fa63 	bl	800a494 <__multadd>
 8009fce:	f1ba 0f00 	cmp.w	sl, #0
 8009fd2:	4607      	mov	r7, r0
 8009fd4:	f300 8093 	bgt.w	800a0fe <_dtoa_r+0x89e>
 8009fd8:	9b06      	ldr	r3, [sp, #24]
 8009fda:	2b02      	cmp	r3, #2
 8009fdc:	dc57      	bgt.n	800a08e <_dtoa_r+0x82e>
 8009fde:	e08e      	b.n	800a0fe <_dtoa_r+0x89e>
 8009fe0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009fe2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009fe6:	e751      	b.n	8009e8c <_dtoa_r+0x62c>
 8009fe8:	f109 34ff 	add.w	r4, r9, #4294967295
 8009fec:	42a3      	cmp	r3, r4
 8009fee:	bfbf      	itttt	lt
 8009ff0:	1ae2      	sublt	r2, r4, r3
 8009ff2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009ff4:	189b      	addlt	r3, r3, r2
 8009ff6:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009ff8:	bfae      	itee	ge
 8009ffa:	1b1c      	subge	r4, r3, r4
 8009ffc:	4623      	movlt	r3, r4
 8009ffe:	2400      	movlt	r4, #0
 800a000:	f1b9 0f00 	cmp.w	r9, #0
 800a004:	bfb5      	itete	lt
 800a006:	9a04      	ldrlt	r2, [sp, #16]
 800a008:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800a00c:	eba2 0809 	sublt.w	r8, r2, r9
 800a010:	464a      	movge	r2, r9
 800a012:	bfb8      	it	lt
 800a014:	2200      	movlt	r2, #0
 800a016:	e73c      	b.n	8009e92 <_dtoa_r+0x632>
 800a018:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a01c:	9f07      	ldr	r7, [sp, #28]
 800a01e:	461c      	mov	r4, r3
 800a020:	e744      	b.n	8009eac <_dtoa_r+0x64c>
 800a022:	461a      	mov	r2, r3
 800a024:	e770      	b.n	8009f08 <_dtoa_r+0x6a8>
 800a026:	9b06      	ldr	r3, [sp, #24]
 800a028:	2b01      	cmp	r3, #1
 800a02a:	dc18      	bgt.n	800a05e <_dtoa_r+0x7fe>
 800a02c:	9b02      	ldr	r3, [sp, #8]
 800a02e:	b9b3      	cbnz	r3, 800a05e <_dtoa_r+0x7fe>
 800a030:	9b03      	ldr	r3, [sp, #12]
 800a032:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800a036:	b9a2      	cbnz	r2, 800a062 <_dtoa_r+0x802>
 800a038:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800a03c:	0d12      	lsrs	r2, r2, #20
 800a03e:	0512      	lsls	r2, r2, #20
 800a040:	b18a      	cbz	r2, 800a066 <_dtoa_r+0x806>
 800a042:	9b04      	ldr	r3, [sp, #16]
 800a044:	3301      	adds	r3, #1
 800a046:	9304      	str	r3, [sp, #16]
 800a048:	9b05      	ldr	r3, [sp, #20]
 800a04a:	3301      	adds	r3, #1
 800a04c:	9305      	str	r3, [sp, #20]
 800a04e:	2301      	movs	r3, #1
 800a050:	9309      	str	r3, [sp, #36]	; 0x24
 800a052:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a054:	2b00      	cmp	r3, #0
 800a056:	f47f af70 	bne.w	8009f3a <_dtoa_r+0x6da>
 800a05a:	2001      	movs	r0, #1
 800a05c:	e775      	b.n	8009f4a <_dtoa_r+0x6ea>
 800a05e:	2300      	movs	r3, #0
 800a060:	e7f6      	b.n	800a050 <_dtoa_r+0x7f0>
 800a062:	9b02      	ldr	r3, [sp, #8]
 800a064:	e7f4      	b.n	800a050 <_dtoa_r+0x7f0>
 800a066:	9209      	str	r2, [sp, #36]	; 0x24
 800a068:	e7f3      	b.n	800a052 <_dtoa_r+0x7f2>
 800a06a:	d082      	beq.n	8009f72 <_dtoa_r+0x712>
 800a06c:	9b04      	ldr	r3, [sp, #16]
 800a06e:	321c      	adds	r2, #28
 800a070:	4413      	add	r3, r2
 800a072:	9304      	str	r3, [sp, #16]
 800a074:	9b05      	ldr	r3, [sp, #20]
 800a076:	4490      	add	r8, r2
 800a078:	4413      	add	r3, r2
 800a07a:	e779      	b.n	8009f70 <_dtoa_r+0x710>
 800a07c:	4602      	mov	r2, r0
 800a07e:	e7f5      	b.n	800a06c <_dtoa_r+0x80c>
 800a080:	f1b9 0f00 	cmp.w	r9, #0
 800a084:	dc36      	bgt.n	800a0f4 <_dtoa_r+0x894>
 800a086:	9b06      	ldr	r3, [sp, #24]
 800a088:	2b02      	cmp	r3, #2
 800a08a:	dd33      	ble.n	800a0f4 <_dtoa_r+0x894>
 800a08c:	46ca      	mov	sl, r9
 800a08e:	f1ba 0f00 	cmp.w	sl, #0
 800a092:	d10d      	bne.n	800a0b0 <_dtoa_r+0x850>
 800a094:	4621      	mov	r1, r4
 800a096:	4653      	mov	r3, sl
 800a098:	2205      	movs	r2, #5
 800a09a:	4630      	mov	r0, r6
 800a09c:	f000 f9fa 	bl	800a494 <__multadd>
 800a0a0:	4601      	mov	r1, r0
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	f000 fc0f 	bl	800a8c8 <__mcmp>
 800a0aa:	2800      	cmp	r0, #0
 800a0ac:	f73f ade4 	bgt.w	8009c78 <_dtoa_r+0x418>
 800a0b0:	9b08      	ldr	r3, [sp, #32]
 800a0b2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a0b6:	ea6f 0b03 	mvn.w	fp, r3
 800a0ba:	f04f 0900 	mov.w	r9, #0
 800a0be:	4621      	mov	r1, r4
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	f000 f9c5 	bl	800a450 <_Bfree>
 800a0c6:	2f00      	cmp	r7, #0
 800a0c8:	f43f aea1 	beq.w	8009e0e <_dtoa_r+0x5ae>
 800a0cc:	f1b9 0f00 	cmp.w	r9, #0
 800a0d0:	d005      	beq.n	800a0de <_dtoa_r+0x87e>
 800a0d2:	45b9      	cmp	r9, r7
 800a0d4:	d003      	beq.n	800a0de <_dtoa_r+0x87e>
 800a0d6:	4649      	mov	r1, r9
 800a0d8:	4630      	mov	r0, r6
 800a0da:	f000 f9b9 	bl	800a450 <_Bfree>
 800a0de:	4639      	mov	r1, r7
 800a0e0:	4630      	mov	r0, r6
 800a0e2:	f000 f9b5 	bl	800a450 <_Bfree>
 800a0e6:	e692      	b.n	8009e0e <_dtoa_r+0x5ae>
 800a0e8:	2400      	movs	r4, #0
 800a0ea:	4627      	mov	r7, r4
 800a0ec:	e7e0      	b.n	800a0b0 <_dtoa_r+0x850>
 800a0ee:	4693      	mov	fp, r2
 800a0f0:	4627      	mov	r7, r4
 800a0f2:	e5c1      	b.n	8009c78 <_dtoa_r+0x418>
 800a0f4:	9b07      	ldr	r3, [sp, #28]
 800a0f6:	46ca      	mov	sl, r9
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 8100 	beq.w	800a2fe <_dtoa_r+0xa9e>
 800a0fe:	f1b8 0f00 	cmp.w	r8, #0
 800a102:	dd05      	ble.n	800a110 <_dtoa_r+0x8b0>
 800a104:	4639      	mov	r1, r7
 800a106:	4642      	mov	r2, r8
 800a108:	4630      	mov	r0, r6
 800a10a:	f000 fb71 	bl	800a7f0 <__lshift>
 800a10e:	4607      	mov	r7, r0
 800a110:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a112:	2b00      	cmp	r3, #0
 800a114:	d05d      	beq.n	800a1d2 <_dtoa_r+0x972>
 800a116:	6879      	ldr	r1, [r7, #4]
 800a118:	4630      	mov	r0, r6
 800a11a:	f000 f959 	bl	800a3d0 <_Balloc>
 800a11e:	4680      	mov	r8, r0
 800a120:	b928      	cbnz	r0, 800a12e <_dtoa_r+0x8ce>
 800a122:	4b82      	ldr	r3, [pc, #520]	; (800a32c <_dtoa_r+0xacc>)
 800a124:	4602      	mov	r2, r0
 800a126:	f240 21ef 	movw	r1, #751	; 0x2ef
 800a12a:	f7ff bbb1 	b.w	8009890 <_dtoa_r+0x30>
 800a12e:	693a      	ldr	r2, [r7, #16]
 800a130:	3202      	adds	r2, #2
 800a132:	0092      	lsls	r2, r2, #2
 800a134:	f107 010c 	add.w	r1, r7, #12
 800a138:	300c      	adds	r0, #12
 800a13a:	f7ff fadd 	bl	80096f8 <memcpy>
 800a13e:	2201      	movs	r2, #1
 800a140:	4641      	mov	r1, r8
 800a142:	4630      	mov	r0, r6
 800a144:	f000 fb54 	bl	800a7f0 <__lshift>
 800a148:	9b01      	ldr	r3, [sp, #4]
 800a14a:	3301      	adds	r3, #1
 800a14c:	9304      	str	r3, [sp, #16]
 800a14e:	9b01      	ldr	r3, [sp, #4]
 800a150:	4453      	add	r3, sl
 800a152:	9308      	str	r3, [sp, #32]
 800a154:	9b02      	ldr	r3, [sp, #8]
 800a156:	f003 0301 	and.w	r3, r3, #1
 800a15a:	46b9      	mov	r9, r7
 800a15c:	9307      	str	r3, [sp, #28]
 800a15e:	4607      	mov	r7, r0
 800a160:	9b04      	ldr	r3, [sp, #16]
 800a162:	4621      	mov	r1, r4
 800a164:	3b01      	subs	r3, #1
 800a166:	4628      	mov	r0, r5
 800a168:	9302      	str	r3, [sp, #8]
 800a16a:	f7ff faf1 	bl	8009750 <quorem>
 800a16e:	4603      	mov	r3, r0
 800a170:	3330      	adds	r3, #48	; 0x30
 800a172:	9005      	str	r0, [sp, #20]
 800a174:	4649      	mov	r1, r9
 800a176:	4628      	mov	r0, r5
 800a178:	9309      	str	r3, [sp, #36]	; 0x24
 800a17a:	f000 fba5 	bl	800a8c8 <__mcmp>
 800a17e:	463a      	mov	r2, r7
 800a180:	4682      	mov	sl, r0
 800a182:	4621      	mov	r1, r4
 800a184:	4630      	mov	r0, r6
 800a186:	f000 fbbb 	bl	800a900 <__mdiff>
 800a18a:	68c2      	ldr	r2, [r0, #12]
 800a18c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a18e:	4680      	mov	r8, r0
 800a190:	bb0a      	cbnz	r2, 800a1d6 <_dtoa_r+0x976>
 800a192:	4601      	mov	r1, r0
 800a194:	4628      	mov	r0, r5
 800a196:	f000 fb97 	bl	800a8c8 <__mcmp>
 800a19a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a19c:	4602      	mov	r2, r0
 800a19e:	4641      	mov	r1, r8
 800a1a0:	4630      	mov	r0, r6
 800a1a2:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800a1a6:	f000 f953 	bl	800a450 <_Bfree>
 800a1aa:	9b06      	ldr	r3, [sp, #24]
 800a1ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a1ae:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800a1b2:	ea43 0102 	orr.w	r1, r3, r2
 800a1b6:	9b07      	ldr	r3, [sp, #28]
 800a1b8:	4319      	orrs	r1, r3
 800a1ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1bc:	d10d      	bne.n	800a1da <_dtoa_r+0x97a>
 800a1be:	2b39      	cmp	r3, #57	; 0x39
 800a1c0:	d029      	beq.n	800a216 <_dtoa_r+0x9b6>
 800a1c2:	f1ba 0f00 	cmp.w	sl, #0
 800a1c6:	dd01      	ble.n	800a1cc <_dtoa_r+0x96c>
 800a1c8:	9b05      	ldr	r3, [sp, #20]
 800a1ca:	3331      	adds	r3, #49	; 0x31
 800a1cc:	9a02      	ldr	r2, [sp, #8]
 800a1ce:	7013      	strb	r3, [r2, #0]
 800a1d0:	e775      	b.n	800a0be <_dtoa_r+0x85e>
 800a1d2:	4638      	mov	r0, r7
 800a1d4:	e7b8      	b.n	800a148 <_dtoa_r+0x8e8>
 800a1d6:	2201      	movs	r2, #1
 800a1d8:	e7e1      	b.n	800a19e <_dtoa_r+0x93e>
 800a1da:	f1ba 0f00 	cmp.w	sl, #0
 800a1de:	db06      	blt.n	800a1ee <_dtoa_r+0x98e>
 800a1e0:	9906      	ldr	r1, [sp, #24]
 800a1e2:	ea41 0a0a 	orr.w	sl, r1, sl
 800a1e6:	9907      	ldr	r1, [sp, #28]
 800a1e8:	ea5a 0a01 	orrs.w	sl, sl, r1
 800a1ec:	d120      	bne.n	800a230 <_dtoa_r+0x9d0>
 800a1ee:	2a00      	cmp	r2, #0
 800a1f0:	ddec      	ble.n	800a1cc <_dtoa_r+0x96c>
 800a1f2:	4629      	mov	r1, r5
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	9304      	str	r3, [sp, #16]
 800a1fa:	f000 faf9 	bl	800a7f0 <__lshift>
 800a1fe:	4621      	mov	r1, r4
 800a200:	4605      	mov	r5, r0
 800a202:	f000 fb61 	bl	800a8c8 <__mcmp>
 800a206:	2800      	cmp	r0, #0
 800a208:	9b04      	ldr	r3, [sp, #16]
 800a20a:	dc02      	bgt.n	800a212 <_dtoa_r+0x9b2>
 800a20c:	d1de      	bne.n	800a1cc <_dtoa_r+0x96c>
 800a20e:	07da      	lsls	r2, r3, #31
 800a210:	d5dc      	bpl.n	800a1cc <_dtoa_r+0x96c>
 800a212:	2b39      	cmp	r3, #57	; 0x39
 800a214:	d1d8      	bne.n	800a1c8 <_dtoa_r+0x968>
 800a216:	9a02      	ldr	r2, [sp, #8]
 800a218:	2339      	movs	r3, #57	; 0x39
 800a21a:	7013      	strb	r3, [r2, #0]
 800a21c:	4643      	mov	r3, r8
 800a21e:	4698      	mov	r8, r3
 800a220:	3b01      	subs	r3, #1
 800a222:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800a226:	2a39      	cmp	r2, #57	; 0x39
 800a228:	d051      	beq.n	800a2ce <_dtoa_r+0xa6e>
 800a22a:	3201      	adds	r2, #1
 800a22c:	701a      	strb	r2, [r3, #0]
 800a22e:	e746      	b.n	800a0be <_dtoa_r+0x85e>
 800a230:	2a00      	cmp	r2, #0
 800a232:	dd03      	ble.n	800a23c <_dtoa_r+0x9dc>
 800a234:	2b39      	cmp	r3, #57	; 0x39
 800a236:	d0ee      	beq.n	800a216 <_dtoa_r+0x9b6>
 800a238:	3301      	adds	r3, #1
 800a23a:	e7c7      	b.n	800a1cc <_dtoa_r+0x96c>
 800a23c:	9a04      	ldr	r2, [sp, #16]
 800a23e:	9908      	ldr	r1, [sp, #32]
 800a240:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a244:	428a      	cmp	r2, r1
 800a246:	d02b      	beq.n	800a2a0 <_dtoa_r+0xa40>
 800a248:	4629      	mov	r1, r5
 800a24a:	2300      	movs	r3, #0
 800a24c:	220a      	movs	r2, #10
 800a24e:	4630      	mov	r0, r6
 800a250:	f000 f920 	bl	800a494 <__multadd>
 800a254:	45b9      	cmp	r9, r7
 800a256:	4605      	mov	r5, r0
 800a258:	f04f 0300 	mov.w	r3, #0
 800a25c:	f04f 020a 	mov.w	r2, #10
 800a260:	4649      	mov	r1, r9
 800a262:	4630      	mov	r0, r6
 800a264:	d107      	bne.n	800a276 <_dtoa_r+0xa16>
 800a266:	f000 f915 	bl	800a494 <__multadd>
 800a26a:	4681      	mov	r9, r0
 800a26c:	4607      	mov	r7, r0
 800a26e:	9b04      	ldr	r3, [sp, #16]
 800a270:	3301      	adds	r3, #1
 800a272:	9304      	str	r3, [sp, #16]
 800a274:	e774      	b.n	800a160 <_dtoa_r+0x900>
 800a276:	f000 f90d 	bl	800a494 <__multadd>
 800a27a:	4639      	mov	r1, r7
 800a27c:	4681      	mov	r9, r0
 800a27e:	2300      	movs	r3, #0
 800a280:	220a      	movs	r2, #10
 800a282:	4630      	mov	r0, r6
 800a284:	f000 f906 	bl	800a494 <__multadd>
 800a288:	4607      	mov	r7, r0
 800a28a:	e7f0      	b.n	800a26e <_dtoa_r+0xa0e>
 800a28c:	f1ba 0f00 	cmp.w	sl, #0
 800a290:	9a01      	ldr	r2, [sp, #4]
 800a292:	bfcc      	ite	gt
 800a294:	46d0      	movgt	r8, sl
 800a296:	f04f 0801 	movle.w	r8, #1
 800a29a:	4490      	add	r8, r2
 800a29c:	f04f 0900 	mov.w	r9, #0
 800a2a0:	4629      	mov	r1, r5
 800a2a2:	2201      	movs	r2, #1
 800a2a4:	4630      	mov	r0, r6
 800a2a6:	9302      	str	r3, [sp, #8]
 800a2a8:	f000 faa2 	bl	800a7f0 <__lshift>
 800a2ac:	4621      	mov	r1, r4
 800a2ae:	4605      	mov	r5, r0
 800a2b0:	f000 fb0a 	bl	800a8c8 <__mcmp>
 800a2b4:	2800      	cmp	r0, #0
 800a2b6:	dcb1      	bgt.n	800a21c <_dtoa_r+0x9bc>
 800a2b8:	d102      	bne.n	800a2c0 <_dtoa_r+0xa60>
 800a2ba:	9b02      	ldr	r3, [sp, #8]
 800a2bc:	07db      	lsls	r3, r3, #31
 800a2be:	d4ad      	bmi.n	800a21c <_dtoa_r+0x9bc>
 800a2c0:	4643      	mov	r3, r8
 800a2c2:	4698      	mov	r8, r3
 800a2c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a2c8:	2a30      	cmp	r2, #48	; 0x30
 800a2ca:	d0fa      	beq.n	800a2c2 <_dtoa_r+0xa62>
 800a2cc:	e6f7      	b.n	800a0be <_dtoa_r+0x85e>
 800a2ce:	9a01      	ldr	r2, [sp, #4]
 800a2d0:	429a      	cmp	r2, r3
 800a2d2:	d1a4      	bne.n	800a21e <_dtoa_r+0x9be>
 800a2d4:	f10b 0b01 	add.w	fp, fp, #1
 800a2d8:	2331      	movs	r3, #49	; 0x31
 800a2da:	e778      	b.n	800a1ce <_dtoa_r+0x96e>
 800a2dc:	4b14      	ldr	r3, [pc, #80]	; (800a330 <_dtoa_r+0xad0>)
 800a2de:	f7ff bb2a 	b.w	8009936 <_dtoa_r+0xd6>
 800a2e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a2e4:	2b00      	cmp	r3, #0
 800a2e6:	f47f ab05 	bne.w	80098f4 <_dtoa_r+0x94>
 800a2ea:	4b12      	ldr	r3, [pc, #72]	; (800a334 <_dtoa_r+0xad4>)
 800a2ec:	f7ff bb23 	b.w	8009936 <_dtoa_r+0xd6>
 800a2f0:	f1ba 0f00 	cmp.w	sl, #0
 800a2f4:	dc03      	bgt.n	800a2fe <_dtoa_r+0xa9e>
 800a2f6:	9b06      	ldr	r3, [sp, #24]
 800a2f8:	2b02      	cmp	r3, #2
 800a2fa:	f73f aec8 	bgt.w	800a08e <_dtoa_r+0x82e>
 800a2fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800a302:	4621      	mov	r1, r4
 800a304:	4628      	mov	r0, r5
 800a306:	f7ff fa23 	bl	8009750 <quorem>
 800a30a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800a30e:	f808 3b01 	strb.w	r3, [r8], #1
 800a312:	9a01      	ldr	r2, [sp, #4]
 800a314:	eba8 0202 	sub.w	r2, r8, r2
 800a318:	4592      	cmp	sl, r2
 800a31a:	ddb7      	ble.n	800a28c <_dtoa_r+0xa2c>
 800a31c:	4629      	mov	r1, r5
 800a31e:	2300      	movs	r3, #0
 800a320:	220a      	movs	r2, #10
 800a322:	4630      	mov	r0, r6
 800a324:	f000 f8b6 	bl	800a494 <__multadd>
 800a328:	4605      	mov	r5, r0
 800a32a:	e7ea      	b.n	800a302 <_dtoa_r+0xaa2>
 800a32c:	08010854 	.word	0x08010854
 800a330:	0801078f 	.word	0x0801078f
 800a334:	080107ef 	.word	0x080107ef

0800a338 <_free_r>:
 800a338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a33a:	2900      	cmp	r1, #0
 800a33c:	d044      	beq.n	800a3c8 <_free_r+0x90>
 800a33e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a342:	9001      	str	r0, [sp, #4]
 800a344:	2b00      	cmp	r3, #0
 800a346:	f1a1 0404 	sub.w	r4, r1, #4
 800a34a:	bfb8      	it	lt
 800a34c:	18e4      	addlt	r4, r4, r3
 800a34e:	f7fe fac9 	bl	80088e4 <__malloc_lock>
 800a352:	4a1e      	ldr	r2, [pc, #120]	; (800a3cc <_free_r+0x94>)
 800a354:	9801      	ldr	r0, [sp, #4]
 800a356:	6813      	ldr	r3, [r2, #0]
 800a358:	b933      	cbnz	r3, 800a368 <_free_r+0x30>
 800a35a:	6063      	str	r3, [r4, #4]
 800a35c:	6014      	str	r4, [r2, #0]
 800a35e:	b003      	add	sp, #12
 800a360:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a364:	f7fe bac4 	b.w	80088f0 <__malloc_unlock>
 800a368:	42a3      	cmp	r3, r4
 800a36a:	d908      	bls.n	800a37e <_free_r+0x46>
 800a36c:	6825      	ldr	r5, [r4, #0]
 800a36e:	1961      	adds	r1, r4, r5
 800a370:	428b      	cmp	r3, r1
 800a372:	bf01      	itttt	eq
 800a374:	6819      	ldreq	r1, [r3, #0]
 800a376:	685b      	ldreq	r3, [r3, #4]
 800a378:	1949      	addeq	r1, r1, r5
 800a37a:	6021      	streq	r1, [r4, #0]
 800a37c:	e7ed      	b.n	800a35a <_free_r+0x22>
 800a37e:	461a      	mov	r2, r3
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	b10b      	cbz	r3, 800a388 <_free_r+0x50>
 800a384:	42a3      	cmp	r3, r4
 800a386:	d9fa      	bls.n	800a37e <_free_r+0x46>
 800a388:	6811      	ldr	r1, [r2, #0]
 800a38a:	1855      	adds	r5, r2, r1
 800a38c:	42a5      	cmp	r5, r4
 800a38e:	d10b      	bne.n	800a3a8 <_free_r+0x70>
 800a390:	6824      	ldr	r4, [r4, #0]
 800a392:	4421      	add	r1, r4
 800a394:	1854      	adds	r4, r2, r1
 800a396:	42a3      	cmp	r3, r4
 800a398:	6011      	str	r1, [r2, #0]
 800a39a:	d1e0      	bne.n	800a35e <_free_r+0x26>
 800a39c:	681c      	ldr	r4, [r3, #0]
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	6053      	str	r3, [r2, #4]
 800a3a2:	440c      	add	r4, r1
 800a3a4:	6014      	str	r4, [r2, #0]
 800a3a6:	e7da      	b.n	800a35e <_free_r+0x26>
 800a3a8:	d902      	bls.n	800a3b0 <_free_r+0x78>
 800a3aa:	230c      	movs	r3, #12
 800a3ac:	6003      	str	r3, [r0, #0]
 800a3ae:	e7d6      	b.n	800a35e <_free_r+0x26>
 800a3b0:	6825      	ldr	r5, [r4, #0]
 800a3b2:	1961      	adds	r1, r4, r5
 800a3b4:	428b      	cmp	r3, r1
 800a3b6:	bf04      	itt	eq
 800a3b8:	6819      	ldreq	r1, [r3, #0]
 800a3ba:	685b      	ldreq	r3, [r3, #4]
 800a3bc:	6063      	str	r3, [r4, #4]
 800a3be:	bf04      	itt	eq
 800a3c0:	1949      	addeq	r1, r1, r5
 800a3c2:	6021      	streq	r1, [r4, #0]
 800a3c4:	6054      	str	r4, [r2, #4]
 800a3c6:	e7ca      	b.n	800a35e <_free_r+0x26>
 800a3c8:	b003      	add	sp, #12
 800a3ca:	bd30      	pop	{r4, r5, pc}
 800a3cc:	20000da4 	.word	0x20000da4

0800a3d0 <_Balloc>:
 800a3d0:	b570      	push	{r4, r5, r6, lr}
 800a3d2:	69c6      	ldr	r6, [r0, #28]
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	460d      	mov	r5, r1
 800a3d8:	b976      	cbnz	r6, 800a3f8 <_Balloc+0x28>
 800a3da:	2010      	movs	r0, #16
 800a3dc:	f7f9 fa2c 	bl	8003838 <__wrap_malloc>
 800a3e0:	4602      	mov	r2, r0
 800a3e2:	61e0      	str	r0, [r4, #28]
 800a3e4:	b920      	cbnz	r0, 800a3f0 <_Balloc+0x20>
 800a3e6:	4b18      	ldr	r3, [pc, #96]	; (800a448 <_Balloc+0x78>)
 800a3e8:	4818      	ldr	r0, [pc, #96]	; (800a44c <_Balloc+0x7c>)
 800a3ea:	216b      	movs	r1, #107	; 0x6b
 800a3ec:	f7ff f992 	bl	8009714 <__assert_func>
 800a3f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3f4:	6006      	str	r6, [r0, #0]
 800a3f6:	60c6      	str	r6, [r0, #12]
 800a3f8:	69e6      	ldr	r6, [r4, #28]
 800a3fa:	68f3      	ldr	r3, [r6, #12]
 800a3fc:	b183      	cbz	r3, 800a420 <_Balloc+0x50>
 800a3fe:	69e3      	ldr	r3, [r4, #28]
 800a400:	68db      	ldr	r3, [r3, #12]
 800a402:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a406:	b9b8      	cbnz	r0, 800a438 <_Balloc+0x68>
 800a408:	2101      	movs	r1, #1
 800a40a:	fa01 f605 	lsl.w	r6, r1, r5
 800a40e:	1d72      	adds	r2, r6, #5
 800a410:	0092      	lsls	r2, r2, #2
 800a412:	4620      	mov	r0, r4
 800a414:	f000 fb71 	bl	800aafa <_calloc_r>
 800a418:	b160      	cbz	r0, 800a434 <_Balloc+0x64>
 800a41a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a41e:	e00e      	b.n	800a43e <_Balloc+0x6e>
 800a420:	2221      	movs	r2, #33	; 0x21
 800a422:	2104      	movs	r1, #4
 800a424:	4620      	mov	r0, r4
 800a426:	f000 fb68 	bl	800aafa <_calloc_r>
 800a42a:	69e3      	ldr	r3, [r4, #28]
 800a42c:	60f0      	str	r0, [r6, #12]
 800a42e:	68db      	ldr	r3, [r3, #12]
 800a430:	2b00      	cmp	r3, #0
 800a432:	d1e4      	bne.n	800a3fe <_Balloc+0x2e>
 800a434:	2000      	movs	r0, #0
 800a436:	bd70      	pop	{r4, r5, r6, pc}
 800a438:	6802      	ldr	r2, [r0, #0]
 800a43a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a43e:	2300      	movs	r3, #0
 800a440:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a444:	e7f7      	b.n	800a436 <_Balloc+0x66>
 800a446:	bf00      	nop
 800a448:	08010710 	.word	0x08010710
 800a44c:	08010865 	.word	0x08010865

0800a450 <_Bfree>:
 800a450:	b570      	push	{r4, r5, r6, lr}
 800a452:	69c6      	ldr	r6, [r0, #28]
 800a454:	4605      	mov	r5, r0
 800a456:	460c      	mov	r4, r1
 800a458:	b976      	cbnz	r6, 800a478 <_Bfree+0x28>
 800a45a:	2010      	movs	r0, #16
 800a45c:	f7f9 f9ec 	bl	8003838 <__wrap_malloc>
 800a460:	4602      	mov	r2, r0
 800a462:	61e8      	str	r0, [r5, #28]
 800a464:	b920      	cbnz	r0, 800a470 <_Bfree+0x20>
 800a466:	4b09      	ldr	r3, [pc, #36]	; (800a48c <_Bfree+0x3c>)
 800a468:	4809      	ldr	r0, [pc, #36]	; (800a490 <_Bfree+0x40>)
 800a46a:	218f      	movs	r1, #143	; 0x8f
 800a46c:	f7ff f952 	bl	8009714 <__assert_func>
 800a470:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a474:	6006      	str	r6, [r0, #0]
 800a476:	60c6      	str	r6, [r0, #12]
 800a478:	b13c      	cbz	r4, 800a48a <_Bfree+0x3a>
 800a47a:	69eb      	ldr	r3, [r5, #28]
 800a47c:	6862      	ldr	r2, [r4, #4]
 800a47e:	68db      	ldr	r3, [r3, #12]
 800a480:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a484:	6021      	str	r1, [r4, #0]
 800a486:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a48a:	bd70      	pop	{r4, r5, r6, pc}
 800a48c:	08010710 	.word	0x08010710
 800a490:	08010865 	.word	0x08010865

0800a494 <__multadd>:
 800a494:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a498:	690d      	ldr	r5, [r1, #16]
 800a49a:	4607      	mov	r7, r0
 800a49c:	460c      	mov	r4, r1
 800a49e:	461e      	mov	r6, r3
 800a4a0:	f101 0c14 	add.w	ip, r1, #20
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	f8dc 3000 	ldr.w	r3, [ip]
 800a4aa:	b299      	uxth	r1, r3
 800a4ac:	fb02 6101 	mla	r1, r2, r1, r6
 800a4b0:	0c1e      	lsrs	r6, r3, #16
 800a4b2:	0c0b      	lsrs	r3, r1, #16
 800a4b4:	fb02 3306 	mla	r3, r2, r6, r3
 800a4b8:	b289      	uxth	r1, r1
 800a4ba:	3001      	adds	r0, #1
 800a4bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4c0:	4285      	cmp	r5, r0
 800a4c2:	f84c 1b04 	str.w	r1, [ip], #4
 800a4c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4ca:	dcec      	bgt.n	800a4a6 <__multadd+0x12>
 800a4cc:	b30e      	cbz	r6, 800a512 <__multadd+0x7e>
 800a4ce:	68a3      	ldr	r3, [r4, #8]
 800a4d0:	42ab      	cmp	r3, r5
 800a4d2:	dc19      	bgt.n	800a508 <__multadd+0x74>
 800a4d4:	6861      	ldr	r1, [r4, #4]
 800a4d6:	4638      	mov	r0, r7
 800a4d8:	3101      	adds	r1, #1
 800a4da:	f7ff ff79 	bl	800a3d0 <_Balloc>
 800a4de:	4680      	mov	r8, r0
 800a4e0:	b928      	cbnz	r0, 800a4ee <__multadd+0x5a>
 800a4e2:	4602      	mov	r2, r0
 800a4e4:	4b0c      	ldr	r3, [pc, #48]	; (800a518 <__multadd+0x84>)
 800a4e6:	480d      	ldr	r0, [pc, #52]	; (800a51c <__multadd+0x88>)
 800a4e8:	21ba      	movs	r1, #186	; 0xba
 800a4ea:	f7ff f913 	bl	8009714 <__assert_func>
 800a4ee:	6922      	ldr	r2, [r4, #16]
 800a4f0:	3202      	adds	r2, #2
 800a4f2:	f104 010c 	add.w	r1, r4, #12
 800a4f6:	0092      	lsls	r2, r2, #2
 800a4f8:	300c      	adds	r0, #12
 800a4fa:	f7ff f8fd 	bl	80096f8 <memcpy>
 800a4fe:	4621      	mov	r1, r4
 800a500:	4638      	mov	r0, r7
 800a502:	f7ff ffa5 	bl	800a450 <_Bfree>
 800a506:	4644      	mov	r4, r8
 800a508:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a50c:	3501      	adds	r5, #1
 800a50e:	615e      	str	r6, [r3, #20]
 800a510:	6125      	str	r5, [r4, #16]
 800a512:	4620      	mov	r0, r4
 800a514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a518:	08010854 	.word	0x08010854
 800a51c:	08010865 	.word	0x08010865

0800a520 <__hi0bits>:
 800a520:	0c03      	lsrs	r3, r0, #16
 800a522:	041b      	lsls	r3, r3, #16
 800a524:	b9d3      	cbnz	r3, 800a55c <__hi0bits+0x3c>
 800a526:	0400      	lsls	r0, r0, #16
 800a528:	2310      	movs	r3, #16
 800a52a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a52e:	bf04      	itt	eq
 800a530:	0200      	lsleq	r0, r0, #8
 800a532:	3308      	addeq	r3, #8
 800a534:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a538:	bf04      	itt	eq
 800a53a:	0100      	lsleq	r0, r0, #4
 800a53c:	3304      	addeq	r3, #4
 800a53e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a542:	bf04      	itt	eq
 800a544:	0080      	lsleq	r0, r0, #2
 800a546:	3302      	addeq	r3, #2
 800a548:	2800      	cmp	r0, #0
 800a54a:	db05      	blt.n	800a558 <__hi0bits+0x38>
 800a54c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a550:	f103 0301 	add.w	r3, r3, #1
 800a554:	bf08      	it	eq
 800a556:	2320      	moveq	r3, #32
 800a558:	4618      	mov	r0, r3
 800a55a:	4770      	bx	lr
 800a55c:	2300      	movs	r3, #0
 800a55e:	e7e4      	b.n	800a52a <__hi0bits+0xa>

0800a560 <__lo0bits>:
 800a560:	6803      	ldr	r3, [r0, #0]
 800a562:	f013 0207 	ands.w	r2, r3, #7
 800a566:	d00c      	beq.n	800a582 <__lo0bits+0x22>
 800a568:	07d9      	lsls	r1, r3, #31
 800a56a:	d422      	bmi.n	800a5b2 <__lo0bits+0x52>
 800a56c:	079a      	lsls	r2, r3, #30
 800a56e:	bf49      	itett	mi
 800a570:	085b      	lsrmi	r3, r3, #1
 800a572:	089b      	lsrpl	r3, r3, #2
 800a574:	6003      	strmi	r3, [r0, #0]
 800a576:	2201      	movmi	r2, #1
 800a578:	bf5c      	itt	pl
 800a57a:	6003      	strpl	r3, [r0, #0]
 800a57c:	2202      	movpl	r2, #2
 800a57e:	4610      	mov	r0, r2
 800a580:	4770      	bx	lr
 800a582:	b299      	uxth	r1, r3
 800a584:	b909      	cbnz	r1, 800a58a <__lo0bits+0x2a>
 800a586:	0c1b      	lsrs	r3, r3, #16
 800a588:	2210      	movs	r2, #16
 800a58a:	b2d9      	uxtb	r1, r3
 800a58c:	b909      	cbnz	r1, 800a592 <__lo0bits+0x32>
 800a58e:	3208      	adds	r2, #8
 800a590:	0a1b      	lsrs	r3, r3, #8
 800a592:	0719      	lsls	r1, r3, #28
 800a594:	bf04      	itt	eq
 800a596:	091b      	lsreq	r3, r3, #4
 800a598:	3204      	addeq	r2, #4
 800a59a:	0799      	lsls	r1, r3, #30
 800a59c:	bf04      	itt	eq
 800a59e:	089b      	lsreq	r3, r3, #2
 800a5a0:	3202      	addeq	r2, #2
 800a5a2:	07d9      	lsls	r1, r3, #31
 800a5a4:	d403      	bmi.n	800a5ae <__lo0bits+0x4e>
 800a5a6:	085b      	lsrs	r3, r3, #1
 800a5a8:	f102 0201 	add.w	r2, r2, #1
 800a5ac:	d003      	beq.n	800a5b6 <__lo0bits+0x56>
 800a5ae:	6003      	str	r3, [r0, #0]
 800a5b0:	e7e5      	b.n	800a57e <__lo0bits+0x1e>
 800a5b2:	2200      	movs	r2, #0
 800a5b4:	e7e3      	b.n	800a57e <__lo0bits+0x1e>
 800a5b6:	2220      	movs	r2, #32
 800a5b8:	e7e1      	b.n	800a57e <__lo0bits+0x1e>
	...

0800a5bc <__i2b>:
 800a5bc:	b510      	push	{r4, lr}
 800a5be:	460c      	mov	r4, r1
 800a5c0:	2101      	movs	r1, #1
 800a5c2:	f7ff ff05 	bl	800a3d0 <_Balloc>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	b928      	cbnz	r0, 800a5d6 <__i2b+0x1a>
 800a5ca:	4b05      	ldr	r3, [pc, #20]	; (800a5e0 <__i2b+0x24>)
 800a5cc:	4805      	ldr	r0, [pc, #20]	; (800a5e4 <__i2b+0x28>)
 800a5ce:	f240 1145 	movw	r1, #325	; 0x145
 800a5d2:	f7ff f89f 	bl	8009714 <__assert_func>
 800a5d6:	2301      	movs	r3, #1
 800a5d8:	6144      	str	r4, [r0, #20]
 800a5da:	6103      	str	r3, [r0, #16]
 800a5dc:	bd10      	pop	{r4, pc}
 800a5de:	bf00      	nop
 800a5e0:	08010854 	.word	0x08010854
 800a5e4:	08010865 	.word	0x08010865

0800a5e8 <__multiply>:
 800a5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5ec:	4691      	mov	r9, r2
 800a5ee:	690a      	ldr	r2, [r1, #16]
 800a5f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	bfb8      	it	lt
 800a5f8:	460b      	movlt	r3, r1
 800a5fa:	460c      	mov	r4, r1
 800a5fc:	bfbc      	itt	lt
 800a5fe:	464c      	movlt	r4, r9
 800a600:	4699      	movlt	r9, r3
 800a602:	6927      	ldr	r7, [r4, #16]
 800a604:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a608:	68a3      	ldr	r3, [r4, #8]
 800a60a:	6861      	ldr	r1, [r4, #4]
 800a60c:	eb07 060a 	add.w	r6, r7, sl
 800a610:	42b3      	cmp	r3, r6
 800a612:	b085      	sub	sp, #20
 800a614:	bfb8      	it	lt
 800a616:	3101      	addlt	r1, #1
 800a618:	f7ff feda 	bl	800a3d0 <_Balloc>
 800a61c:	b930      	cbnz	r0, 800a62c <__multiply+0x44>
 800a61e:	4602      	mov	r2, r0
 800a620:	4b44      	ldr	r3, [pc, #272]	; (800a734 <__multiply+0x14c>)
 800a622:	4845      	ldr	r0, [pc, #276]	; (800a738 <__multiply+0x150>)
 800a624:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a628:	f7ff f874 	bl	8009714 <__assert_func>
 800a62c:	f100 0514 	add.w	r5, r0, #20
 800a630:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a634:	462b      	mov	r3, r5
 800a636:	2200      	movs	r2, #0
 800a638:	4543      	cmp	r3, r8
 800a63a:	d321      	bcc.n	800a680 <__multiply+0x98>
 800a63c:	f104 0314 	add.w	r3, r4, #20
 800a640:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a644:	f109 0314 	add.w	r3, r9, #20
 800a648:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a64c:	9202      	str	r2, [sp, #8]
 800a64e:	1b3a      	subs	r2, r7, r4
 800a650:	3a15      	subs	r2, #21
 800a652:	f022 0203 	bic.w	r2, r2, #3
 800a656:	3204      	adds	r2, #4
 800a658:	f104 0115 	add.w	r1, r4, #21
 800a65c:	428f      	cmp	r7, r1
 800a65e:	bf38      	it	cc
 800a660:	2204      	movcc	r2, #4
 800a662:	9201      	str	r2, [sp, #4]
 800a664:	9a02      	ldr	r2, [sp, #8]
 800a666:	9303      	str	r3, [sp, #12]
 800a668:	429a      	cmp	r2, r3
 800a66a:	d80c      	bhi.n	800a686 <__multiply+0x9e>
 800a66c:	2e00      	cmp	r6, #0
 800a66e:	dd03      	ble.n	800a678 <__multiply+0x90>
 800a670:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a674:	2b00      	cmp	r3, #0
 800a676:	d05b      	beq.n	800a730 <__multiply+0x148>
 800a678:	6106      	str	r6, [r0, #16]
 800a67a:	b005      	add	sp, #20
 800a67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a680:	f843 2b04 	str.w	r2, [r3], #4
 800a684:	e7d8      	b.n	800a638 <__multiply+0x50>
 800a686:	f8b3 a000 	ldrh.w	sl, [r3]
 800a68a:	f1ba 0f00 	cmp.w	sl, #0
 800a68e:	d024      	beq.n	800a6da <__multiply+0xf2>
 800a690:	f104 0e14 	add.w	lr, r4, #20
 800a694:	46a9      	mov	r9, r5
 800a696:	f04f 0c00 	mov.w	ip, #0
 800a69a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a69e:	f8d9 1000 	ldr.w	r1, [r9]
 800a6a2:	fa1f fb82 	uxth.w	fp, r2
 800a6a6:	b289      	uxth	r1, r1
 800a6a8:	fb0a 110b 	mla	r1, sl, fp, r1
 800a6ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a6b0:	f8d9 2000 	ldr.w	r2, [r9]
 800a6b4:	4461      	add	r1, ip
 800a6b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6ba:	fb0a c20b 	mla	r2, sl, fp, ip
 800a6be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a6c2:	b289      	uxth	r1, r1
 800a6c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6c8:	4577      	cmp	r7, lr
 800a6ca:	f849 1b04 	str.w	r1, [r9], #4
 800a6ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a6d2:	d8e2      	bhi.n	800a69a <__multiply+0xb2>
 800a6d4:	9a01      	ldr	r2, [sp, #4]
 800a6d6:	f845 c002 	str.w	ip, [r5, r2]
 800a6da:	9a03      	ldr	r2, [sp, #12]
 800a6dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	f1b9 0f00 	cmp.w	r9, #0
 800a6e6:	d021      	beq.n	800a72c <__multiply+0x144>
 800a6e8:	6829      	ldr	r1, [r5, #0]
 800a6ea:	f104 0c14 	add.w	ip, r4, #20
 800a6ee:	46ae      	mov	lr, r5
 800a6f0:	f04f 0a00 	mov.w	sl, #0
 800a6f4:	f8bc b000 	ldrh.w	fp, [ip]
 800a6f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6fc:	fb09 220b 	mla	r2, r9, fp, r2
 800a700:	4452      	add	r2, sl
 800a702:	b289      	uxth	r1, r1
 800a704:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a708:	f84e 1b04 	str.w	r1, [lr], #4
 800a70c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a710:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a714:	f8be 1000 	ldrh.w	r1, [lr]
 800a718:	fb09 110a 	mla	r1, r9, sl, r1
 800a71c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a720:	4567      	cmp	r7, ip
 800a722:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a726:	d8e5      	bhi.n	800a6f4 <__multiply+0x10c>
 800a728:	9a01      	ldr	r2, [sp, #4]
 800a72a:	50a9      	str	r1, [r5, r2]
 800a72c:	3504      	adds	r5, #4
 800a72e:	e799      	b.n	800a664 <__multiply+0x7c>
 800a730:	3e01      	subs	r6, #1
 800a732:	e79b      	b.n	800a66c <__multiply+0x84>
 800a734:	08010854 	.word	0x08010854
 800a738:	08010865 	.word	0x08010865

0800a73c <__pow5mult>:
 800a73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a740:	4615      	mov	r5, r2
 800a742:	f012 0203 	ands.w	r2, r2, #3
 800a746:	4606      	mov	r6, r0
 800a748:	460f      	mov	r7, r1
 800a74a:	d007      	beq.n	800a75c <__pow5mult+0x20>
 800a74c:	4c25      	ldr	r4, [pc, #148]	; (800a7e4 <__pow5mult+0xa8>)
 800a74e:	3a01      	subs	r2, #1
 800a750:	2300      	movs	r3, #0
 800a752:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a756:	f7ff fe9d 	bl	800a494 <__multadd>
 800a75a:	4607      	mov	r7, r0
 800a75c:	10ad      	asrs	r5, r5, #2
 800a75e:	d03d      	beq.n	800a7dc <__pow5mult+0xa0>
 800a760:	69f4      	ldr	r4, [r6, #28]
 800a762:	b97c      	cbnz	r4, 800a784 <__pow5mult+0x48>
 800a764:	2010      	movs	r0, #16
 800a766:	f7f9 f867 	bl	8003838 <__wrap_malloc>
 800a76a:	4602      	mov	r2, r0
 800a76c:	61f0      	str	r0, [r6, #28]
 800a76e:	b928      	cbnz	r0, 800a77c <__pow5mult+0x40>
 800a770:	4b1d      	ldr	r3, [pc, #116]	; (800a7e8 <__pow5mult+0xac>)
 800a772:	481e      	ldr	r0, [pc, #120]	; (800a7ec <__pow5mult+0xb0>)
 800a774:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a778:	f7fe ffcc 	bl	8009714 <__assert_func>
 800a77c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a780:	6004      	str	r4, [r0, #0]
 800a782:	60c4      	str	r4, [r0, #12]
 800a784:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a788:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a78c:	b94c      	cbnz	r4, 800a7a2 <__pow5mult+0x66>
 800a78e:	f240 2171 	movw	r1, #625	; 0x271
 800a792:	4630      	mov	r0, r6
 800a794:	f7ff ff12 	bl	800a5bc <__i2b>
 800a798:	2300      	movs	r3, #0
 800a79a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a79e:	4604      	mov	r4, r0
 800a7a0:	6003      	str	r3, [r0, #0]
 800a7a2:	f04f 0900 	mov.w	r9, #0
 800a7a6:	07eb      	lsls	r3, r5, #31
 800a7a8:	d50a      	bpl.n	800a7c0 <__pow5mult+0x84>
 800a7aa:	4639      	mov	r1, r7
 800a7ac:	4622      	mov	r2, r4
 800a7ae:	4630      	mov	r0, r6
 800a7b0:	f7ff ff1a 	bl	800a5e8 <__multiply>
 800a7b4:	4639      	mov	r1, r7
 800a7b6:	4680      	mov	r8, r0
 800a7b8:	4630      	mov	r0, r6
 800a7ba:	f7ff fe49 	bl	800a450 <_Bfree>
 800a7be:	4647      	mov	r7, r8
 800a7c0:	106d      	asrs	r5, r5, #1
 800a7c2:	d00b      	beq.n	800a7dc <__pow5mult+0xa0>
 800a7c4:	6820      	ldr	r0, [r4, #0]
 800a7c6:	b938      	cbnz	r0, 800a7d8 <__pow5mult+0x9c>
 800a7c8:	4622      	mov	r2, r4
 800a7ca:	4621      	mov	r1, r4
 800a7cc:	4630      	mov	r0, r6
 800a7ce:	f7ff ff0b 	bl	800a5e8 <__multiply>
 800a7d2:	6020      	str	r0, [r4, #0]
 800a7d4:	f8c0 9000 	str.w	r9, [r0]
 800a7d8:	4604      	mov	r4, r0
 800a7da:	e7e4      	b.n	800a7a6 <__pow5mult+0x6a>
 800a7dc:	4638      	mov	r0, r7
 800a7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7e2:	bf00      	nop
 800a7e4:	080109b0 	.word	0x080109b0
 800a7e8:	08010710 	.word	0x08010710
 800a7ec:	08010865 	.word	0x08010865

0800a7f0 <__lshift>:
 800a7f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7f4:	460c      	mov	r4, r1
 800a7f6:	6849      	ldr	r1, [r1, #4]
 800a7f8:	6923      	ldr	r3, [r4, #16]
 800a7fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7fe:	68a3      	ldr	r3, [r4, #8]
 800a800:	4607      	mov	r7, r0
 800a802:	4691      	mov	r9, r2
 800a804:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a808:	f108 0601 	add.w	r6, r8, #1
 800a80c:	42b3      	cmp	r3, r6
 800a80e:	db0b      	blt.n	800a828 <__lshift+0x38>
 800a810:	4638      	mov	r0, r7
 800a812:	f7ff fddd 	bl	800a3d0 <_Balloc>
 800a816:	4605      	mov	r5, r0
 800a818:	b948      	cbnz	r0, 800a82e <__lshift+0x3e>
 800a81a:	4602      	mov	r2, r0
 800a81c:	4b28      	ldr	r3, [pc, #160]	; (800a8c0 <__lshift+0xd0>)
 800a81e:	4829      	ldr	r0, [pc, #164]	; (800a8c4 <__lshift+0xd4>)
 800a820:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a824:	f7fe ff76 	bl	8009714 <__assert_func>
 800a828:	3101      	adds	r1, #1
 800a82a:	005b      	lsls	r3, r3, #1
 800a82c:	e7ee      	b.n	800a80c <__lshift+0x1c>
 800a82e:	2300      	movs	r3, #0
 800a830:	f100 0114 	add.w	r1, r0, #20
 800a834:	f100 0210 	add.w	r2, r0, #16
 800a838:	4618      	mov	r0, r3
 800a83a:	4553      	cmp	r3, sl
 800a83c:	db33      	blt.n	800a8a6 <__lshift+0xb6>
 800a83e:	6920      	ldr	r0, [r4, #16]
 800a840:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a844:	f104 0314 	add.w	r3, r4, #20
 800a848:	f019 091f 	ands.w	r9, r9, #31
 800a84c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a850:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a854:	d02b      	beq.n	800a8ae <__lshift+0xbe>
 800a856:	f1c9 0e20 	rsb	lr, r9, #32
 800a85a:	468a      	mov	sl, r1
 800a85c:	2200      	movs	r2, #0
 800a85e:	6818      	ldr	r0, [r3, #0]
 800a860:	fa00 f009 	lsl.w	r0, r0, r9
 800a864:	4310      	orrs	r0, r2
 800a866:	f84a 0b04 	str.w	r0, [sl], #4
 800a86a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a86e:	459c      	cmp	ip, r3
 800a870:	fa22 f20e 	lsr.w	r2, r2, lr
 800a874:	d8f3      	bhi.n	800a85e <__lshift+0x6e>
 800a876:	ebac 0304 	sub.w	r3, ip, r4
 800a87a:	3b15      	subs	r3, #21
 800a87c:	f023 0303 	bic.w	r3, r3, #3
 800a880:	3304      	adds	r3, #4
 800a882:	f104 0015 	add.w	r0, r4, #21
 800a886:	4584      	cmp	ip, r0
 800a888:	bf38      	it	cc
 800a88a:	2304      	movcc	r3, #4
 800a88c:	50ca      	str	r2, [r1, r3]
 800a88e:	b10a      	cbz	r2, 800a894 <__lshift+0xa4>
 800a890:	f108 0602 	add.w	r6, r8, #2
 800a894:	3e01      	subs	r6, #1
 800a896:	4638      	mov	r0, r7
 800a898:	612e      	str	r6, [r5, #16]
 800a89a:	4621      	mov	r1, r4
 800a89c:	f7ff fdd8 	bl	800a450 <_Bfree>
 800a8a0:	4628      	mov	r0, r5
 800a8a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800a8aa:	3301      	adds	r3, #1
 800a8ac:	e7c5      	b.n	800a83a <__lshift+0x4a>
 800a8ae:	3904      	subs	r1, #4
 800a8b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800a8b8:	459c      	cmp	ip, r3
 800a8ba:	d8f9      	bhi.n	800a8b0 <__lshift+0xc0>
 800a8bc:	e7ea      	b.n	800a894 <__lshift+0xa4>
 800a8be:	bf00      	nop
 800a8c0:	08010854 	.word	0x08010854
 800a8c4:	08010865 	.word	0x08010865

0800a8c8 <__mcmp>:
 800a8c8:	b530      	push	{r4, r5, lr}
 800a8ca:	6902      	ldr	r2, [r0, #16]
 800a8cc:	690c      	ldr	r4, [r1, #16]
 800a8ce:	1b12      	subs	r2, r2, r4
 800a8d0:	d10e      	bne.n	800a8f0 <__mcmp+0x28>
 800a8d2:	f100 0314 	add.w	r3, r0, #20
 800a8d6:	3114      	adds	r1, #20
 800a8d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a8dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a8e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a8e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a8e8:	42a5      	cmp	r5, r4
 800a8ea:	d003      	beq.n	800a8f4 <__mcmp+0x2c>
 800a8ec:	d305      	bcc.n	800a8fa <__mcmp+0x32>
 800a8ee:	2201      	movs	r2, #1
 800a8f0:	4610      	mov	r0, r2
 800a8f2:	bd30      	pop	{r4, r5, pc}
 800a8f4:	4283      	cmp	r3, r0
 800a8f6:	d3f3      	bcc.n	800a8e0 <__mcmp+0x18>
 800a8f8:	e7fa      	b.n	800a8f0 <__mcmp+0x28>
 800a8fa:	f04f 32ff 	mov.w	r2, #4294967295
 800a8fe:	e7f7      	b.n	800a8f0 <__mcmp+0x28>

0800a900 <__mdiff>:
 800a900:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	460c      	mov	r4, r1
 800a906:	4606      	mov	r6, r0
 800a908:	4611      	mov	r1, r2
 800a90a:	4620      	mov	r0, r4
 800a90c:	4690      	mov	r8, r2
 800a90e:	f7ff ffdb 	bl	800a8c8 <__mcmp>
 800a912:	1e05      	subs	r5, r0, #0
 800a914:	d110      	bne.n	800a938 <__mdiff+0x38>
 800a916:	4629      	mov	r1, r5
 800a918:	4630      	mov	r0, r6
 800a91a:	f7ff fd59 	bl	800a3d0 <_Balloc>
 800a91e:	b930      	cbnz	r0, 800a92e <__mdiff+0x2e>
 800a920:	4b3a      	ldr	r3, [pc, #232]	; (800aa0c <__mdiff+0x10c>)
 800a922:	4602      	mov	r2, r0
 800a924:	f240 2137 	movw	r1, #567	; 0x237
 800a928:	4839      	ldr	r0, [pc, #228]	; (800aa10 <__mdiff+0x110>)
 800a92a:	f7fe fef3 	bl	8009714 <__assert_func>
 800a92e:	2301      	movs	r3, #1
 800a930:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a934:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a938:	bfa4      	itt	ge
 800a93a:	4643      	movge	r3, r8
 800a93c:	46a0      	movge	r8, r4
 800a93e:	4630      	mov	r0, r6
 800a940:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a944:	bfa6      	itte	ge
 800a946:	461c      	movge	r4, r3
 800a948:	2500      	movge	r5, #0
 800a94a:	2501      	movlt	r5, #1
 800a94c:	f7ff fd40 	bl	800a3d0 <_Balloc>
 800a950:	b920      	cbnz	r0, 800a95c <__mdiff+0x5c>
 800a952:	4b2e      	ldr	r3, [pc, #184]	; (800aa0c <__mdiff+0x10c>)
 800a954:	4602      	mov	r2, r0
 800a956:	f240 2145 	movw	r1, #581	; 0x245
 800a95a:	e7e5      	b.n	800a928 <__mdiff+0x28>
 800a95c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a960:	6926      	ldr	r6, [r4, #16]
 800a962:	60c5      	str	r5, [r0, #12]
 800a964:	f104 0914 	add.w	r9, r4, #20
 800a968:	f108 0514 	add.w	r5, r8, #20
 800a96c:	f100 0e14 	add.w	lr, r0, #20
 800a970:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a974:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a978:	f108 0210 	add.w	r2, r8, #16
 800a97c:	46f2      	mov	sl, lr
 800a97e:	2100      	movs	r1, #0
 800a980:	f859 3b04 	ldr.w	r3, [r9], #4
 800a984:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a988:	fa11 f88b 	uxtah	r8, r1, fp
 800a98c:	b299      	uxth	r1, r3
 800a98e:	0c1b      	lsrs	r3, r3, #16
 800a990:	eba8 0801 	sub.w	r8, r8, r1
 800a994:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a998:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a99c:	fa1f f888 	uxth.w	r8, r8
 800a9a0:	1419      	asrs	r1, r3, #16
 800a9a2:	454e      	cmp	r6, r9
 800a9a4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a9a8:	f84a 3b04 	str.w	r3, [sl], #4
 800a9ac:	d8e8      	bhi.n	800a980 <__mdiff+0x80>
 800a9ae:	1b33      	subs	r3, r6, r4
 800a9b0:	3b15      	subs	r3, #21
 800a9b2:	f023 0303 	bic.w	r3, r3, #3
 800a9b6:	3304      	adds	r3, #4
 800a9b8:	3415      	adds	r4, #21
 800a9ba:	42a6      	cmp	r6, r4
 800a9bc:	bf38      	it	cc
 800a9be:	2304      	movcc	r3, #4
 800a9c0:	441d      	add	r5, r3
 800a9c2:	4473      	add	r3, lr
 800a9c4:	469e      	mov	lr, r3
 800a9c6:	462e      	mov	r6, r5
 800a9c8:	4566      	cmp	r6, ip
 800a9ca:	d30e      	bcc.n	800a9ea <__mdiff+0xea>
 800a9cc:	f10c 0203 	add.w	r2, ip, #3
 800a9d0:	1b52      	subs	r2, r2, r5
 800a9d2:	f022 0203 	bic.w	r2, r2, #3
 800a9d6:	3d03      	subs	r5, #3
 800a9d8:	45ac      	cmp	ip, r5
 800a9da:	bf38      	it	cc
 800a9dc:	2200      	movcc	r2, #0
 800a9de:	4413      	add	r3, r2
 800a9e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a9e4:	b17a      	cbz	r2, 800aa06 <__mdiff+0x106>
 800a9e6:	6107      	str	r7, [r0, #16]
 800a9e8:	e7a4      	b.n	800a934 <__mdiff+0x34>
 800a9ea:	f856 8b04 	ldr.w	r8, [r6], #4
 800a9ee:	fa11 f288 	uxtah	r2, r1, r8
 800a9f2:	1414      	asrs	r4, r2, #16
 800a9f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a9f8:	b292      	uxth	r2, r2
 800a9fa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a9fe:	f84e 2b04 	str.w	r2, [lr], #4
 800aa02:	1421      	asrs	r1, r4, #16
 800aa04:	e7e0      	b.n	800a9c8 <__mdiff+0xc8>
 800aa06:	3f01      	subs	r7, #1
 800aa08:	e7ea      	b.n	800a9e0 <__mdiff+0xe0>
 800aa0a:	bf00      	nop
 800aa0c:	08010854 	.word	0x08010854
 800aa10:	08010865 	.word	0x08010865

0800aa14 <__d2b>:
 800aa14:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aa18:	460f      	mov	r7, r1
 800aa1a:	2101      	movs	r1, #1
 800aa1c:	ec59 8b10 	vmov	r8, r9, d0
 800aa20:	4616      	mov	r6, r2
 800aa22:	f7ff fcd5 	bl	800a3d0 <_Balloc>
 800aa26:	4604      	mov	r4, r0
 800aa28:	b930      	cbnz	r0, 800aa38 <__d2b+0x24>
 800aa2a:	4602      	mov	r2, r0
 800aa2c:	4b24      	ldr	r3, [pc, #144]	; (800aac0 <__d2b+0xac>)
 800aa2e:	4825      	ldr	r0, [pc, #148]	; (800aac4 <__d2b+0xb0>)
 800aa30:	f240 310f 	movw	r1, #783	; 0x30f
 800aa34:	f7fe fe6e 	bl	8009714 <__assert_func>
 800aa38:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa3c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa40:	bb2d      	cbnz	r5, 800aa8e <__d2b+0x7a>
 800aa42:	9301      	str	r3, [sp, #4]
 800aa44:	f1b8 0300 	subs.w	r3, r8, #0
 800aa48:	d026      	beq.n	800aa98 <__d2b+0x84>
 800aa4a:	4668      	mov	r0, sp
 800aa4c:	9300      	str	r3, [sp, #0]
 800aa4e:	f7ff fd87 	bl	800a560 <__lo0bits>
 800aa52:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa56:	b1e8      	cbz	r0, 800aa94 <__d2b+0x80>
 800aa58:	f1c0 0320 	rsb	r3, r0, #32
 800aa5c:	fa02 f303 	lsl.w	r3, r2, r3
 800aa60:	430b      	orrs	r3, r1
 800aa62:	40c2      	lsrs	r2, r0
 800aa64:	6163      	str	r3, [r4, #20]
 800aa66:	9201      	str	r2, [sp, #4]
 800aa68:	9b01      	ldr	r3, [sp, #4]
 800aa6a:	61a3      	str	r3, [r4, #24]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	bf14      	ite	ne
 800aa70:	2202      	movne	r2, #2
 800aa72:	2201      	moveq	r2, #1
 800aa74:	6122      	str	r2, [r4, #16]
 800aa76:	b1bd      	cbz	r5, 800aaa8 <__d2b+0x94>
 800aa78:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa7c:	4405      	add	r5, r0
 800aa7e:	603d      	str	r5, [r7, #0]
 800aa80:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa84:	6030      	str	r0, [r6, #0]
 800aa86:	4620      	mov	r0, r4
 800aa88:	b003      	add	sp, #12
 800aa8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa92:	e7d6      	b.n	800aa42 <__d2b+0x2e>
 800aa94:	6161      	str	r1, [r4, #20]
 800aa96:	e7e7      	b.n	800aa68 <__d2b+0x54>
 800aa98:	a801      	add	r0, sp, #4
 800aa9a:	f7ff fd61 	bl	800a560 <__lo0bits>
 800aa9e:	9b01      	ldr	r3, [sp, #4]
 800aaa0:	6163      	str	r3, [r4, #20]
 800aaa2:	3020      	adds	r0, #32
 800aaa4:	2201      	movs	r2, #1
 800aaa6:	e7e5      	b.n	800aa74 <__d2b+0x60>
 800aaa8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aaac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aab0:	6038      	str	r0, [r7, #0]
 800aab2:	6918      	ldr	r0, [r3, #16]
 800aab4:	f7ff fd34 	bl	800a520 <__hi0bits>
 800aab8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aabc:	e7e2      	b.n	800aa84 <__d2b+0x70>
 800aabe:	bf00      	nop
 800aac0:	08010854 	.word	0x08010854
 800aac4:	08010865 	.word	0x08010865

0800aac8 <fiprintf>:
 800aac8:	b40e      	push	{r1, r2, r3}
 800aaca:	b503      	push	{r0, r1, lr}
 800aacc:	4601      	mov	r1, r0
 800aace:	ab03      	add	r3, sp, #12
 800aad0:	4805      	ldr	r0, [pc, #20]	; (800aae8 <fiprintf+0x20>)
 800aad2:	f853 2b04 	ldr.w	r2, [r3], #4
 800aad6:	6800      	ldr	r0, [r0, #0]
 800aad8:	9301      	str	r3, [sp, #4]
 800aada:	f000 f86d 	bl	800abb8 <_vfiprintf_r>
 800aade:	b002      	add	sp, #8
 800aae0:	f85d eb04 	ldr.w	lr, [sp], #4
 800aae4:	b003      	add	sp, #12
 800aae6:	4770      	bx	lr
 800aae8:	200005d0 	.word	0x200005d0

0800aaec <abort>:
 800aaec:	b508      	push	{r3, lr}
 800aaee:	2006      	movs	r0, #6
 800aaf0:	f000 fa3a 	bl	800af68 <raise>
 800aaf4:	2001      	movs	r0, #1
 800aaf6:	f000 fbab 	bl	800b250 <_exit>

0800aafa <_calloc_r>:
 800aafa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aafc:	fba1 2402 	umull	r2, r4, r1, r2
 800ab00:	b94c      	cbnz	r4, 800ab16 <_calloc_r+0x1c>
 800ab02:	4611      	mov	r1, r2
 800ab04:	9201      	str	r2, [sp, #4]
 800ab06:	f7fd fe6d 	bl	80087e4 <_malloc_r>
 800ab0a:	9a01      	ldr	r2, [sp, #4]
 800ab0c:	4605      	mov	r5, r0
 800ab0e:	b930      	cbnz	r0, 800ab1e <_calloc_r+0x24>
 800ab10:	4628      	mov	r0, r5
 800ab12:	b003      	add	sp, #12
 800ab14:	bd30      	pop	{r4, r5, pc}
 800ab16:	220c      	movs	r2, #12
 800ab18:	6002      	str	r2, [r0, #0]
 800ab1a:	2500      	movs	r5, #0
 800ab1c:	e7f8      	b.n	800ab10 <_calloc_r+0x16>
 800ab1e:	4621      	mov	r1, r4
 800ab20:	f7fe fd49 	bl	80095b6 <memset>
 800ab24:	e7f4      	b.n	800ab10 <_calloc_r+0x16>

0800ab26 <__ascii_mbtowc>:
 800ab26:	b082      	sub	sp, #8
 800ab28:	b901      	cbnz	r1, 800ab2c <__ascii_mbtowc+0x6>
 800ab2a:	a901      	add	r1, sp, #4
 800ab2c:	b142      	cbz	r2, 800ab40 <__ascii_mbtowc+0x1a>
 800ab2e:	b14b      	cbz	r3, 800ab44 <__ascii_mbtowc+0x1e>
 800ab30:	7813      	ldrb	r3, [r2, #0]
 800ab32:	600b      	str	r3, [r1, #0]
 800ab34:	7812      	ldrb	r2, [r2, #0]
 800ab36:	1e10      	subs	r0, r2, #0
 800ab38:	bf18      	it	ne
 800ab3a:	2001      	movne	r0, #1
 800ab3c:	b002      	add	sp, #8
 800ab3e:	4770      	bx	lr
 800ab40:	4610      	mov	r0, r2
 800ab42:	e7fb      	b.n	800ab3c <__ascii_mbtowc+0x16>
 800ab44:	f06f 0001 	mvn.w	r0, #1
 800ab48:	e7f8      	b.n	800ab3c <__ascii_mbtowc+0x16>

0800ab4a <__ascii_wctomb>:
 800ab4a:	b149      	cbz	r1, 800ab60 <__ascii_wctomb+0x16>
 800ab4c:	2aff      	cmp	r2, #255	; 0xff
 800ab4e:	bf85      	ittet	hi
 800ab50:	238a      	movhi	r3, #138	; 0x8a
 800ab52:	6003      	strhi	r3, [r0, #0]
 800ab54:	700a      	strbls	r2, [r1, #0]
 800ab56:	f04f 30ff 	movhi.w	r0, #4294967295
 800ab5a:	bf98      	it	ls
 800ab5c:	2001      	movls	r0, #1
 800ab5e:	4770      	bx	lr
 800ab60:	4608      	mov	r0, r1
 800ab62:	4770      	bx	lr

0800ab64 <__sfputc_r>:
 800ab64:	6893      	ldr	r3, [r2, #8]
 800ab66:	3b01      	subs	r3, #1
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	b410      	push	{r4}
 800ab6c:	6093      	str	r3, [r2, #8]
 800ab6e:	da08      	bge.n	800ab82 <__sfputc_r+0x1e>
 800ab70:	6994      	ldr	r4, [r2, #24]
 800ab72:	42a3      	cmp	r3, r4
 800ab74:	db01      	blt.n	800ab7a <__sfputc_r+0x16>
 800ab76:	290a      	cmp	r1, #10
 800ab78:	d103      	bne.n	800ab82 <__sfputc_r+0x1e>
 800ab7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab7e:	f000 b935 	b.w	800adec <__swbuf_r>
 800ab82:	6813      	ldr	r3, [r2, #0]
 800ab84:	1c58      	adds	r0, r3, #1
 800ab86:	6010      	str	r0, [r2, #0]
 800ab88:	7019      	strb	r1, [r3, #0]
 800ab8a:	4608      	mov	r0, r1
 800ab8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab90:	4770      	bx	lr

0800ab92 <__sfputs_r>:
 800ab92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab94:	4606      	mov	r6, r0
 800ab96:	460f      	mov	r7, r1
 800ab98:	4614      	mov	r4, r2
 800ab9a:	18d5      	adds	r5, r2, r3
 800ab9c:	42ac      	cmp	r4, r5
 800ab9e:	d101      	bne.n	800aba4 <__sfputs_r+0x12>
 800aba0:	2000      	movs	r0, #0
 800aba2:	e007      	b.n	800abb4 <__sfputs_r+0x22>
 800aba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aba8:	463a      	mov	r2, r7
 800abaa:	4630      	mov	r0, r6
 800abac:	f7ff ffda 	bl	800ab64 <__sfputc_r>
 800abb0:	1c43      	adds	r3, r0, #1
 800abb2:	d1f3      	bne.n	800ab9c <__sfputs_r+0xa>
 800abb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800abb8 <_vfiprintf_r>:
 800abb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abbc:	460d      	mov	r5, r1
 800abbe:	b09d      	sub	sp, #116	; 0x74
 800abc0:	4614      	mov	r4, r2
 800abc2:	4698      	mov	r8, r3
 800abc4:	4606      	mov	r6, r0
 800abc6:	b118      	cbz	r0, 800abd0 <_vfiprintf_r+0x18>
 800abc8:	6a03      	ldr	r3, [r0, #32]
 800abca:	b90b      	cbnz	r3, 800abd0 <_vfiprintf_r+0x18>
 800abcc:	f7fe fc7a 	bl	80094c4 <__sinit>
 800abd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abd2:	07d9      	lsls	r1, r3, #31
 800abd4:	d405      	bmi.n	800abe2 <_vfiprintf_r+0x2a>
 800abd6:	89ab      	ldrh	r3, [r5, #12]
 800abd8:	059a      	lsls	r2, r3, #22
 800abda:	d402      	bmi.n	800abe2 <_vfiprintf_r+0x2a>
 800abdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800abde:	f7fe fd89 	bl	80096f4 <__retarget_lock_acquire_recursive>
 800abe2:	89ab      	ldrh	r3, [r5, #12]
 800abe4:	071b      	lsls	r3, r3, #28
 800abe6:	d501      	bpl.n	800abec <_vfiprintf_r+0x34>
 800abe8:	692b      	ldr	r3, [r5, #16]
 800abea:	b99b      	cbnz	r3, 800ac14 <_vfiprintf_r+0x5c>
 800abec:	4629      	mov	r1, r5
 800abee:	4630      	mov	r0, r6
 800abf0:	f000 f93a 	bl	800ae68 <__swsetup_r>
 800abf4:	b170      	cbz	r0, 800ac14 <_vfiprintf_r+0x5c>
 800abf6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800abf8:	07dc      	lsls	r4, r3, #31
 800abfa:	d504      	bpl.n	800ac06 <_vfiprintf_r+0x4e>
 800abfc:	f04f 30ff 	mov.w	r0, #4294967295
 800ac00:	b01d      	add	sp, #116	; 0x74
 800ac02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac06:	89ab      	ldrh	r3, [r5, #12]
 800ac08:	0598      	lsls	r0, r3, #22
 800ac0a:	d4f7      	bmi.n	800abfc <_vfiprintf_r+0x44>
 800ac0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ac0e:	f7fe fd72 	bl	80096f6 <__retarget_lock_release_recursive>
 800ac12:	e7f3      	b.n	800abfc <_vfiprintf_r+0x44>
 800ac14:	2300      	movs	r3, #0
 800ac16:	9309      	str	r3, [sp, #36]	; 0x24
 800ac18:	2320      	movs	r3, #32
 800ac1a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ac1e:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac22:	2330      	movs	r3, #48	; 0x30
 800ac24:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800add8 <_vfiprintf_r+0x220>
 800ac28:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ac2c:	f04f 0901 	mov.w	r9, #1
 800ac30:	4623      	mov	r3, r4
 800ac32:	469a      	mov	sl, r3
 800ac34:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac38:	b10a      	cbz	r2, 800ac3e <_vfiprintf_r+0x86>
 800ac3a:	2a25      	cmp	r2, #37	; 0x25
 800ac3c:	d1f9      	bne.n	800ac32 <_vfiprintf_r+0x7a>
 800ac3e:	ebba 0b04 	subs.w	fp, sl, r4
 800ac42:	d00b      	beq.n	800ac5c <_vfiprintf_r+0xa4>
 800ac44:	465b      	mov	r3, fp
 800ac46:	4622      	mov	r2, r4
 800ac48:	4629      	mov	r1, r5
 800ac4a:	4630      	mov	r0, r6
 800ac4c:	f7ff ffa1 	bl	800ab92 <__sfputs_r>
 800ac50:	3001      	adds	r0, #1
 800ac52:	f000 80a9 	beq.w	800ada8 <_vfiprintf_r+0x1f0>
 800ac56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ac58:	445a      	add	r2, fp
 800ac5a:	9209      	str	r2, [sp, #36]	; 0x24
 800ac5c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f000 80a1 	beq.w	800ada8 <_vfiprintf_r+0x1f0>
 800ac66:	2300      	movs	r3, #0
 800ac68:	f04f 32ff 	mov.w	r2, #4294967295
 800ac6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac70:	f10a 0a01 	add.w	sl, sl, #1
 800ac74:	9304      	str	r3, [sp, #16]
 800ac76:	9307      	str	r3, [sp, #28]
 800ac78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ac7c:	931a      	str	r3, [sp, #104]	; 0x68
 800ac7e:	4654      	mov	r4, sl
 800ac80:	2205      	movs	r2, #5
 800ac82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac86:	4854      	ldr	r0, [pc, #336]	; (800add8 <_vfiprintf_r+0x220>)
 800ac88:	f7f5 fada 	bl	8000240 <memchr>
 800ac8c:	9a04      	ldr	r2, [sp, #16]
 800ac8e:	b9d8      	cbnz	r0, 800acc8 <_vfiprintf_r+0x110>
 800ac90:	06d1      	lsls	r1, r2, #27
 800ac92:	bf44      	itt	mi
 800ac94:	2320      	movmi	r3, #32
 800ac96:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ac9a:	0713      	lsls	r3, r2, #28
 800ac9c:	bf44      	itt	mi
 800ac9e:	232b      	movmi	r3, #43	; 0x2b
 800aca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800aca4:	f89a 3000 	ldrb.w	r3, [sl]
 800aca8:	2b2a      	cmp	r3, #42	; 0x2a
 800acaa:	d015      	beq.n	800acd8 <_vfiprintf_r+0x120>
 800acac:	9a07      	ldr	r2, [sp, #28]
 800acae:	4654      	mov	r4, sl
 800acb0:	2000      	movs	r0, #0
 800acb2:	f04f 0c0a 	mov.w	ip, #10
 800acb6:	4621      	mov	r1, r4
 800acb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acbc:	3b30      	subs	r3, #48	; 0x30
 800acbe:	2b09      	cmp	r3, #9
 800acc0:	d94d      	bls.n	800ad5e <_vfiprintf_r+0x1a6>
 800acc2:	b1b0      	cbz	r0, 800acf2 <_vfiprintf_r+0x13a>
 800acc4:	9207      	str	r2, [sp, #28]
 800acc6:	e014      	b.n	800acf2 <_vfiprintf_r+0x13a>
 800acc8:	eba0 0308 	sub.w	r3, r0, r8
 800accc:	fa09 f303 	lsl.w	r3, r9, r3
 800acd0:	4313      	orrs	r3, r2
 800acd2:	9304      	str	r3, [sp, #16]
 800acd4:	46a2      	mov	sl, r4
 800acd6:	e7d2      	b.n	800ac7e <_vfiprintf_r+0xc6>
 800acd8:	9b03      	ldr	r3, [sp, #12]
 800acda:	1d19      	adds	r1, r3, #4
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	9103      	str	r1, [sp, #12]
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	bfbb      	ittet	lt
 800ace4:	425b      	neglt	r3, r3
 800ace6:	f042 0202 	orrlt.w	r2, r2, #2
 800acea:	9307      	strge	r3, [sp, #28]
 800acec:	9307      	strlt	r3, [sp, #28]
 800acee:	bfb8      	it	lt
 800acf0:	9204      	strlt	r2, [sp, #16]
 800acf2:	7823      	ldrb	r3, [r4, #0]
 800acf4:	2b2e      	cmp	r3, #46	; 0x2e
 800acf6:	d10c      	bne.n	800ad12 <_vfiprintf_r+0x15a>
 800acf8:	7863      	ldrb	r3, [r4, #1]
 800acfa:	2b2a      	cmp	r3, #42	; 0x2a
 800acfc:	d134      	bne.n	800ad68 <_vfiprintf_r+0x1b0>
 800acfe:	9b03      	ldr	r3, [sp, #12]
 800ad00:	1d1a      	adds	r2, r3, #4
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	9203      	str	r2, [sp, #12]
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	bfb8      	it	lt
 800ad0a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ad0e:	3402      	adds	r4, #2
 800ad10:	9305      	str	r3, [sp, #20]
 800ad12:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800ade8 <_vfiprintf_r+0x230>
 800ad16:	7821      	ldrb	r1, [r4, #0]
 800ad18:	2203      	movs	r2, #3
 800ad1a:	4650      	mov	r0, sl
 800ad1c:	f7f5 fa90 	bl	8000240 <memchr>
 800ad20:	b138      	cbz	r0, 800ad32 <_vfiprintf_r+0x17a>
 800ad22:	9b04      	ldr	r3, [sp, #16]
 800ad24:	eba0 000a 	sub.w	r0, r0, sl
 800ad28:	2240      	movs	r2, #64	; 0x40
 800ad2a:	4082      	lsls	r2, r0
 800ad2c:	4313      	orrs	r3, r2
 800ad2e:	3401      	adds	r4, #1
 800ad30:	9304      	str	r3, [sp, #16]
 800ad32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad36:	4829      	ldr	r0, [pc, #164]	; (800addc <_vfiprintf_r+0x224>)
 800ad38:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ad3c:	2206      	movs	r2, #6
 800ad3e:	f7f5 fa7f 	bl	8000240 <memchr>
 800ad42:	2800      	cmp	r0, #0
 800ad44:	d03f      	beq.n	800adc6 <_vfiprintf_r+0x20e>
 800ad46:	4b26      	ldr	r3, [pc, #152]	; (800ade0 <_vfiprintf_r+0x228>)
 800ad48:	bb1b      	cbnz	r3, 800ad92 <_vfiprintf_r+0x1da>
 800ad4a:	9b03      	ldr	r3, [sp, #12]
 800ad4c:	3307      	adds	r3, #7
 800ad4e:	f023 0307 	bic.w	r3, r3, #7
 800ad52:	3308      	adds	r3, #8
 800ad54:	9303      	str	r3, [sp, #12]
 800ad56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad58:	443b      	add	r3, r7
 800ad5a:	9309      	str	r3, [sp, #36]	; 0x24
 800ad5c:	e768      	b.n	800ac30 <_vfiprintf_r+0x78>
 800ad5e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad62:	460c      	mov	r4, r1
 800ad64:	2001      	movs	r0, #1
 800ad66:	e7a6      	b.n	800acb6 <_vfiprintf_r+0xfe>
 800ad68:	2300      	movs	r3, #0
 800ad6a:	3401      	adds	r4, #1
 800ad6c:	9305      	str	r3, [sp, #20]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	f04f 0c0a 	mov.w	ip, #10
 800ad74:	4620      	mov	r0, r4
 800ad76:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad7a:	3a30      	subs	r2, #48	; 0x30
 800ad7c:	2a09      	cmp	r2, #9
 800ad7e:	d903      	bls.n	800ad88 <_vfiprintf_r+0x1d0>
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d0c6      	beq.n	800ad12 <_vfiprintf_r+0x15a>
 800ad84:	9105      	str	r1, [sp, #20]
 800ad86:	e7c4      	b.n	800ad12 <_vfiprintf_r+0x15a>
 800ad88:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e7f0      	b.n	800ad74 <_vfiprintf_r+0x1bc>
 800ad92:	ab03      	add	r3, sp, #12
 800ad94:	9300      	str	r3, [sp, #0]
 800ad96:	462a      	mov	r2, r5
 800ad98:	4b12      	ldr	r3, [pc, #72]	; (800ade4 <_vfiprintf_r+0x22c>)
 800ad9a:	a904      	add	r1, sp, #16
 800ad9c:	4630      	mov	r0, r6
 800ad9e:	f7fd feab 	bl	8008af8 <_printf_float>
 800ada2:	4607      	mov	r7, r0
 800ada4:	1c78      	adds	r0, r7, #1
 800ada6:	d1d6      	bne.n	800ad56 <_vfiprintf_r+0x19e>
 800ada8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800adaa:	07d9      	lsls	r1, r3, #31
 800adac:	d405      	bmi.n	800adba <_vfiprintf_r+0x202>
 800adae:	89ab      	ldrh	r3, [r5, #12]
 800adb0:	059a      	lsls	r2, r3, #22
 800adb2:	d402      	bmi.n	800adba <_vfiprintf_r+0x202>
 800adb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800adb6:	f7fe fc9e 	bl	80096f6 <__retarget_lock_release_recursive>
 800adba:	89ab      	ldrh	r3, [r5, #12]
 800adbc:	065b      	lsls	r3, r3, #25
 800adbe:	f53f af1d 	bmi.w	800abfc <_vfiprintf_r+0x44>
 800adc2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800adc4:	e71c      	b.n	800ac00 <_vfiprintf_r+0x48>
 800adc6:	ab03      	add	r3, sp, #12
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	462a      	mov	r2, r5
 800adcc:	4b05      	ldr	r3, [pc, #20]	; (800ade4 <_vfiprintf_r+0x22c>)
 800adce:	a904      	add	r1, sp, #16
 800add0:	4630      	mov	r0, r6
 800add2:	f7fe f919 	bl	8009008 <_printf_i>
 800add6:	e7e4      	b.n	800ada2 <_vfiprintf_r+0x1ea>
 800add8:	08010ac7 	.word	0x08010ac7
 800addc:	08010ad1 	.word	0x08010ad1
 800ade0:	08008af9 	.word	0x08008af9
 800ade4:	0800ab93 	.word	0x0800ab93
 800ade8:	08010acd 	.word	0x08010acd

0800adec <__swbuf_r>:
 800adec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adee:	460e      	mov	r6, r1
 800adf0:	4614      	mov	r4, r2
 800adf2:	4605      	mov	r5, r0
 800adf4:	b118      	cbz	r0, 800adfe <__swbuf_r+0x12>
 800adf6:	6a03      	ldr	r3, [r0, #32]
 800adf8:	b90b      	cbnz	r3, 800adfe <__swbuf_r+0x12>
 800adfa:	f7fe fb63 	bl	80094c4 <__sinit>
 800adfe:	69a3      	ldr	r3, [r4, #24]
 800ae00:	60a3      	str	r3, [r4, #8]
 800ae02:	89a3      	ldrh	r3, [r4, #12]
 800ae04:	071a      	lsls	r2, r3, #28
 800ae06:	d525      	bpl.n	800ae54 <__swbuf_r+0x68>
 800ae08:	6923      	ldr	r3, [r4, #16]
 800ae0a:	b31b      	cbz	r3, 800ae54 <__swbuf_r+0x68>
 800ae0c:	6823      	ldr	r3, [r4, #0]
 800ae0e:	6922      	ldr	r2, [r4, #16]
 800ae10:	1a98      	subs	r0, r3, r2
 800ae12:	6963      	ldr	r3, [r4, #20]
 800ae14:	b2f6      	uxtb	r6, r6
 800ae16:	4283      	cmp	r3, r0
 800ae18:	4637      	mov	r7, r6
 800ae1a:	dc04      	bgt.n	800ae26 <__swbuf_r+0x3a>
 800ae1c:	4621      	mov	r1, r4
 800ae1e:	4628      	mov	r0, r5
 800ae20:	f7fe fa9a 	bl	8009358 <_fflush_r>
 800ae24:	b9e0      	cbnz	r0, 800ae60 <__swbuf_r+0x74>
 800ae26:	68a3      	ldr	r3, [r4, #8]
 800ae28:	3b01      	subs	r3, #1
 800ae2a:	60a3      	str	r3, [r4, #8]
 800ae2c:	6823      	ldr	r3, [r4, #0]
 800ae2e:	1c5a      	adds	r2, r3, #1
 800ae30:	6022      	str	r2, [r4, #0]
 800ae32:	701e      	strb	r6, [r3, #0]
 800ae34:	6962      	ldr	r2, [r4, #20]
 800ae36:	1c43      	adds	r3, r0, #1
 800ae38:	429a      	cmp	r2, r3
 800ae3a:	d004      	beq.n	800ae46 <__swbuf_r+0x5a>
 800ae3c:	89a3      	ldrh	r3, [r4, #12]
 800ae3e:	07db      	lsls	r3, r3, #31
 800ae40:	d506      	bpl.n	800ae50 <__swbuf_r+0x64>
 800ae42:	2e0a      	cmp	r6, #10
 800ae44:	d104      	bne.n	800ae50 <__swbuf_r+0x64>
 800ae46:	4621      	mov	r1, r4
 800ae48:	4628      	mov	r0, r5
 800ae4a:	f7fe fa85 	bl	8009358 <_fflush_r>
 800ae4e:	b938      	cbnz	r0, 800ae60 <__swbuf_r+0x74>
 800ae50:	4638      	mov	r0, r7
 800ae52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ae54:	4621      	mov	r1, r4
 800ae56:	4628      	mov	r0, r5
 800ae58:	f000 f806 	bl	800ae68 <__swsetup_r>
 800ae5c:	2800      	cmp	r0, #0
 800ae5e:	d0d5      	beq.n	800ae0c <__swbuf_r+0x20>
 800ae60:	f04f 37ff 	mov.w	r7, #4294967295
 800ae64:	e7f4      	b.n	800ae50 <__swbuf_r+0x64>
	...

0800ae68 <__swsetup_r>:
 800ae68:	b538      	push	{r3, r4, r5, lr}
 800ae6a:	4b2a      	ldr	r3, [pc, #168]	; (800af14 <__swsetup_r+0xac>)
 800ae6c:	4605      	mov	r5, r0
 800ae6e:	6818      	ldr	r0, [r3, #0]
 800ae70:	460c      	mov	r4, r1
 800ae72:	b118      	cbz	r0, 800ae7c <__swsetup_r+0x14>
 800ae74:	6a03      	ldr	r3, [r0, #32]
 800ae76:	b90b      	cbnz	r3, 800ae7c <__swsetup_r+0x14>
 800ae78:	f7fe fb24 	bl	80094c4 <__sinit>
 800ae7c:	89a3      	ldrh	r3, [r4, #12]
 800ae7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ae82:	0718      	lsls	r0, r3, #28
 800ae84:	d422      	bmi.n	800aecc <__swsetup_r+0x64>
 800ae86:	06d9      	lsls	r1, r3, #27
 800ae88:	d407      	bmi.n	800ae9a <__swsetup_r+0x32>
 800ae8a:	2309      	movs	r3, #9
 800ae8c:	602b      	str	r3, [r5, #0]
 800ae8e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ae92:	81a3      	strh	r3, [r4, #12]
 800ae94:	f04f 30ff 	mov.w	r0, #4294967295
 800ae98:	e034      	b.n	800af04 <__swsetup_r+0x9c>
 800ae9a:	0758      	lsls	r0, r3, #29
 800ae9c:	d512      	bpl.n	800aec4 <__swsetup_r+0x5c>
 800ae9e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800aea0:	b141      	cbz	r1, 800aeb4 <__swsetup_r+0x4c>
 800aea2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aea6:	4299      	cmp	r1, r3
 800aea8:	d002      	beq.n	800aeb0 <__swsetup_r+0x48>
 800aeaa:	4628      	mov	r0, r5
 800aeac:	f7ff fa44 	bl	800a338 <_free_r>
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	6363      	str	r3, [r4, #52]	; 0x34
 800aeb4:	89a3      	ldrh	r3, [r4, #12]
 800aeb6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800aeba:	81a3      	strh	r3, [r4, #12]
 800aebc:	2300      	movs	r3, #0
 800aebe:	6063      	str	r3, [r4, #4]
 800aec0:	6923      	ldr	r3, [r4, #16]
 800aec2:	6023      	str	r3, [r4, #0]
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	f043 0308 	orr.w	r3, r3, #8
 800aeca:	81a3      	strh	r3, [r4, #12]
 800aecc:	6923      	ldr	r3, [r4, #16]
 800aece:	b94b      	cbnz	r3, 800aee4 <__swsetup_r+0x7c>
 800aed0:	89a3      	ldrh	r3, [r4, #12]
 800aed2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800aed6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aeda:	d003      	beq.n	800aee4 <__swsetup_r+0x7c>
 800aedc:	4621      	mov	r1, r4
 800aede:	4628      	mov	r0, r5
 800aee0:	f000 f884 	bl	800afec <__smakebuf_r>
 800aee4:	89a0      	ldrh	r0, [r4, #12]
 800aee6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800aeea:	f010 0301 	ands.w	r3, r0, #1
 800aeee:	d00a      	beq.n	800af06 <__swsetup_r+0x9e>
 800aef0:	2300      	movs	r3, #0
 800aef2:	60a3      	str	r3, [r4, #8]
 800aef4:	6963      	ldr	r3, [r4, #20]
 800aef6:	425b      	negs	r3, r3
 800aef8:	61a3      	str	r3, [r4, #24]
 800aefa:	6923      	ldr	r3, [r4, #16]
 800aefc:	b943      	cbnz	r3, 800af10 <__swsetup_r+0xa8>
 800aefe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800af02:	d1c4      	bne.n	800ae8e <__swsetup_r+0x26>
 800af04:	bd38      	pop	{r3, r4, r5, pc}
 800af06:	0781      	lsls	r1, r0, #30
 800af08:	bf58      	it	pl
 800af0a:	6963      	ldrpl	r3, [r4, #20]
 800af0c:	60a3      	str	r3, [r4, #8]
 800af0e:	e7f4      	b.n	800aefa <__swsetup_r+0x92>
 800af10:	2000      	movs	r0, #0
 800af12:	e7f7      	b.n	800af04 <__swsetup_r+0x9c>
 800af14:	200005d0 	.word	0x200005d0

0800af18 <_raise_r>:
 800af18:	291f      	cmp	r1, #31
 800af1a:	b538      	push	{r3, r4, r5, lr}
 800af1c:	4604      	mov	r4, r0
 800af1e:	460d      	mov	r5, r1
 800af20:	d904      	bls.n	800af2c <_raise_r+0x14>
 800af22:	2316      	movs	r3, #22
 800af24:	6003      	str	r3, [r0, #0]
 800af26:	f04f 30ff 	mov.w	r0, #4294967295
 800af2a:	bd38      	pop	{r3, r4, r5, pc}
 800af2c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800af2e:	b112      	cbz	r2, 800af36 <_raise_r+0x1e>
 800af30:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af34:	b94b      	cbnz	r3, 800af4a <_raise_r+0x32>
 800af36:	4620      	mov	r0, r4
 800af38:	f000 f830 	bl	800af9c <_getpid_r>
 800af3c:	462a      	mov	r2, r5
 800af3e:	4601      	mov	r1, r0
 800af40:	4620      	mov	r0, r4
 800af42:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af46:	f000 b817 	b.w	800af78 <_kill_r>
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d00a      	beq.n	800af64 <_raise_r+0x4c>
 800af4e:	1c59      	adds	r1, r3, #1
 800af50:	d103      	bne.n	800af5a <_raise_r+0x42>
 800af52:	2316      	movs	r3, #22
 800af54:	6003      	str	r3, [r0, #0]
 800af56:	2001      	movs	r0, #1
 800af58:	e7e7      	b.n	800af2a <_raise_r+0x12>
 800af5a:	2400      	movs	r4, #0
 800af5c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800af60:	4628      	mov	r0, r5
 800af62:	4798      	blx	r3
 800af64:	2000      	movs	r0, #0
 800af66:	e7e0      	b.n	800af2a <_raise_r+0x12>

0800af68 <raise>:
 800af68:	4b02      	ldr	r3, [pc, #8]	; (800af74 <raise+0xc>)
 800af6a:	4601      	mov	r1, r0
 800af6c:	6818      	ldr	r0, [r3, #0]
 800af6e:	f7ff bfd3 	b.w	800af18 <_raise_r>
 800af72:	bf00      	nop
 800af74:	200005d0 	.word	0x200005d0

0800af78 <_kill_r>:
 800af78:	b538      	push	{r3, r4, r5, lr}
 800af7a:	4d07      	ldr	r5, [pc, #28]	; (800af98 <_kill_r+0x20>)
 800af7c:	2300      	movs	r3, #0
 800af7e:	4604      	mov	r4, r0
 800af80:	4608      	mov	r0, r1
 800af82:	4611      	mov	r1, r2
 800af84:	602b      	str	r3, [r5, #0]
 800af86:	f000 f94b 	bl	800b220 <_kill>
 800af8a:	1c43      	adds	r3, r0, #1
 800af8c:	d102      	bne.n	800af94 <_kill_r+0x1c>
 800af8e:	682b      	ldr	r3, [r5, #0]
 800af90:	b103      	cbz	r3, 800af94 <_kill_r+0x1c>
 800af92:	6023      	str	r3, [r4, #0]
 800af94:	bd38      	pop	{r3, r4, r5, pc}
 800af96:	bf00      	nop
 800af98:	20000ee8 	.word	0x20000ee8

0800af9c <_getpid_r>:
 800af9c:	f000 b930 	b.w	800b200 <_getpid>

0800afa0 <__swhatbuf_r>:
 800afa0:	b570      	push	{r4, r5, r6, lr}
 800afa2:	460c      	mov	r4, r1
 800afa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800afa8:	2900      	cmp	r1, #0
 800afaa:	b096      	sub	sp, #88	; 0x58
 800afac:	4615      	mov	r5, r2
 800afae:	461e      	mov	r6, r3
 800afb0:	da0d      	bge.n	800afce <__swhatbuf_r+0x2e>
 800afb2:	89a3      	ldrh	r3, [r4, #12]
 800afb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 800afb8:	f04f 0100 	mov.w	r1, #0
 800afbc:	bf0c      	ite	eq
 800afbe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800afc2:	2340      	movne	r3, #64	; 0x40
 800afc4:	2000      	movs	r0, #0
 800afc6:	6031      	str	r1, [r6, #0]
 800afc8:	602b      	str	r3, [r5, #0]
 800afca:	b016      	add	sp, #88	; 0x58
 800afcc:	bd70      	pop	{r4, r5, r6, pc}
 800afce:	466a      	mov	r2, sp
 800afd0:	f000 f848 	bl	800b064 <_fstat_r>
 800afd4:	2800      	cmp	r0, #0
 800afd6:	dbec      	blt.n	800afb2 <__swhatbuf_r+0x12>
 800afd8:	9901      	ldr	r1, [sp, #4]
 800afda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800afde:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800afe2:	4259      	negs	r1, r3
 800afe4:	4159      	adcs	r1, r3
 800afe6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afea:	e7eb      	b.n	800afc4 <__swhatbuf_r+0x24>

0800afec <__smakebuf_r>:
 800afec:	898b      	ldrh	r3, [r1, #12]
 800afee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aff0:	079d      	lsls	r5, r3, #30
 800aff2:	4606      	mov	r6, r0
 800aff4:	460c      	mov	r4, r1
 800aff6:	d507      	bpl.n	800b008 <__smakebuf_r+0x1c>
 800aff8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	6123      	str	r3, [r4, #16]
 800b000:	2301      	movs	r3, #1
 800b002:	6163      	str	r3, [r4, #20]
 800b004:	b002      	add	sp, #8
 800b006:	bd70      	pop	{r4, r5, r6, pc}
 800b008:	ab01      	add	r3, sp, #4
 800b00a:	466a      	mov	r2, sp
 800b00c:	f7ff ffc8 	bl	800afa0 <__swhatbuf_r>
 800b010:	9900      	ldr	r1, [sp, #0]
 800b012:	4605      	mov	r5, r0
 800b014:	4630      	mov	r0, r6
 800b016:	f7fd fbe5 	bl	80087e4 <_malloc_r>
 800b01a:	b948      	cbnz	r0, 800b030 <__smakebuf_r+0x44>
 800b01c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b020:	059a      	lsls	r2, r3, #22
 800b022:	d4ef      	bmi.n	800b004 <__smakebuf_r+0x18>
 800b024:	f023 0303 	bic.w	r3, r3, #3
 800b028:	f043 0302 	orr.w	r3, r3, #2
 800b02c:	81a3      	strh	r3, [r4, #12]
 800b02e:	e7e3      	b.n	800aff8 <__smakebuf_r+0xc>
 800b030:	89a3      	ldrh	r3, [r4, #12]
 800b032:	6020      	str	r0, [r4, #0]
 800b034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b038:	81a3      	strh	r3, [r4, #12]
 800b03a:	9b00      	ldr	r3, [sp, #0]
 800b03c:	6163      	str	r3, [r4, #20]
 800b03e:	9b01      	ldr	r3, [sp, #4]
 800b040:	6120      	str	r0, [r4, #16]
 800b042:	b15b      	cbz	r3, 800b05c <__smakebuf_r+0x70>
 800b044:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b048:	4630      	mov	r0, r6
 800b04a:	f000 f81d 	bl	800b088 <_isatty_r>
 800b04e:	b128      	cbz	r0, 800b05c <__smakebuf_r+0x70>
 800b050:	89a3      	ldrh	r3, [r4, #12]
 800b052:	f023 0303 	bic.w	r3, r3, #3
 800b056:	f043 0301 	orr.w	r3, r3, #1
 800b05a:	81a3      	strh	r3, [r4, #12]
 800b05c:	89a3      	ldrh	r3, [r4, #12]
 800b05e:	431d      	orrs	r5, r3
 800b060:	81a5      	strh	r5, [r4, #12]
 800b062:	e7cf      	b.n	800b004 <__smakebuf_r+0x18>

0800b064 <_fstat_r>:
 800b064:	b538      	push	{r3, r4, r5, lr}
 800b066:	4d07      	ldr	r5, [pc, #28]	; (800b084 <_fstat_r+0x20>)
 800b068:	2300      	movs	r3, #0
 800b06a:	4604      	mov	r4, r0
 800b06c:	4608      	mov	r0, r1
 800b06e:	4611      	mov	r1, r2
 800b070:	602b      	str	r3, [r5, #0]
 800b072:	f000 f8bd 	bl	800b1f0 <_fstat>
 800b076:	1c43      	adds	r3, r0, #1
 800b078:	d102      	bne.n	800b080 <_fstat_r+0x1c>
 800b07a:	682b      	ldr	r3, [r5, #0]
 800b07c:	b103      	cbz	r3, 800b080 <_fstat_r+0x1c>
 800b07e:	6023      	str	r3, [r4, #0]
 800b080:	bd38      	pop	{r3, r4, r5, pc}
 800b082:	bf00      	nop
 800b084:	20000ee8 	.word	0x20000ee8

0800b088 <_isatty_r>:
 800b088:	b538      	push	{r3, r4, r5, lr}
 800b08a:	4d06      	ldr	r5, [pc, #24]	; (800b0a4 <_isatty_r+0x1c>)
 800b08c:	2300      	movs	r3, #0
 800b08e:	4604      	mov	r4, r0
 800b090:	4608      	mov	r0, r1
 800b092:	602b      	str	r3, [r5, #0]
 800b094:	f000 f8bc 	bl	800b210 <_isatty>
 800b098:	1c43      	adds	r3, r0, #1
 800b09a:	d102      	bne.n	800b0a2 <_isatty_r+0x1a>
 800b09c:	682b      	ldr	r3, [r5, #0]
 800b09e:	b103      	cbz	r3, 800b0a2 <_isatty_r+0x1a>
 800b0a0:	6023      	str	r3, [r4, #0]
 800b0a2:	bd38      	pop	{r3, r4, r5, pc}
 800b0a4:	20000ee8 	.word	0x20000ee8

0800b0a8 <expf>:
 800b0a8:	ee10 2a10 	vmov	r2, s0
 800b0ac:	f240 412a 	movw	r1, #1066	; 0x42a
 800b0b0:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800b0b4:	428b      	cmp	r3, r1
 800b0b6:	b430      	push	{r4, r5}
 800b0b8:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800b0bc:	d92a      	bls.n	800b114 <expf+0x6c>
 800b0be:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800b0c2:	d058      	beq.n	800b176 <expf+0xce>
 800b0c4:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800b0c8:	d303      	bcc.n	800b0d2 <expf+0x2a>
 800b0ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b0ce:	bc30      	pop	{r4, r5}
 800b0d0:	4770      	bx	lr
 800b0d2:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800b17c <expf+0xd4>
 800b0d6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b0da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0de:	dd03      	ble.n	800b0e8 <expf+0x40>
 800b0e0:	bc30      	pop	{r4, r5}
 800b0e2:	2000      	movs	r0, #0
 800b0e4:	f000 b876 	b.w	800b1d4 <__math_oflowf>
 800b0e8:	eddf 7a25 	vldr	s15, [pc, #148]	; 800b180 <expf+0xd8>
 800b0ec:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b0f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0f4:	d503      	bpl.n	800b0fe <expf+0x56>
 800b0f6:	bc30      	pop	{r4, r5}
 800b0f8:	2000      	movs	r0, #0
 800b0fa:	f000 b85f 	b.w	800b1bc <__math_uflowf>
 800b0fe:	eddf 7a21 	vldr	s15, [pc, #132]	; 800b184 <expf+0xdc>
 800b102:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800b106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b10a:	d503      	bpl.n	800b114 <expf+0x6c>
 800b10c:	bc30      	pop	{r4, r5}
 800b10e:	2000      	movs	r0, #0
 800b110:	f000 b85a 	b.w	800b1c8 <__math_may_uflowf>
 800b114:	4b1c      	ldr	r3, [pc, #112]	; (800b188 <expf+0xe0>)
 800b116:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800b11a:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800b11e:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800b122:	eeb0 7b44 	vmov.f64	d7, d4
 800b126:	eea5 7b06 	vfma.f64	d7, d5, d6
 800b12a:	ee17 0a10 	vmov	r0, s14
 800b12e:	ee37 7b44 	vsub.f64	d7, d7, d4
 800b132:	f000 021f 	and.w	r2, r0, #31
 800b136:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800b13a:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800b13e:	ee27 4b07 	vmul.f64	d4, d7, d7
 800b142:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800b146:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800b14a:	eea5 6b07 	vfma.f64	d6, d5, d7
 800b14e:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800b152:	684d      	ldr	r5, [r1, #4]
 800b154:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800b158:	2100      	movs	r1, #0
 800b15a:	190a      	adds	r2, r1, r4
 800b15c:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800b160:	eea5 0b07 	vfma.f64	d0, d5, d7
 800b164:	ec43 2b17 	vmov	d7, r2, r3
 800b168:	eea6 0b04 	vfma.f64	d0, d6, d4
 800b16c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800b170:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800b174:	e7ab      	b.n	800b0ce <expf+0x26>
 800b176:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800b18c <expf+0xe4>
 800b17a:	e7a8      	b.n	800b0ce <expf+0x26>
 800b17c:	42b17217 	.word	0x42b17217
 800b180:	c2cff1b4 	.word	0xc2cff1b4
 800b184:	c2ce8ecf 	.word	0xc2ce8ecf
 800b188:	08010ad8 	.word	0x08010ad8
 800b18c:	00000000 	.word	0x00000000

0800b190 <with_errnof>:
 800b190:	b513      	push	{r0, r1, r4, lr}
 800b192:	4604      	mov	r4, r0
 800b194:	ed8d 0a01 	vstr	s0, [sp, #4]
 800b198:	f7fe fa82 	bl	80096a0 <__errno>
 800b19c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800b1a0:	6004      	str	r4, [r0, #0]
 800b1a2:	b002      	add	sp, #8
 800b1a4:	bd10      	pop	{r4, pc}

0800b1a6 <xflowf>:
 800b1a6:	b130      	cbz	r0, 800b1b6 <xflowf+0x10>
 800b1a8:	eef1 7a40 	vneg.f32	s15, s0
 800b1ac:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b1b0:	2022      	movs	r0, #34	; 0x22
 800b1b2:	f7ff bfed 	b.w	800b190 <with_errnof>
 800b1b6:	eef0 7a40 	vmov.f32	s15, s0
 800b1ba:	e7f7      	b.n	800b1ac <xflowf+0x6>

0800b1bc <__math_uflowf>:
 800b1bc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b1c4 <__math_uflowf+0x8>
 800b1c0:	f7ff bff1 	b.w	800b1a6 <xflowf>
 800b1c4:	10000000 	.word	0x10000000

0800b1c8 <__math_may_uflowf>:
 800b1c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b1d0 <__math_may_uflowf+0x8>
 800b1cc:	f7ff bfeb 	b.w	800b1a6 <xflowf>
 800b1d0:	1a200000 	.word	0x1a200000

0800b1d4 <__math_oflowf>:
 800b1d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b1dc <__math_oflowf+0x8>
 800b1d8:	f7ff bfe5 	b.w	800b1a6 <xflowf>
 800b1dc:	70000000 	.word	0x70000000

0800b1e0 <_close>:
 800b1e0:	4b02      	ldr	r3, [pc, #8]	; (800b1ec <_close+0xc>)
 800b1e2:	2258      	movs	r2, #88	; 0x58
 800b1e4:	601a      	str	r2, [r3, #0]
 800b1e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1ea:	4770      	bx	lr
 800b1ec:	20000ee8 	.word	0x20000ee8

0800b1f0 <_fstat>:
 800b1f0:	4b02      	ldr	r3, [pc, #8]	; (800b1fc <_fstat+0xc>)
 800b1f2:	2258      	movs	r2, #88	; 0x58
 800b1f4:	601a      	str	r2, [r3, #0]
 800b1f6:	f04f 30ff 	mov.w	r0, #4294967295
 800b1fa:	4770      	bx	lr
 800b1fc:	20000ee8 	.word	0x20000ee8

0800b200 <_getpid>:
 800b200:	4b02      	ldr	r3, [pc, #8]	; (800b20c <_getpid+0xc>)
 800b202:	2258      	movs	r2, #88	; 0x58
 800b204:	601a      	str	r2, [r3, #0]
 800b206:	f04f 30ff 	mov.w	r0, #4294967295
 800b20a:	4770      	bx	lr
 800b20c:	20000ee8 	.word	0x20000ee8

0800b210 <_isatty>:
 800b210:	4b02      	ldr	r3, [pc, #8]	; (800b21c <_isatty+0xc>)
 800b212:	2258      	movs	r2, #88	; 0x58
 800b214:	601a      	str	r2, [r3, #0]
 800b216:	2000      	movs	r0, #0
 800b218:	4770      	bx	lr
 800b21a:	bf00      	nop
 800b21c:	20000ee8 	.word	0x20000ee8

0800b220 <_kill>:
 800b220:	4b02      	ldr	r3, [pc, #8]	; (800b22c <_kill+0xc>)
 800b222:	2258      	movs	r2, #88	; 0x58
 800b224:	601a      	str	r2, [r3, #0]
 800b226:	f04f 30ff 	mov.w	r0, #4294967295
 800b22a:	4770      	bx	lr
 800b22c:	20000ee8 	.word	0x20000ee8

0800b230 <_lseek>:
 800b230:	4b02      	ldr	r3, [pc, #8]	; (800b23c <_lseek+0xc>)
 800b232:	2258      	movs	r2, #88	; 0x58
 800b234:	601a      	str	r2, [r3, #0]
 800b236:	f04f 30ff 	mov.w	r0, #4294967295
 800b23a:	4770      	bx	lr
 800b23c:	20000ee8 	.word	0x20000ee8

0800b240 <_read>:
 800b240:	4b02      	ldr	r3, [pc, #8]	; (800b24c <_read+0xc>)
 800b242:	2258      	movs	r2, #88	; 0x58
 800b244:	601a      	str	r2, [r3, #0]
 800b246:	f04f 30ff 	mov.w	r0, #4294967295
 800b24a:	4770      	bx	lr
 800b24c:	20000ee8 	.word	0x20000ee8

0800b250 <_exit>:
 800b250:	e7fe      	b.n	800b250 <_exit>
	...

0800b254 <_init>:
 800b254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b256:	bf00      	nop
 800b258:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b25a:	bc08      	pop	{r3}
 800b25c:	469e      	mov	lr, r3
 800b25e:	4770      	bx	lr

0800b260 <_fini>:
 800b260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b262:	bf00      	nop
 800b264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b266:	bc08      	pop	{r3}
 800b268:	469e      	mov	lr, r3
 800b26a:	4770      	bx	lr
