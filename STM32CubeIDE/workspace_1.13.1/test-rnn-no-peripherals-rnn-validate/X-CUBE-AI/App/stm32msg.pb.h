/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9.1 at Sat May 27 10:58:45 2023. */

#ifndef PB_STM32MSG_PB_H_INCLUDED
#define PB_STM32MSG_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _EnumVersion {
    EnumVersion_P_VERSION_MAJOR = 3,
    EnumVersion_P_VERSION_MINOR = 0
} EnumVersion;
#define _EnumVersion_MIN EnumVersion_P_VERSION_MAJOR
#define _EnumVersion_MAX EnumVersion_P_VERSION_MINOR
#define _EnumVersion_ARRAYSIZE ((EnumVersion)(EnumVersion_P_VERSION_MINOR+1))

typedef enum _EnumLowLevelIO {
    EnumLowLevelIO_IO_HEADER_EOM_FLAG = 128,
    EnumLowLevelIO_IO_HEADER_SIZE_MSK = 127,
    EnumLowLevelIO_IO_IN_PACKET_SIZE = 32,
    EnumLowLevelIO_IO_OUT_PACKET_SIZE = 32,
    EnumLowLevelIO_IO_OUT_SYNC = 170
} EnumLowLevelIO;
#define _EnumLowLevelIO_MIN EnumLowLevelIO_IO_HEADER_EOM_FLAG
#define _EnumLowLevelIO_MAX EnumLowLevelIO_IO_OUT_SYNC
#define _EnumLowLevelIO_ARRAYSIZE ((EnumLowLevelIO)(EnumLowLevelIO_IO_OUT_SYNC+1))

typedef enum _EnumAiRuntime {
    EnumAiRuntime_AI_RT_STM_AI = 1,
    EnumAiRuntime_AI_RT_TFLM = 2,
    EnumAiRuntime_AI_RT_TVM = 3,
    EnumAiRuntime_AI_RT_ATON = 4,
    EnumAiRuntime_AI_RT_GLOW = 5,
    EnumAiRuntime_AI_RT_STM_AI_RELOC = 6
} EnumAiRuntime;
#define _EnumAiRuntime_MIN EnumAiRuntime_AI_RT_STM_AI
#define _EnumAiRuntime_MAX EnumAiRuntime_AI_RT_STM_AI_RELOC
#define _EnumAiRuntime_ARRAYSIZE ((EnumAiRuntime)(EnumAiRuntime_AI_RT_STM_AI_RELOC+1))

typedef enum _EnumTools {
    EnumTools_AI_GCC = 1,
    EnumTools_AI_IAR = 2,
    EnumTools_AI_MDK_5 = 3,
    EnumTools_AI_MDK_6 = 4,
    EnumTools_AI_HTC = 5,
    EnumTools_AI_GHS = 6
} EnumTools;
#define _EnumTools_MIN EnumTools_AI_GCC
#define _EnumTools_MAX EnumTools_AI_GHS
#define _EnumTools_ARRAYSIZE ((EnumTools)(EnumTools_AI_GHS+1))

typedef enum _EnumCapability {
    EnumCapability_CAP_OBSERVER = 1,
    EnumCapability_CAP_RELOC = 2,
    EnumCapability_CAP_READ_WRITE = 8,
    EnumCapability_CAP_RANDOM = 16,
    EnumCapability_CAP_FILTERING = 32,
    EnumCapability_CAP_SELF_TEST = 128
} EnumCapability;
#define _EnumCapability_MIN EnumCapability_CAP_OBSERVER
#define _EnumCapability_MAX EnumCapability_CAP_SELF_TEST
#define _EnumCapability_ARRAYSIZE ((EnumCapability)(EnumCapability_CAP_SELF_TEST+1))

typedef enum _EnumCmd {
    EnumCmd_CMD_SYNC = 0,
    EnumCmd_CMD_SYS_INFO = 1,
    EnumCmd_CMD_NETWORK_INFO = 10,
    EnumCmd_CMD_NETWORK_RUN = 11,
    EnumCmd_CMD_NETWORK_REPORT = 12,
    EnumCmd_CMD_MEMORY_READ = 20,
    EnumCmd_CMD_MEMORY_WRITE = 21,
    EnumCmd_CMD_MEMORY_CHECKSUM = 22,
    EnumCmd_CMD_SET_FILTER = 30,
    EnumCmd_CMD_TEST = 100,
    EnumCmd_CMD_TEST_UNSUPPORTED = 200
} EnumCmd;
#define _EnumCmd_MIN EnumCmd_CMD_SYNC
#define _EnumCmd_MAX EnumCmd_CMD_TEST_UNSUPPORTED
#define _EnumCmd_ARRAYSIZE ((EnumCmd)(EnumCmd_CMD_TEST_UNSUPPORTED+1))

typedef enum _EnumState {
    EnumState_S_IDLE = 0,
    EnumState_S_WAITING = 1,
    EnumState_S_PROCESSING = 2,
    EnumState_S_DONE = 3,
    EnumState_S_ERROR = 4
} EnumState;
#define _EnumState_MIN EnumState_S_IDLE
#define _EnumState_MAX EnumState_S_ERROR
#define _EnumState_ARRAYSIZE ((EnumState)(EnumState_S_ERROR+1))

typedef enum _EnumError {
    EnumError_E_NONE = 0,
    EnumError_E_INVALID_SIZE = 1,
    EnumError_E_INVALID_FORMAT = 2,
    EnumError_E_INVALID_STATE = 3,
    EnumError_E_INVALID_PARAM = 4,
    EnumError_E_INVALID_SHAPE = 5,
    EnumError_E_INVALID_CMD = 6,
    EnumError_E_INVALID_UNINITIALIZED = 7,
    EnumError_E_MEM_OVERFLOW = 8,
    EnumError_E_GENERIC = 10
} EnumError;
#define _EnumError_MIN EnumError_E_NONE
#define _EnumError_MAX EnumError_E_GENERIC
#define _EnumError_ARRAYSIZE ((EnumError)(EnumError_E_GENERIC+1))

typedef enum _EnumRunParam {
    EnumRunParam_P_RUN_MODE_IO_ONLY = 1,
    EnumRunParam_P_RUN_MODE_PER_LAYER = 2,
    EnumRunParam_P_RUN_MODE_PER_LAYER_WITH_DATA = 4,
    EnumRunParam_P_RUN_MODE_PERF = 8,
    EnumRunParam_P_RUN_MODE_MASK = 15,
    EnumRunParam_P_RUN_CONF_DEBUG = 256,
    EnumRunParam_P_RUN_CONF_SAME_VALUE = 512,
    EnumRunParam_P_RUN_CONF_DIRECT_WRITE = 1024,
    EnumRunParam_P_RUN_CONF_DIRECT_READ = 2048
} EnumRunParam;
#define _EnumRunParam_MIN EnumRunParam_P_RUN_MODE_IO_ONLY
#define _EnumRunParam_MAX EnumRunParam_P_RUN_CONF_DIRECT_READ
#define _EnumRunParam_ARRAYSIZE ((EnumRunParam)(EnumRunParam_P_RUN_CONF_DIRECT_READ+1))

typedef enum _EnumShapeFmt {
    EnumShapeFmt_F_SHAPE_FMT_UND = 0,
    EnumShapeFmt_F_SHAPE_FMT_BCWH = 1,
    EnumShapeFmt_F_SHAPE_FMT_BHWC = 2,
    EnumShapeFmt_F_SHAPE_FMT_BCHW = 3
} EnumShapeFmt;
#define _EnumShapeFmt_MIN EnumShapeFmt_F_SHAPE_FMT_UND
#define _EnumShapeFmt_MAX EnumShapeFmt_F_SHAPE_FMT_BCHW
#define _EnumShapeFmt_ARRAYSIZE ((EnumShapeFmt)(EnumShapeFmt_F_SHAPE_FMT_BCHW+1))

typedef enum _EnumDataFmtType {
    EnumDataFmtType_DATA_FMT_TYPE_NONE = 0,
    EnumDataFmtType_DATA_FMT_TYPE_FLOAT = 1,
    EnumDataFmtType_DATA_FMT_TYPE_INTEGER = 2,
    EnumDataFmtType_DATA_FMT_TYPE_BOOL = 3
} EnumDataFmtType;
#define _EnumDataFmtType_MIN EnumDataFmtType_DATA_FMT_TYPE_NONE
#define _EnumDataFmtType_MAX EnumDataFmtType_DATA_FMT_TYPE_BOOL
#define _EnumDataFmtType_ARRAYSIZE ((EnumDataFmtType)(EnumDataFmtType_DATA_FMT_TYPE_BOOL+1))

typedef enum _EnumTensorFlag {
    EnumTensorFlag_TENSOR_FLAG_NONE = 0,
    EnumTensorFlag_TENSOR_FLAG_INPUT = 1,
    EnumTensorFlag_TENSOR_FLAG_OUTPUT = 2,
    EnumTensorFlag_TENSOR_FLAG_INTERNAL = 4,
    EnumTensorFlag_TENSOR_FLAG_MEMPOOL = 8,
    EnumTensorFlag_TENSOR_FLAG_LAST = 256,
    EnumTensorFlag_TENSOR_FLAG_NO_DATA = 512,
    EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL = 1024
} EnumTensorFlag;
#define _EnumTensorFlag_MIN EnumTensorFlag_TENSOR_FLAG_NONE
#define _EnumTensorFlag_MAX EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL
#define _EnumTensorFlag_ARRAYSIZE ((EnumTensorFlag)(EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL+1))

typedef enum _EnumDataType {
    EnumDataType_DATA_TYPE_NONE = 0,
    EnumDataType_DATA_TYPE_FILTER = 1,
    EnumDataType_DATA_TYPE_MD5 = 2,
    EnumDataType_DATA_TYPE_OFFSET = 24
} EnumDataType;
#define _EnumDataType_MIN EnumDataType_DATA_TYPE_NONE
#define _EnumDataType_MAX EnumDataType_DATA_TYPE_OFFSET
#define _EnumDataType_ARRAYSIZE ((EnumDataType)(EnumDataType_DATA_TYPE_OFFSET+1))

typedef enum _EnumOperatorFlag {
    EnumOperatorFlag_OPERATOR_FLAG_NONE = 0,
    EnumOperatorFlag_OPERATOR_FLAG_INTERNAL = 1,
    EnumOperatorFlag_OPERATOR_FLAG_LAST = 2,
    EnumOperatorFlag_OPERATOR_FLAG_WITHOUT_TENSOR = 4,
    EnumOperatorFlag_OPERATOR_FLAG_OFFSET = 24
} EnumOperatorFlag;
#define _EnumOperatorFlag_MIN EnumOperatorFlag_OPERATOR_FLAG_NONE
#define _EnumOperatorFlag_MAX EnumOperatorFlag_OPERATOR_FLAG_OFFSET
#define _EnumOperatorFlag_ARRAYSIZE ((EnumOperatorFlag)(EnumOperatorFlag_OPERATOR_FLAG_OFFSET+1))

/* Struct definitions */
typedef struct _ackMsg {
    uint32_t param;
    EnumError error;
/* @@protoc_insertion_point(struct:ackMsg) */
} ackMsg;

typedef struct _aiDataMsg {
    uint32_t type;
    uint32_t size;
    uint32_t addr;
    pb_callback_t datas;
/* @@protoc_insertion_point(struct:aiDataMsg) */
} aiDataMsg;

typedef struct _aiModelInfoMsg {
    char name[64];
    uint32_t rtid;
    char signature[64];
    char compile_datetime[64];
    uint32_t runtime_version;
    uint32_t tool_version;
    uint64_t n_macc;
    uint32_t n_nodes;
    uint32_t n_inputs;
    pb_callback_t inputs;
    uint32_t n_outputs;
    pb_callback_t outputs;
    uint32_t n_activations;
    pb_callback_t activations;
    uint32_t n_params;
    pb_callback_t params;
/* @@protoc_insertion_point(struct:aiModelInfoMsg) */
} aiModelInfoMsg;

typedef struct _aiOperatorMsg {
    char name[64];
    uint32_t type;
    uint32_t id;
    float duration;
    uint32_t counter_type;
    pb_callback_t counters;
/* @@protoc_insertion_point(struct:aiOperatorMsg) */
} aiOperatorMsg;

typedef struct _aiTensorDescMsg {
    char name[64];
    uint32_t format;
    uint32_t size;
    uint32_t n_dims;
    pb_callback_t dims;
    float scale;
    int32_t zeropoint;
    uint32_t addr;
    uint32_t flags;
/* @@protoc_insertion_point(struct:aiTensorDescMsg) */
} aiTensorDescMsg;

typedef struct _logMsg {
    uint32_t level;
    char str[128];
/* @@protoc_insertion_point(struct:logMsg) */
} logMsg;

typedef struct _reqMsg {
    uint32_t reqid;
    EnumCmd cmd;
    uint32_t param;
    char name[64];
    uint32_t opt;
/* @@protoc_insertion_point(struct:reqMsg) */
} reqMsg;

typedef struct _syncMsg {
    uint32_t version;
    uint32_t capability;
    uint32_t rtid;
/* @@protoc_insertion_point(struct:syncMsg) */
} syncMsg;

typedef struct _sysinfoMsg {
    uint32_t devid;
    uint32_t sclock;
    uint32_t hclock;
    uint32_t cache;
/* @@protoc_insertion_point(struct:sysinfoMsg) */
} sysinfoMsg;

typedef struct _aiTensorMsg {
    aiTensorDescMsg desc;
    aiDataMsg data;
/* @@protoc_insertion_point(struct:aiTensorMsg) */
} aiTensorMsg;

typedef struct _respMsg {
    uint32_t reqid;
    EnumState state;
    pb_size_t which_payload;
    union {
        syncMsg sync;
        sysinfoMsg sinfo;
        ackMsg ack;
        logMsg log;
        aiDataMsg data;
        aiOperatorMsg op;
        aiTensorMsg tensor;
        aiModelInfoMsg minfo;
    } payload;
/* @@protoc_insertion_point(struct:respMsg) */
} respMsg;

/* Default values for struct fields */
extern const EnumCmd reqMsg_cmd_default;
extern const uint32_t aiTensorDescMsg_format_default;
extern const uint32_t aiTensorDescMsg_size_default;
extern const uint32_t aiTensorDescMsg_n_dims_default;
extern const float aiTensorDescMsg_scale_default;
extern const int32_t aiTensorDescMsg_zeropoint_default;
extern const uint32_t aiTensorDescMsg_addr_default;
extern const uint32_t aiTensorDescMsg_flags_default;
extern const uint32_t aiDataMsg_type_default;
extern const uint32_t aiDataMsg_addr_default;

/* Initializer values for message structs */
#define reqMsg_init_default                      {0, EnumCmd_CMD_SYS_INFO, 0, "", 0}
#define aiTensorDescMsg_init_default             {"", 0u, 0u, 1u, {{NULL}, NULL}, 0, 0, 0u, 0u}
#define aiDataMsg_init_default                   {0u, 0, 0u, {{NULL}, NULL}}
#define aiOperatorMsg_init_default               {"", 0, 0, 0, 0, {{NULL}, NULL}}
#define aiTensorMsg_init_default                 {aiTensorDescMsg_init_default, aiDataMsg_init_default}
#define aiModelInfoMsg_init_default              {"", 0, "", "", 0, 0, 0, 0, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}}
#define syncMsg_init_default                     {0, 0, 0}
#define sysinfoMsg_init_default                  {0, 0, 0, 0}
#define ackMsg_init_default                      {0, _EnumError_MIN}
#define logMsg_init_default                      {0, ""}
#define respMsg_init_default                     {0, _EnumState_MIN, 0, {syncMsg_init_default}}
#define reqMsg_init_zero                         {0, _EnumCmd_MIN, 0, "", 0}
#define aiTensorDescMsg_init_zero                {"", 0, 0, 0, {{NULL}, NULL}, 0, 0, 0, 0}
#define aiDataMsg_init_zero                      {0, 0, 0, {{NULL}, NULL}}
#define aiOperatorMsg_init_zero                  {"", 0, 0, 0, 0, {{NULL}, NULL}}
#define aiTensorMsg_init_zero                    {aiTensorDescMsg_init_zero, aiDataMsg_init_zero}
#define aiModelInfoMsg_init_zero                 {"", 0, "", "", 0, 0, 0, 0, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}, 0, {{NULL}, NULL}}
#define syncMsg_init_zero                        {0, 0, 0}
#define sysinfoMsg_init_zero                     {0, 0, 0, 0}
#define ackMsg_init_zero                         {0, _EnumError_MIN}
#define logMsg_init_zero                         {0, ""}
#define respMsg_init_zero                        {0, _EnumState_MIN, 0, {syncMsg_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define ackMsg_param_tag                         1
#define ackMsg_error_tag                         2
#define aiDataMsg_type_tag                       1
#define aiDataMsg_size_tag                       2
#define aiDataMsg_addr_tag                       3
#define aiDataMsg_datas_tag                      4
#define aiModelInfoMsg_name_tag                  1
#define aiModelInfoMsg_rtid_tag                  2
#define aiModelInfoMsg_signature_tag             3
#define aiModelInfoMsg_compile_datetime_tag      4
#define aiModelInfoMsg_runtime_version_tag       5
#define aiModelInfoMsg_tool_version_tag          6
#define aiModelInfoMsg_n_macc_tag                7
#define aiModelInfoMsg_n_nodes_tag               8
#define aiModelInfoMsg_n_inputs_tag              10
#define aiModelInfoMsg_inputs_tag                11
#define aiModelInfoMsg_n_outputs_tag             12
#define aiModelInfoMsg_outputs_tag               13
#define aiModelInfoMsg_n_activations_tag         14
#define aiModelInfoMsg_activations_tag           15
#define aiModelInfoMsg_n_params_tag              16
#define aiModelInfoMsg_params_tag                17
#define aiOperatorMsg_name_tag                   1
#define aiOperatorMsg_type_tag                   2
#define aiOperatorMsg_id_tag                     3
#define aiOperatorMsg_duration_tag               4
#define aiOperatorMsg_counter_type_tag           5
#define aiOperatorMsg_counters_tag               6
#define aiTensorDescMsg_name_tag                 1
#define aiTensorDescMsg_format_tag               2
#define aiTensorDescMsg_size_tag                 3
#define aiTensorDescMsg_n_dims_tag               4
#define aiTensorDescMsg_dims_tag                 5
#define aiTensorDescMsg_scale_tag                6
#define aiTensorDescMsg_zeropoint_tag            7
#define aiTensorDescMsg_addr_tag                 8
#define aiTensorDescMsg_flags_tag                9
#define logMsg_level_tag                         1
#define logMsg_str_tag                           2
#define reqMsg_reqid_tag                         1
#define reqMsg_cmd_tag                           2
#define reqMsg_param_tag                         3
#define reqMsg_name_tag                          4
#define reqMsg_opt_tag                           5
#define syncMsg_version_tag                      1
#define syncMsg_capability_tag                   4
#define syncMsg_rtid_tag                         5
#define sysinfoMsg_devid_tag                     1
#define sysinfoMsg_sclock_tag                    2
#define sysinfoMsg_hclock_tag                    3
#define sysinfoMsg_cache_tag                     4
#define aiTensorMsg_desc_tag                     1
#define aiTensorMsg_data_tag                     2
#define respMsg_sync_tag                         10
#define respMsg_sinfo_tag                        11
#define respMsg_ack_tag                          12
#define respMsg_log_tag                          13
#define respMsg_data_tag                         15
#define respMsg_op_tag                           16
#define respMsg_tensor_tag                       17
#define respMsg_minfo_tag                        22
#define respMsg_reqid_tag                        1
#define respMsg_state_tag                        2

/* Struct field encoding specification for nanopb */
extern const pb_field_t reqMsg_fields[6];
extern const pb_field_t aiTensorDescMsg_fields[10];
extern const pb_field_t aiDataMsg_fields[5];
extern const pb_field_t aiOperatorMsg_fields[7];
extern const pb_field_t aiTensorMsg_fields[3];
extern const pb_field_t aiModelInfoMsg_fields[17];
extern const pb_field_t syncMsg_fields[4];
extern const pb_field_t sysinfoMsg_fields[5];
extern const pb_field_t ackMsg_fields[3];
extern const pb_field_t logMsg_fields[3];
extern const pb_field_t respMsg_fields[11];

/* Maximum encoded size of messages (where known) */
#define reqMsg_size                              87
/* aiTensorDescMsg_size depends on runtime parameters */
/* aiDataMsg_size depends on runtime parameters */
/* aiOperatorMsg_size depends on runtime parameters */
#define aiTensorMsg_size                         (12 + aiTensorDescMsg_size + aiDataMsg_size)
/* aiModelInfoMsg_size depends on runtime parameters */
#define syncMsg_size                             18
#define sysinfoMsg_size                          24
#define ackMsg_size                              8
#define logMsg_size                              137
#define respMsg_size                             (8 + ((((aiDataMsg_size > aiTensorMsg_size ? aiDataMsg_size : aiTensorMsg_size) > aiOperatorMsg_size ? (aiDataMsg_size > aiTensorMsg_size ? aiDataMsg_size : aiTensorMsg_size) : aiOperatorMsg_size) > aiModelInfoMsg_size ? ((aiDataMsg_size > aiTensorMsg_size ? aiDataMsg_size : aiTensorMsg_size) > aiOperatorMsg_size ? (aiDataMsg_size > aiTensorMsg_size ? aiDataMsg_size : aiTensorMsg_size) : aiOperatorMsg_size) : aiModelInfoMsg_size) > 140 ? (((aiDataMsg_size > aiTensorMsg_size ? aiDataMsg_size : aiTensorMsg_size) > aiOperatorMsg_size ? (aiDataMsg_size > aiTensorMsg_size ? aiDataMsg_size : aiTensorMsg_size) : aiOperatorMsg_size) > aiModelInfoMsg_size ? ((aiDataMsg_size > aiTensorMsg_size ? aiDataMsg_size : aiTensorMsg_size) > aiOperatorMsg_size ? (aiDataMsg_size > aiTensorMsg_size ? aiDataMsg_size : aiTensorMsg_size) : aiOperatorMsg_size) : aiModelInfoMsg_size) : 140))

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define STM32MSG_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
