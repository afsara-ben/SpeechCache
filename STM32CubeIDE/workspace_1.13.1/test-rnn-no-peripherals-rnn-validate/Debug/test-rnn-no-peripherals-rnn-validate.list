
test-rnn-no-peripherals-rnn-validate.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c184  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000056e0  0800c3a0  0800c3a0  0001c3a0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a80  08011a80  00030774  2**0
                  CONTENTS
  4 .ARM          00000008  08011a80  08011a80  00021a80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a88  08011a88  00030774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a88  08011a88  00021a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a8c  08011a8c  00021a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000774  20000000  08011a90  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009f0  20000780  08012204  00030780  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20001170  08012204  00031170  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00030774  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  000307a2  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e43e  00000000  00000000  00030835  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000511c  00000000  00000000  0004ec73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 00009721  00000000  00000000  00053d8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000d28  00000000  00000000  0005d4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000104f  00000000  00000000  0005e1d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000335e9  00000000  00000000  0005f227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b0a6  00000000  00000000  00092810  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00127bb2  00000000  00000000  000ad8b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003568  00000000  00000000  001d5468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000077  00000000  00000000  001d89d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000780 	.word	0x20000780
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c36c 	.word	0x0800c36c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000784 	.word	0x20000784
 800023c:	0800c36c 	.word	0x0800c36c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_frsub>:
 80002f0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__addsf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_fsub>:
 80002f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080002fc <__addsf3>:
 80002fc:	0042      	lsls	r2, r0, #1
 80002fe:	bf1f      	itttt	ne
 8000300:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000304:	ea92 0f03 	teqne	r2, r3
 8000308:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800030c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000310:	d06a      	beq.n	80003e8 <__addsf3+0xec>
 8000312:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000316:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800031a:	bfc1      	itttt	gt
 800031c:	18d2      	addgt	r2, r2, r3
 800031e:	4041      	eorgt	r1, r0
 8000320:	4048      	eorgt	r0, r1
 8000322:	4041      	eorgt	r1, r0
 8000324:	bfb8      	it	lt
 8000326:	425b      	neglt	r3, r3
 8000328:	2b19      	cmp	r3, #25
 800032a:	bf88      	it	hi
 800032c:	4770      	bxhi	lr
 800032e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000332:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000336:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800033a:	bf18      	it	ne
 800033c:	4240      	negne	r0, r0
 800033e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000342:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000346:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 800034a:	bf18      	it	ne
 800034c:	4249      	negne	r1, r1
 800034e:	ea92 0f03 	teq	r2, r3
 8000352:	d03f      	beq.n	80003d4 <__addsf3+0xd8>
 8000354:	f1a2 0201 	sub.w	r2, r2, #1
 8000358:	fa41 fc03 	asr.w	ip, r1, r3
 800035c:	eb10 000c 	adds.w	r0, r0, ip
 8000360:	f1c3 0320 	rsb	r3, r3, #32
 8000364:	fa01 f103 	lsl.w	r1, r1, r3
 8000368:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800036c:	d502      	bpl.n	8000374 <__addsf3+0x78>
 800036e:	4249      	negs	r1, r1
 8000370:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000374:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000378:	d313      	bcc.n	80003a2 <__addsf3+0xa6>
 800037a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800037e:	d306      	bcc.n	800038e <__addsf3+0x92>
 8000380:	0840      	lsrs	r0, r0, #1
 8000382:	ea4f 0131 	mov.w	r1, r1, rrx
 8000386:	f102 0201 	add.w	r2, r2, #1
 800038a:	2afe      	cmp	r2, #254	; 0xfe
 800038c:	d251      	bcs.n	8000432 <__addsf3+0x136>
 800038e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000392:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000396:	bf08      	it	eq
 8000398:	f020 0001 	biceq.w	r0, r0, #1
 800039c:	ea40 0003 	orr.w	r0, r0, r3
 80003a0:	4770      	bx	lr
 80003a2:	0049      	lsls	r1, r1, #1
 80003a4:	eb40 0000 	adc.w	r0, r0, r0
 80003a8:	3a01      	subs	r2, #1
 80003aa:	bf28      	it	cs
 80003ac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 80003b0:	d2ed      	bcs.n	800038e <__addsf3+0x92>
 80003b2:	fab0 fc80 	clz	ip, r0
 80003b6:	f1ac 0c08 	sub.w	ip, ip, #8
 80003ba:	ebb2 020c 	subs.w	r2, r2, ip
 80003be:	fa00 f00c 	lsl.w	r0, r0, ip
 80003c2:	bfaa      	itet	ge
 80003c4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80003c8:	4252      	neglt	r2, r2
 80003ca:	4318      	orrge	r0, r3
 80003cc:	bfbc      	itt	lt
 80003ce:	40d0      	lsrlt	r0, r2
 80003d0:	4318      	orrlt	r0, r3
 80003d2:	4770      	bx	lr
 80003d4:	f092 0f00 	teq	r2, #0
 80003d8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80003dc:	bf06      	itte	eq
 80003de:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80003e2:	3201      	addeq	r2, #1
 80003e4:	3b01      	subne	r3, #1
 80003e6:	e7b5      	b.n	8000354 <__addsf3+0x58>
 80003e8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003ec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003f0:	bf18      	it	ne
 80003f2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003f6:	d021      	beq.n	800043c <__addsf3+0x140>
 80003f8:	ea92 0f03 	teq	r2, r3
 80003fc:	d004      	beq.n	8000408 <__addsf3+0x10c>
 80003fe:	f092 0f00 	teq	r2, #0
 8000402:	bf08      	it	eq
 8000404:	4608      	moveq	r0, r1
 8000406:	4770      	bx	lr
 8000408:	ea90 0f01 	teq	r0, r1
 800040c:	bf1c      	itt	ne
 800040e:	2000      	movne	r0, #0
 8000410:	4770      	bxne	lr
 8000412:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000416:	d104      	bne.n	8000422 <__addsf3+0x126>
 8000418:	0040      	lsls	r0, r0, #1
 800041a:	bf28      	it	cs
 800041c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000420:	4770      	bx	lr
 8000422:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000426:	bf3c      	itt	cc
 8000428:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 800042c:	4770      	bxcc	lr
 800042e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000432:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000436:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800043a:	4770      	bx	lr
 800043c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000440:	bf16      	itet	ne
 8000442:	4608      	movne	r0, r1
 8000444:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000448:	4601      	movne	r1, r0
 800044a:	0242      	lsls	r2, r0, #9
 800044c:	bf06      	itte	eq
 800044e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000452:	ea90 0f01 	teqeq	r0, r1
 8000456:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 800045a:	4770      	bx	lr

0800045c <__aeabi_ui2f>:
 800045c:	f04f 0300 	mov.w	r3, #0
 8000460:	e004      	b.n	800046c <__aeabi_i2f+0x8>
 8000462:	bf00      	nop

08000464 <__aeabi_i2f>:
 8000464:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000468:	bf48      	it	mi
 800046a:	4240      	negmi	r0, r0
 800046c:	ea5f 0c00 	movs.w	ip, r0
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000478:	4601      	mov	r1, r0
 800047a:	f04f 0000 	mov.w	r0, #0
 800047e:	e01c      	b.n	80004ba <__aeabi_l2f+0x2a>

08000480 <__aeabi_ul2f>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	f04f 0300 	mov.w	r3, #0
 800048c:	e00a      	b.n	80004a4 <__aeabi_l2f+0x14>
 800048e:	bf00      	nop

08000490 <__aeabi_l2f>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 800049c:	d502      	bpl.n	80004a4 <__aeabi_l2f+0x14>
 800049e:	4240      	negs	r0, r0
 80004a0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a4:	ea5f 0c01 	movs.w	ip, r1
 80004a8:	bf02      	ittt	eq
 80004aa:	4684      	moveq	ip, r0
 80004ac:	4601      	moveq	r1, r0
 80004ae:	2000      	moveq	r0, #0
 80004b0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80004b4:	bf08      	it	eq
 80004b6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80004ba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80004be:	fabc f28c 	clz	r2, ip
 80004c2:	3a08      	subs	r2, #8
 80004c4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80004c8:	db10      	blt.n	80004ec <__aeabi_l2f+0x5c>
 80004ca:	fa01 fc02 	lsl.w	ip, r1, r2
 80004ce:	4463      	add	r3, ip
 80004d0:	fa00 fc02 	lsl.w	ip, r0, r2
 80004d4:	f1c2 0220 	rsb	r2, r2, #32
 80004d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004dc:	fa20 f202 	lsr.w	r2, r0, r2
 80004e0:	eb43 0002 	adc.w	r0, r3, r2
 80004e4:	bf08      	it	eq
 80004e6:	f020 0001 	biceq.w	r0, r0, #1
 80004ea:	4770      	bx	lr
 80004ec:	f102 0220 	add.w	r2, r2, #32
 80004f0:	fa01 fc02 	lsl.w	ip, r1, r2
 80004f4:	f1c2 0220 	rsb	r2, r2, #32
 80004f8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004fc:	fa21 f202 	lsr.w	r2, r1, r2
 8000500:	eb43 0002 	adc.w	r0, r3, r2
 8000504:	bf08      	it	eq
 8000506:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800050a:	4770      	bx	lr

0800050c <__aeabi_uldivmod>:
 800050c:	b953      	cbnz	r3, 8000524 <__aeabi_uldivmod+0x18>
 800050e:	b94a      	cbnz	r2, 8000524 <__aeabi_uldivmod+0x18>
 8000510:	2900      	cmp	r1, #0
 8000512:	bf08      	it	eq
 8000514:	2800      	cmpeq	r0, #0
 8000516:	bf1c      	itt	ne
 8000518:	f04f 31ff 	movne.w	r1, #4294967295
 800051c:	f04f 30ff 	movne.w	r0, #4294967295
 8000520:	f000 b992 	b.w	8000848 <__aeabi_idiv0>
 8000524:	f1ad 0c08 	sub.w	ip, sp, #8
 8000528:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800052c:	f000 f828 	bl	8000580 <__udivmoddi4>
 8000530:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000534:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000538:	b004      	add	sp, #16
 800053a:	4770      	bx	lr
 800053c:	0000      	movs	r0, r0
	...

08000540 <__aeabi_d2ulz>:
 8000540:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000570 <__aeabi_d2ulz+0x30>
 8000544:	ec41 0b17 	vmov	d7, r0, r1
 8000548:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000578 <__aeabi_d2ulz+0x38>
 800054c:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000550:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 8000554:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000558:	eea4 7b45 	vfms.f64	d7, d4, d5
 800055c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000560:	ee16 1a10 	vmov	r1, s12
 8000564:	ee17 0a90 	vmov	r0, s15
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	f3af 8000 	nop.w
 8000570:	00000000 	.word	0x00000000
 8000574:	3df00000 	.word	0x3df00000
 8000578:	00000000 	.word	0x00000000
 800057c:	41f00000 	.word	0x41f00000

08000580 <__udivmoddi4>:
 8000580:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000584:	9e08      	ldr	r6, [sp, #32]
 8000586:	460d      	mov	r5, r1
 8000588:	4604      	mov	r4, r0
 800058a:	460f      	mov	r7, r1
 800058c:	2b00      	cmp	r3, #0
 800058e:	d14a      	bne.n	8000626 <__udivmoddi4+0xa6>
 8000590:	428a      	cmp	r2, r1
 8000592:	4694      	mov	ip, r2
 8000594:	d965      	bls.n	8000662 <__udivmoddi4+0xe2>
 8000596:	fab2 f382 	clz	r3, r2
 800059a:	b143      	cbz	r3, 80005ae <__udivmoddi4+0x2e>
 800059c:	fa02 fc03 	lsl.w	ip, r2, r3
 80005a0:	f1c3 0220 	rsb	r2, r3, #32
 80005a4:	409f      	lsls	r7, r3
 80005a6:	fa20 f202 	lsr.w	r2, r0, r2
 80005aa:	4317      	orrs	r7, r2
 80005ac:	409c      	lsls	r4, r3
 80005ae:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80005b2:	fa1f f58c 	uxth.w	r5, ip
 80005b6:	fbb7 f1fe 	udiv	r1, r7, lr
 80005ba:	0c22      	lsrs	r2, r4, #16
 80005bc:	fb0e 7711 	mls	r7, lr, r1, r7
 80005c0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80005c4:	fb01 f005 	mul.w	r0, r1, r5
 80005c8:	4290      	cmp	r0, r2
 80005ca:	d90a      	bls.n	80005e2 <__udivmoddi4+0x62>
 80005cc:	eb1c 0202 	adds.w	r2, ip, r2
 80005d0:	f101 37ff 	add.w	r7, r1, #4294967295
 80005d4:	f080 811c 	bcs.w	8000810 <__udivmoddi4+0x290>
 80005d8:	4290      	cmp	r0, r2
 80005da:	f240 8119 	bls.w	8000810 <__udivmoddi4+0x290>
 80005de:	3902      	subs	r1, #2
 80005e0:	4462      	add	r2, ip
 80005e2:	1a12      	subs	r2, r2, r0
 80005e4:	b2a4      	uxth	r4, r4
 80005e6:	fbb2 f0fe 	udiv	r0, r2, lr
 80005ea:	fb0e 2210 	mls	r2, lr, r0, r2
 80005ee:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005f2:	fb00 f505 	mul.w	r5, r0, r5
 80005f6:	42a5      	cmp	r5, r4
 80005f8:	d90a      	bls.n	8000610 <__udivmoddi4+0x90>
 80005fa:	eb1c 0404 	adds.w	r4, ip, r4
 80005fe:	f100 32ff 	add.w	r2, r0, #4294967295
 8000602:	f080 8107 	bcs.w	8000814 <__udivmoddi4+0x294>
 8000606:	42a5      	cmp	r5, r4
 8000608:	f240 8104 	bls.w	8000814 <__udivmoddi4+0x294>
 800060c:	4464      	add	r4, ip
 800060e:	3802      	subs	r0, #2
 8000610:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000614:	1b64      	subs	r4, r4, r5
 8000616:	2100      	movs	r1, #0
 8000618:	b11e      	cbz	r6, 8000622 <__udivmoddi4+0xa2>
 800061a:	40dc      	lsrs	r4, r3
 800061c:	2300      	movs	r3, #0
 800061e:	e9c6 4300 	strd	r4, r3, [r6]
 8000622:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000626:	428b      	cmp	r3, r1
 8000628:	d908      	bls.n	800063c <__udivmoddi4+0xbc>
 800062a:	2e00      	cmp	r6, #0
 800062c:	f000 80ed 	beq.w	800080a <__udivmoddi4+0x28a>
 8000630:	2100      	movs	r1, #0
 8000632:	e9c6 0500 	strd	r0, r5, [r6]
 8000636:	4608      	mov	r0, r1
 8000638:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800063c:	fab3 f183 	clz	r1, r3
 8000640:	2900      	cmp	r1, #0
 8000642:	d149      	bne.n	80006d8 <__udivmoddi4+0x158>
 8000644:	42ab      	cmp	r3, r5
 8000646:	d302      	bcc.n	800064e <__udivmoddi4+0xce>
 8000648:	4282      	cmp	r2, r0
 800064a:	f200 80f8 	bhi.w	800083e <__udivmoddi4+0x2be>
 800064e:	1a84      	subs	r4, r0, r2
 8000650:	eb65 0203 	sbc.w	r2, r5, r3
 8000654:	2001      	movs	r0, #1
 8000656:	4617      	mov	r7, r2
 8000658:	2e00      	cmp	r6, #0
 800065a:	d0e2      	beq.n	8000622 <__udivmoddi4+0xa2>
 800065c:	e9c6 4700 	strd	r4, r7, [r6]
 8000660:	e7df      	b.n	8000622 <__udivmoddi4+0xa2>
 8000662:	b902      	cbnz	r2, 8000666 <__udivmoddi4+0xe6>
 8000664:	deff      	udf	#255	; 0xff
 8000666:	fab2 f382 	clz	r3, r2
 800066a:	2b00      	cmp	r3, #0
 800066c:	f040 8090 	bne.w	8000790 <__udivmoddi4+0x210>
 8000670:	1a8a      	subs	r2, r1, r2
 8000672:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000676:	fa1f fe8c 	uxth.w	lr, ip
 800067a:	2101      	movs	r1, #1
 800067c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000680:	fb07 2015 	mls	r0, r7, r5, r2
 8000684:	0c22      	lsrs	r2, r4, #16
 8000686:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800068a:	fb0e f005 	mul.w	r0, lr, r5
 800068e:	4290      	cmp	r0, r2
 8000690:	d908      	bls.n	80006a4 <__udivmoddi4+0x124>
 8000692:	eb1c 0202 	adds.w	r2, ip, r2
 8000696:	f105 38ff 	add.w	r8, r5, #4294967295
 800069a:	d202      	bcs.n	80006a2 <__udivmoddi4+0x122>
 800069c:	4290      	cmp	r0, r2
 800069e:	f200 80cb 	bhi.w	8000838 <__udivmoddi4+0x2b8>
 80006a2:	4645      	mov	r5, r8
 80006a4:	1a12      	subs	r2, r2, r0
 80006a6:	b2a4      	uxth	r4, r4
 80006a8:	fbb2 f0f7 	udiv	r0, r2, r7
 80006ac:	fb07 2210 	mls	r2, r7, r0, r2
 80006b0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80006b4:	fb0e fe00 	mul.w	lr, lr, r0
 80006b8:	45a6      	cmp	lr, r4
 80006ba:	d908      	bls.n	80006ce <__udivmoddi4+0x14e>
 80006bc:	eb1c 0404 	adds.w	r4, ip, r4
 80006c0:	f100 32ff 	add.w	r2, r0, #4294967295
 80006c4:	d202      	bcs.n	80006cc <__udivmoddi4+0x14c>
 80006c6:	45a6      	cmp	lr, r4
 80006c8:	f200 80bb 	bhi.w	8000842 <__udivmoddi4+0x2c2>
 80006cc:	4610      	mov	r0, r2
 80006ce:	eba4 040e 	sub.w	r4, r4, lr
 80006d2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80006d6:	e79f      	b.n	8000618 <__udivmoddi4+0x98>
 80006d8:	f1c1 0720 	rsb	r7, r1, #32
 80006dc:	408b      	lsls	r3, r1
 80006de:	fa22 fc07 	lsr.w	ip, r2, r7
 80006e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80006e6:	fa05 f401 	lsl.w	r4, r5, r1
 80006ea:	fa20 f307 	lsr.w	r3, r0, r7
 80006ee:	40fd      	lsrs	r5, r7
 80006f0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80006f4:	4323      	orrs	r3, r4
 80006f6:	fbb5 f8f9 	udiv	r8, r5, r9
 80006fa:	fa1f fe8c 	uxth.w	lr, ip
 80006fe:	fb09 5518 	mls	r5, r9, r8, r5
 8000702:	0c1c      	lsrs	r4, r3, #16
 8000704:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000708:	fb08 f50e 	mul.w	r5, r8, lr
 800070c:	42a5      	cmp	r5, r4
 800070e:	fa02 f201 	lsl.w	r2, r2, r1
 8000712:	fa00 f001 	lsl.w	r0, r0, r1
 8000716:	d90b      	bls.n	8000730 <__udivmoddi4+0x1b0>
 8000718:	eb1c 0404 	adds.w	r4, ip, r4
 800071c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000720:	f080 8088 	bcs.w	8000834 <__udivmoddi4+0x2b4>
 8000724:	42a5      	cmp	r5, r4
 8000726:	f240 8085 	bls.w	8000834 <__udivmoddi4+0x2b4>
 800072a:	f1a8 0802 	sub.w	r8, r8, #2
 800072e:	4464      	add	r4, ip
 8000730:	1b64      	subs	r4, r4, r5
 8000732:	b29d      	uxth	r5, r3
 8000734:	fbb4 f3f9 	udiv	r3, r4, r9
 8000738:	fb09 4413 	mls	r4, r9, r3, r4
 800073c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000740:	fb03 fe0e 	mul.w	lr, r3, lr
 8000744:	45a6      	cmp	lr, r4
 8000746:	d908      	bls.n	800075a <__udivmoddi4+0x1da>
 8000748:	eb1c 0404 	adds.w	r4, ip, r4
 800074c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000750:	d26c      	bcs.n	800082c <__udivmoddi4+0x2ac>
 8000752:	45a6      	cmp	lr, r4
 8000754:	d96a      	bls.n	800082c <__udivmoddi4+0x2ac>
 8000756:	3b02      	subs	r3, #2
 8000758:	4464      	add	r4, ip
 800075a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800075e:	fba3 9502 	umull	r9, r5, r3, r2
 8000762:	eba4 040e 	sub.w	r4, r4, lr
 8000766:	42ac      	cmp	r4, r5
 8000768:	46c8      	mov	r8, r9
 800076a:	46ae      	mov	lr, r5
 800076c:	d356      	bcc.n	800081c <__udivmoddi4+0x29c>
 800076e:	d053      	beq.n	8000818 <__udivmoddi4+0x298>
 8000770:	b156      	cbz	r6, 8000788 <__udivmoddi4+0x208>
 8000772:	ebb0 0208 	subs.w	r2, r0, r8
 8000776:	eb64 040e 	sbc.w	r4, r4, lr
 800077a:	fa04 f707 	lsl.w	r7, r4, r7
 800077e:	40ca      	lsrs	r2, r1
 8000780:	40cc      	lsrs	r4, r1
 8000782:	4317      	orrs	r7, r2
 8000784:	e9c6 7400 	strd	r7, r4, [r6]
 8000788:	4618      	mov	r0, r3
 800078a:	2100      	movs	r1, #0
 800078c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000790:	f1c3 0120 	rsb	r1, r3, #32
 8000794:	fa02 fc03 	lsl.w	ip, r2, r3
 8000798:	fa20 f201 	lsr.w	r2, r0, r1
 800079c:	fa25 f101 	lsr.w	r1, r5, r1
 80007a0:	409d      	lsls	r5, r3
 80007a2:	432a      	orrs	r2, r5
 80007a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007a8:	fa1f fe8c 	uxth.w	lr, ip
 80007ac:	fbb1 f0f7 	udiv	r0, r1, r7
 80007b0:	fb07 1510 	mls	r5, r7, r0, r1
 80007b4:	0c11      	lsrs	r1, r2, #16
 80007b6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80007ba:	fb00 f50e 	mul.w	r5, r0, lr
 80007be:	428d      	cmp	r5, r1
 80007c0:	fa04 f403 	lsl.w	r4, r4, r3
 80007c4:	d908      	bls.n	80007d8 <__udivmoddi4+0x258>
 80007c6:	eb1c 0101 	adds.w	r1, ip, r1
 80007ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80007ce:	d22f      	bcs.n	8000830 <__udivmoddi4+0x2b0>
 80007d0:	428d      	cmp	r5, r1
 80007d2:	d92d      	bls.n	8000830 <__udivmoddi4+0x2b0>
 80007d4:	3802      	subs	r0, #2
 80007d6:	4461      	add	r1, ip
 80007d8:	1b49      	subs	r1, r1, r5
 80007da:	b292      	uxth	r2, r2
 80007dc:	fbb1 f5f7 	udiv	r5, r1, r7
 80007e0:	fb07 1115 	mls	r1, r7, r5, r1
 80007e4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007e8:	fb05 f10e 	mul.w	r1, r5, lr
 80007ec:	4291      	cmp	r1, r2
 80007ee:	d908      	bls.n	8000802 <__udivmoddi4+0x282>
 80007f0:	eb1c 0202 	adds.w	r2, ip, r2
 80007f4:	f105 38ff 	add.w	r8, r5, #4294967295
 80007f8:	d216      	bcs.n	8000828 <__udivmoddi4+0x2a8>
 80007fa:	4291      	cmp	r1, r2
 80007fc:	d914      	bls.n	8000828 <__udivmoddi4+0x2a8>
 80007fe:	3d02      	subs	r5, #2
 8000800:	4462      	add	r2, ip
 8000802:	1a52      	subs	r2, r2, r1
 8000804:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000808:	e738      	b.n	800067c <__udivmoddi4+0xfc>
 800080a:	4631      	mov	r1, r6
 800080c:	4630      	mov	r0, r6
 800080e:	e708      	b.n	8000622 <__udivmoddi4+0xa2>
 8000810:	4639      	mov	r1, r7
 8000812:	e6e6      	b.n	80005e2 <__udivmoddi4+0x62>
 8000814:	4610      	mov	r0, r2
 8000816:	e6fb      	b.n	8000610 <__udivmoddi4+0x90>
 8000818:	4548      	cmp	r0, r9
 800081a:	d2a9      	bcs.n	8000770 <__udivmoddi4+0x1f0>
 800081c:	ebb9 0802 	subs.w	r8, r9, r2
 8000820:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000824:	3b01      	subs	r3, #1
 8000826:	e7a3      	b.n	8000770 <__udivmoddi4+0x1f0>
 8000828:	4645      	mov	r5, r8
 800082a:	e7ea      	b.n	8000802 <__udivmoddi4+0x282>
 800082c:	462b      	mov	r3, r5
 800082e:	e794      	b.n	800075a <__udivmoddi4+0x1da>
 8000830:	4640      	mov	r0, r8
 8000832:	e7d1      	b.n	80007d8 <__udivmoddi4+0x258>
 8000834:	46d0      	mov	r8, sl
 8000836:	e77b      	b.n	8000730 <__udivmoddi4+0x1b0>
 8000838:	3d02      	subs	r5, #2
 800083a:	4462      	add	r2, ip
 800083c:	e732      	b.n	80006a4 <__udivmoddi4+0x124>
 800083e:	4608      	mov	r0, r1
 8000840:	e70a      	b.n	8000658 <__udivmoddi4+0xd8>
 8000842:	4464      	add	r4, ip
 8000844:	3802      	subs	r0, #2
 8000846:	e742      	b.n	80006ce <__udivmoddi4+0x14e>

08000848 <__aeabi_idiv0>:
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop

0800084c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800084c:	b510      	push	{r4, lr}
 800084e:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000850:	2210      	movs	r2, #16
 8000852:	2100      	movs	r1, #0
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000854:	2402      	movs	r4, #2
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000856:	a809      	add	r0, sp, #36	; 0x24
 8000858:	f009 fe8b 	bl	800a572 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800085c:	2214      	movs	r2, #20
 800085e:	2100      	movs	r1, #0
 8000860:	a802      	add	r0, sp, #8
 8000862:	f009 fe86 	bl	800a572 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <SystemClock_Config+0xa4>)
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000868:	2101      	movs	r1, #1
  RCC_OscInitStruct.PLL.PLLM = 25;
  RCC_OscInitStruct.PLL.PLLN = 432;
 800086a:	2019      	movs	r0, #25
  __HAL_RCC_PWR_CLK_ENABLE();
 800086c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800086e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000872:	641a      	str	r2, [r3, #64]	; 0x40
 8000874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800087a:	9300      	str	r3, [sp, #0]
 800087c:	9b00      	ldr	r3, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800087e:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <SystemClock_Config+0xa8>)
 8000880:	681a      	ldr	r2, [r3, #0]
 8000882:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8000886:	601a      	str	r2, [r3, #0]
 8000888:	681b      	ldr	r3, [r3, #0]
  RCC_OscInitStruct.PLL.PLLP = 2;
 800088a:	9411      	str	r4, [sp, #68]	; 0x44
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800088c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000890:	9301      	str	r3, [sp, #4]
 8000892:	9b01      	ldr	r3, [sp, #4]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000894:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000898:	e9cd 1307 	strd	r1, r3, [sp, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800089c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008a0:	e9cd 430d 	strd	r4, r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLN = 432;
 80008a4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80008a8:	e9cd 030f 	strd	r0, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80008ac:	2309      	movs	r3, #9
  RCC_OscInitStruct.PLL.PLLR = 2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008ae:	a807      	add	r0, sp, #28
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008b0:	e9cd 3412 	strd	r3, r4, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008b4:	f000 fea2 	bl	80015fc <HAL_RCC_OscConfig>
 80008b8:	b108      	cbz	r0, 80008be <SystemClock_Config+0x72>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ba:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008bc:	e7fe      	b.n	80008bc <SystemClock_Config+0x70>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008be:	f000 fe65 	bl	800158c <HAL_PWREx_EnableOverDrive>
 80008c2:	b108      	cbz	r0, 80008c8 <SystemClock_Config+0x7c>
 80008c4:	b672      	cpsid	i
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008c8:	230f      	movs	r3, #15
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008ca:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008ce:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008d0:	2107      	movs	r1, #7
 80008d2:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d4:	e9cd 3402 	strd	r3, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008e0:	f001 f87c 	bl	80019dc <HAL_RCC_ClockConfig>
 80008e4:	b108      	cbz	r0, 80008ea <SystemClock_Config+0x9e>
 80008e6:	b672      	cpsid	i
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <SystemClock_Config+0x9c>
}
 80008ea:	b014      	add	sp, #80	; 0x50
 80008ec:	bd10      	pop	{r4, pc}
 80008ee:	bf00      	nop
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40007000 	.word	0x40007000

080008f8 <main>:
{
 80008f8:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
	char ch = 'X';		// xzl
 80008fc:	2358      	movs	r3, #88	; 0x58
{
 80008fe:	b093      	sub	sp, #76	; 0x4c
	char ch = 'X';		// xzl
 8000900:	f88d 3007 	strb.w	r3, [sp, #7]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000904:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000908:	f3bf 8f6f 	isb	sy
__STATIC_INLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800090c:	4ac5      	ldr	r2, [pc, #788]	; (8000c24 <main+0x32c>)
 800090e:	2100      	movs	r1, #0
 8000910:	f8c2 1250 	str.w	r1, [r2, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000914:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000918:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800091c:	6953      	ldr	r3, [r2, #20]
 800091e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000922:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000924:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000928:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800092c:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000930:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000934:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000938:	f643 74e0 	movw	r4, #16352	; 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800093c:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000940:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000944:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000946:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800094a:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800094c:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000950:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000952:	f8c2 5260 	str.w	r5, [r2, #608]	; 0x260
      } while (ways-- != 0U);
 8000956:	d2f9      	bcs.n	800094c <main+0x54>
    } while(sets-- != 0U);
 8000958:	3b20      	subs	r3, #32
 800095a:	f113 0f20 	cmn.w	r3, #32
 800095e:	d1f2      	bne.n	8000946 <main+0x4e>
 8000960:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000964:	6953      	ldr	r3, [r2, #20]
 8000966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800096a:	6153      	str	r3, [r2, #20]
 800096c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000970:	f3bf 8f6f 	isb	sy
  HAL_Init();
 8000974:	f000 fc2a 	bl	80011cc <HAL_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000978:	2502      	movs	r5, #2
  SystemClock_Config();
 800097a:	f7ff ff67 	bl	800084c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	2214      	movs	r2, #20
 8000980:	2100      	movs	r1, #0
 8000982:	a80d      	add	r0, sp, #52	; 0x34
 8000984:	f009 fdf5 	bl	800a572 <memset>
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000988:	4ba7      	ldr	r3, [pc, #668]	; (8000c28 <main+0x330>)
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 800098a:	f242 0120 	movw	r1, #8224	; 0x2020
 800098e:	48a7      	ldr	r0, [pc, #668]	; (8000c2c <main+0x334>)
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000990:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2400      	movs	r4, #0
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000994:	2603      	movs	r6, #3
  GPIO_InitStruct.Pin = QSPI_D2_Pin;
 8000996:	2704      	movs	r7, #4
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000998:	f042 0210 	orr.w	r2, r2, #16
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800099c:	f04f 0b09 	mov.w	fp, #9
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a0:	f04f 0a0b 	mov.w	sl, #11
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009a4:	f04f 090c 	mov.w	r9, #12
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009a8:	631a      	str	r2, [r3, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80009aa:	f04f 080a 	mov.w	r8, #10
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009b0:	f002 0210 	and.w	r2, r2, #16
 80009b4:	9202      	str	r2, [sp, #8]
 80009b6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80009b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009ba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80009be:	631a      	str	r2, [r3, #48]	; 0x30
 80009c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009c2:	f002 0240 	and.w	r2, r2, #64	; 0x40
 80009c6:	9203      	str	r2, [sp, #12]
 80009c8:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009cc:	f042 0202 	orr.w	r2, r2, #2
 80009d0:	631a      	str	r2, [r3, #48]	; 0x30
 80009d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009d4:	f002 0202 	and.w	r2, r2, #2
 80009d8:	9204      	str	r2, [sp, #16]
 80009da:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009de:	f042 0208 	orr.w	r2, r2, #8
 80009e2:	631a      	str	r2, [r3, #48]	; 0x30
 80009e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009e6:	f002 0208 	and.w	r2, r2, #8
 80009ea:	9205      	str	r2, [sp, #20]
 80009ec:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009f0:	f042 0204 	orr.w	r2, r2, #4
 80009f4:	631a      	str	r2, [r3, #48]	; 0x30
 80009f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80009f8:	f002 0204 	and.w	r2, r2, #4
 80009fc:	9206      	str	r2, [sp, #24]
 80009fe:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a02:	f042 0201 	orr.w	r2, r2, #1
 8000a06:	631a      	str	r2, [r3, #48]	; 0x30
 8000a08:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a0a:	f002 0201 	and.w	r2, r2, #1
 8000a0e:	9207      	str	r2, [sp, #28]
 8000a10:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000a18:	631a      	str	r2, [r3, #48]	; 0x30
 8000a1a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a1c:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000a20:	9208      	str	r2, [sp, #32]
 8000a22:	9a08      	ldr	r2, [sp, #32]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a26:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000a2a:	631a      	str	r2, [r3, #48]	; 0x30
 8000a2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a2e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8000a32:	9209      	str	r2, [sp, #36]	; 0x24
 8000a34:	9a09      	ldr	r2, [sp, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8000a3c:	631a      	str	r2, [r3, #48]	; 0x30
 8000a3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a40:	f402 6280 	and.w	r2, r2, #1024	; 0x400
 8000a44:	920a      	str	r2, [sp, #40]	; 0x28
 8000a46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a4a:	f042 0220 	orr.w	r2, r2, #32
 8000a4e:	631a      	str	r2, [r3, #48]	; 0x30
 8000a50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a52:	f002 0220 	and.w	r2, r2, #32
 8000a56:	920b      	str	r2, [sp, #44]	; 0x2c
 8000a58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000a5c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a60:	631a      	str	r2, [r3, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a6a:	930c      	str	r3, [sp, #48]	; 0x30
 8000a6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
  HAL_GPIO_WritePin(GPIOJ, LD_USER1_Pin|LD_USER2_Pin, GPIO_PIN_RESET);
 8000a6e:	f000 fd87 	bl	8001580 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a72:	2378      	movs	r3, #120	; 0x78
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a74:	a90d      	add	r1, sp, #52	; 0x34
 8000a76:	486e      	ldr	r0, [pc, #440]	; (8000c30 <main+0x338>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a78:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000a7c:	2306      	movs	r3, #6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000a82:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a84:	f000 fc9a 	bl	80013bc <HAL_GPIO_Init>
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000a88:	a90d      	add	r1, sp, #52	; 0x34
 8000a8a:	4869      	ldr	r0, [pc, #420]	; (8000c30 <main+0x338>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8e:	e9cd 750d 	strd	r7, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000a92:	e9cd 6b10 	strd	r6, fp, [sp, #64]	; 0x40
  HAL_GPIO_Init(QSPI_D2_GPIO_Port, &GPIO_InitStruct);
 8000a96:	f000 fc91 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_TXD1_Pin|RMII_TXD0_Pin|RMII_TX_EN_Pin;
 8000a9a:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a9e:	a90d      	add	r1, sp, #52	; 0x34
 8000aa0:	4864      	ldr	r0, [pc, #400]	; (8000c34 <main+0x33c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa6:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aaa:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aae:	f000 fc85 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL1_Pin|FMC_NBL0_Pin|FMC_D5_Pin|FMC_D6_Pin
 8000ab2:	f64f 7383 	movw	r3, #65411	; 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ab6:	a90d      	add	r1, sp, #52	; 0x34
 8000ab8:	485d      	ldr	r0, [pc, #372]	; (8000c30 <main+0x338>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000aba:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abe:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac2:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ac6:	f000 fc79 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000aca:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000ace:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	a90d      	add	r1, sp, #52	; 0x34
 8000ad2:	4859      	ldr	r0, [pc, #356]	; (8000c38 <main+0x340>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad4:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ad6:	e9cd 230d 	strd	r2, r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ada:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ade:	f000 fc6d 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D3_Pin
 8000ae2:	f643 4323 	movw	r3, #15395	; 0x3c23
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	a90d      	add	r1, sp, #52	; 0x34
 8000ae8:	4853      	ldr	r0, [pc, #332]	; (8000c38 <main+0x340>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000aea:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aee:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af2:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000af6:	f000 fc61 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_D3_Pin|uSD_D2_Pin;
 8000afa:	2318      	movs	r3, #24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	a90d      	add	r1, sp, #52	; 0x34
 8000afe:	484e      	ldr	r0, [pc, #312]	; (8000c38 <main+0x340>)
  GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8000b00:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b08:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0c:	f000 fc56 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_CMD_Pin|uSD_CLK_Pin;
 8000b10:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b12:	a90d      	add	r1, sp, #52	; 0x34
 8000b14:	4849      	ldr	r0, [pc, #292]	; (8000c3c <main+0x344>)
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8000b16:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b1a:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b22:	f000 fc4b 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = WIFI_RX_Pin;
 8000b26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8000b2a:	a90d      	add	r1, sp, #52	; 0x34
 8000b2c:	4844      	ldr	r0, [pc, #272]	; (8000c40 <main+0x348>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2e:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b32:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b34:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000b38:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(WIFI_RX_GPIO_Port, &GPIO_InitStruct);
 8000b3a:	f000 fc3f 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b3e:	2312      	movs	r3, #18
 8000b40:	f44f 4100 	mov.w	r1, #32768	; 0x8000
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8000b44:	483f      	ldr	r0, [pc, #252]	; (8000c44 <main+0x34c>)
  GPIO_InitStruct.Alternate = GPIO_AF4_CEC;
 8000b46:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b48:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8000b4c:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(CEC_GPIO_Port, &GPIO_InitStruct);
 8000b52:	f000 fc33 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b56:	2312      	movs	r3, #18
 8000b58:	2080      	movs	r0, #128	; 0x80
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF11_I2C4;
 8000b5c:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b60:	e9cd 030d 	strd	r0, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b64:	4834      	ldr	r0, [pc, #208]	; (8000c38 <main+0x340>)
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b66:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SDA_GPIO_Port, &GPIO_InitStruct);
 8000b6a:	f000 fc27 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_NCS_Pin;
 8000b6e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000b70:	a90d      	add	r1, sp, #52	; 0x34
 8000b72:	4831      	ldr	r0, [pc, #196]	; (8000c38 <main+0x340>)
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000b74:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b7c:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_NCS_GPIO_Port, &GPIO_InitStruct);
 8000b80:	f000 fc1c 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_SDNCAS_Pin|FMC_SDCLK_Pin|FMC_A11_Pin|FMC_A12_Pin
 8000b84:	f248 1337 	movw	r3, #33079	; 0x8137
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b88:	a90d      	add	r1, sp, #52	; 0x34
 8000b8a:	482a      	ldr	r0, [pc, #168]	; (8000c34 <main+0x33c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b8c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b90:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b94:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b98:	f000 fc10 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b9c:	f242 0c20 	movw	ip, #8224	; 0x2020
 8000ba0:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000ba2:	a90d      	add	r1, sp, #52	; 0x34
 8000ba4:	4821      	ldr	r0, [pc, #132]	; (8000c2c <main+0x334>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba6:	e9cd c30d 	strd	ip, r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000bae:	f000 fc05 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = Audio_INT_Pin|WIFI_RST_Pin|DSI_RESET_Pin|ARD_D8_Pin
 8000bb2:	f24d 031b 	movw	r3, #53275	; 0xd01b
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000bb6:	a90d      	add	r1, sp, #52	; 0x34
 8000bb8:	481c      	ldr	r0, [pc, #112]	; (8000c2c <main+0x334>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bba:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bbc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000bc0:	f000 fbfc 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_D2_Pin|FMC_D3_Pin|FMC_D1_Pin|FMC_D15_Pin
 8000bc4:	f24c 7303 	movw	r3, #50947	; 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bc8:	a90d      	add	r1, sp, #52	; 0x34
 8000bca:	481c      	ldr	r0, [pc, #112]	; (8000c3c <main+0x344>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000bcc:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd0:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bd8:	f000 fbf0 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DFSDM_DATIN5_Pin|DFSDM_DATIN1_Pin;
 8000bdc:	f640 0308 	movw	r3, #2056	; 0x808
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000be0:	a90d      	add	r1, sp, #52	; 0x34
 8000be2:	4817      	ldr	r0, [pc, #92]	; (8000c40 <main+0x348>)
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000be4:	9611      	str	r6, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be6:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bee:	f000 fbe5 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D1_Pin|QSPI_D0_Pin;
 8000bf2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf6:	a90d      	add	r1, sp, #52	; 0x34
 8000bf8:	4811      	ldr	r0, [pc, #68]	; (8000c40 <main+0x348>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000bfa:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c06:	f000 fbd9 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NC4_Pin|NC5_Pin|uSD_Detect_Pin|LCD_BL_CTRL_Pin;
 8000c0a:	f44f 4251 	mov.w	r2, #53504	; 0xd100
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c0e:	a90d      	add	r1, sp, #52	; 0x34
 8000c10:	480d      	ldr	r0, [pc, #52]	; (8000c48 <main+0x350>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c14:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c18:	f000 fbd0 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_NBL2_Pin|D27_Pin|D26_Pin|FMC_NBL3_Pin
 8000c1c:	f240 62ff 	movw	r2, #1791	; 0x6ff
 8000c20:	e014      	b.n	8000c4c <main+0x354>
 8000c22:	bf00      	nop
 8000c24:	e000ed00 	.word	0xe000ed00
 8000c28:	40023800 	.word	0x40023800
 8000c2c:	40022400 	.word	0x40022400
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40021800 	.word	0x40021800
 8000c38:	40020400 	.word	0x40020400
 8000c3c:	40020c00 	.word	0x40020c00
 8000c40:	40020800 	.word	0x40020800
 8000c44:	40020000 	.word	0x40020000
 8000c48:	40022000 	.word	0x40022000
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c4c:	a90d      	add	r1, sp, #52	; 0x34
 8000c4e:	48c6      	ldr	r0, [pc, #792]	; (8000f68 <main+0x670>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c50:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c54:	e9cd 250d 	strd	r2, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000c5c:	f000 fbae 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = NC3_Pin|NC2_Pin|NC1_Pin|NC8_Pin
 8000c60:	22f8      	movs	r2, #248	; 0xf8
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c62:	a90d      	add	r1, sp, #52	; 0x34
 8000c64:	48c1      	ldr	r0, [pc, #772]	; (8000f6c <main+0x674>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c66:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c68:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000c6c:	f000 fba6 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8000c70:	2207      	movs	r2, #7
  GPIO_InitStruct.Pin = SPDIF_RX_Pin;
 8000c72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8000c76:	a90d      	add	r1, sp, #52	; 0x34
 8000c78:	48bd      	ldr	r0, [pc, #756]	; (8000f70 <main+0x678>)
  GPIO_InitStruct.Alternate = GPIO_AF7_SPDIFRX;
 8000c7a:	9211      	str	r2, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_RX_GPIO_Port, &GPIO_InitStruct);
 8000c84:	f000 fb9a 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = uSD_D1_Pin|uSD_D0_Pin;
 8000c88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c8c:	a90d      	add	r1, sp, #52	; 0x34
 8000c8e:	48b8      	ldr	r0, [pc, #736]	; (8000f70 <main+0x678>)
  GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 8000c90:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c94:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c9c:	f000 fb8e 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_RXER_Pin|OTG_FS_OverCurrent_Pin;
 8000ca0:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca2:	a90d      	add	r1, sp, #52	; 0x34
 8000ca4:	48b3      	ldr	r0, [pc, #716]	; (8000f74 <main+0x67c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ca8:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cac:	f000 fb86 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = DFSDM_CKOUT_Pin;
 8000cb0:	2308      	movs	r3, #8
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	a90d      	add	r1, sp, #52	; 0x34
 8000cb4:	48af      	ldr	r0, [pc, #700]	; (8000f74 <main+0x67c>)
  GPIO_InitStruct.Alternate = GPIO_AF3_DFSDM1;
 8000cb6:	9611      	str	r6, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb8:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbc:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DFSDM_CKOUT_GPIO_Port, &GPIO_InitStruct);
 8000cc0:	f000 fb7c 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000cc4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc8:	a90d      	add	r1, sp, #52	; 0x34
 8000cca:	48ab      	ldr	r0, [pc, #684]	; (8000f78 <main+0x680>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ccc:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd0:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cd4:	f000 fb72 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = FMC_A0_Pin|FMC_A1_Pin|FMC_A2_Pin|FMC_A3_Pin
 8000cd8:	f64f 023f 	movw	r2, #63551	; 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cdc:	a90d      	add	r1, sp, #52	; 0x34
 8000cde:	48a7      	ldr	r0, [pc, #668]	; (8000f7c <main+0x684>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000ce0:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	e9cd 250d 	strd	r2, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce8:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cec:	f000 fb66 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cf0:	2308      	movs	r3, #8
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8000cf2:	a90d      	add	r1, sp, #52	; 0x34
 8000cf4:	489f      	ldr	r0, [pc, #636]	; (8000f74 <main+0x67c>)
  GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8000cf6:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	e9cd 750d 	strd	r7, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(WIFI_TX_GPIO_Port, &GPIO_InitStruct);
 8000d00:	f000 fb5c 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = D23_Pin|D21_Pin|D22_Pin|FMC_SDNME_Pin
 8000d04:	f64f 722c 	movw	r2, #65324	; 0xff2c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d08:	a90d      	add	r1, sp, #52	; 0x34
 8000d0a:	489d      	ldr	r0, [pc, #628]	; (8000f80 <main+0x688>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000d0c:	f8cd 9044 	str.w	r9, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	e9cd 250d 	strd	r2, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d14:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000d18:	f000 fb50 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_DIR_Pin;
 8000d1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8000d20:	a90d      	add	r1, sp, #52	; 0x34
 8000d22:	4891      	ldr	r0, [pc, #580]	; (8000f68 <main+0x670>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d24:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d28:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d2c:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_DIR_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f000 fb44 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = CEC_CLK_Pin;
 8000d34:	f44f 7280 	mov.w	r2, #256	; 0x100
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8000d38:	a90d      	add	r1, sp, #52	; 0x34
 8000d3a:	4892      	ldr	r0, [pc, #584]	; (8000f84 <main+0x68c>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000d3c:	9411      	str	r4, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3e:	e9cd 250d 	strd	r2, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(CEC_CLK_GPIO_Port, &GPIO_InitStruct);
 8000d46:	f000 fb39 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d4a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4e:	f44f 1190 	mov.w	r1, #1179648	; 0x120000
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d52:	4885      	ldr	r0, [pc, #532]	; (8000f68 <main+0x670>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d54:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d56:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8000d5a:	a90d      	add	r1, sp, #52	; 0x34
 8000d5c:	f000 fb2e 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D5_PWM_Pin;
 8000d60:	f44f 7280 	mov.w	r2, #256	; 0x100
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8000d64:	a90d      	add	r1, sp, #52	; 0x34
 8000d66:	4884      	ldr	r0, [pc, #528]	; (8000f78 <main+0x680>)
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000d68:	9511      	str	r5, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d6a:	e9cd 250d 	strd	r2, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D5_PWM_GPIO_Port, &GPIO_InitStruct);
 8000d72:	f000 fb23 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D0_RX_Pin|ARDUINO_TX_D1_Pin;
 8000d76:	23c0      	movs	r3, #192	; 0xc0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d78:	a90d      	add	r1, sp, #52	; 0x34
 8000d7a:	487f      	ldr	r0, [pc, #508]	; (8000f78 <main+0x680>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d80:	2308      	movs	r3, #8
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d82:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8000d86:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d88:	f000 fb18 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8000d8c:	2210      	movs	r2, #16
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d8e:	a90d      	add	r1, sp, #52	; 0x34
 8000d90:	487b      	ldr	r0, [pc, #492]	; (8000f80 <main+0x688>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d92:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	e9cd 250d 	strd	r2, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9a:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f000 fb0d 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SAI1_MCLKA_Pin;
 8000da2:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8000da4:	a90d      	add	r1, sp, #52	; 0x34
 8000da6:	4872      	ldr	r0, [pc, #456]	; (8000f70 <main+0x678>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000dac:	2306      	movs	r3, #6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dae:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8000db2:	9311      	str	r3, [sp, #68]	; 0x44
  HAL_GPIO_Init(SAI1_MCLKA_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f000 fb02 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EXT_SDA_Pin|EXT_SCL_Pin;
 8000db8:	2248      	movs	r2, #72	; 0x48
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dba:	a90d      	add	r1, sp, #52	; 0x34
 8000dbc:	486c      	ldr	r0, [pc, #432]	; (8000f70 <main+0x678>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbe:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc0:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc4:	f000 fafa 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D6_PWM_Pin;
 8000dc8:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8000dca:	a90d      	add	r1, sp, #52	; 0x34
 8000dcc:	486b      	ldr	r0, [pc, #428]	; (8000f7c <main+0x684>)
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8000dce:	9611      	str	r6, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd0:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D6_PWM_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f000 faf0 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_D3_PWM_Pin;
 8000ddc:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8000dde:	a90d      	add	r1, sp, #52	; 0x34
 8000de0:	4866      	ldr	r0, [pc, #408]	; (8000f7c <main+0x684>)
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8000de2:	9611      	str	r6, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de4:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARD_D3_PWM_GPIO_Port, &GPIO_InitStruct);
 8000dec:	f000 fae6 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_A1_Pin|ARDUINO_A2_Pin|ARDUINO_A3_Pin;
 8000df0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000df4:	a90d      	add	r1, sp, #52	; 0x34
 8000df6:	4861      	ldr	r0, [pc, #388]	; (8000f7c <main+0x684>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfa:	e9cd 260d 	strd	r2, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000dfe:	f000 fadd 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_STP_Pin;
 8000e02:	2301      	movs	r3, #1
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8000e04:	a90d      	add	r1, sp, #52	; 0x34
 8000e06:	485c      	ldr	r0, [pc, #368]	; (8000f78 <main+0x680>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000e08:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0c:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e10:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_STP_GPIO_Port, &GPIO_InitStruct);
 8000e14:	f000 fad2 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000e18:	2232      	movs	r2, #50	; 0x32
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1a:	a90d      	add	r1, sp, #52	; 0x34
 8000e1c:	4856      	ldr	r0, [pc, #344]	; (8000f78 <main+0x680>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e1e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e22:	e9cd 250d 	strd	r2, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e26:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2a:	f000 fac7 	bl	80013bc <HAL_GPIO_Init>
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8000e2e:	a90d      	add	r1, sp, #52	; 0x34
 8000e30:	4851      	ldr	r0, [pc, #324]	; (8000f78 <main+0x680>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e34:	e9cd 760d 	strd	r7, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(ARD_A2_GPIO_Port, &GPIO_InitStruct);
 8000e38:	f000 fac0 	bl	80013bc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e3c:	a90d      	add	r1, sp, #52	; 0x34
 8000e3e:	4852      	ldr	r0, [pc, #328]	; (8000f88 <main+0x690>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e40:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e44:	e9cd 750d 	strd	r7, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f000 fab6 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e50:	f44f 5e80 	mov.w	lr, #4096	; 0x1000
 8000e54:	2312      	movs	r3, #18
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e56:	a90d      	add	r1, sp, #52	; 0x34
 8000e58:	4846      	ldr	r0, [pc, #280]	; (8000f74 <main+0x67c>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8000e5a:	9711      	str	r7, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e5c:	e9cd e30d 	strd	lr, r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e60:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(AUDIO_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e64:	f000 faaa 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = QSPI_D3_Pin;
 8000e68:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	a90d      	add	r1, sp, #52	; 0x34
 8000e6e:	4841      	ldr	r0, [pc, #260]	; (8000f74 <main+0x67c>)
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8000e70:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e74:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e78:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(QSPI_D3_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f000 fa9e 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000e80:	2386      	movs	r3, #134	; 0x86
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e82:	a90d      	add	r1, sp, #52	; 0x34
 8000e84:	483f      	ldr	r0, [pc, #252]	; (8000f84 <main+0x68c>)
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e86:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e8a:	f04f 0a01 	mov.w	sl, #1
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8e:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e96:	f000 fa91 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000e9e:	a90d      	add	r1, sp, #52	; 0x34
 8000ea0:	4838      	ldr	r0, [pc, #224]	; (8000f84 <main+0x68c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ea4:	e9cd a30d 	strd	sl, r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(B_USER_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f000 fa88 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARD_A1_Pin|ARD_A0_Pin;
 8000eac:	2350      	movs	r3, #80	; 0x50
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eae:	a90d      	add	r1, sp, #52	; 0x34
 8000eb0:	4834      	ldr	r0, [pc, #208]	; (8000f84 <main+0x68c>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb2:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb4:	e9cd 360d 	strd	r3, r6, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb8:	f000 fa80 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SPDIF_TX_Pin;
 8000ebc:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	a90d      	add	r1, sp, #52	; 0x34
 8000ec2:	482c      	ldr	r0, [pc, #176]	; (8000f74 <main+0x67c>)
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000ec4:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec8:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ecc:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(SPDIF_TX_GPIO_Port, &GPIO_InitStruct);
 8000ed0:	f000 fa74 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8000ed4:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8000ed6:	a90d      	add	r1, sp, #52	; 0x34
 8000ed8:	4829      	ldr	r0, [pc, #164]	; (8000f80 <main+0x688>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000edc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f000 fa6c 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8000ee4:	2328      	movs	r3, #40	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	a90d      	add	r1, sp, #52	; 0x34
 8000ee8:	4826      	ldr	r0, [pc, #152]	; (8000f84 <main+0x68c>)
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000eea:	f8cd 8044 	str.w	r8, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eee:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	e9cd 460f 	strd	r4, r6, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f000 fa61 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000efa:	230d      	movs	r3, #13
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8000efc:	a90d      	add	r1, sp, #52	; 0x34
 8000efe:	4823      	ldr	r0, [pc, #140]	; (8000f8c <main+0x694>)
  GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8000f00:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	e9cd 750d 	strd	r7, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f06:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(DSIHOST_TE_GPIO_Port, &GPIO_InitStruct);
 8000f0a:	f000 fa57 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_PWM_D6_Pin;
 8000f0e:	2340      	movs	r3, #64	; 0x40
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000f10:	a90d      	add	r1, sp, #52	; 0x34
 8000f12:	481b      	ldr	r0, [pc, #108]	; (8000f80 <main+0x688>)
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8000f14:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
  huart1.Init.BaudRate = 115200;
 8000f18:	f8df b078 	ldr.w	fp, [pc, #120]	; 8000f94 <main+0x69c>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f20:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(ARDUINO_PWM_D6_GPIO_Port, &GPIO_InitStruct);
 8000f24:	f000 fa4a 	bl	80013bc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = ARDUINO_MISO_D12_Pin|ARDUINO_MOSI_PWM_D11_Pin;
 8000f28:	f44f 4340 	mov.w	r3, #49152	; 0xc000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	4816      	ldr	r0, [pc, #88]	; (8000f88 <main+0x690>)
 8000f2e:	a90d      	add	r1, sp, #52	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f30:	e9cd 350d 	strd	r3, r5, [sp, #52]	; 0x34
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f34:	2305      	movs	r3, #5
  huart1.Instance = USART1;
 8000f36:	4d16      	ldr	r5, [pc, #88]	; (8000f90 <main+0x698>)
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000f38:	9311      	str	r3, [sp, #68]	; 0x44
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f3a:	e9cd 440f 	strd	r4, r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3e:	f000 fa3d 	bl	80013bc <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
 8000f42:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f46:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 115200;
 8000f48:	e9c5 b300 	strd	fp, r3, [r5]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f4c:	e9c5 4402 	strd	r4, r4, [r5, #8]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f50:	e9c5 4904 	strd	r4, r9, [r5, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f54:	e9c5 4406 	strd	r4, r4, [r5, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f58:	e9c5 4408 	strd	r4, r4, [r5, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f5c:	f001 fb96 	bl	800268c <HAL_UART_Init>
 8000f60:	b1d0      	cbz	r0, 8000f98 <main+0x6a0>
  __ASM volatile ("cpsid i" : : : "memory");
 8000f62:	b672      	cpsid	i
  while (1)
 8000f64:	e7fe      	b.n	8000f64 <main+0x66c>
 8000f66:	bf00      	nop
 8000f68:	40022000 	.word	0x40022000
 8000f6c:	40022800 	.word	0x40022800
 8000f70:	40021800 	.word	0x40021800
 8000f74:	40020c00 	.word	0x40020c00
 8000f78:	40020800 	.word	0x40020800
 8000f7c:	40021400 	.word	0x40021400
 8000f80:	40021c00 	.word	0x40021c00
 8000f84:	40020000 	.word	0x40020000
 8000f88:	40020400 	.word	0x40020400
 8000f8c:	40022400 	.word	0x40022400
 8000f90:	200007c0 	.word	0x200007c0
 8000f94:	40011000 	.word	0x40011000
  hcrc.Instance = CRC;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <main+0x6e0>)
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <main+0x6e4>)
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f9c:	8098      	strh	r0, [r3, #4]
  hcrc.Instance = CRC;
 8000f9e:	601a      	str	r2, [r3, #0]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fa0:	2201      	movs	r2, #1
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fa2:	e9c3 0005 	strd	r0, r0, [r3, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fa6:	4618      	mov	r0, r3
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fa8:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000faa:	f000 f9a9 	bl	8001300 <HAL_CRC_Init>
 8000fae:	b108      	cbz	r0, 8000fb4 <main+0x6bc>
 8000fb0:	b672      	cpsid	i
  while (1)
 8000fb2:	e7fe      	b.n	8000fb2 <main+0x6ba>
  MX_X_CUBE_AI_Init();
 8000fb4:	f002 ffbe 	bl	8003f34 <MX_X_CUBE_AI_Init>
	  HAL_Delay(500);
 8000fb8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000fbc:	f000 f924 	bl	8001208 <HAL_Delay>
	  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8000fc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	f10d 0107 	add.w	r1, sp, #7
 8000fca:	4628      	mov	r0, r5
 8000fcc:	f001 fa6f 	bl	80024ae <HAL_UART_Transmit>
  MX_X_CUBE_AI_Process();
 8000fd0:	f002 ffb2 	bl	8003f38 <MX_X_CUBE_AI_Process>
  while (1)
 8000fd4:	e7f0      	b.n	8000fb8 <main+0x6c0>
 8000fd6:	bf00      	nop
 8000fd8:	2000079c 	.word	0x2000079c
 8000fdc:	40023000 	.word	0x40023000

08000fe0 <Error_Handler>:
 8000fe0:	b672      	cpsid	i
  while (1)
 8000fe2:	e7fe      	b.n	8000fe2 <Error_Handler+0x2>

08000fe4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe4:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <HAL_MspInit+0x2c>)
{
 8000fe6:	b082      	sub	sp, #8
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fe8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000fea:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000fee:	641a      	str	r2, [r3, #64]	; 0x40
 8000ff0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ff2:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000ff6:	9200      	str	r2, [sp, #0]
 8000ff8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000ffc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001000:	645a      	str	r2, [r3, #68]	; 0x44
 8001002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001004:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100c:	b002      	add	sp, #8
 800100e:	4770      	bx	lr
 8001010:	40023800 	.word	0x40023800

08001014 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001014:	6802      	ldr	r2, [r0, #0]
{
 8001016:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <HAL_CRC_MspInit+0x28>)
 800101a:	429a      	cmp	r2, r3
 800101c:	d10b      	bne.n	8001036 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800101e:	f8d3 2830 	ldr.w	r2, [r3, #2096]	; 0x830
 8001022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001026:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800102a:	631a      	str	r2, [r3, #48]	; 0x30
 800102c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800102e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001032:	9301      	str	r3, [sp, #4]
 8001034:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001036:	b002      	add	sp, #8
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	40023000 	.word	0x40023000

08001040 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001040:	b510      	push	{r4, lr}
 8001042:	b0ac      	sub	sp, #176	; 0xb0
 8001044:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001046:	2214      	movs	r2, #20
 8001048:	2100      	movs	r1, #0
 800104a:	a803      	add	r0, sp, #12
 800104c:	f009 fa91 	bl	800a572 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001050:	2290      	movs	r2, #144	; 0x90
 8001052:	2100      	movs	r1, #0
 8001054:	a808      	add	r0, sp, #32
 8001056:	f009 fa8c 	bl	800a572 <memset>
  if(huart->Instance==USART1)
 800105a:	6822      	ldr	r2, [r4, #0]
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <HAL_UART_MspInit+0x7c>)
 800105e:	429a      	cmp	r2, r3
 8001060:	d129      	bne.n	80010b6 <HAL_UART_MspInit+0x76>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001062:	2340      	movs	r3, #64	; 0x40
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001064:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001066:	9308      	str	r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001068:	f000 fd7c 	bl	8001b64 <HAL_RCCEx_PeriphCLKConfig>
 800106c:	b108      	cbz	r0, 8001072 <HAL_UART_MspInit+0x32>
    {
      Error_Handler();
 800106e:	f7ff ffb7 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001072:	4b13      	ldr	r3, [pc, #76]	; (80010c0 <HAL_UART_MspInit+0x80>)
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001074:	2100      	movs	r1, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001076:	4813      	ldr	r0, [pc, #76]	; (80010c4 <HAL_UART_MspInit+0x84>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001078:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800107a:	f042 0210 	orr.w	r2, r2, #16
 800107e:	645a      	str	r2, [r3, #68]	; 0x44
 8001080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001082:	f002 0210 	and.w	r2, r2, #16
 8001086:	9201      	str	r2, [sp, #4]
 8001088:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800108c:	f042 0201 	orr.w	r2, r2, #1
 8001090:	631a      	str	r2, [r3, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	f44f 62c0 	mov.w	r2, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	9302      	str	r3, [sp, #8]
 800109e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	e9cd 1305 	strd	r1, r3, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010ac:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80010b0:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010b2:	f000 f983 	bl	80013bc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80010b6:	b02c      	add	sp, #176	; 0xb0
 80010b8:	bd10      	pop	{r4, pc}
 80010ba:	bf00      	nop
 80010bc:	40011000 	.word	0x40011000
 80010c0:	40023800 	.word	0x40023800
 80010c4:	40020000 	.word	0x40020000

080010c8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010c8:	e7fe      	b.n	80010c8 <NMI_Handler>

080010ca <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010ca:	e7fe      	b.n	80010ca <HardFault_Handler>

080010cc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010cc:	e7fe      	b.n	80010cc <MemManage_Handler>

080010ce <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010ce:	e7fe      	b.n	80010ce <BusFault_Handler>

080010d0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <UsageFault_Handler>

080010d2 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d2:	4770      	bx	lr

080010d4 <DebugMon_Handler>:
 80010d4:	4770      	bx	lr

080010d6 <PendSV_Handler>:
 80010d6:	4770      	bx	lr

080010d8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010d8:	f000 b884 	b.w	80011e4 <HAL_IncTick>

080010dc <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010dc:	4a0b      	ldr	r2, [pc, #44]	; (800110c <_sbrk+0x30>)
{
 80010de:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80010e0:	6811      	ldr	r1, [r2, #0]
{
 80010e2:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80010e4:	b909      	cbnz	r1, 80010ea <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80010e6:	490a      	ldr	r1, [pc, #40]	; (8001110 <_sbrk+0x34>)
 80010e8:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010ea:	6810      	ldr	r0, [r2, #0]
 80010ec:	4909      	ldr	r1, [pc, #36]	; (8001114 <_sbrk+0x38>)
 80010ee:	4c0a      	ldr	r4, [pc, #40]	; (8001118 <_sbrk+0x3c>)
 80010f0:	4403      	add	r3, r0
 80010f2:	1b09      	subs	r1, r1, r4
 80010f4:	428b      	cmp	r3, r1
 80010f6:	d906      	bls.n	8001106 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80010f8:	f009 fab0 	bl	800a65c <__errno>
 80010fc:	230c      	movs	r3, #12
 80010fe:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001100:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001104:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001106:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001108:	e7fc      	b.n	8001104 <_sbrk+0x28>
 800110a:	bf00      	nop
 800110c:	20000848 	.word	0x20000848
 8001110:	20001170 	.word	0x20001170
 8001114:	20080000 	.word	0x20080000
 8001118:	00000800 	.word	0x00000800

0800111c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800111c:	4a03      	ldr	r2, [pc, #12]	; (800112c <SystemInit+0x10>)
 800111e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001122:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001126:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001130:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001168 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001134:	480d      	ldr	r0, [pc, #52]	; (800116c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001136:	490e      	ldr	r1, [pc, #56]	; (8001170 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001138:	4a0e      	ldr	r2, [pc, #56]	; (8001174 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800113a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800113c:	e002      	b.n	8001144 <LoopCopyDataInit>

0800113e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800113e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001142:	3304      	adds	r3, #4

08001144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001148:	d3f9      	bcc.n	800113e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800114a:	4a0b      	ldr	r2, [pc, #44]	; (8001178 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800114c:	4c0b      	ldr	r4, [pc, #44]	; (800117c <LoopFillZerobss+0x26>)
  movs r3, #0
 800114e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001150:	e001      	b.n	8001156 <LoopFillZerobss>

08001152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001154:	3204      	adds	r2, #4

08001156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001158:	d3fb      	bcc.n	8001152 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800115a:	f7ff ffdf 	bl	800111c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800115e:	f009 fa83 	bl	800a668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001162:	f7ff fbc9 	bl	80008f8 <main>
  bx  lr    
 8001166:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001168:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800116c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001170:	20000774 	.word	0x20000774
  ldr r2, =_sidata
 8001174:	08011a90 	.word	0x08011a90
  ldr r2, =_sbss
 8001178:	20000780 	.word	0x20000780
  ldr r4, =_ebss
 800117c:	20001170 	.word	0x20001170

08001180 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001180:	e7fe      	b.n	8001180 <ADC_IRQHandler>
	...

08001184 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001184:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001186:	4b0e      	ldr	r3, [pc, #56]	; (80011c0 <HAL_InitTick+0x3c>)
{
 8001188:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800118a:	781a      	ldrb	r2, [r3, #0]
 800118c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001190:	fbb3 f3f2 	udiv	r3, r3, r2
 8001194:	4a0b      	ldr	r2, [pc, #44]	; (80011c4 <HAL_InitTick+0x40>)
 8001196:	6810      	ldr	r0, [r2, #0]
 8001198:	fbb0 f0f3 	udiv	r0, r0, r3
 800119c:	f000 f89c 	bl	80012d8 <HAL_SYSTICK_Config>
 80011a0:	4604      	mov	r4, r0
 80011a2:	b958      	cbnz	r0, 80011bc <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011a4:	2d0f      	cmp	r5, #15
 80011a6:	d809      	bhi.n	80011bc <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a8:	4602      	mov	r2, r0
 80011aa:	4629      	mov	r1, r5
 80011ac:	f04f 30ff 	mov.w	r0, #4294967295
 80011b0:	f000 f860 	bl	8001274 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b4:	4b04      	ldr	r3, [pc, #16]	; (80011c8 <HAL_InitTick+0x44>)
 80011b6:	4620      	mov	r0, r4
 80011b8:	601d      	str	r5, [r3, #0]
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80011ba:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80011bc:	2001      	movs	r0, #1
 80011be:	e7fc      	b.n	80011ba <HAL_InitTick+0x36>
 80011c0:	20000004 	.word	0x20000004
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008

080011cc <HAL_Init>:
{
 80011cc:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ce:	2003      	movs	r0, #3
 80011d0:	f000 f83e 	bl	8001250 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff ffd5 	bl	8001184 <HAL_InitTick>
  HAL_MspInit();
 80011da:	f7ff ff03 	bl	8000fe4 <HAL_MspInit>
}
 80011de:	2000      	movs	r0, #0
 80011e0:	bd08      	pop	{r3, pc}
	...

080011e4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80011e4:	4a03      	ldr	r2, [pc, #12]	; (80011f4 <HAL_IncTick+0x10>)
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <HAL_IncTick+0x14>)
 80011e8:	6811      	ldr	r1, [r2, #0]
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	440b      	add	r3, r1
 80011ee:	6013      	str	r3, [r2, #0]
}
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	2000084c 	.word	0x2000084c
 80011f8:	20000004 	.word	0x20000004

080011fc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80011fc:	4b01      	ldr	r3, [pc, #4]	; (8001204 <HAL_GetTick+0x8>)
 80011fe:	6818      	ldr	r0, [r3, #0]
}
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	2000084c 	.word	0x2000084c

08001208 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001208:	b538      	push	{r3, r4, r5, lr}
 800120a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800120c:	f7ff fff6 	bl	80011fc <HAL_GetTick>
 8001210:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001212:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8001214:	bf1e      	ittt	ne
 8001216:	4b04      	ldrne	r3, [pc, #16]	; (8001228 <HAL_Delay+0x20>)
 8001218:	781b      	ldrbne	r3, [r3, #0]
 800121a:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800121c:	f7ff ffee 	bl	80011fc <HAL_GetTick>
 8001220:	1b43      	subs	r3, r0, r5
 8001222:	42a3      	cmp	r3, r4
 8001224:	d3fa      	bcc.n	800121c <HAL_Delay+0x14>
  {
  }
}
 8001226:	bd38      	pop	{r3, r4, r5, pc}
 8001228:	20000004 	.word	0x20000004

0800122c <HAL_GetHalVersion>:
  * @retval version : 0xXYZR (8bits for each decimal, R for RC)
  */
uint32_t HAL_GetHalVersion(void)
{
  return __STM32F7xx_HAL_VERSION;
}
 800122c:	4800      	ldr	r0, [pc, #0]	; (8001230 <HAL_GetHalVersion+0x4>)
 800122e:	4770      	bx	lr
 8001230:	01030000 	.word	0x01030000

08001234 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16U);
 8001234:	4b01      	ldr	r3, [pc, #4]	; (800123c <HAL_GetREVID+0x8>)
 8001236:	6818      	ldr	r0, [r3, #0]
}
 8001238:	0c00      	lsrs	r0, r0, #16
 800123a:	4770      	bx	lr
 800123c:	e0042000 	.word	0xe0042000

08001240 <HAL_GetDEVID>:
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8001240:	4b02      	ldr	r3, [pc, #8]	; (800124c <HAL_GetDEVID+0xc>)
 8001242:	6818      	ldr	r0, [r3, #0]
}
 8001244:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	e0042000 	.word	0xe0042000

08001250 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001250:	4907      	ldr	r1, [pc, #28]	; (8001270 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001252:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001254:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001256:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800125e:	0412      	lsls	r2, r2, #16
 8001260:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 800126c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001276:	b530      	push	{r4, r5, lr}
 8001278:	68dc      	ldr	r4, [r3, #12]
 800127a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800127e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001282:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001284:	2b04      	cmp	r3, #4
 8001286:	bf28      	it	cs
 8001288:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800128a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800128c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001290:	bf8c      	ite	hi
 8001292:	3c03      	subhi	r4, #3
 8001294:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001296:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800129a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a0:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012a4:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012a8:	fa03 f304 	lsl.w	r3, r3, r4
 80012ac:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80012b4:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 80012b6:	db06      	blt.n	80012c6 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012b8:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80012bc:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80012c0:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80012c4:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c6:	f000 000f 	and.w	r0, r0, #15
 80012ca:	4a02      	ldr	r2, [pc, #8]	; (80012d4 <HAL_NVIC_SetPriority+0x60>)
 80012cc:	5413      	strb	r3, [r2, r0]
 80012ce:	e7f9      	b.n	80012c4 <HAL_NVIC_SetPriority+0x50>
 80012d0:	e000ed00 	.word	0xe000ed00
 80012d4:	e000ed14 	.word	0xe000ed14

080012d8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012d8:	3801      	subs	r0, #1
 80012da:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80012de:	d20b      	bcs.n	80012f8 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	4a05      	ldr	r2, [pc, #20]	; (80012fc <HAL_SYSTICK_Config+0x24>)
 80012e6:	21f0      	movs	r1, #240	; 0xf0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012e8:	6158      	str	r0, [r3, #20]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012ea:	2000      	movs	r0, #0
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f0:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012f2:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012f4:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f6:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80012f8:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80012fa:	4770      	bx	lr
 80012fc:	e000ed00 	.word	0xe000ed00

08001300 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001300:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001302:	4604      	mov	r4, r0
 8001304:	b908      	cbnz	r0, 800130a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8001306:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8001308:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800130a:	7f43      	ldrb	r3, [r0, #29]
 800130c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001310:	b913      	cbnz	r3, 8001318 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8001312:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8001314:	f7ff fe7e 	bl	8001014 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001318:	2302      	movs	r3, #2
 800131a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800131c:	7923      	ldrb	r3, [r4, #4]
 800131e:	b9e3      	cbnz	r3, 800135a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001320:	6823      	ldr	r3, [r4, #0]
 8001322:	4a13      	ldr	r2, [pc, #76]	; (8001370 <HAL_CRC_Init+0x70>)
 8001324:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8001326:	689a      	ldr	r2, [r3, #8]
 8001328:	f022 0218 	bic.w	r2, r2, #24
 800132c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800132e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001330:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001332:	b9d2      	cbnz	r2, 800136a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001334:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001338:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800133a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800133c:	689a      	ldr	r2, [r3, #8]
 800133e:	6961      	ldr	r1, [r4, #20]
 8001340:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001344:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001346:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001348:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001350:	430a      	orrs	r2, r1
 8001352:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8001354:	2301      	movs	r3, #1
 8001356:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8001358:	e7d6      	b.n	8001308 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800135a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800135e:	4620      	mov	r0, r4
 8001360:	f000 f808 	bl	8001374 <HAL_CRCEx_Polynomial_Set>
 8001364:	2800      	cmp	r0, #0
 8001366:	d0e2      	beq.n	800132e <HAL_CRC_Init+0x2e>
 8001368:	e7cd      	b.n	8001306 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800136a:	6922      	ldr	r2, [r4, #16]
 800136c:	e7e4      	b.n	8001338 <HAL_CRC_Init+0x38>
 800136e:	bf00      	nop
 8001370:	04c11db7 	.word	0x04c11db7

08001374 <HAL_CRCEx_Polynomial_Set>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001374:	231f      	movs	r3, #31
{
 8001376:	b510      	push	{r4, lr}
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001378:	3b01      	subs	r3, #1
 800137a:	d31c      	bcc.n	80013b6 <HAL_CRCEx_Polynomial_Set+0x42>
 800137c:	fa21 f403 	lsr.w	r4, r1, r3
 8001380:	07e4      	lsls	r4, r4, #31
 8001382:	d5f9      	bpl.n	8001378 <HAL_CRCEx_Polynomial_Set+0x4>
  {
  }

  switch (PolyLength)
 8001384:	2a10      	cmp	r2, #16
 8001386:	d012      	beq.n	80013ae <HAL_CRCEx_Polynomial_Set+0x3a>
 8001388:	d804      	bhi.n	8001394 <HAL_CRCEx_Polynomial_Set+0x20>
 800138a:	b13a      	cbz	r2, 800139c <HAL_CRCEx_Polynomial_Set+0x28>
 800138c:	2a08      	cmp	r2, #8
 800138e:	d010      	beq.n	80013b2 <HAL_CRCEx_Polynomial_Set+0x3e>
      }
      break;
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
      {
        status =   HAL_ERROR;
 8001390:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8001392:	e00b      	b.n	80013ac <HAL_CRCEx_Polynomial_Set+0x38>
  switch (PolyLength)
 8001394:	2a18      	cmp	r2, #24
 8001396:	d1fb      	bne.n	8001390 <HAL_CRCEx_Polynomial_Set+0x1c>
      if (msb >= HAL_CRC_LENGTH_7B)
 8001398:	2b06      	cmp	r3, #6
      if (msb >= HAL_CRC_LENGTH_16B)
 800139a:	d8f9      	bhi.n	8001390 <HAL_CRCEx_Polynomial_Set+0x1c>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800139c:	6800      	ldr	r0, [r0, #0]
 800139e:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80013a0:	6883      	ldr	r3, [r0, #8]
 80013a2:	f023 0318 	bic.w	r3, r3, #24
 80013a6:	4313      	orrs	r3, r2
 80013a8:	6083      	str	r3, [r0, #8]
 80013aa:	2000      	movs	r0, #0
}
 80013ac:	bd10      	pop	{r4, pc}
      if (msb >= HAL_CRC_LENGTH_8B)
 80013ae:	2b07      	cmp	r3, #7
 80013b0:	e7f3      	b.n	800139a <HAL_CRCEx_Polynomial_Set+0x26>
      if (msb >= HAL_CRC_LENGTH_16B)
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	e7f1      	b.n	800139a <HAL_CRCEx_Polynomial_Set+0x26>
  switch (PolyLength)
 80013b6:	2a00      	cmp	r2, #0
 80013b8:	d1ea      	bne.n	8001390 <HAL_CRCEx_Polynomial_Set+0x1c>
 80013ba:	e7ef      	b.n	800139c <HAL_CRCEx_Polynomial_Set+0x28>

080013bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80013c0:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c2:	f8df 91b8 	ldr.w	r9, [pc, #440]	; 800157c <HAL_GPIO_Init+0x1c0>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013c6:	4a6b      	ldr	r2, [pc, #428]	; (8001574 <HAL_GPIO_Init+0x1b8>)
    ioposition = ((uint32_t)0x01) << position;
 80013c8:	2401      	movs	r4, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ca:	680d      	ldr	r5, [r1, #0]
    ioposition = ((uint32_t)0x01) << position;
 80013cc:	409c      	lsls	r4, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013ce:	ea04 0c05 	and.w	ip, r4, r5
    if(iocurrent == ioposition)
 80013d2:	43ac      	bics	r4, r5
 80013d4:	f040 80b4 	bne.w	8001540 <HAL_GPIO_Init+0x184>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013d8:	684d      	ldr	r5, [r1, #4]
 80013da:	ea4f 0843 	mov.w	r8, r3, lsl #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013de:	2603      	movs	r6, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e0:	f005 0403 	and.w	r4, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013e4:	fa06 f608 	lsl.w	r6, r6, r8
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e8:	1e67      	subs	r7, r4, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013ea:	43f6      	mvns	r6, r6
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013ec:	2f01      	cmp	r7, #1
 80013ee:	d834      	bhi.n	800145a <HAL_GPIO_Init+0x9e>
        temp = GPIOx->OSPEEDR; 
 80013f0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80013f2:	ea07 0e06 	and.w	lr, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2));
 80013f6:	68cf      	ldr	r7, [r1, #12]
 80013f8:	fa07 f708 	lsl.w	r7, r7, r8
 80013fc:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8001400:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001402:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001404:	ea27 0e0c 	bic.w	lr, r7, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001408:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800140c:	409f      	lsls	r7, r3
 800140e:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001412:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001414:	68c7      	ldr	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001416:	2c02      	cmp	r4, #2
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001418:	ea07 0e06 	and.w	lr, r7, r6
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800141c:	688f      	ldr	r7, [r1, #8]
 800141e:	fa07 f708 	lsl.w	r7, r7, r8
 8001422:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001426:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001428:	d119      	bne.n	800145e <HAL_GPIO_Init+0xa2>
        temp = GPIOx->AFR[position >> 3];
 800142a:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800142e:	f003 0b07 	and.w	fp, r3, #7
 8001432:	f04f 0e0f 	mov.w	lr, #15
 8001436:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 800143a:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = GPIOx->AFR[position >> 3];
 800143e:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001442:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001446:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800144a:	690f      	ldr	r7, [r1, #16]
 800144c:	fa07 f70b 	lsl.w	r7, r7, fp
 8001450:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8001454:	f8ca 7020 	str.w	r7, [sl, #32]
 8001458:	e001      	b.n	800145e <HAL_GPIO_Init+0xa2>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800145a:	2c03      	cmp	r4, #3
 800145c:	d1da      	bne.n	8001414 <HAL_GPIO_Init+0x58>
      temp = GPIOx->MODER;
 800145e:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001460:	fa04 f408 	lsl.w	r4, r4, r8
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001464:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001468:	ea07 0706 	and.w	r7, r7, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800146c:	ea44 0407 	orr.w	r4, r4, r7
      GPIOx->MODER = temp;
 8001470:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001472:	d065      	beq.n	8001540 <HAL_GPIO_Init+0x184>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001474:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8001478:	f023 0603 	bic.w	r6, r3, #3
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800147c:	f003 0703 	and.w	r7, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001480:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
 8001484:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001488:	00bf      	lsls	r7, r7, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800148a:	f8c9 4044 	str.w	r4, [r9, #68]	; 0x44
 800148e:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
 8001492:	f8d9 4044 	ldr.w	r4, [r9, #68]	; 0x44
 8001496:	f404 4480 	and.w	r4, r4, #16384	; 0x4000
 800149a:	9401      	str	r4, [sp, #4]
 800149c:	9c01      	ldr	r4, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800149e:	240f      	movs	r4, #15
        temp = SYSCFG->EXTICR[position >> 2];
 80014a0:	f8d6 e008 	ldr.w	lr, [r6, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80014a4:	40bc      	lsls	r4, r7
 80014a6:	ea2e 0e04 	bic.w	lr, lr, r4
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80014aa:	4c33      	ldr	r4, [pc, #204]	; (8001578 <HAL_GPIO_Init+0x1bc>)
 80014ac:	42a0      	cmp	r0, r4
 80014ae:	d04e      	beq.n	800154e <HAL_GPIO_Init+0x192>
 80014b0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014b4:	42a0      	cmp	r0, r4
 80014b6:	d04c      	beq.n	8001552 <HAL_GPIO_Init+0x196>
 80014b8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014bc:	42a0      	cmp	r0, r4
 80014be:	d04a      	beq.n	8001556 <HAL_GPIO_Init+0x19a>
 80014c0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014c4:	42a0      	cmp	r0, r4
 80014c6:	d048      	beq.n	800155a <HAL_GPIO_Init+0x19e>
 80014c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014cc:	42a0      	cmp	r0, r4
 80014ce:	d046      	beq.n	800155e <HAL_GPIO_Init+0x1a2>
 80014d0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014d4:	42a0      	cmp	r0, r4
 80014d6:	d044      	beq.n	8001562 <HAL_GPIO_Init+0x1a6>
 80014d8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014dc:	42a0      	cmp	r0, r4
 80014de:	d042      	beq.n	8001566 <HAL_GPIO_Init+0x1aa>
 80014e0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014e4:	42a0      	cmp	r0, r4
 80014e6:	d040      	beq.n	800156a <HAL_GPIO_Init+0x1ae>
 80014e8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014ec:	42a0      	cmp	r0, r4
 80014ee:	d03e      	beq.n	800156e <HAL_GPIO_Init+0x1b2>
 80014f0:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80014f4:	42a0      	cmp	r0, r4
 80014f6:	bf0c      	ite	eq
 80014f8:	2409      	moveq	r4, #9
 80014fa:	240a      	movne	r4, #10
 80014fc:	40bc      	lsls	r4, r7
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014fe:	02ef      	lsls	r7, r5, #11
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001500:	ea44 040e 	orr.w	r4, r4, lr
        SYSCFG->EXTICR[position >> 2] = temp;
 8001504:	60b4      	str	r4, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8001506:	ea6f 060c 	mvn.w	r6, ip
        temp = EXTI->RTSR;
 800150a:	6894      	ldr	r4, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
 800150c:	bf54      	ite	pl
 800150e:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 8001510:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->RTSR = temp;

        temp = EXTI->FTSR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001514:	02af      	lsls	r7, r5, #10
        EXTI->RTSR = temp;
 8001516:	6094      	str	r4, [r2, #8]
        temp = EXTI->FTSR;
 8001518:	68d4      	ldr	r4, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
 800151a:	bf54      	ite	pl
 800151c:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800151e:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->FTSR = temp;

        temp = EXTI->EMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001522:	03af      	lsls	r7, r5, #14
        EXTI->FTSR = temp;
 8001524:	60d4      	str	r4, [r2, #12]
        temp = EXTI->EMR;
 8001526:	6854      	ldr	r4, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
 8001528:	bf54      	ite	pl
 800152a:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800152c:	ea4c 0404 	orrmi.w	r4, ip, r4
        EXTI->EMR = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001530:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8001532:	6054      	str	r4, [r2, #4]
        temp = EXTI->IMR;
 8001534:	6814      	ldr	r4, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8001536:	bf54      	ite	pl
 8001538:	4034      	andpl	r4, r6
        {
          temp |= iocurrent;
 800153a:	ea4c 0404 	orrmi.w	r4, ip, r4
        }
        EXTI->IMR = temp;
 800153e:	6014      	str	r4, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001540:	3301      	adds	r3, #1
 8001542:	2b10      	cmp	r3, #16
 8001544:	f47f af40 	bne.w	80013c8 <HAL_GPIO_Init+0xc>
      }
    }
  }
}
 8001548:	b003      	add	sp, #12
 800154a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800154e:	2400      	movs	r4, #0
 8001550:	e7d4      	b.n	80014fc <HAL_GPIO_Init+0x140>
 8001552:	2401      	movs	r4, #1
 8001554:	e7d2      	b.n	80014fc <HAL_GPIO_Init+0x140>
 8001556:	2402      	movs	r4, #2
 8001558:	e7d0      	b.n	80014fc <HAL_GPIO_Init+0x140>
 800155a:	2403      	movs	r4, #3
 800155c:	e7ce      	b.n	80014fc <HAL_GPIO_Init+0x140>
 800155e:	2404      	movs	r4, #4
 8001560:	e7cc      	b.n	80014fc <HAL_GPIO_Init+0x140>
 8001562:	2405      	movs	r4, #5
 8001564:	e7ca      	b.n	80014fc <HAL_GPIO_Init+0x140>
 8001566:	2406      	movs	r4, #6
 8001568:	e7c8      	b.n	80014fc <HAL_GPIO_Init+0x140>
 800156a:	2407      	movs	r4, #7
 800156c:	e7c6      	b.n	80014fc <HAL_GPIO_Init+0x140>
 800156e:	2408      	movs	r4, #8
 8001570:	e7c4      	b.n	80014fc <HAL_GPIO_Init+0x140>
 8001572:	bf00      	nop
 8001574:	40013c00 	.word	0x40013c00
 8001578:	40020000 	.word	0x40020000
 800157c:	40023800 	.word	0x40023800

08001580 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001580:	b10a      	cbz	r2, 8001586 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001582:	6181      	str	r1, [r0, #24]
  }
}
 8001584:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001586:	0409      	lsls	r1, r1, #16
 8001588:	e7fb      	b.n	8001582 <HAL_GPIO_WritePin+0x2>
	...

0800158c <HAL_PWREx_EnableOverDrive>:
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
  uint32_t tickstart = 0;

  __HAL_RCC_PWR_CLK_ENABLE();
 800158c:	4b19      	ldr	r3, [pc, #100]	; (80015f4 <HAL_PWREx_EnableOverDrive+0x68>)
{
 800158e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __HAL_RCC_PWR_CLK_ENABLE();
 8001590:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001592:	4c19      	ldr	r4, [pc, #100]	; (80015f8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001594:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001598:	641a      	str	r2, [r3, #64]	; 0x40
 800159a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80015a4:	6823      	ldr	r3, [r4, #0]
 80015a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015aa:	6023      	str	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015ac:	f7ff fe26 	bl	80011fc <HAL_GetTick>
 80015b0:	4605      	mov	r5, r0

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80015b2:	6863      	ldr	r3, [r4, #4]
 80015b4:	03da      	lsls	r2, r3, #15
 80015b6:	d50c      	bpl.n	80015d2 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015b8:	6823      	ldr	r3, [r4, #0]

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015ba:	4d0f      	ldr	r5, [pc, #60]	; (80015f8 <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015c0:	6023      	str	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80015c2:	f7ff fe1b 	bl	80011fc <HAL_GetTick>
 80015c6:	4604      	mov	r4, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015c8:	686b      	ldr	r3, [r5, #4]
 80015ca:	039b      	lsls	r3, r3, #14
 80015cc:	d50a      	bpl.n	80015e4 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 80015ce:	2000      	movs	r0, #0
 80015d0:	e006      	b.n	80015e0 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015d2:	f7ff fe13 	bl	80011fc <HAL_GetTick>
 80015d6:	1b40      	subs	r0, r0, r5
 80015d8:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80015dc:	d9e9      	bls.n	80015b2 <HAL_PWREx_EnableOverDrive+0x26>
      return HAL_TIMEOUT;
 80015de:	2003      	movs	r0, #3
}
 80015e0:	b003      	add	sp, #12
 80015e2:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015e4:	f7ff fe0a 	bl	80011fc <HAL_GetTick>
 80015e8:	1b00      	subs	r0, r0, r4
 80015ea:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 80015ee:	d9eb      	bls.n	80015c8 <HAL_PWREx_EnableOverDrive+0x3c>
 80015f0:	e7f5      	b.n	80015de <HAL_PWREx_EnableOverDrive+0x52>
 80015f2:	bf00      	nop
 80015f4:	40023800 	.word	0x40023800
 80015f8:	40007000 	.word	0x40007000

080015fc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015fc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001600:	4604      	mov	r4, r0
 8001602:	b340      	cbz	r0, 8001656 <HAL_RCC_OscConfig+0x5a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001604:	6803      	ldr	r3, [r0, #0]
 8001606:	07db      	lsls	r3, r3, #31
 8001608:	d410      	bmi.n	800162c <HAL_RCC_OscConfig+0x30>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160a:	6823      	ldr	r3, [r4, #0]
 800160c:	079f      	lsls	r7, r3, #30
 800160e:	d461      	bmi.n	80016d4 <HAL_RCC_OscConfig+0xd8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001610:	6823      	ldr	r3, [r4, #0]
 8001612:	0719      	lsls	r1, r3, #28
 8001614:	f100 80a6 	bmi.w	8001764 <HAL_RCC_OscConfig+0x168>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001618:	6823      	ldr	r3, [r4, #0]
 800161a:	075a      	lsls	r2, r3, #29
 800161c:	f100 80c7 	bmi.w	80017ae <HAL_RCC_OscConfig+0x1b2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001620:	69a2      	ldr	r2, [r4, #24]
 8001622:	2a00      	cmp	r2, #0
 8001624:	f040 8130 	bne.w	8001888 <HAL_RCC_OscConfig+0x28c>
      {
        return HAL_ERROR;
      }
    }
  }
  return HAL_OK;
 8001628:	2000      	movs	r0, #0
 800162a:	e02c      	b.n	8001686 <HAL_RCC_OscConfig+0x8a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800162c:	4b94      	ldr	r3, [pc, #592]	; (8001880 <HAL_RCC_OscConfig+0x284>)
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	f002 020c 	and.w	r2, r2, #12
 8001634:	2a04      	cmp	r2, #4
 8001636:	d007      	beq.n	8001648 <HAL_RCC_OscConfig+0x4c>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001638:	689a      	ldr	r2, [r3, #8]
 800163a:	f002 020c 	and.w	r2, r2, #12
 800163e:	2a08      	cmp	r2, #8
 8001640:	d10b      	bne.n	800165a <HAL_RCC_OscConfig+0x5e>
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	025e      	lsls	r6, r3, #9
 8001646:	d508      	bpl.n	800165a <HAL_RCC_OscConfig+0x5e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	4b8d      	ldr	r3, [pc, #564]	; (8001880 <HAL_RCC_OscConfig+0x284>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	039d      	lsls	r5, r3, #14
 800164e:	d5dc      	bpl.n	800160a <HAL_RCC_OscConfig+0xe>
 8001650:	6863      	ldr	r3, [r4, #4]
 8001652:	2b00      	cmp	r3, #0
 8001654:	d1d9      	bne.n	800160a <HAL_RCC_OscConfig+0xe>
        return HAL_ERROR;
 8001656:	2001      	movs	r0, #1
 8001658:	e015      	b.n	8001686 <HAL_RCC_OscConfig+0x8a>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800165a:	6863      	ldr	r3, [r4, #4]
 800165c:	4d88      	ldr	r5, [pc, #544]	; (8001880 <HAL_RCC_OscConfig+0x284>)
 800165e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001662:	d113      	bne.n	800168c <HAL_RCC_OscConfig+0x90>
 8001664:	682b      	ldr	r3, [r5, #0]
 8001666:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800166a:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800166c:	f7ff fdc6 	bl	80011fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001670:	4e83      	ldr	r6, [pc, #524]	; (8001880 <HAL_RCC_OscConfig+0x284>)
        tickstart = HAL_GetTick();
 8001672:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001674:	6833      	ldr	r3, [r6, #0]
 8001676:	0398      	lsls	r0, r3, #14
 8001678:	d4c7      	bmi.n	800160a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167a:	f7ff fdbf 	bl	80011fc <HAL_GetTick>
 800167e:	1b40      	subs	r0, r0, r5
 8001680:	2864      	cmp	r0, #100	; 0x64
 8001682:	d9f7      	bls.n	8001674 <HAL_RCC_OscConfig+0x78>
            return HAL_TIMEOUT;
 8001684:	2003      	movs	r0, #3
}
 8001686:	b002      	add	sp, #8
 8001688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800168c:	b99b      	cbnz	r3, 80016b6 <HAL_RCC_OscConfig+0xba>
 800168e:	682b      	ldr	r3, [r5, #0]
 8001690:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001694:	602b      	str	r3, [r5, #0]
 8001696:	682b      	ldr	r3, [r5, #0]
 8001698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800169e:	f7ff fdad 	bl	80011fc <HAL_GetTick>
 80016a2:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016a4:	682b      	ldr	r3, [r5, #0]
 80016a6:	0399      	lsls	r1, r3, #14
 80016a8:	d5af      	bpl.n	800160a <HAL_RCC_OscConfig+0xe>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016aa:	f7ff fda7 	bl	80011fc <HAL_GetTick>
 80016ae:	1b80      	subs	r0, r0, r6
 80016b0:	2864      	cmp	r0, #100	; 0x64
 80016b2:	d9f7      	bls.n	80016a4 <HAL_RCC_OscConfig+0xa8>
 80016b4:	e7e6      	b.n	8001684 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016b6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016ba:	682b      	ldr	r3, [r5, #0]
 80016bc:	d103      	bne.n	80016c6 <HAL_RCC_OscConfig+0xca>
 80016be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016c2:	602b      	str	r3, [r5, #0]
 80016c4:	e7ce      	b.n	8001664 <HAL_RCC_OscConfig+0x68>
 80016c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ca:	602b      	str	r3, [r5, #0]
 80016cc:	682b      	ldr	r3, [r5, #0]
 80016ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d2:	e7ca      	b.n	800166a <HAL_RCC_OscConfig+0x6e>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80016d4:	4b6a      	ldr	r3, [pc, #424]	; (8001880 <HAL_RCC_OscConfig+0x284>)
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	f012 0f0c 	tst.w	r2, #12
 80016dc:	d007      	beq.n	80016ee <HAL_RCC_OscConfig+0xf2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	f002 020c 	and.w	r2, r2, #12
 80016e4:	2a08      	cmp	r2, #8
 80016e6:	d111      	bne.n	800170c <HAL_RCC_OscConfig+0x110>
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	025a      	lsls	r2, r3, #9
 80016ec:	d40e      	bmi.n	800170c <HAL_RCC_OscConfig+0x110>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ee:	4a64      	ldr	r2, [pc, #400]	; (8001880 <HAL_RCC_OscConfig+0x284>)
 80016f0:	6813      	ldr	r3, [r2, #0]
 80016f2:	079b      	lsls	r3, r3, #30
 80016f4:	d502      	bpl.n	80016fc <HAL_RCC_OscConfig+0x100>
 80016f6:	68e3      	ldr	r3, [r4, #12]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d1ac      	bne.n	8001656 <HAL_RCC_OscConfig+0x5a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016fc:	6813      	ldr	r3, [r2, #0]
 80016fe:	6921      	ldr	r1, [r4, #16]
 8001700:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001704:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001708:	6013      	str	r3, [r2, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800170a:	e781      	b.n	8001610 <HAL_RCC_OscConfig+0x14>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800170c:	68e3      	ldr	r3, [r4, #12]
 800170e:	4d5c      	ldr	r5, [pc, #368]	; (8001880 <HAL_RCC_OscConfig+0x284>)
 8001710:	b1bb      	cbz	r3, 8001742 <HAL_RCC_OscConfig+0x146>
        __HAL_RCC_HSI_ENABLE();
 8001712:	682b      	ldr	r3, [r5, #0]
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800171a:	f7ff fd6f 	bl	80011fc <HAL_GetTick>
 800171e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001720:	682b      	ldr	r3, [r5, #0]
 8001722:	079f      	lsls	r7, r3, #30
 8001724:	d507      	bpl.n	8001736 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001726:	682b      	ldr	r3, [r5, #0]
 8001728:	6922      	ldr	r2, [r4, #16]
 800172a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800172e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001732:	602b      	str	r3, [r5, #0]
 8001734:	e76c      	b.n	8001610 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001736:	f7ff fd61 	bl	80011fc <HAL_GetTick>
 800173a:	1b80      	subs	r0, r0, r6
 800173c:	2802      	cmp	r0, #2
 800173e:	d9ef      	bls.n	8001720 <HAL_RCC_OscConfig+0x124>
 8001740:	e7a0      	b.n	8001684 <HAL_RCC_OscConfig+0x88>
        __HAL_RCC_HSI_DISABLE();
 8001742:	682b      	ldr	r3, [r5, #0]
 8001744:	f023 0301 	bic.w	r3, r3, #1
 8001748:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800174a:	f7ff fd57 	bl	80011fc <HAL_GetTick>
 800174e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001750:	682b      	ldr	r3, [r5, #0]
 8001752:	0798      	lsls	r0, r3, #30
 8001754:	f57f af5c 	bpl.w	8001610 <HAL_RCC_OscConfig+0x14>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001758:	f7ff fd50 	bl	80011fc <HAL_GetTick>
 800175c:	1b80      	subs	r0, r0, r6
 800175e:	2802      	cmp	r0, #2
 8001760:	d9f6      	bls.n	8001750 <HAL_RCC_OscConfig+0x154>
 8001762:	e78f      	b.n	8001684 <HAL_RCC_OscConfig+0x88>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001764:	6963      	ldr	r3, [r4, #20]
 8001766:	4d46      	ldr	r5, [pc, #280]	; (8001880 <HAL_RCC_OscConfig+0x284>)
 8001768:	b183      	cbz	r3, 800178c <HAL_RCC_OscConfig+0x190>
      __HAL_RCC_LSI_ENABLE();
 800176a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001772:	f7ff fd43 	bl	80011fc <HAL_GetTick>
 8001776:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001778:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800177a:	079b      	lsls	r3, r3, #30
 800177c:	f53f af4c 	bmi.w	8001618 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001780:	f7ff fd3c 	bl	80011fc <HAL_GetTick>
 8001784:	1b80      	subs	r0, r0, r6
 8001786:	2802      	cmp	r0, #2
 8001788:	d9f6      	bls.n	8001778 <HAL_RCC_OscConfig+0x17c>
 800178a:	e77b      	b.n	8001684 <HAL_RCC_OscConfig+0x88>
      __HAL_RCC_LSI_DISABLE();
 800178c:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800178e:	f023 0301 	bic.w	r3, r3, #1
 8001792:	676b      	str	r3, [r5, #116]	; 0x74
      tickstart = HAL_GetTick();
 8001794:	f7ff fd32 	bl	80011fc <HAL_GetTick>
 8001798:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800179a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 800179c:	079f      	lsls	r7, r3, #30
 800179e:	f57f af3b 	bpl.w	8001618 <HAL_RCC_OscConfig+0x1c>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017a2:	f7ff fd2b 	bl	80011fc <HAL_GetTick>
 80017a6:	1b80      	subs	r0, r0, r6
 80017a8:	2802      	cmp	r0, #2
 80017aa:	d9f6      	bls.n	800179a <HAL_RCC_OscConfig+0x19e>
 80017ac:	e76a      	b.n	8001684 <HAL_RCC_OscConfig+0x88>
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ae:	4b34      	ldr	r3, [pc, #208]	; (8001880 <HAL_RCC_OscConfig+0x284>)
 80017b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017b2:	00d0      	lsls	r0, r2, #3
 80017b4:	d427      	bmi.n	8001806 <HAL_RCC_OscConfig+0x20a>
      __HAL_RCC_PWR_CLK_ENABLE();
 80017b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
      pwrclkchanged = SET;
 80017b8:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80017be:	641a      	str	r2, [r3, #64]	; 0x40
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	9b01      	ldr	r3, [sp, #4]
    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017ca:	4d2e      	ldr	r5, [pc, #184]	; (8001884 <HAL_RCC_OscConfig+0x288>)
 80017cc:	682b      	ldr	r3, [r5, #0]
 80017ce:	05d9      	lsls	r1, r3, #23
 80017d0:	d51b      	bpl.n	800180a <HAL_RCC_OscConfig+0x20e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d2:	68a3      	ldr	r3, [r4, #8]
 80017d4:	4d2a      	ldr	r5, [pc, #168]	; (8001880 <HAL_RCC_OscConfig+0x284>)
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d127      	bne.n	800182a <HAL_RCC_OscConfig+0x22e>
 80017da:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	672b      	str	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017e2:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80017e6:	f7ff fd09 	bl	80011fc <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ea:	4e25      	ldr	r6, [pc, #148]	; (8001880 <HAL_RCC_OscConfig+0x284>)
      tickstart = HAL_GetTick();
 80017ec:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ee:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80017f0:	079b      	lsls	r3, r3, #30
 80017f2:	d53f      	bpl.n	8001874 <HAL_RCC_OscConfig+0x278>
    if (pwrclkchanged == SET)
 80017f4:	2f00      	cmp	r7, #0
 80017f6:	f43f af13 	beq.w	8001620 <HAL_RCC_OscConfig+0x24>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017fa:	4a21      	ldr	r2, [pc, #132]	; (8001880 <HAL_RCC_OscConfig+0x284>)
 80017fc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80017fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001802:	6413      	str	r3, [r2, #64]	; 0x40
 8001804:	e70c      	b.n	8001620 <HAL_RCC_OscConfig+0x24>
  FlagStatus pwrclkchanged = RESET;
 8001806:	2700      	movs	r7, #0
 8001808:	e7df      	b.n	80017ca <HAL_RCC_OscConfig+0x1ce>
      PWR->CR1 |= PWR_CR1_DBP;
 800180a:	682b      	ldr	r3, [r5, #0]
 800180c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001810:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8001812:	f7ff fcf3 	bl	80011fc <HAL_GetTick>
 8001816:	4606      	mov	r6, r0
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001818:	682b      	ldr	r3, [r5, #0]
 800181a:	05da      	lsls	r2, r3, #23
 800181c:	d4d9      	bmi.n	80017d2 <HAL_RCC_OscConfig+0x1d6>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800181e:	f7ff fced 	bl	80011fc <HAL_GetTick>
 8001822:	1b80      	subs	r0, r0, r6
 8001824:	2864      	cmp	r0, #100	; 0x64
 8001826:	d9f7      	bls.n	8001818 <HAL_RCC_OscConfig+0x21c>
 8001828:	e72c      	b.n	8001684 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800182a:	b9ab      	cbnz	r3, 8001858 <HAL_RCC_OscConfig+0x25c>
 800182c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001832:	f023 0301 	bic.w	r3, r3, #1
 8001836:	672b      	str	r3, [r5, #112]	; 0x70
 8001838:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800183a:	f023 0304 	bic.w	r3, r3, #4
 800183e:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 8001840:	f7ff fcdc 	bl	80011fc <HAL_GetTick>
 8001844:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001846:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8001848:	0798      	lsls	r0, r3, #30
 800184a:	d5d3      	bpl.n	80017f4 <HAL_RCC_OscConfig+0x1f8>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800184c:	f7ff fcd6 	bl	80011fc <HAL_GetTick>
 8001850:	1b80      	subs	r0, r0, r6
 8001852:	4540      	cmp	r0, r8
 8001854:	d9f7      	bls.n	8001846 <HAL_RCC_OscConfig+0x24a>
 8001856:	e715      	b.n	8001684 <HAL_RCC_OscConfig+0x88>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001858:	2b05      	cmp	r3, #5
 800185a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800185c:	d103      	bne.n	8001866 <HAL_RCC_OscConfig+0x26a>
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	672b      	str	r3, [r5, #112]	; 0x70
 8001864:	e7b9      	b.n	80017da <HAL_RCC_OscConfig+0x1de>
 8001866:	f023 0301 	bic.w	r3, r3, #1
 800186a:	672b      	str	r3, [r5, #112]	; 0x70
 800186c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800186e:	f023 0304 	bic.w	r3, r3, #4
 8001872:	e7b5      	b.n	80017e0 <HAL_RCC_OscConfig+0x1e4>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001874:	f7ff fcc2 	bl	80011fc <HAL_GetTick>
 8001878:	1b40      	subs	r0, r0, r5
 800187a:	4540      	cmp	r0, r8
 800187c:	d9b7      	bls.n	80017ee <HAL_RCC_OscConfig+0x1f2>
 800187e:	e701      	b.n	8001684 <HAL_RCC_OscConfig+0x88>
 8001880:	40023800 	.word	0x40023800
 8001884:	40007000 	.word	0x40007000
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001888:	4d3c      	ldr	r5, [pc, #240]	; (800197c <HAL_RCC_OscConfig+0x380>)
 800188a:	68ab      	ldr	r3, [r5, #8]
 800188c:	f003 030c 	and.w	r3, r3, #12
 8001890:	2b08      	cmp	r3, #8
 8001892:	d042      	beq.n	800191a <HAL_RCC_OscConfig+0x31e>
        __HAL_RCC_PLL_DISABLE();
 8001894:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001896:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8001898:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800189c:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800189e:	d12f      	bne.n	8001900 <HAL_RCC_OscConfig+0x304>
        tickstart = HAL_GetTick();
 80018a0:	f7ff fcac 	bl	80011fc <HAL_GetTick>
 80018a4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018a6:	682b      	ldr	r3, [r5, #0]
 80018a8:	0199      	lsls	r1, r3, #6
 80018aa:	d423      	bmi.n	80018f4 <HAL_RCC_OscConfig+0x2f8>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018ac:	e9d4 3207 	ldrd	r3, r2, [r4, #28]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80018b4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80018b8:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80018ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80018be:	6b22      	ldr	r2, [r4, #48]	; 0x30
 80018c0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80018c4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80018c6:	0852      	lsrs	r2, r2, #1
 80018c8:	3a01      	subs	r2, #1
 80018ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80018ce:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80018d0:	682b      	ldr	r3, [r5, #0]
 80018d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018d6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80018d8:	f7ff fc90 	bl	80011fc <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018dc:	4d27      	ldr	r5, [pc, #156]	; (800197c <HAL_RCC_OscConfig+0x380>)
        tickstart = HAL_GetTick();
 80018de:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018e0:	682b      	ldr	r3, [r5, #0]
 80018e2:	019a      	lsls	r2, r3, #6
 80018e4:	f53f aea0 	bmi.w	8001628 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018e8:	f7ff fc88 	bl	80011fc <HAL_GetTick>
 80018ec:	1b00      	subs	r0, r0, r4
 80018ee:	2802      	cmp	r0, #2
 80018f0:	d9f6      	bls.n	80018e0 <HAL_RCC_OscConfig+0x2e4>
 80018f2:	e6c7      	b.n	8001684 <HAL_RCC_OscConfig+0x88>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f4:	f7ff fc82 	bl	80011fc <HAL_GetTick>
 80018f8:	1b80      	subs	r0, r0, r6
 80018fa:	2802      	cmp	r0, #2
 80018fc:	d9d3      	bls.n	80018a6 <HAL_RCC_OscConfig+0x2aa>
 80018fe:	e6c1      	b.n	8001684 <HAL_RCC_OscConfig+0x88>
        tickstart = HAL_GetTick();
 8001900:	f7ff fc7c 	bl	80011fc <HAL_GetTick>
 8001904:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001906:	682b      	ldr	r3, [r5, #0]
 8001908:	019b      	lsls	r3, r3, #6
 800190a:	f57f ae8d 	bpl.w	8001628 <HAL_RCC_OscConfig+0x2c>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190e:	f7ff fc75 	bl	80011fc <HAL_GetTick>
 8001912:	1b00      	subs	r0, r0, r4
 8001914:	2802      	cmp	r0, #2
 8001916:	d9f6      	bls.n	8001906 <HAL_RCC_OscConfig+0x30a>
 8001918:	e6b4      	b.n	8001684 <HAL_RCC_OscConfig+0x88>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191a:	2a01      	cmp	r2, #1
      pll_config = RCC->PLLCFGR;
 800191c:	686b      	ldr	r3, [r5, #4]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800191e:	f43f ae9a 	beq.w	8001656 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001926:	69e1      	ldr	r1, [r4, #28]
 8001928:	428a      	cmp	r2, r1
 800192a:	f47f ae94 	bne.w	8001656 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800192e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001932:	6a21      	ldr	r1, [r4, #32]
 8001934:	428a      	cmp	r2, r1
 8001936:	f47f ae8e 	bne.w	8001656 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800193a:	f647 72c0 	movw	r2, #32704	; 0x7fc0
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800193e:	6a61      	ldr	r1, [r4, #36]	; 0x24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001940:	401a      	ands	r2, r3
 8001942:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8001946:	f47f ae86 	bne.w	8001656 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800194a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800194c:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8001950:	0852      	lsrs	r2, r2, #1
 8001952:	3a01      	subs	r2, #1
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001954:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8001958:	f47f ae7d 	bne.w	8001656 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800195c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001960:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001962:	ebb2 6f01 	cmp.w	r2, r1, lsl #24
 8001966:	f47f ae76 	bne.w	8001656 <HAL_RCC_OscConfig+0x5a>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800196a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800196e:	6b22      	ldr	r2, [r4, #48]	; 0x30
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001970:	ebb3 7f02 	cmp.w	r3, r2, lsl #28
 8001974:	f43f ae58 	beq.w	8001628 <HAL_RCC_OscConfig+0x2c>
 8001978:	e66d      	b.n	8001656 <HAL_RCC_OscConfig+0x5a>
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800

08001980 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
  uint32_t sysclockfreq = 0;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001980:	4913      	ldr	r1, [pc, #76]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x50>)
{
 8001982:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001984:	688b      	ldr	r3, [r1, #8]
 8001986:	f003 030c 	and.w	r3, r3, #12
 800198a:	2b04      	cmp	r3, #4
 800198c:	d01b      	beq.n	80019c6 <HAL_RCC_GetSysClockFreq+0x46>
 800198e:	2b08      	cmp	r3, #8
 8001990:	d11b      	bne.n	80019ca <HAL_RCC_GetSysClockFreq+0x4a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001992:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001994:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001996:	6849      	ldr	r1, [r1, #4]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001998:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800199c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019a0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80019a4:	bf1a      	itte	ne
 80019a6:	480b      	ldrne	r0, [pc, #44]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x54>)
 80019a8:	2300      	movne	r3, #0
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019aa:	480b      	ldreq	r0, [pc, #44]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x58>)
 80019ac:	fba1 0100 	umull	r0, r1, r1, r0
 80019b0:	f7fe fdac 	bl	800050c <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80019b4:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x50>)
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80019bc:	3301      	adds	r3, #1
 80019be:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco / pllp;
 80019c0:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80019c4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80019c6:	4803      	ldr	r0, [pc, #12]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x54>)
 80019c8:	e7fc      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x44>
      sysclockfreq = HSI_VALUE;
 80019ca:	4803      	ldr	r0, [pc, #12]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x58>)
  return sysclockfreq;
 80019cc:	e7fa      	b.n	80019c4 <HAL_RCC_GetSysClockFreq+0x44>
 80019ce:	bf00      	nop
 80019d0:	40023800 	.word	0x40023800
 80019d4:	017d7840 	.word	0x017d7840
 80019d8:	00f42400 	.word	0x00f42400

080019dc <HAL_RCC_ClockConfig>:
{
 80019dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019e0:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 80019e2:	4604      	mov	r4, r0
 80019e4:	b910      	cbnz	r0, 80019ec <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80019e6:	2001      	movs	r0, #1
}
 80019e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80019ec:	4a45      	ldr	r2, [pc, #276]	; (8001b04 <HAL_RCC_ClockConfig+0x128>)
 80019ee:	6813      	ldr	r3, [r2, #0]
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	428b      	cmp	r3, r1
 80019f6:	d328      	bcc.n	8001a4a <HAL_RCC_ClockConfig+0x6e>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f8:	6821      	ldr	r1, [r4, #0]
 80019fa:	078f      	lsls	r7, r1, #30
 80019fc:	d430      	bmi.n	8001a60 <HAL_RCC_ClockConfig+0x84>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019fe:	07c8      	lsls	r0, r1, #31
 8001a00:	d443      	bmi.n	8001a8a <HAL_RCC_ClockConfig+0xae>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a02:	4a40      	ldr	r2, [pc, #256]	; (8001b04 <HAL_RCC_ClockConfig+0x128>)
 8001a04:	6813      	ldr	r3, [r2, #0]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	42ab      	cmp	r3, r5
 8001a0c:	d866      	bhi.n	8001adc <HAL_RCC_ClockConfig+0x100>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a0e:	6822      	ldr	r2, [r4, #0]
 8001a10:	0751      	lsls	r1, r2, #29
 8001a12:	d46f      	bmi.n	8001af4 <HAL_RCC_ClockConfig+0x118>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a14:	0713      	lsls	r3, r2, #28
 8001a16:	d507      	bpl.n	8001a28 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a18:	4a3b      	ldr	r2, [pc, #236]	; (8001b08 <HAL_RCC_ClockConfig+0x12c>)
 8001a1a:	6921      	ldr	r1, [r4, #16]
 8001a1c:	6893      	ldr	r3, [r2, #8]
 8001a1e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8001a22:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8001a26:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001a28:	f7ff ffaa 	bl	8001980 <HAL_RCC_GetSysClockFreq>
 8001a2c:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <HAL_RCC_ClockConfig+0x12c>)
 8001a2e:	4a37      	ldr	r2, [pc, #220]	; (8001b0c <HAL_RCC_ClockConfig+0x130>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001a36:	5cd3      	ldrb	r3, [r2, r3]
 8001a38:	40d8      	lsrs	r0, r3
 8001a3a:	4b35      	ldr	r3, [pc, #212]	; (8001b10 <HAL_RCC_ClockConfig+0x134>)
 8001a3c:	6018      	str	r0, [r3, #0]
  HAL_InitTick(uwTickPrio);
 8001a3e:	4b35      	ldr	r3, [pc, #212]	; (8001b14 <HAL_RCC_ClockConfig+0x138>)
 8001a40:	6818      	ldr	r0, [r3, #0]
 8001a42:	f7ff fb9f 	bl	8001184 <HAL_InitTick>
  return HAL_OK;
 8001a46:	2000      	movs	r0, #0
 8001a48:	e7ce      	b.n	80019e8 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a4a:	6813      	ldr	r3, [r2, #0]
 8001a4c:	f023 030f 	bic.w	r3, r3, #15
 8001a50:	430b      	orrs	r3, r1
 8001a52:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a54:	6813      	ldr	r3, [r2, #0]
 8001a56:	f003 030f 	and.w	r3, r3, #15
 8001a5a:	428b      	cmp	r3, r1
 8001a5c:	d1c3      	bne.n	80019e6 <HAL_RCC_ClockConfig+0xa>
 8001a5e:	e7cb      	b.n	80019f8 <HAL_RCC_ClockConfig+0x1c>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a60:	f011 0f04 	tst.w	r1, #4
 8001a64:	4b28      	ldr	r3, [pc, #160]	; (8001b08 <HAL_RCC_ClockConfig+0x12c>)
 8001a66:	d003      	beq.n	8001a70 <HAL_RCC_ClockConfig+0x94>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8001a6e:	609a      	str	r2, [r3, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a70:	070e      	lsls	r6, r1, #28
 8001a72:	d503      	bpl.n	8001a7c <HAL_RCC_ClockConfig+0xa0>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a74:	689a      	ldr	r2, [r3, #8]
 8001a76:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8001a7a:	609a      	str	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a7c:	689a      	ldr	r2, [r3, #8]
 8001a7e:	68a0      	ldr	r0, [r4, #8]
 8001a80:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a84:	4302      	orrs	r2, r0
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	e7b9      	b.n	80019fe <HAL_RCC_ClockConfig+0x22>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a8a:	6861      	ldr	r1, [r4, #4]
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <HAL_RCC_ClockConfig+0x12c>)
 8001a8e:	2901      	cmp	r1, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a90:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a92:	d11b      	bne.n	8001acc <HAL_RCC_ClockConfig+0xf0>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a94:	f412 3f00 	tst.w	r2, #131072	; 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a98:	d0a5      	beq.n	80019e6 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a9a:	689a      	ldr	r2, [r3, #8]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a9c:	f241 3888 	movw	r8, #5000	; 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa0:	4f19      	ldr	r7, [pc, #100]	; (8001b08 <HAL_RCC_ClockConfig+0x12c>)
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aa2:	f022 0203 	bic.w	r2, r2, #3
 8001aa6:	430a      	orrs	r2, r1
 8001aa8:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8001aaa:	f7ff fba7 	bl	80011fc <HAL_GetTick>
 8001aae:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	6862      	ldr	r2, [r4, #4]
 8001ab4:	f003 030c 	and.w	r3, r3, #12
 8001ab8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001abc:	d0a1      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001abe:	f7ff fb9d 	bl	80011fc <HAL_GetTick>
 8001ac2:	1b80      	subs	r0, r0, r6
 8001ac4:	4540      	cmp	r0, r8
 8001ac6:	d9f3      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0xd4>
        return HAL_TIMEOUT;
 8001ac8:	2003      	movs	r0, #3
 8001aca:	e78d      	b.n	80019e8 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001acc:	2902      	cmp	r1, #2
 8001ace:	d102      	bne.n	8001ad6 <HAL_RCC_ClockConfig+0xfa>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ad0:	f012 7f00 	tst.w	r2, #33554432	; 0x2000000
 8001ad4:	e7e0      	b.n	8001a98 <HAL_RCC_ClockConfig+0xbc>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ad6:	f012 0f02 	tst.w	r2, #2
 8001ada:	e7dd      	b.n	8001a98 <HAL_RCC_ClockConfig+0xbc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001adc:	6813      	ldr	r3, [r2, #0]
 8001ade:	f023 030f 	bic.w	r3, r3, #15
 8001ae2:	432b      	orrs	r3, r5
 8001ae4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ae6:	6813      	ldr	r3, [r2, #0]
 8001ae8:	f003 030f 	and.w	r3, r3, #15
 8001aec:	42ab      	cmp	r3, r5
 8001aee:	f47f af7a 	bne.w	80019e6 <HAL_RCC_ClockConfig+0xa>
 8001af2:	e78c      	b.n	8001a0e <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001af4:	4904      	ldr	r1, [pc, #16]	; (8001b08 <HAL_RCC_ClockConfig+0x12c>)
 8001af6:	68e0      	ldr	r0, [r4, #12]
 8001af8:	688b      	ldr	r3, [r1, #8]
 8001afa:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8001afe:	4303      	orrs	r3, r0
 8001b00:	608b      	str	r3, [r1, #8]
 8001b02:	e787      	b.n	8001a14 <HAL_RCC_ClockConfig+0x38>
 8001b04:	40023c00 	.word	0x40023c00
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	0800cb0c 	.word	0x0800cb0c
 8001b10:	20000000 	.word	0x20000000
 8001b14:	20000008 	.word	0x20000008

08001b18 <HAL_RCC_GetHCLKFreq>:
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
}
 8001b18:	4b01      	ldr	r3, [pc, #4]	; (8001b20 <HAL_RCC_GetHCLKFreq+0x8>)
 8001b1a:	6818      	ldr	r0, [r3, #0]
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000000 	.word	0x20000000

08001b24 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b24:	4b04      	ldr	r3, [pc, #16]	; (8001b38 <HAL_RCC_GetPCLK1Freq+0x14>)
 8001b26:	4a05      	ldr	r2, [pc, #20]	; (8001b3c <HAL_RCC_GetPCLK1Freq+0x18>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8001b2e:	5cd3      	ldrb	r3, [r2, r3]
 8001b30:	4a03      	ldr	r2, [pc, #12]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001b32:	6810      	ldr	r0, [r2, #0]
}
 8001b34:	40d8      	lsrs	r0, r3
 8001b36:	4770      	bx	lr
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	0800cb1c 	.word	0x0800cb1c
 8001b40:	20000000 	.word	0x20000000

08001b44 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <HAL_RCC_GetPCLK2Freq+0x14>)
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <HAL_RCC_GetPCLK2Freq+0x18>)
 8001b48:	689b      	ldr	r3, [r3, #8]
 8001b4a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8001b4e:	5cd3      	ldrb	r3, [r2, r3]
 8001b50:	4a03      	ldr	r2, [pc, #12]	; (8001b60 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b52:	6810      	ldr	r0, [r2, #0]
}
 8001b54:	40d8      	lsrs	r0, r3
 8001b56:	4770      	bx	lr
 8001b58:	40023800 	.word	0x40023800
 8001b5c:	0800cb1c 	.word	0x0800cb1c
 8001b60:	20000000 	.word	0x20000000

08001b64 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b64:	6803      	ldr	r3, [r0, #0]
{
 8001b66:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b6a:	f013 0601 	ands.w	r6, r3, #1
{
 8001b6e:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b70:	d00b      	beq.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x26>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b72:	4ab1      	ldr	r2, [pc, #708]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001b74:	6891      	ldr	r1, [r2, #8]
 8001b76:	f421 0100 	bic.w	r1, r1, #8388608	; 0x800000
 8001b7a:	6091      	str	r1, [r2, #8]
 8001b7c:	6b46      	ldr	r6, [r0, #52]	; 0x34
 8001b7e:	6891      	ldr	r1, [r2, #8]
 8001b80:	4331      	orrs	r1, r6

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b82:	fab6 f686 	clz	r6, r6
 8001b86:	0976      	lsrs	r6, r6, #5
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b88:	6091      	str	r1, [r2, #8]
      plli2sused = 1;
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b8a:	f413 2500 	ands.w	r5, r3, #524288	; 0x80000
 8001b8e:	d012      	beq.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b90:	49a9      	ldr	r1, [pc, #676]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001b92:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001b94:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b98:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b9c:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
    {
      plli2sused = 1;
 8001ba0:	bf08      	it	eq
 8001ba2:	2601      	moveq	r6, #1
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ba4:	ea42 0205 	orr.w	r2, r2, r5
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001ba8:	bf16      	itet	ne
 8001baa:	fab5 f585 	clzne	r5, r5
  uint32_t pllsaiused = 0;
 8001bae:	2500      	moveq	r5, #0
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001bb0:	096d      	lsrne	r5, r5, #5
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001bb2:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
      pllsaiused = 1;
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001bb6:	02d9      	lsls	r1, r3, #11
 8001bb8:	d510      	bpl.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x78>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001bba:	489f      	ldr	r0, [pc, #636]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001bbc:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001bbe:	f8d0 208c 	ldr.w	r2, [r0, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001bc2:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001bc6:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001bca:	ea42 0201 	orr.w	r2, r2, r1
 8001bce:	f8c0 208c 	str.w	r2, [r0, #140]	; 0x8c
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001bd2:	f000 81aa 	beq.w	8001f2a <HAL_RCCEx_PeriphCLKConfig+0x3c6>
      plli2sused = 1;
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
    {
      pllsaiused = 1;
 8001bd6:	2900      	cmp	r1, #0
 8001bd8:	bf08      	it	eq
 8001bda:	2501      	moveq	r5, #1
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
  {
      plli2sused = 1;
 8001bdc:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
 8001be0:	bf18      	it	ne
 8001be2:	2601      	movne	r6, #1
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001be4:	069a      	lsls	r2, r3, #26
 8001be6:	d532      	bpl.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001be8:	4b93      	ldr	r3, [pc, #588]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001bea:	4f94      	ldr	r7, [pc, #592]	; (8001e3c <HAL_RCCEx_PeriphCLKConfig+0x2d8>)
    __HAL_RCC_PWR_CLK_ENABLE();
 8001bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001bee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001bf2:	641a      	str	r2, [r3, #64]	; 0x40
 8001bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	9b01      	ldr	r3, [sp, #4]
    PWR->CR1 |= PWR_CR1_DBP;
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c04:	603b      	str	r3, [r7, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c06:	f7ff faf9 	bl	80011fc <HAL_GetTick>
 8001c0a:	4680      	mov	r8, r0

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	05db      	lsls	r3, r3, #23
 8001c10:	f140 818d 	bpl.w	8001f2e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
        return HAL_TIMEOUT;
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c14:	4f88      	ldr	r7, [pc, #544]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c16:	6b22      	ldr	r2, [r4, #48]	; 0x30
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c18:	6f3b      	ldr	r3, [r7, #112]	; 0x70
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c1a:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001c1e:	f040 8191 	bne.w	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c22:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001c24:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8001c28:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8001c2c:	4a82      	ldr	r2, [pc, #520]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001c2e:	f040 81ae 	bne.w	8001f8e <HAL_RCCEx_PeriphCLKConfig+0x42a>
 8001c32:	6891      	ldr	r1, [r2, #8]
 8001c34:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8001c38:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001c3c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8001c40:	4301      	orrs	r1, r0
 8001c42:	6091      	str	r1, [r2, #8]
 8001c44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c48:	6f11      	ldr	r1, [r2, #112]	; 0x70
 8001c4a:	430b      	orrs	r3, r1
 8001c4c:	6713      	str	r3, [r2, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	06da      	lsls	r2, r3, #27
 8001c52:	d50c      	bpl.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c54:	4a78      	ldr	r2, [pc, #480]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001c56:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001c5a:	f021 7180 	bic.w	r1, r1, #16777216	; 0x1000000
 8001c5e:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
 8001c62:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8001c66:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001c68:	4301      	orrs	r1, r0
 8001c6a:	f8c2 108c 	str.w	r1, [r2, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c6e:	045f      	lsls	r7, r3, #17
 8001c70:	d508      	bpl.n	8001c84 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c72:	4971      	ldr	r1, [pc, #452]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001c74:	6e60      	ldr	r0, [r4, #100]	; 0x64
 8001c76:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c7a:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001c7e:	4302      	orrs	r2, r0
 8001c80:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001c84:	0418      	lsls	r0, r3, #16
 8001c86:	d508      	bpl.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001c88:	496b      	ldr	r1, [pc, #428]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001c8a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8001c8c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001c90:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001c94:	4302      	orrs	r2, r0
 8001c96:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001c9a:	03d9      	lsls	r1, r3, #15
 8001c9c:	d508      	bpl.n	8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001c9e:	4966      	ldr	r1, [pc, #408]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ca0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001ca2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ca6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001caa:	4302      	orrs	r2, r0
 8001cac:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001cb0:	039a      	lsls	r2, r3, #14
 8001cb2:	d508      	bpl.n	8001cc6 <HAL_RCCEx_PeriphCLKConfig+0x162>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001cb4:	4960      	ldr	r1, [pc, #384]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001cb6:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001cb8:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001cbc:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 8001cc0:	4302      	orrs	r2, r0
 8001cc2:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001cc6:	065f      	lsls	r7, r3, #25
 8001cc8:	d508      	bpl.n	8001cdc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001cca:	495b      	ldr	r1, [pc, #364]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ccc:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8001cce:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001cd2:	f022 0203 	bic.w	r2, r2, #3
 8001cd6:	4302      	orrs	r2, r0
 8001cd8:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001cdc:	0618      	lsls	r0, r3, #24
 8001cde:	d508      	bpl.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ce0:	4955      	ldr	r1, [pc, #340]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001ce2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8001ce4:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001ce8:	f022 020c 	bic.w	r2, r2, #12
 8001cec:	4302      	orrs	r2, r0
 8001cee:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001cf2:	05d9      	lsls	r1, r3, #23
 8001cf4:	d508      	bpl.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001cf6:	4950      	ldr	r1, [pc, #320]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001cf8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8001cfa:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001cfe:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 8001d02:	4302      	orrs	r2, r0
 8001d04:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d08:	059a      	lsls	r2, r3, #22
 8001d0a:	d508      	bpl.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d0c:	494a      	ldr	r1, [pc, #296]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001d0e:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8001d10:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d14:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8001d18:	4302      	orrs	r2, r0
 8001d1a:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001d1e:	055f      	lsls	r7, r3, #21
 8001d20:	d508      	bpl.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x1d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001d22:	4945      	ldr	r1, [pc, #276]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001d24:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001d26:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d2a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8001d2e:	4302      	orrs	r2, r0
 8001d30:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001d34:	0518      	lsls	r0, r3, #20
 8001d36:	d508      	bpl.n	8001d4a <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001d38:	493f      	ldr	r1, [pc, #252]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001d3a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d3c:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d40:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001d44:	4302      	orrs	r2, r0
 8001d46:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001d4a:	04d9      	lsls	r1, r3, #19
 8001d4c:	d508      	bpl.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001d4e:	493a      	ldr	r1, [pc, #232]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001d50:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 8001d52:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d56:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001d5a:	4302      	orrs	r2, r0
 8001d5c:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001d60:	049a      	lsls	r2, r3, #18
 8001d62:	d508      	bpl.n	8001d76 <HAL_RCCEx_PeriphCLKConfig+0x212>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001d64:	4934      	ldr	r1, [pc, #208]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001d66:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8001d68:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d6c:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8001d70:	4302      	orrs	r2, r0
 8001d72:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001d76:	025f      	lsls	r7, r3, #9
 8001d78:	d508      	bpl.n	8001d8c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001d7a:	492f      	ldr	r1, [pc, #188]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001d7c:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001d7e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001d82:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001d86:	4302      	orrs	r2, r0
 8001d88:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001d8c:	0298      	lsls	r0, r3, #10
 8001d8e:	d50c      	bpl.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x246>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d90:	4829      	ldr	r0, [pc, #164]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001d92:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8001d94:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
    {
      pllsaiused = 1;
 8001d98:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001d9c:	f022 6200 	bic.w	r2, r2, #134217728	; 0x8000000
      pllsaiused = 1;
 8001da0:	bf08      	it	eq
 8001da2:	2501      	moveq	r5, #1
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001da4:	430a      	orrs	r2, r1
 8001da6:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
  {
    pllsaiused = 1;
 8001daa:	f013 0f08 	tst.w	r3, #8
 8001dae:	bf18      	it	ne
 8001db0:	2501      	movne	r5, #1
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001db2:	0359      	lsls	r1, r3, #13
 8001db4:	d508      	bpl.n	8001dc8 <HAL_RCCEx_PeriphCLKConfig+0x264>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001db6:	4920      	ldr	r1, [pc, #128]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001db8:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8001dba:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001dbe:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001dc2:	4302      	orrs	r2, r0
 8001dc4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001dc8:	021a      	lsls	r2, r3, #8
 8001dca:	d509      	bpl.n	8001de0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001dcc:	491a      	ldr	r1, [pc, #104]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001dce:	f8d4 0080 	ldr.w	r0, [r4, #128]	; 0x80
 8001dd2:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001dd6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8001dda:	4302      	orrs	r2, r0
 8001ddc:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001de0:	015f      	lsls	r7, r3, #5
 8001de2:	d509      	bpl.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001de4:	4914      	ldr	r1, [pc, #80]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001de6:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
 8001dea:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90
 8001dee:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001df2:	4302      	orrs	r2, r0
 8001df4:	f8c1 2090 	str.w	r2, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001df8:	0118      	lsls	r0, r3, #4
 8001dfa:	d509      	bpl.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001dfc:	490e      	ldr	r1, [pc, #56]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001dfe:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8001e02:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001e06:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
 8001e0a:	4302      	orrs	r2, r0
 8001e0c:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001e10:	00d9      	lsls	r1, r3, #3
 8001e12:	d509      	bpl.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001e14:	4908      	ldr	r1, [pc, #32]	; (8001e38 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8001e16:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
 8001e1a:	f8d1 208c 	ldr.w	r2, [r1, #140]	; 0x8c
 8001e1e:	f022 6280 	bic.w	r2, r2, #67108864	; 0x4000000
 8001e22:	4302      	orrs	r2, r0
 8001e24:	f8c1 208c 	str.w	r2, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001e28:	2e01      	cmp	r6, #1
 8001e2a:	f000 80b4 	beq.w	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001e2e:	019a      	lsls	r2, r3, #6
 8001e30:	f100 80b1 	bmi.w	8001f96 <HAL_RCCEx_PeriphCLKConfig+0x432>
 8001e34:	e004      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 8001e36:	bf00      	nop
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40007000 	.word	0x40007000
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8001e40:	2d01      	cmp	r5, #1
 8001e42:	d170      	bne.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x3c2>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8001e44:	4d9d      	ldr	r5, [pc, #628]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001e46:	682b      	ldr	r3, [r5, #0]
 8001e48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	602b      	str	r3, [r5, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e4e:	f7ff f9d5 	bl	80011fc <HAL_GetTick>
 8001e52:	4606      	mov	r6, r0

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8001e54:	682b      	ldr	r3, [r5, #0]
 8001e56:	009f      	lsls	r7, r3, #2
 8001e58:	f100 8121 	bmi.w	800209e <HAL_RCCEx_PeriphCLKConfig+0x53a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8001e5c:	6821      	ldr	r1, [r4, #0]
 8001e5e:	030e      	lsls	r6, r1, #12
 8001e60:	d501      	bpl.n	8001e66 <HAL_RCCEx_PeriphCLKConfig+0x302>
 8001e62:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001e64:	b11b      	cbz	r3, 8001e6e <HAL_RCCEx_PeriphCLKConfig+0x30a>
 8001e66:	02cd      	lsls	r5, r1, #11
 8001e68:	d51d      	bpl.n	8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x342>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8001e6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001e6c:	b9db      	cbnz	r3, 8001ea6 <HAL_RCCEx_PeriphCLKConfig+0x342>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001e6e:	4a93      	ldr	r2, [pc, #588]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001e70:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001e74:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8001e78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e7c:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001e80:	4303      	orrs	r3, r0
 8001e82:	6960      	ldr	r0, [r4, #20]
 8001e84:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001e88:	69a0      	ldr	r0, [r4, #24]
 8001e8a:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8001e8e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8001e92:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001e96:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001e98:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8001e9c:	3801      	subs	r0, #1
 8001e9e:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 8001ea2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8001ea6:	0288      	lsls	r0, r1, #10
 8001ea8:	d515      	bpl.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8001eaa:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001eac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001eb0:	d111      	bne.n	8001ed6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001eb2:	4a82      	ldr	r2, [pc, #520]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001eb4:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8001eb8:	f8d2 0088 	ldr.w	r0, [r2, #136]	; 0x88

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8001ebc:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8001ec0:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8001ec4:	4303      	orrs	r3, r0
 8001ec6:	6960      	ldr	r0, [r4, #20]
 8001ec8:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8001ecc:	6a20      	ldr	r0, [r4, #32]
 8001ece:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8001ed2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8001ed6:	070a      	lsls	r2, r1, #28
 8001ed8:	d519      	bpl.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x3aa>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8001eda:	4a78      	ldr	r2, [pc, #480]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001edc:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8001ee0:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8001ee4:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001ee8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001eec:	430b      	orrs	r3, r1
 8001eee:	6961      	ldr	r1, [r4, #20]
 8001ef0:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001ef4:	69e1      	ldr	r1, [r4, #28]
 8001ef6:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001efa:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8001efe:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 8001f02:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001f04:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001f08:	430b      	orrs	r3, r1
 8001f0a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8001f0e:	4c6b      	ldr	r4, [pc, #428]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001f10:	6823      	ldr	r3, [r4, #0]
 8001f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f16:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f18:	f7ff f970 	bl	80011fc <HAL_GetTick>
 8001f1c:	4605      	mov	r5, r0

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8001f1e:	6823      	ldr	r3, [r4, #0]
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	f140 80c3 	bpl.w	80020ac <HAL_RCCEx_PeriphCLKConfig+0x548>
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001f26:	2000      	movs	r0, #0
 8001f28:	e009      	b.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x3da>
      plli2sused = 1;
 8001f2a:	2601      	movs	r6, #1
 8001f2c:	e656      	b.n	8001bdc <HAL_RCCEx_PeriphCLKConfig+0x78>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2e:	f7ff f965 	bl	80011fc <HAL_GetTick>
 8001f32:	eba0 0008 	sub.w	r0, r0, r8
 8001f36:	2864      	cmp	r0, #100	; 0x64
 8001f38:	f67f ae68 	bls.w	8001c0c <HAL_RCCEx_PeriphCLKConfig+0xa8>
        return HAL_TIMEOUT;
 8001f3c:	2003      	movs	r0, #3
}
 8001f3e:	b003      	add	sp, #12
 8001f40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001f44:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	f43f ae6a 	beq.w	8001c22 <HAL_RCCEx_PeriphCLKConfig+0xbe>
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f50:	6f3a      	ldr	r2, [r7, #112]	; 0x70
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001f52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_FORCE();
 8001f56:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f5a:	673a      	str	r2, [r7, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001f5c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f62:	673a      	str	r2, [r7, #112]	; 0x70
      RCC->BDCR = tmpreg0;
 8001f64:	673b      	str	r3, [r7, #112]	; 0x70
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001f66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f68:	07d8      	lsls	r0, r3, #31
 8001f6a:	f57f ae5a 	bpl.w	8001c22 <HAL_RCCEx_PeriphCLKConfig+0xbe>
        tickstart = HAL_GetTick();
 8001f6e:	f7ff f945 	bl	80011fc <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f72:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001f76:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f7a:	0799      	lsls	r1, r3, #30
 8001f7c:	f53f ae51 	bmi.w	8001c22 <HAL_RCCEx_PeriphCLKConfig+0xbe>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f80:	f7ff f93c 	bl	80011fc <HAL_GetTick>
 8001f84:	eba0 0008 	sub.w	r0, r0, r8
 8001f88:	4548      	cmp	r0, r9
 8001f8a:	d9f5      	bls.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8001f8c:	e7d6      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001f8e:	6891      	ldr	r1, [r2, #8]
 8001f90:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8001f94:	e655      	b.n	8001c42 <HAL_RCCEx_PeriphCLKConfig+0xde>
    __HAL_RCC_PLLI2S_DISABLE();
 8001f96:	4e49      	ldr	r6, [pc, #292]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001f98:	6833      	ldr	r3, [r6, #0]
 8001f9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f9e:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8001fa0:	f7ff f92c 	bl	80011fc <HAL_GetTick>
 8001fa4:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fa6:	6833      	ldr	r3, [r6, #0]
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	d472      	bmi.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001fac:	6822      	ldr	r2, [r4, #0]
 8001fae:	07d7      	lsls	r7, r2, #31
 8001fb0:	d512      	bpl.n	8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x474>
 8001fb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001fb4:	b983      	cbnz	r3, 8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fb6:	f8d6 3084 	ldr.w	r3, [r6, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fba:	f8d6 1084 	ldr.w	r1, [r6, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fbe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001fc2:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 8001fc6:	430b      	orrs	r3, r1
 8001fc8:	6861      	ldr	r1, [r4, #4]
 8001fca:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 8001fce:	68a1      	ldr	r1, [r4, #8]
 8001fd0:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
 8001fd4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001fd8:	0316      	lsls	r6, r2, #12
 8001fda:	d503      	bpl.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8001fdc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001fde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001fe4:	02d0      	lsls	r0, r2, #11
 8001fe6:	d51e      	bpl.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001fe8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001fea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001fee:	d11a      	bne.n	8002026 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001ff0:	4932      	ldr	r1, [pc, #200]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8001ff2:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8001ff6:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8001ffa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ffe:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 8002002:	4303      	orrs	r3, r0
 8002004:	6860      	ldr	r0, [r4, #4]
 8002006:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800200a:	68e0      	ldr	r0, [r4, #12]
 800200c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8002010:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002014:	f8d1 008c 	ldr.w	r0, [r1, #140]	; 0x8c
 8002018:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800201a:	f020 001f 	bic.w	r0, r0, #31
 800201e:	3b01      	subs	r3, #1
 8002020:	4303      	orrs	r3, r0
 8002022:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002026:	01d1      	lsls	r1, r2, #7
 8002028:	d511      	bpl.n	800204e <HAL_RCCEx_PeriphCLKConfig+0x4ea>
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800202a:	4924      	ldr	r1, [pc, #144]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800202c:	f8d1 3084 	ldr.w	r3, [r1, #132]	; 0x84
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002030:	f8d1 0084 	ldr.w	r0, [r1, #132]	; 0x84
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002034:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
 8002038:	f000 40e0 	and.w	r0, r0, #1879048192	; 0x70000000
 800203c:	4303      	orrs	r3, r0
 800203e:	6860      	ldr	r0, [r4, #4]
 8002040:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8002044:	6920      	ldr	r0, [r4, #16]
 8002046:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800204a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800204e:	0192      	lsls	r2, r2, #6
 8002050:	d50d      	bpl.n	800206e <HAL_RCCEx_PeriphCLKConfig+0x50a>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002052:	6923      	ldr	r3, [r4, #16]
 8002054:	6862      	ldr	r2, [r4, #4]
 8002056:	041b      	lsls	r3, r3, #16
 8002058:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 800205c:	68e2      	ldr	r2, [r4, #12]
 800205e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002062:	68a2      	ldr	r2, [r4, #8]
 8002064:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8002068:	4a14      	ldr	r2, [pc, #80]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 800206a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 800206e:	4e13      	ldr	r6, [pc, #76]	; (80020bc <HAL_RCCEx_PeriphCLKConfig+0x558>)
 8002070:	6833      	ldr	r3, [r6, #0]
 8002072:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002076:	6033      	str	r3, [r6, #0]
    tickstart = HAL_GetTick();
 8002078:	f7ff f8c0 	bl	80011fc <HAL_GetTick>
 800207c:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800207e:	6833      	ldr	r3, [r6, #0]
 8002080:	011b      	lsls	r3, r3, #4
 8002082:	f53f aedd 	bmi.w	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002086:	f7ff f8b9 	bl	80011fc <HAL_GetTick>
 800208a:	1bc0      	subs	r0, r0, r7
 800208c:	2864      	cmp	r0, #100	; 0x64
 800208e:	d9f6      	bls.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002090:	e754      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002092:	f7ff f8b3 	bl	80011fc <HAL_GetTick>
 8002096:	1bc0      	subs	r0, r0, r7
 8002098:	2864      	cmp	r0, #100	; 0x64
 800209a:	d984      	bls.n	8001fa6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 800209c:	e74e      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800209e:	f7ff f8ad 	bl	80011fc <HAL_GetTick>
 80020a2:	1b80      	subs	r0, r0, r6
 80020a4:	2864      	cmp	r0, #100	; 0x64
 80020a6:	f67f aed5 	bls.w	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 80020aa:	e747      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80020ac:	f7ff f8a6 	bl	80011fc <HAL_GetTick>
 80020b0:	1b40      	subs	r0, r0, r5
 80020b2:	2864      	cmp	r0, #100	; 0x64
 80020b4:	f67f af33 	bls.w	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80020b8:	e740      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x3d8>
 80020ba:	bf00      	nop
 80020bc:	40023800 	.word	0x40023800

080020c0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020c0:	b538      	push	{r3, r4, r5, lr}
 80020c2:	4604      	mov	r4, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020c4:	69c0      	ldr	r0, [r0, #28]
 80020c6:	6921      	ldr	r1, [r4, #16]
 80020c8:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020ca:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020cc:	430a      	orrs	r2, r1
 80020ce:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020d0:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020d2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020d4:	498e      	ldr	r1, [pc, #568]	; (8002310 <UART_SetConfig+0x250>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80020d6:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020d8:	4029      	ands	r1, r5
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  tmpreg |= huart->Init.OneBitSampling;
 80020da:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020dc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020de:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80020e0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020e2:	685a      	ldr	r2, [r3, #4]
 80020e4:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80020e8:	430a      	orrs	r2, r1
 80020ea:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80020ec:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020ee:	6899      	ldr	r1, [r3, #8]
  tmpreg |= huart->Init.OneBitSampling;
 80020f0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80020f2:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80020fa:	4a86      	ldr	r2, [pc, #536]	; (8002314 <UART_SetConfig+0x254>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d117      	bne.n	8002130 <UART_SetConfig+0x70>
 8002100:	4b85      	ldr	r3, [pc, #532]	; (8002318 <UART_SetConfig+0x258>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	f003 0303 	and.w	r3, r3, #3
 800210a:	3b01      	subs	r3, #1
 800210c:	2b02      	cmp	r3, #2
 800210e:	f200 80e2 	bhi.w	80022d6 <UART_SetConfig+0x216>
 8002112:	4a82      	ldr	r2, [pc, #520]	; (800231c <UART_SetConfig+0x25c>)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002114:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002118:	5cd3      	ldrb	r3, [r2, r3]
 800211a:	f040 80b3 	bne.w	8002284 <UART_SetConfig+0x1c4>
  {
    switch (clocksource)
 800211e:	2b08      	cmp	r3, #8
 8002120:	d822      	bhi.n	8002168 <UART_SetConfig+0xa8>
 8002122:	e8df f003 	tbb	[pc, r3]
 8002126:	db90      	.short	0xdb90
 8002128:	21d52198 	.word	0x21d52198
 800212c:	2121      	.short	0x2121
 800212e:	99          	.byte	0x99
 800212f:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002130:	4a7b      	ldr	r2, [pc, #492]	; (8002320 <UART_SetConfig+0x260>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d106      	bne.n	8002144 <UART_SetConfig+0x84>
 8002136:	4b78      	ldr	r3, [pc, #480]	; (8002318 <UART_SetConfig+0x258>)
 8002138:	4a7a      	ldr	r2, [pc, #488]	; (8002324 <UART_SetConfig+0x264>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213e:	f003 030c 	and.w	r3, r3, #12
 8002142:	e7e7      	b.n	8002114 <UART_SetConfig+0x54>
 8002144:	4a78      	ldr	r2, [pc, #480]	; (8002328 <UART_SetConfig+0x268>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d118      	bne.n	800217c <UART_SetConfig+0xbc>
 800214a:	4b73      	ldr	r3, [pc, #460]	; (8002318 <UART_SetConfig+0x258>)
 800214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002150:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002154:	2b20      	cmp	r3, #32
 8002156:	f000 80b3 	beq.w	80022c0 <UART_SetConfig+0x200>
 800215a:	d807      	bhi.n	800216c <UART_SetConfig+0xac>
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80c0 	beq.w	80022e2 <UART_SetConfig+0x222>
 8002162:	2b10      	cmp	r3, #16
 8002164:	f000 80b1 	beq.w	80022ca <UART_SetConfig+0x20a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002168:	2001      	movs	r0, #1
 800216a:	e070      	b.n	800224e <UART_SetConfig+0x18e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800216c:	2b30      	cmp	r3, #48	; 0x30
 800216e:	d1fb      	bne.n	8002168 <UART_SetConfig+0xa8>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002170:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8002174:	d070      	beq.n	8002258 <UART_SetConfig+0x198>
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
        break;
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002176:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800217a:	e0b9      	b.n	80022f0 <UART_SetConfig+0x230>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800217c:	4a6b      	ldr	r2, [pc, #428]	; (800232c <UART_SetConfig+0x26c>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d10f      	bne.n	80021a2 <UART_SetConfig+0xe2>
 8002182:	4b65      	ldr	r3, [pc, #404]	; (8002318 <UART_SetConfig+0x258>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800218c:	2b80      	cmp	r3, #128	; 0x80
 800218e:	f000 8097 	beq.w	80022c0 <UART_SetConfig+0x200>
 8002192:	d804      	bhi.n	800219e <UART_SetConfig+0xde>
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 80a4 	beq.w	80022e2 <UART_SetConfig+0x222>
 800219a:	2b40      	cmp	r3, #64	; 0x40
 800219c:	e7e2      	b.n	8002164 <UART_SetConfig+0xa4>
 800219e:	2bc0      	cmp	r3, #192	; 0xc0
 80021a0:	e7e5      	b.n	800216e <UART_SetConfig+0xae>
 80021a2:	4a63      	ldr	r2, [pc, #396]	; (8002330 <UART_SetConfig+0x270>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d112      	bne.n	80021ce <UART_SetConfig+0x10e>
 80021a8:	4b5b      	ldr	r3, [pc, #364]	; (8002318 <UART_SetConfig+0x258>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021b6:	f000 8083 	beq.w	80022c0 <UART_SetConfig+0x200>
 80021ba:	d805      	bhi.n	80021c8 <UART_SetConfig+0x108>
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f000 8090 	beq.w	80022e2 <UART_SetConfig+0x222>
 80021c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80021c6:	e7cd      	b.n	8002164 <UART_SetConfig+0xa4>
 80021c8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80021cc:	e7cf      	b.n	800216e <UART_SetConfig+0xae>
 80021ce:	4a59      	ldr	r2, [pc, #356]	; (8002334 <UART_SetConfig+0x274>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d110      	bne.n	80021f6 <UART_SetConfig+0x136>
 80021d4:	4b50      	ldr	r3, [pc, #320]	; (8002318 <UART_SetConfig+0x258>)
 80021d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021da:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80021de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021e2:	d06d      	beq.n	80022c0 <UART_SetConfig+0x200>
 80021e4:	d804      	bhi.n	80021f0 <UART_SetConfig+0x130>
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d075      	beq.n	80022d6 <UART_SetConfig+0x216>
 80021ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ee:	e7b9      	b.n	8002164 <UART_SetConfig+0xa4>
 80021f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80021f4:	e7bb      	b.n	800216e <UART_SetConfig+0xae>
 80021f6:	4a50      	ldr	r2, [pc, #320]	; (8002338 <UART_SetConfig+0x278>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d110      	bne.n	800221e <UART_SetConfig+0x15e>
 80021fc:	4b46      	ldr	r3, [pc, #280]	; (8002318 <UART_SetConfig+0x258>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002206:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800220a:	d059      	beq.n	80022c0 <UART_SetConfig+0x200>
 800220c:	d804      	bhi.n	8002218 <UART_SetConfig+0x158>
 800220e:	2b00      	cmp	r3, #0
 8002210:	d067      	beq.n	80022e2 <UART_SetConfig+0x222>
 8002212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002216:	e7a5      	b.n	8002164 <UART_SetConfig+0xa4>
 8002218:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800221c:	e7a7      	b.n	800216e <UART_SetConfig+0xae>
 800221e:	4a47      	ldr	r2, [pc, #284]	; (800233c <UART_SetConfig+0x27c>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d1a1      	bne.n	8002168 <UART_SetConfig+0xa8>
 8002224:	4b3c      	ldr	r3, [pc, #240]	; (8002318 <UART_SetConfig+0x258>)
 8002226:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800222e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002232:	d045      	beq.n	80022c0 <UART_SetConfig+0x200>
 8002234:	d804      	bhi.n	8002240 <UART_SetConfig+0x180>
 8002236:	2b00      	cmp	r3, #0
 8002238:	d053      	beq.n	80022e2 <UART_SetConfig+0x222>
 800223a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800223e:	e791      	b.n	8002164 <UART_SetConfig+0xa4>
 8002240:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002244:	e793      	b.n	800216e <UART_SetConfig+0xae>
        pclk = HAL_RCC_GetPCLK1Freq();
 8002246:	f7ff fc6d 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800224a:	b928      	cbnz	r0, 8002258 <UART_SetConfig+0x198>
 800224c:	2000      	movs	r0, #0
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800224e:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8002250:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68

  return ret;
}
 8002254:	bd38      	pop	{r3, r4, r5, pc}
        pclk = (uint32_t) HSI_VALUE;
 8002256:	483a      	ldr	r0, [pc, #232]	; (8002340 <UART_SetConfig+0x280>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002258:	6862      	ldr	r2, [r4, #4]
 800225a:	0853      	lsrs	r3, r2, #1
 800225c:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8002260:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002264:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8002268:	f1a3 0110 	sub.w	r1, r3, #16
 800226c:	4291      	cmp	r1, r2
 800226e:	f63f af7b 	bhi.w	8002168 <UART_SetConfig+0xa8>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002272:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002276:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800227a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800227c:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800227e:	4313      	orrs	r3, r2
 8002280:	60cb      	str	r3, [r1, #12]
 8002282:	e7e3      	b.n	800224c <UART_SetConfig+0x18c>
    switch (clocksource)
 8002284:	2b08      	cmp	r3, #8
 8002286:	f63f af6f 	bhi.w	8002168 <UART_SetConfig+0xa8>
 800228a:	a201      	add	r2, pc, #4	; (adr r2, 8002290 <UART_SetConfig+0x1d0>)
 800228c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002290:	080022e9 	.word	0x080022e9
 8002294:	080022b5 	.word	0x080022b5
 8002298:	080022c7 	.word	0x080022c7
 800229c:	08002169 	.word	0x08002169
 80022a0:	080022bb 	.word	0x080022bb
 80022a4:	08002169 	.word	0x08002169
 80022a8:	08002169 	.word	0x08002169
 80022ac:	08002169 	.word	0x08002169
 80022b0:	08002177 	.word	0x08002177
        pclk = HAL_RCC_GetPCLK2Freq();
 80022b4:	f7ff fc46 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
        break;
 80022b8:	e018      	b.n	80022ec <UART_SetConfig+0x22c>
        pclk = HAL_RCC_GetSysClockFreq();
 80022ba:	f7ff fb61 	bl	8001980 <HAL_RCC_GetSysClockFreq>
        break;
 80022be:	e015      	b.n	80022ec <UART_SetConfig+0x22c>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80022c4:	d0c7      	beq.n	8002256 <UART_SetConfig+0x196>
        pclk = (uint32_t) HSI_VALUE;
 80022c6:	481e      	ldr	r0, [pc, #120]	; (8002340 <UART_SetConfig+0x280>)
 80022c8:	e012      	b.n	80022f0 <UART_SetConfig+0x230>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022ca:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80022ce:	d1f4      	bne.n	80022ba <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetSysClockFreq();
 80022d0:	f7ff fb56 	bl	8001980 <HAL_RCC_GetSysClockFreq>
        break;
 80022d4:	e7b9      	b.n	800224a <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022d6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80022da:	d1eb      	bne.n	80022b4 <UART_SetConfig+0x1f4>
        pclk = HAL_RCC_GetPCLK2Freq();
 80022dc:	f7ff fc32 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
        break;
 80022e0:	e7b3      	b.n	800224a <UART_SetConfig+0x18a>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80022e2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80022e6:	d0ae      	beq.n	8002246 <UART_SetConfig+0x186>
        pclk = HAL_RCC_GetPCLK1Freq();
 80022e8:	f7ff fc1c 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80022ec:	2800      	cmp	r0, #0
 80022ee:	d0ad      	beq.n	800224c <UART_SetConfig+0x18c>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80022f0:	6862      	ldr	r2, [r4, #4]
 80022f2:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 80022f6:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80022fa:	f64f 72ef 	movw	r2, #65519	; 0xffef
 80022fe:	f1a3 0110 	sub.w	r1, r3, #16
 8002302:	4291      	cmp	r1, r2
 8002304:	f63f af30 	bhi.w	8002168 <UART_SetConfig+0xa8>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002308:	6822      	ldr	r2, [r4, #0]
 800230a:	60d3      	str	r3, [r2, #12]
 800230c:	e79e      	b.n	800224c <UART_SetConfig+0x18c>
 800230e:	bf00      	nop
 8002310:	efff69f3 	.word	0xefff69f3
 8002314:	40011000 	.word	0x40011000
 8002318:	40023800 	.word	0x40023800
 800231c:	0800cb24 	.word	0x0800cb24
 8002320:	40004400 	.word	0x40004400
 8002324:	0800cb27 	.word	0x0800cb27
 8002328:	40004800 	.word	0x40004800
 800232c:	40004c00 	.word	0x40004c00
 8002330:	40005000 	.word	0x40005000
 8002334:	40011400 	.word	0x40011400
 8002338:	40007800 	.word	0x40007800
 800233c:	40007c00 	.word	0x40007c00
 8002340:	00f42400 	.word	0x00f42400

08002344 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002344:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002346:	07da      	lsls	r2, r3, #31
{
 8002348:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800234a:	d506      	bpl.n	800235a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800234c:	6801      	ldr	r1, [r0, #0]
 800234e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002350:	684a      	ldr	r2, [r1, #4]
 8002352:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8002356:	4322      	orrs	r2, r4
 8002358:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800235a:	079c      	lsls	r4, r3, #30
 800235c:	d506      	bpl.n	800236c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800235e:	6801      	ldr	r1, [r0, #0]
 8002360:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002362:	684a      	ldr	r2, [r1, #4]
 8002364:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002368:	4322      	orrs	r2, r4
 800236a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800236c:	0759      	lsls	r1, r3, #29
 800236e:	d506      	bpl.n	800237e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002370:	6801      	ldr	r1, [r0, #0]
 8002372:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002374:	684a      	ldr	r2, [r1, #4]
 8002376:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800237a:	4322      	orrs	r2, r4
 800237c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800237e:	071a      	lsls	r2, r3, #28
 8002380:	d506      	bpl.n	8002390 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002382:	6801      	ldr	r1, [r0, #0]
 8002384:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8002386:	684a      	ldr	r2, [r1, #4]
 8002388:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800238c:	4322      	orrs	r2, r4
 800238e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002390:	06dc      	lsls	r4, r3, #27
 8002392:	d506      	bpl.n	80023a2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002394:	6801      	ldr	r1, [r0, #0]
 8002396:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8002398:	688a      	ldr	r2, [r1, #8]
 800239a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800239e:	4322      	orrs	r2, r4
 80023a0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80023a2:	0699      	lsls	r1, r3, #26
 80023a4:	d506      	bpl.n	80023b4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80023a6:	6801      	ldr	r1, [r0, #0]
 80023a8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80023aa:	688a      	ldr	r2, [r1, #8]
 80023ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023b0:	4322      	orrs	r2, r4
 80023b2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80023b4:	065a      	lsls	r2, r3, #25
 80023b6:	d510      	bpl.n	80023da <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023b8:	6801      	ldr	r1, [r0, #0]
 80023ba:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80023bc:	684a      	ldr	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023be:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80023c2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80023c6:	ea42 0204 	orr.w	r2, r2, r4
 80023ca:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80023cc:	d105      	bne.n	80023da <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80023ce:	684a      	ldr	r2, [r1, #4]
 80023d0:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80023d2:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80023d6:	4322      	orrs	r2, r4
 80023d8:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80023da:	061b      	lsls	r3, r3, #24
 80023dc:	d506      	bpl.n	80023ec <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80023de:	6802      	ldr	r2, [r0, #0]
 80023e0:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80023e2:	6853      	ldr	r3, [r2, #4]
 80023e4:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80023e8:	430b      	orrs	r3, r1
 80023ea:	6053      	str	r3, [r2, #4]
  }
}
 80023ec:	bd10      	pop	{r4, pc}

080023ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80023ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80023f2:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80023f6:	4604      	mov	r4, r0
 80023f8:	460e      	mov	r6, r1
 80023fa:	4615      	mov	r5, r2
 80023fc:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023fe:	6822      	ldr	r2, [r4, #0]
 8002400:	69d3      	ldr	r3, [r2, #28]
 8002402:	ea36 0303 	bics.w	r3, r6, r3
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	42ab      	cmp	r3, r5
 800240e:	d001      	beq.n	8002414 <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 8002410:	2000      	movs	r0, #0
 8002412:	e026      	b.n	8002462 <UART_WaitOnFlagUntilTimeout+0x74>
    if (Timeout != HAL_MAX_DELAY)
 8002414:	f1b8 3fff 	cmp.w	r8, #4294967295
 8002418:	d0f2      	beq.n	8002400 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800241a:	f7fe feef 	bl	80011fc <HAL_GetTick>
 800241e:	1bc0      	subs	r0, r0, r7
 8002420:	4540      	cmp	r0, r8
 8002422:	6820      	ldr	r0, [r4, #0]
 8002424:	d802      	bhi.n	800242c <UART_WaitOnFlagUntilTimeout+0x3e>
 8002426:	f1b8 0f00 	cmp.w	r8, #0
 800242a:	d11c      	bne.n	8002466 <UART_WaitOnFlagUntilTimeout+0x78>
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800242c:	e850 3f00 	ldrex	r3, [r0]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002430:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002434:	e840 3200 	strex	r2, r3, [r0]
 8002438:	2a00      	cmp	r2, #0
 800243a:	d1f7      	bne.n	800242c <UART_WaitOnFlagUntilTimeout+0x3e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800243c:	f100 0308 	add.w	r3, r0, #8
 8002440:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002444:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002448:	f100 0108 	add.w	r1, r0, #8
 800244c:	e841 3200 	strex	r2, r3, [r1]
 8002450:	2a00      	cmp	r2, #0
 8002452:	d1f3      	bne.n	800243c <UART_WaitOnFlagUntilTimeout+0x4e>
        huart->gState = HAL_UART_STATE_READY;
 8002454:	2320      	movs	r3, #32
 8002456:	67e3      	str	r3, [r4, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002458:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          return HAL_TIMEOUT;
 800245c:	2003      	movs	r0, #3
          __HAL_UNLOCK(huart);
 800245e:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
}
 8002462:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002466:	6803      	ldr	r3, [r0, #0]
 8002468:	075a      	lsls	r2, r3, #29
 800246a:	d5c8      	bpl.n	80023fe <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800246c:	69c3      	ldr	r3, [r0, #28]
 800246e:	051b      	lsls	r3, r3, #20
 8002470:	d5c5      	bpl.n	80023fe <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002472:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002476:	6203      	str	r3, [r0, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002478:	e850 3f00 	ldrex	r3, [r0]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800247c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002480:	e840 3200 	strex	r2, r3, [r0]
 8002484:	2a00      	cmp	r2, #0
 8002486:	d1f7      	bne.n	8002478 <UART_WaitOnFlagUntilTimeout+0x8a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002488:	f100 0308 	add.w	r3, r0, #8
 800248c:	e853 3f00 	ldrex	r3, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002490:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002494:	f100 0108 	add.w	r1, r0, #8
 8002498:	e841 3200 	strex	r2, r3, [r1]
 800249c:	2a00      	cmp	r2, #0
 800249e:	d1f3      	bne.n	8002488 <UART_WaitOnFlagUntilTimeout+0x9a>
          huart->gState = HAL_UART_STATE_READY;
 80024a0:	2320      	movs	r3, #32
 80024a2:	67e3      	str	r3, [r4, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80024a4:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80024a8:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
 80024ac:	e7d6      	b.n	800245c <UART_WaitOnFlagUntilTimeout+0x6e>

080024ae <HAL_UART_Transmit>:
{
 80024ae:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80024b2:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 80024b4:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
{
 80024b6:	4604      	mov	r4, r0
 80024b8:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 80024ba:	2b20      	cmp	r3, #32
{
 80024bc:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 80024be:	d142      	bne.n	8002546 <HAL_UART_Transmit+0x98>
    if ((pData == NULL) || (Size == 0U))
 80024c0:	2900      	cmp	r1, #0
 80024c2:	d042      	beq.n	800254a <HAL_UART_Transmit+0x9c>
 80024c4:	2a00      	cmp	r2, #0
 80024c6:	d040      	beq.n	800254a <HAL_UART_Transmit+0x9c>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024c8:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ca:	2500      	movs	r5, #0
 80024cc:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80024d0:	67c3      	str	r3, [r0, #124]	; 0x7c
    tickstart = HAL_GetTick();
 80024d2:	f7fe fe93 	bl	80011fc <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024d6:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 80024d8:	4603      	mov	r3, r0
    huart->TxXferSize  = Size;
 80024da:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024de:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    huart->TxXferCount = Size;
 80024e2:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80024e6:	d103      	bne.n	80024f0 <HAL_UART_Transmit+0x42>
 80024e8:	6922      	ldr	r2, [r4, #16]
 80024ea:	b90a      	cbnz	r2, 80024f0 <HAL_UART_Transmit+0x42>
 80024ec:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 80024ee:	4616      	mov	r6, r2
    while (huart->TxXferCount > 0U)
 80024f0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80024f4:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 80024f8:	b292      	uxth	r2, r2
 80024fa:	b93a      	cbnz	r2, 800250c <HAL_UART_Transmit+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024fc:	2140      	movs	r1, #64	; 0x40
 80024fe:	4620      	mov	r0, r4
 8002500:	f7ff ff75 	bl	80023ee <UART_WaitOnFlagUntilTimeout>
 8002504:	b950      	cbnz	r0, 800251c <HAL_UART_Transmit+0x6e>
    huart->gState = HAL_UART_STATE_READY;
 8002506:	2320      	movs	r3, #32
 8002508:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 800250a:	e008      	b.n	800251e <HAL_UART_Transmit+0x70>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800250c:	2200      	movs	r2, #0
 800250e:	2180      	movs	r1, #128	; 0x80
 8002510:	4620      	mov	r0, r4
 8002512:	9303      	str	r3, [sp, #12]
 8002514:	f7ff ff6b 	bl	80023ee <UART_WaitOnFlagUntilTimeout>
 8002518:	9b03      	ldr	r3, [sp, #12]
 800251a:	b118      	cbz	r0, 8002524 <HAL_UART_Transmit+0x76>
        return HAL_TIMEOUT;
 800251c:	2003      	movs	r0, #3
}
 800251e:	b004      	add	sp, #16
 8002520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002524:	6821      	ldr	r1, [r4, #0]
      if (pdata8bits == NULL)
 8002526:	b95e      	cbnz	r6, 8002540 <HAL_UART_Transmit+0x92>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002528:	f835 2b02 	ldrh.w	r2, [r5], #2
 800252c:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002530:	628a      	str	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 8002532:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8002536:	3a01      	subs	r2, #1
 8002538:	b292      	uxth	r2, r2
 800253a:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 800253e:	e7d7      	b.n	80024f0 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002540:	f816 2b01 	ldrb.w	r2, [r6], #1
 8002544:	e7f4      	b.n	8002530 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8002546:	2002      	movs	r0, #2
 8002548:	e7e9      	b.n	800251e <HAL_UART_Transmit+0x70>
      return  HAL_ERROR;
 800254a:	2001      	movs	r0, #1
 800254c:	e7e7      	b.n	800251e <HAL_UART_Transmit+0x70>

0800254e <HAL_UART_Receive>:
{
 800254e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002552:	4698      	mov	r8, r3
  if (huart->RxState == HAL_UART_STATE_READY)
 8002554:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
{
 8002558:	4604      	mov	r4, r0
 800255a:	460e      	mov	r6, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 800255c:	2b20      	cmp	r3, #32
{
 800255e:	4617      	mov	r7, r2
  if (huart->RxState == HAL_UART_STATE_READY)
 8002560:	d159      	bne.n	8002616 <HAL_UART_Receive+0xc8>
    if ((pData == NULL) || (Size == 0U))
 8002562:	2900      	cmp	r1, #0
 8002564:	d059      	beq.n	800261a <HAL_UART_Receive+0xcc>
 8002566:	2a00      	cmp	r2, #0
 8002568:	d057      	beq.n	800261a <HAL_UART_Receive+0xcc>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800256a:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256c:	2500      	movs	r5, #0
 800256e:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002572:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002576:	6605      	str	r5, [r0, #96]	; 0x60
    tickstart = HAL_GetTick();
 8002578:	f7fe fe40 	bl	80011fc <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 800257c:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800257e:	4681      	mov	r9, r0
    huart->RxXferSize  = Size;
 8002580:	f8a4 7058 	strh.w	r7, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8002584:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferCount = Size;
 8002588:	f8a4 705a 	strh.w	r7, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800258c:	d118      	bne.n	80025c0 <HAL_UART_Receive+0x72>
 800258e:	6922      	ldr	r2, [r4, #16]
 8002590:	42aa      	cmp	r2, r5
 8002592:	f240 15ff 	movw	r5, #511	; 0x1ff
 8002596:	bf18      	it	ne
 8002598:	25ff      	movne	r5, #255	; 0xff
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800259a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    UART_MASK_COMPUTATION(huart);
 800259e:	f8a4 505c 	strh.w	r5, [r4, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025a2:	d11d      	bne.n	80025e0 <HAL_UART_Receive+0x92>
 80025a4:	6923      	ldr	r3, [r4, #16]
 80025a6:	b9db      	cbnz	r3, 80025e0 <HAL_UART_Receive+0x92>
 80025a8:	4637      	mov	r7, r6
      pdata8bits  = NULL;
 80025aa:	461e      	mov	r6, r3
    while (huart->RxXferCount > 0U)
 80025ac:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 80025b0:	b290      	uxth	r0, r2
 80025b2:	b9b8      	cbnz	r0, 80025e4 <HAL_UART_Receive+0x96>
    huart->RxState = HAL_UART_STATE_READY;
 80025b4:	2320      	movs	r3, #32
 80025b6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
}
 80025ba:	b003      	add	sp, #12
 80025bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    UART_MASK_COMPUTATION(huart);
 80025c0:	b92b      	cbnz	r3, 80025ce <HAL_UART_Receive+0x80>
 80025c2:	6922      	ldr	r2, [r4, #16]
 80025c4:	2a00      	cmp	r2, #0
 80025c6:	bf14      	ite	ne
 80025c8:	257f      	movne	r5, #127	; 0x7f
 80025ca:	25ff      	moveq	r5, #255	; 0xff
 80025cc:	e7e5      	b.n	800259a <HAL_UART_Receive+0x4c>
 80025ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025d2:	d1e2      	bne.n	800259a <HAL_UART_Receive+0x4c>
 80025d4:	6922      	ldr	r2, [r4, #16]
 80025d6:	2a00      	cmp	r2, #0
 80025d8:	bf0c      	ite	eq
 80025da:	257f      	moveq	r5, #127	; 0x7f
 80025dc:	253f      	movne	r5, #63	; 0x3f
 80025de:	e7dc      	b.n	800259a <HAL_UART_Receive+0x4c>
      pdata16bits = NULL;
 80025e0:	2700      	movs	r7, #0
 80025e2:	e7e3      	b.n	80025ac <HAL_UART_Receive+0x5e>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025e4:	464b      	mov	r3, r9
 80025e6:	2200      	movs	r2, #0
 80025e8:	2120      	movs	r1, #32
 80025ea:	4620      	mov	r0, r4
 80025ec:	f8cd 8000 	str.w	r8, [sp]
 80025f0:	f7ff fefd 	bl	80023ee <UART_WaitOnFlagUntilTimeout>
 80025f4:	b998      	cbnz	r0, 800261e <HAL_UART_Receive+0xd0>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80025f6:	6823      	ldr	r3, [r4, #0]
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	402b      	ands	r3, r5
      if (pdata8bits == NULL)
 80025fc:	b946      	cbnz	r6, 8002610 <HAL_UART_Receive+0xc2>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80025fe:	f827 3b02 	strh.w	r3, [r7], #2
      huart->RxXferCount--;
 8002602:	f8b4 205a 	ldrh.w	r2, [r4, #90]	; 0x5a
 8002606:	3a01      	subs	r2, #1
 8002608:	b292      	uxth	r2, r2
 800260a:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
 800260e:	e7cd      	b.n	80025ac <HAL_UART_Receive+0x5e>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002610:	f806 3b01 	strb.w	r3, [r6], #1
        pdata8bits++;
 8002614:	e7f5      	b.n	8002602 <HAL_UART_Receive+0xb4>
    return HAL_BUSY;
 8002616:	2002      	movs	r0, #2
 8002618:	e7cf      	b.n	80025ba <HAL_UART_Receive+0x6c>
      return  HAL_ERROR;
 800261a:	2001      	movs	r0, #1
 800261c:	e7cd      	b.n	80025ba <HAL_UART_Receive+0x6c>
        return HAL_TIMEOUT;
 800261e:	2003      	movs	r0, #3
 8002620:	e7cb      	b.n	80025ba <HAL_UART_Receive+0x6c>

08002622 <UART_CheckIdleState>:
{
 8002622:	b530      	push	{r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002624:	2500      	movs	r5, #0
{
 8002626:	4604      	mov	r4, r0
 8002628:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800262a:	f8c0 5084 	str.w	r5, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 800262e:	f7fe fde5 	bl	80011fc <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002632:	6822      	ldr	r2, [r4, #0]
  tickstart = HAL_GetTick();
 8002634:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002636:	6812      	ldr	r2, [r2, #0]
 8002638:	0711      	lsls	r1, r2, #28
 800263a:	d417      	bmi.n	800266c <UART_CheckIdleState+0x4a>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800263c:	6822      	ldr	r2, [r4, #0]
 800263e:	6812      	ldr	r2, [r2, #0]
 8002640:	0752      	lsls	r2, r2, #29
 8002642:	d509      	bpl.n	8002658 <UART_CheckIdleState+0x36>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002644:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002648:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800264c:	4620      	mov	r0, r4
 800264e:	9200      	str	r2, [sp, #0]
 8002650:	2200      	movs	r2, #0
 8002652:	f7ff fecc 	bl	80023ee <UART_WaitOnFlagUntilTimeout>
 8002656:	b9b0      	cbnz	r0, 8002686 <UART_CheckIdleState+0x64>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002658:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800265a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800265c:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 8002660:	67e3      	str	r3, [r4, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002662:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002666:	6620      	str	r0, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002668:	6660      	str	r0, [r4, #100]	; 0x64
  return HAL_OK;
 800266a:	e00d      	b.n	8002688 <UART_CheckIdleState+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800266c:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 8002670:	9003      	str	r0, [sp, #12]
 8002672:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002676:	4620      	mov	r0, r4
 8002678:	9200      	str	r2, [sp, #0]
 800267a:	462a      	mov	r2, r5
 800267c:	f7ff feb7 	bl	80023ee <UART_WaitOnFlagUntilTimeout>
 8002680:	9b03      	ldr	r3, [sp, #12]
 8002682:	2800      	cmp	r0, #0
 8002684:	d0da      	beq.n	800263c <UART_CheckIdleState+0x1a>
      return HAL_TIMEOUT;
 8002686:	2003      	movs	r0, #3
}
 8002688:	b005      	add	sp, #20
 800268a:	bd30      	pop	{r4, r5, pc}

0800268c <HAL_UART_Init>:
{
 800268c:	b510      	push	{r4, lr}
  if (huart == NULL)
 800268e:	4604      	mov	r4, r0
 8002690:	b340      	cbz	r0, 80026e4 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8002692:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 8002694:	b91b      	cbnz	r3, 800269e <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8002696:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 800269a:	f7fe fcd1 	bl	8001040 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800269e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80026a0:	2324      	movs	r3, #36	; 0x24
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026a2:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_BUSY;
 80026a4:	67e3      	str	r3, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80026a6:	6813      	ldr	r3, [r2, #0]
 80026a8:	f023 0301 	bic.w	r3, r3, #1
 80026ac:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026ae:	f7ff fd07 	bl	80020c0 <UART_SetConfig>
 80026b2:	2801      	cmp	r0, #1
 80026b4:	d016      	beq.n	80026e4 <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026b8:	b113      	cbz	r3, 80026c0 <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 80026ba:	4620      	mov	r0, r4
 80026bc:	f7ff fe42 	bl	8002344 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026c0:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 80026c2:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026cc:	689a      	ldr	r2, [r3, #8]
 80026ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026d2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	f042 0201 	orr.w	r2, r2, #1
}
 80026da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 80026de:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 80026e0:	f7ff bf9f 	b.w	8002622 <UART_CheckIdleState>
}
 80026e4:	2001      	movs	r0, #1
 80026e6:	bd10      	pop	{r4, pc}

080026e8 <write_callback>:
  o_packet.pw = 0;
}

static bool write_callback(pb_ostream_t *stream, const uint8_t *buf,
    size_t count)
{
 80026e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool res = true;
 80026ea:	2001      	movs	r0, #1
{
 80026ec:	460e      	mov	r6, r1
 80026ee:	4614      	mov	r4, r2
  uint8_t *pr = (uint8_t *)buf;

  UNUSED(stream);

  while (count) {
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 80026f0:	4d0c      	ldr	r5, [pc, #48]	; (8002724 <write_callback+0x3c>)
      pr++;
      count--;
    }
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
      res = write_packet();
      o_packet.pw = 0;
 80026f2:	2700      	movs	r7, #0
  while (count) {
 80026f4:	b93c      	cbnz	r4, 8002706 <write_callback+0x1e>
 80026f6:	e00b      	b.n	8002710 <write_callback+0x28>
      o_packet.payload[o_packet.pw] = *pr;
 80026f8:	f816 1b01 	ldrb.w	r1, [r6], #1
 80026fc:	18ea      	adds	r2, r5, r3
      count--;
 80026fe:	3c01      	subs	r4, #1
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002700:	3301      	adds	r3, #1
      o_packet.payload[o_packet.pw] = *pr;
 8002702:	7051      	strb	r1, [r2, #1]
    for (; o_packet.pw < _PACKET_PAYLOAD_IN_SIZE && count; o_packet.pw++) {
 8002704:	702b      	strb	r3, [r5, #0]
 8002706:	782b      	ldrb	r3, [r5, #0]
 8002708:	2b1f      	cmp	r3, #31
 800270a:	d802      	bhi.n	8002712 <write_callback+0x2a>
 800270c:	2c00      	cmp	r4, #0
 800270e:	d1f3      	bne.n	80026f8 <write_callback+0x10>
    }
  }
  return res;
}
 8002710:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (o_packet.pw == _PACKET_PAYLOAD_IN_SIZE) {
 8002712:	2b20      	cmp	r3, #32
 8002714:	d1ee      	bne.n	80026f4 <write_callback+0xc>
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 8002716:	2121      	movs	r1, #33	; 0x21
 8002718:	4628      	mov	r0, r5
 800271a:	f000 fc91 	bl	8003040 <ioRawWriteBuffer>
      o_packet.pw = 0;
 800271e:	702f      	strb	r7, [r5, #0]
 8002720:	e7e8      	b.n	80026f4 <write_callback+0xc>
 8002722:	bf00      	nop
 8002724:	20000878 	.word	0x20000878

08002728 <read_callback>:
  i_packet.pr = 0xFF;
  i_ridx = 0;
}

static bool read_callback(pb_istream_t *stream, uint8_t *buf, size_t count)
{
 8002728:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800272c:	460c      	mov	r4, r1
  bool res = true;
  uint8_t *pw = (uint8_t *)buf;

  UNUSED(stream);

  if (count == 0)
 800272e:	4615      	mov	r5, r2
 8002730:	b35a      	cbz	r2, 800278a <read_callback+0x62>
    return true;

  if (i_packet.pr == 0xFF)
 8002732:	4e20      	ldr	r6, [pc, #128]	; (80027b4 <read_callback+0x8c>)
 8002734:	4f20      	ldr	r7, [pc, #128]	; (80027b8 <read_callback+0x90>)
 8002736:	7833      	ldrb	r3, [r6, #0]
 8002738:	2bff      	cmp	r3, #255	; 0xff
 800273a:	d008      	beq.n	800274e <read_callback+0x26>

  if (res == false)
    return res;

  while (count) {
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 800273c:	f04f 0900 	mov.w	r9, #0
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 8002740:	f8df 8070 	ldr.w	r8, [pc, #112]	; 80027b4 <read_callback+0x8c>
 8002744:	683b      	ldr	r3, [r7, #0]
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 8002746:	2200      	movs	r2, #0
 8002748:	18f0      	adds	r0, r6, r3
 800274a:	1b1b      	subs	r3, r3, r4
 800274c:	e013      	b.n	8002776 <read_callback+0x4e>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 800274e:	2121      	movs	r1, #33	; 0x21
 8002750:	4630      	mov	r0, r6
 8002752:	f000 fc83 	bl	800305c <ioRawReadBuffer>
  i_ridx = 0;
 8002756:	2300      	movs	r3, #0
 8002758:	603b      	str	r3, [r7, #0]
  if (res == false)
 800275a:	2800      	cmp	r0, #0
 800275c:	d1ee      	bne.n	800273c <read_callback+0x14>
      read_packet();
    }
  }

  return res;
}
 800275e:	b003      	add	sp, #12
 8002760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      *pw = i_packet.payload[i_ridx];
 8002764:	f810 2f01 	ldrb.w	r2, [r0, #1]!
      count--;
 8002768:	3d01      	subs	r5, #1
      *pw = i_packet.payload[i_ridx];
 800276a:	f804 2b01 	strb.w	r2, [r4], #1
    for (; i_packet.pr > 0 && count; i_packet.pr--) {
 800276e:	7832      	ldrb	r2, [r6, #0]
 8002770:	3a01      	subs	r2, #1
 8002772:	7032      	strb	r2, [r6, #0]
 8002774:	2201      	movs	r2, #1
 8002776:	f896 c000 	ldrb.w	ip, [r6]
 800277a:	18e1      	adds	r1, r4, r3
 800277c:	f1bc 0f00 	cmp.w	ip, #0
 8002780:	d005      	beq.n	800278e <read_callback+0x66>
 8002782:	2d00      	cmp	r5, #0
 8002784:	d1ee      	bne.n	8002764 <read_callback+0x3c>
 8002786:	b102      	cbz	r2, 800278a <read_callback+0x62>
 8002788:	6039      	str	r1, [r7, #0]
 800278a:	2001      	movs	r0, #1
 800278c:	e7e7      	b.n	800275e <read_callback+0x36>
 800278e:	b102      	cbz	r2, 8002792 <read_callback+0x6a>
 8002790:	6039      	str	r1, [r7, #0]
    if (count && i_packet.pr == 0) {
 8002792:	2d00      	cmp	r5, #0
 8002794:	d0f9      	beq.n	800278a <read_callback+0x62>
      uint8_t sync = 0xAA;
 8002796:	23aa      	movs	r3, #170	; 0xaa
      ioRawWriteBuffer(&sync, 1);
 8002798:	2101      	movs	r1, #1
 800279a:	f10d 0007 	add.w	r0, sp, #7
      uint8_t sync = 0xAA;
 800279e:	f88d 3007 	strb.w	r3, [sp, #7]
      ioRawWriteBuffer(&sync, 1);
 80027a2:	f000 fc4d 	bl	8003040 <ioRawWriteBuffer>
  bool res = ioRawReadBuffer((uint8_t *)&i_packet,
 80027a6:	2121      	movs	r1, #33	; 0x21
 80027a8:	4640      	mov	r0, r8
 80027aa:	f000 fc57 	bl	800305c <ioRawReadBuffer>
  i_ridx = 0;
 80027ae:	f8c7 9000 	str.w	r9, [r7]
  while (count) {
 80027b2:	e7c7      	b.n	8002744 <read_callback+0x1c>
 80027b4:	20000850 	.word	0x20000850
 80027b8:	20000874 	.word	0x20000874

080027bc <pb_io_flush_ostream>:
{
 80027bc:	b510      	push	{r4, lr}
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 80027be:	4c06      	ldr	r4, [pc, #24]	; (80027d8 <pb_io_flush_ostream+0x1c>)
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 80027c0:	2121      	movs	r1, #33	; 0x21
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 80027c2:	7823      	ldrb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 80027c4:	4620      	mov	r0, r4
  o_packet.pw |= (1 << 7); /* Indicate last packet */
 80027c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80027ca:	7023      	strb	r3, [r4, #0]
  return ioRawWriteBuffer((uint8_t *)&o_packet, _PACKET_PAYLOAD_IN_SIZE + 1);
 80027cc:	f000 fc38 	bl	8003040 <ioRawWriteBuffer>
  o_packet.pw = 0;
 80027d0:	2300      	movs	r3, #0
 80027d2:	7023      	strb	r3, [r4, #0]
}
 80027d4:	bd10      	pop	{r4, pc}
 80027d6:	bf00      	nop
 80027d8:	20000878 	.word	0x20000878

080027dc <pb_io_flush_istream>:
  i_packet.pr = 0xFF;
 80027dc:	4b03      	ldr	r3, [pc, #12]	; (80027ec <pb_io_flush_istream+0x10>)
 80027de:	22ff      	movs	r2, #255	; 0xff
 80027e0:	701a      	strb	r2, [r3, #0]
  i_ridx = 0;
 80027e2:	2200      	movs	r2, #0
 80027e4:	4b02      	ldr	r3, [pc, #8]	; (80027f0 <pb_io_flush_istream+0x14>)
 80027e6:	601a      	str	r2, [r3, #0]
}
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20000850 	.word	0x20000850
 80027f0:	20000874 	.word	0x20000874

080027f4 <pb_io_ostream>:

pb_ostream_t pb_io_ostream(int fd)
{
  pb_ostream_t stream = {&write_callback, (void*)(intptr_t)fd, SIZE_MAX, 0};
 80027f4:	2200      	movs	r2, #0
 80027f6:	e9c0 2203 	strd	r2, r2, [r0, #12]
  return stream;
 80027fa:	4a04      	ldr	r2, [pc, #16]	; (800280c <pb_io_ostream+0x18>)
 80027fc:	e9c0 2100 	strd	r2, r1, [r0]
 8002800:	f04f 32ff 	mov.w	r2, #4294967295
{
 8002804:	b510      	push	{r4, lr}
  return stream;
 8002806:	6082      	str	r2, [r0, #8]
}
 8002808:	bd10      	pop	{r4, pc}
 800280a:	bf00      	nop
 800280c:	080026e9 	.word	0x080026e9

08002810 <pb_io_istream>:

pb_istream_t pb_io_istream(int fd)
{
  pb_istream_t stream = {&read_callback, (void*)(intptr_t)fd, SIZE_MAX};
 8002810:	2200      	movs	r2, #0
 8002812:	60c2      	str	r2, [r0, #12]
  return stream;
 8002814:	4a03      	ldr	r2, [pc, #12]	; (8002824 <pb_io_istream+0x14>)
 8002816:	e9c0 2100 	strd	r2, r1, [r0]
 800281a:	f04f 32ff 	mov.w	r2, #4294967295
 800281e:	6082      	str	r2, [r0, #8]
}
 8002820:	4770      	bx	lr
 8002822:	bf00      	nop
 8002824:	08002729 	.word	0x08002729

08002828 <pb_io_stream_init>:

int pb_io_stream_init(void)
{
 8002828:	b508      	push	{r3, lr}
  ioRawDisableLLWrite();
 800282a:	f000 fc25 	bl	8003078 <ioRawDisableLLWrite>
  return 0;
}
 800282e:	2000      	movs	r0, #0
 8002830:	bd08      	pop	{r3, pc}

08002832 <encode_uint32>:
/*
 * Callback function to encode array of uint32
 */
bool encode_uint32(pb_ostream_t *stream, const pb_field_t *field,
                   void * const *arg)
{
 8002832:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  struct _encode_uint32* array = (struct _encode_uint32 *)*arg;
 8002836:	f8d2 8000 	ldr.w	r8, [r2]
  int offset = (array->offset == 0)?4:array->offset;
  for (int i = 0; i < array->size; i++)
 800283a:	2600      	movs	r6, #0
{
 800283c:	4607      	mov	r7, r0
 800283e:	4689      	mov	r9, r1
  int offset = (array->offset == 0)?4:array->offset;
 8002840:	f8d8 4008 	ldr.w	r4, [r8, #8]
  for (int i = 0; i < array->size; i++)
 8002844:	4635      	mov	r5, r6
 8002846:	2c00      	cmp	r4, #0
 8002848:	bf08      	it	eq
 800284a:	2404      	moveq	r4, #4
 800284c:	f8d8 3000 	ldr.w	r3, [r8]
 8002850:	429d      	cmp	r5, r3
 8002852:	d301      	bcc.n	8002858 <encode_uint32+0x26>
    else
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
      return false;
  }
  return true;
 8002854:	2001      	movs	r0, #1
 8002856:	e005      	b.n	8002864 <encode_uint32+0x32>
    if (!pb_encode_tag_for_field(stream, field))
 8002858:	4649      	mov	r1, r9
 800285a:	4638      	mov	r0, r7
 800285c:	f002 ff8e 	bl	800577c <pb_encode_tag_for_field>
 8002860:	b910      	cbnz	r0, 8002868 <encode_uint32+0x36>
      return false;
 8002862:	2000      	movs	r0, #0
}
 8002864:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8002868:	f8d8 3004 	ldr.w	r3, [r8, #4]
    if (offset == 2)
 800286c:	2c02      	cmp	r4, #2
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 800286e:	4638      	mov	r0, r7
      c_val = *(uint32_t*)((uint8_t *)array->data + i * offset);
 8002870:	bf18      	it	ne
 8002872:	599a      	ldrne	r2, [r3, r6]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 8002874:	4426      	add	r6, r4
      c_val = *(uint16_t*)((uint8_t *)array->data + i * offset);
 8002876:	bf08      	it	eq
 8002878:	f833 2015 	ldrheq.w	r2, [r3, r5, lsl #1]
    if (!pb_encode_varint(stream, (intptr_t)(c_val)))
 800287c:	17d3      	asrs	r3, r2, #31
 800287e:	f002 feb7 	bl	80055f0 <pb_encode_varint>
 8002882:	2800      	cmp	r0, #0
 8002884:	d0ed      	beq.n	8002862 <encode_uint32+0x30>
  for (int i = 0; i < array->size; i++)
 8002886:	3501      	adds	r5, #1
 8002888:	e7e0      	b.n	800284c <encode_uint32+0x1a>

0800288a <encode_data_cb>:
/*
 * Local callback function to encode datas field from aiDataMsg msg
 */
bool encode_data_cb(pb_ostream_t *stream, const pb_field_t *field,
    void * const *arg)
{
 800288a:	b570      	push	{r4, r5, r6, lr}
  aiPbData *data = (aiPbData *)*arg;
 800288c:	6815      	ldr	r5, [r2, #0]
{
 800288e:	4604      	mov	r4, r0

  pb_byte_t *pr = (pb_byte_t *)data->addr;
 8002890:	68ae      	ldr	r6, [r5, #8]

  if (!pb_encode_tag_for_field(stream, field))
 8002892:	f002 ff73 	bl	800577c <pb_encode_tag_for_field>
 8002896:	b130      	cbz	r0, 80028a6 <encode_data_cb+0x1c>
    return false;

  if (!pb_encode_string(stream, pr, data->size))
 8002898:	686a      	ldr	r2, [r5, #4]
 800289a:	4631      	mov	r1, r6
 800289c:	4620      	mov	r0, r4
    return false;

  return true;
}
 800289e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  if (!pb_encode_string(stream, pr, data->size))
 80028a2:	f003 b8c5 	b.w	8005a30 <pb_encode_string>
}
 80028a6:	bd70      	pop	{r4, r5, r6, pc}

080028a8 <decode_data_cb>:
{
 80028a8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  aiPbData *data = (aiPbData *)*arg;
 80028aa:	6814      	ldr	r4, [r2, #0]
{
 80028ac:	4605      	mov	r5, r0
  data->nb_read = 0;
 80028ae:	2300      	movs	r3, #0
  uint8_t *pw = (uint8_t *)data->addr;
 80028b0:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
    data->nb_read += itsize;
 80028b4:	60e3      	str	r3, [r4, #12]
  while (stream->bytes_left) {
 80028b6:	68ab      	ldr	r3, [r5, #8]
 80028b8:	b913      	cbnz	r3, 80028c0 <decode_data_cb+0x18>
  return true;
 80028ba:	2001      	movs	r0, #1
}
 80028bc:	b003      	add	sp, #12
 80028be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (!pb_read(stream, (pb_byte_t *)&number, itsize))
 80028c0:	2201      	movs	r2, #1
 80028c2:	4669      	mov	r1, sp
 80028c4:	4628      	mov	r0, r5
 80028c6:	f002 f95b 	bl	8004b80 <pb_read>
 80028ca:	2800      	cmp	r0, #0
 80028cc:	d0f6      	beq.n	80028bc <decode_data_cb+0x14>
    if ((pw) && (maxr > 0)) /* additional data are skipped */
 80028ce:	b13f      	cbz	r7, 80028e0 <decode_data_cb+0x38>
 80028d0:	2e00      	cmp	r6, #0
      *pw = *(uint8_t *)&number;
 80028d2:	bfc2      	ittt	gt
 80028d4:	f89d 3000 	ldrbgt.w	r3, [sp]
      maxr--;
 80028d8:	f106 36ff 	addgt.w	r6, r6, #4294967295
      *pw = *(uint8_t *)&number;
 80028dc:	f807 3b01 	strbgt.w	r3, [r7], #1
    data->nb_read += itsize;
 80028e0:	68e3      	ldr	r3, [r4, #12]
 80028e2:	3301      	adds	r3, #1
 80028e4:	e7e6      	b.n	80028b4 <decode_data_cb+0xc>
	...

080028e8 <aiPbMgrInit>:
{
 80028e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028ea:	b08b      	sub	sp, #44	; 0x2c
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80028ec:	4c1a      	ldr	r4, [pc, #104]	; (8002958 <aiPbMgrInit+0x70>)
 80028ee:	f44f 72d0 	mov.w	r2, #416	; 0x1a0
 80028f2:	2100      	movs	r1, #0
  pbContextMgr.input = pb_io_istream(0);
 80028f4:	ad06      	add	r5, sp, #24
{
 80028f6:	4607      	mov	r7, r0
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80028f8:	4620      	mov	r0, r4
  pbContextMgr.output = pb_io_ostream(0);
 80028fa:	f104 0610 	add.w	r6, r4, #16
  memset(&pbContextMgr, 0, sizeof(struct pbContextMgr));
 80028fe:	f007 fe38 	bl	800a572 <memset>
  pb_io_stream_init();
 8002902:	f7ff ff91 	bl	8002828 <pb_io_stream_init>
  pbContextMgr.input = pb_io_istream(0);
 8002906:	4628      	mov	r0, r5
 8002908:	2100      	movs	r1, #0
 800290a:	f7ff ff81 	bl	8002810 <pb_io_istream>
 800290e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 8002912:	466d      	mov	r5, sp
  pbContextMgr.input = pb_io_istream(0);
 8002914:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  pbContextMgr.output = pb_io_ostream(0);
 8002918:	2100      	movs	r1, #0
 800291a:	4668      	mov	r0, sp
 800291c:	f7ff ff6a 	bl	80027f4 <pb_io_ostream>
 8002920:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002922:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8002924:	682b      	ldr	r3, [r5, #0]
 8002926:	6033      	str	r3, [r6, #0]
  pbContextMgr.n_func = 0;
 8002928:	2300      	movs	r3, #0
  pbContextMgr.funcs = NULL;
 800292a:	e9c4 3309 	strd	r3, r3, [r4, #36]	; 0x24
  if (funcs) {
 800292e:	b97f      	cbnz	r7, 8002950 <aiPbMgrInit+0x68>
  pbContextMgr.state = PB_MGR_READY;
 8002930:	2301      	movs	r3, #1
 8002932:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
}
 8002936:	b00b      	add	sp, #44	; 0x2c
 8002938:	bdf0      	pop	{r4, r5, r6, r7, pc}
      cfunc++;
 800293a:	320c      	adds	r2, #12
 800293c:	462b      	mov	r3, r5
 800293e:	2101      	movs	r1, #1
    while (cfunc->process) {
 8002940:	6850      	ldr	r0, [r2, #4]
 8002942:	1c5d      	adds	r5, r3, #1
 8002944:	2800      	cmp	r0, #0
 8002946:	d1f8      	bne.n	800293a <aiPbMgrInit+0x52>
 8002948:	b101      	cbz	r1, 800294c <aiPbMgrInit+0x64>
 800294a:	62a3      	str	r3, [r4, #40]	; 0x28
    pbContextMgr.funcs = funcs;
 800294c:	6267      	str	r7, [r4, #36]	; 0x24
 800294e:	e7ef      	b.n	8002930 <aiPbMgrInit+0x48>
 8002950:	463a      	mov	r2, r7
 8002952:	4619      	mov	r1, r3
 8002954:	e7f4      	b.n	8002940 <aiPbMgrInit+0x58>
 8002956:	bf00      	nop
 8002958:	200008a0 	.word	0x200008a0

0800295c <aiPbStrCopy>:
{
 800295c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800295e:	4616      	mov	r6, r2
  const char undef[] = "UNDEFINED";
 8002960:	4a10      	ldr	r2, [pc, #64]	; (80029a4 <aiPbStrCopy+0x48>)
{
 8002962:	4605      	mov	r5, r0
 8002964:	460c      	mov	r4, r1
  const char undef[] = "UNDEFINED";
 8002966:	6810      	ldr	r0, [r2, #0]
 8002968:	ab01      	add	r3, sp, #4
 800296a:	6851      	ldr	r1, [r2, #4]
 800296c:	8912      	ldrh	r2, [r2, #8]
 800296e:	c303      	stmia	r3!, {r0, r1}
  size_t l = strlen(src);
 8002970:	4628      	mov	r0, r5
  const char undef[] = "UNDEFINED";
 8002972:	801a      	strh	r2, [r3, #0]
  size_t l = strlen(src);
 8002974:	f7fd fcb4 	bl	80002e0 <strlen>
  if (l > max)
 8002978:	42b0      	cmp	r0, r6
    l = max-1;
 800297a:	bf88      	it	hi
 800297c:	f106 30ff 	addhi.w	r0, r6, #4294967295
  if (!dst)
 8002980:	b174      	cbz	r4, 80029a0 <aiPbStrCopy+0x44>
  if (src && l)
 8002982:	b138      	cbz	r0, 8002994 <aiPbStrCopy+0x38>
    memcpy(dst, src, l+1);
 8002984:	1c42      	adds	r2, r0, #1
 8002986:	4629      	mov	r1, r5
 8002988:	4620      	mov	r0, r4
}
 800298a:	b004      	add	sp, #16
 800298c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    memcpy(dst, src, l+1);
 8002990:	f007 be90 	b.w	800a6b4 <memcpy>
    memcpy(dst, undef, strlen(undef)+1);
 8002994:	ab01      	add	r3, sp, #4
 8002996:	cb03      	ldmia	r3!, {r0, r1}
 8002998:	881b      	ldrh	r3, [r3, #0]
 800299a:	6020      	str	r0, [r4, #0]
 800299c:	6061      	str	r1, [r4, #4]
 800299e:	8123      	strh	r3, [r4, #8]
}
 80029a0:	b004      	add	sp, #16
 80029a2:	bd70      	pop	{r4, r5, r6, pc}
 80029a4:	0800cb34 	.word	0x0800cb34

080029a8 <encode_tensor_desc>:
{
 80029a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80029ac:	4605      	mov	r5, r0
 80029ae:	b09c      	sub	sp, #112	; 0x70
 80029b0:	4688      	mov	r8, r1
  struct _encode_tensor_desc* tensors = (struct _encode_tensor_desc *)*arg;
 80029b2:	6816      	ldr	r6, [r2, #0]
  for (size_t i = 0; i < tensors->size; i++)
 80029b4:	2400      	movs	r4, #0
    msg.dims.funcs.encode = encode_uint32;
 80029b6:	f8df 9050 	ldr.w	r9, [pc, #80]	; 8002a08 <encode_tensor_desc+0x60>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 80029ba:	f8df a050 	ldr.w	sl, [pc, #80]	; 8002a0c <encode_tensor_desc+0x64>
  for (size_t i = 0; i < tensors->size; i++)
 80029be:	6873      	ldr	r3, [r6, #4]
 80029c0:	42a3      	cmp	r3, r4
 80029c2:	d801      	bhi.n	80029c8 <encode_tensor_desc+0x20>
  return true;
 80029c4:	2001      	movs	r0, #1
 80029c6:	e01c      	b.n	8002a02 <encode_tensor_desc+0x5a>
    aiTensorDescMsg msg = aiTensorDescMsg_init_zero;
 80029c8:	2264      	movs	r2, #100	; 0x64
 80029ca:	2100      	movs	r1, #0
 80029cc:	a803      	add	r0, sp, #12
 80029ce:	f007 fdd0 	bl	800a572 <memset>
    tensors->cb(i, tensors->data, &msg, &array_u32);
 80029d2:	68b1      	ldr	r1, [r6, #8]
 80029d4:	4620      	mov	r0, r4
 80029d6:	466b      	mov	r3, sp
 80029d8:	aa03      	add	r2, sp, #12
 80029da:	6837      	ldr	r7, [r6, #0]
 80029dc:	47b8      	blx	r7
    if (!pb_encode_tag_for_field(stream, field))
 80029de:	4641      	mov	r1, r8
 80029e0:	4628      	mov	r0, r5
    msg.dims.funcs.encode = encode_uint32;
 80029e2:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
    msg.dims.arg = &array_u32;
 80029e6:	f8cd d05c 	str.w	sp, [sp, #92]	; 0x5c
    if (!pb_encode_tag_for_field(stream, field))
 80029ea:	f002 fec7 	bl	800577c <pb_encode_tag_for_field>
 80029ee:	b138      	cbz	r0, 8002a00 <encode_tensor_desc+0x58>
    if (!pb_encode_submessage(stream, aiTensorDescMsg_fields, &msg))
 80029f0:	aa03      	add	r2, sp, #12
 80029f2:	4651      	mov	r1, sl
 80029f4:	4628      	mov	r0, r5
 80029f6:	f003 f86b 	bl	8005ad0 <pb_encode_submessage>
 80029fa:	b108      	cbz	r0, 8002a00 <encode_tensor_desc+0x58>
  for (size_t i = 0; i < tensors->size; i++)
 80029fc:	3401      	adds	r4, #1
 80029fe:	e7de      	b.n	80029be <encode_tensor_desc+0x16>
      return false;
 8002a00:	2000      	movs	r0, #0
}
 8002a02:	b01c      	add	sp, #112	; 0x70
 8002a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a08:	08002833 	.word	0x08002833
 8002a0c:	08011320 	.word	0x08011320

08002a10 <aiPbMgrSendResp>:

/*---------------------------------------------------------------------------*/

void aiPbMgrSendResp(const reqMsg *req, respMsg *resp,
    EnumState state)
{
 8002a10:	b508      	push	{r3, lr}
  resp->reqid = req->reqid;
 8002a12:	6803      	ldr	r3, [r0, #0]
  resp->state = state;
 8002a14:	710a      	strb	r2, [r1, #4]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8002a16:	460a      	mov	r2, r1
  resp->reqid = req->reqid;
 8002a18:	600b      	str	r3, [r1, #0]
  pb_encode(&pbContextMgr.output, respMsg_fields, resp);
 8002a1a:	4804      	ldr	r0, [pc, #16]	; (8002a2c <aiPbMgrSendResp+0x1c>)
 8002a1c:	4904      	ldr	r1, [pc, #16]	; (8002a30 <aiPbMgrSendResp+0x20>)
 8002a1e:	f002 ffd3 	bl	80059c8 <pb_encode>
  pb_io_flush_ostream();
}
 8002a22:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  pb_io_flush_ostream();
 8002a26:	f7ff bec9 	b.w	80027bc <pb_io_flush_ostream>
 8002a2a:	bf00      	nop
 8002a2c:	200008b0 	.word	0x200008b0
 8002a30:	08011485 	.word	0x08011485

08002a34 <aiPbMgrWaitAndProcess>:
{
 8002a34:	b570      	push	{r4, r5, r6, lr}
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8002a36:	4c1d      	ldr	r4, [pc, #116]	; (8002aac <aiPbMgrWaitAndProcess+0x78>)
  pb_io_flush_istream();
 8002a38:	f7ff fed0 	bl	80027dc <pb_io_flush_istream>
  if (pb_decode_delimited(&pbContextMgr.input, reqMsg_fields, &(pbContextMgr.req))) {
 8002a3c:	491c      	ldr	r1, [pc, #112]	; (8002ab0 <aiPbMgrWaitAndProcess+0x7c>)
 8002a3e:	f104 022c 	add.w	r2, r4, #44	; 0x2c
 8002a42:	4620      	mov	r0, r4
 8002a44:	f002 fcde 	bl	8005404 <pb_decode_delimited>
 8002a48:	b348      	cbz	r0, 8002a9e <aiPbMgrWaitAndProcess+0x6a>
    pb_io_flush_istream();
 8002a4a:	f7ff fec7 	bl	80027dc <pb_io_flush_istream>
    pbContextMgr.state = PB_MGR_ON_GOING;
 8002a4e:	2302      	movs	r3, #2
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002a50:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002a52:	2500      	movs	r5, #0
    pbContextMgr.state = PB_MGR_ON_GOING;
 8002a54:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8002a58:	f894 0030 	ldrb.w	r0, [r4, #48]	; 0x30
 8002a5c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002a5e:	42a9      	cmp	r1, r5
 8002a60:	d00d      	beq.n	8002a7e <aiPbMgrWaitAndProcess+0x4a>
      cfunc = &pbContextMgr.funcs[idx];
 8002a62:	461a      	mov	r2, r3
      if (cfunc->cmd == pbContextMgr.req.cmd) {
 8002a64:	f813 6b0c 	ldrb.w	r6, [r3], #12
 8002a68:	4286      	cmp	r6, r0
 8002a6a:	d11c      	bne.n	8002aa6 <aiPbMgrWaitAndProcess+0x72>
        cfunc->process(&(pbContextMgr.req), &(pbContextMgr.resp), cfunc->param);
 8002a6c:	4911      	ldr	r1, [pc, #68]	; (8002ab4 <aiPbMgrWaitAndProcess+0x80>)
 8002a6e:	e9d2 3201 	ldrd	r3, r2, [r2, #4]
 8002a72:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
 8002a76:	4798      	blx	r3
    if (idx == pbContextMgr.n_func) {
 8002a78:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002a7a:	42ab      	cmp	r3, r5
 8002a7c:	d10c      	bne.n	8002a98 <aiPbMgrWaitAndProcess+0x64>
    EnumState state, uint32_t param, EnumError error)
{
  resp->which_payload = respMsg_ack_tag;
  resp->payload.ack.param = param;
  resp->payload.ack.error = error;
  aiPbMgrSendResp(req, resp, state);
 8002a7e:	490d      	ldr	r1, [pc, #52]	; (8002ab4 <aiPbMgrWaitAndProcess+0x80>)
  resp->payload.ack.param = param;
 8002a80:	2204      	movs	r2, #4
  resp->which_payload = respMsg_ack_tag;
 8002a82:	230c      	movs	r3, #12
  aiPbMgrSendResp(req, resp, state);
 8002a84:	f1a1 0054 	sub.w	r0, r1, #84	; 0x54
  resp->payload.ack.param = param;
 8002a88:	f8c4 2088 	str.w	r2, [r4, #136]	; 0x88
  resp->which_payload = respMsg_ack_tag;
 8002a8c:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
  resp->payload.ack.error = error;
 8002a90:	f884 208c 	strb.w	r2, [r4, #140]	; 0x8c
  aiPbMgrSendResp(req, resp, state);
 8002a94:	f7ff ffbc 	bl	8002a10 <aiPbMgrSendResp>
    pbContextMgr.state = PB_MGR_READY;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	f884 3198 	strb.w	r3, [r4, #408]	; 0x198
  pb_io_flush_istream();
 8002a9e:	f7ff fe9d 	bl	80027dc <pb_io_flush_istream>
}
 8002aa2:	2000      	movs	r0, #0
 8002aa4:	bd70      	pop	{r4, r5, r6, pc}
    for (idx = 0; idx < pbContextMgr.n_func; idx++) {
 8002aa6:	3501      	adds	r5, #1
 8002aa8:	e7d9      	b.n	8002a5e <aiPbMgrWaitAndProcess+0x2a>
 8002aaa:	bf00      	nop
 8002aac:	200008a0 	.word	0x200008a0
 8002ab0:	0801142b 	.word	0x0801142b
 8002ab4:	20000920 	.word	0x20000920

08002ab8 <aiPbMgrSendAck>:
{
 8002ab8:	b470      	push	{r4, r5, r6}
  resp->which_payload = respMsg_ack_tag;
 8002aba:	260c      	movs	r6, #12
{
 8002abc:	f89d 500c 	ldrb.w	r5, [sp, #12]
  resp->payload.ack.param = param;
 8002ac0:	608b      	str	r3, [r1, #8]
  resp->which_payload = respMsg_ack_tag;
 8002ac2:	80ce      	strh	r6, [r1, #6]
  resp->payload.ack.error = error;
 8002ac4:	730d      	strb	r5, [r1, #12]
}
 8002ac6:	bc70      	pop	{r4, r5, r6}
  aiPbMgrSendResp(req, resp, state);
 8002ac8:	f7ff bfa2 	b.w	8002a10 <aiPbMgrSendResp>

08002acc <aiPbMgrWaitAck>:

bool aiPbMgrWaitAck(void)
{
 8002acc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;
 8002ace:	2300      	movs	r3, #0
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002ad0:	aa02      	add	r2, sp, #8
 8002ad2:	4907      	ldr	r1, [pc, #28]	; (8002af0 <aiPbMgrWaitAck+0x24>)
 8002ad4:	4807      	ldr	r0, [pc, #28]	; (8002af4 <aiPbMgrWaitAck+0x28>)
  ackMsg ack = ackMsg_init_default;
 8002ad6:	9302      	str	r3, [sp, #8]
 8002ad8:	f88d 300c 	strb.w	r3, [sp, #12]
  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002adc:	f002 fc92 	bl	8005404 <pb_decode_delimited>
 8002ae0:	9001      	str	r0, [sp, #4]
  pb_io_flush_istream();
 8002ae2:	f7ff fe7b 	bl	80027dc <pb_io_flush_istream>
  return res;
}
 8002ae6:	9801      	ldr	r0, [sp, #4]
 8002ae8:	b005      	add	sp, #20
 8002aea:	f85d fb04 	ldr.w	pc, [sp], #4
 8002aee:	bf00      	nop
 8002af0:	08011130 	.word	0x08011130
 8002af4:	200008a0 	.word	0x200008a0

08002af8 <aiPbMgrSendLogV2>:
  pb_io_flush_istream();
  return res;
}

bool aiPbMgrSendLogV2(EnumState state, uint32_t lvl, const char *str)
{
 8002af8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  bool res;
  ackMsg ack = ackMsg_init_default;

  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8002afa:	4c19      	ldr	r4, [pc, #100]	; (8002b60 <aiPbMgrSendLogV2+0x68>)
{
 8002afc:	460e      	mov	r6, r1
 8002afe:	4611      	mov	r1, r2
  ackMsg ack = ackMsg_init_default;
 8002b00:	2300      	movs	r3, #0
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8002b02:	f894 2198 	ldrb.w	r2, [r4, #408]	; 0x198
{
 8002b06:	4605      	mov	r5, r0
  ackMsg ack = ackMsg_init_default;
 8002b08:	9302      	str	r3, [sp, #8]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8002b0a:	2a02      	cmp	r2, #2
  ackMsg ack = ackMsg_init_default;
 8002b0c:	f88d 300c 	strb.w	r3, [sp, #12]
  if (pbContextMgr.state != PB_MGR_ON_GOING)
 8002b10:	d124      	bne.n	8002b5c <aiPbMgrSendLogV2+0x64>
    return false;

  size_t len = strlen(str);
 8002b12:	4608      	mov	r0, r1
 8002b14:	9101      	str	r1, [sp, #4]
 8002b16:	f7fd fbe3 	bl	80002e0 <strlen>
  pbContextMgr.resp.which_payload = respMsg_log_tag;
  pbContextMgr.resp.payload.log.level = lvl;
  if (len >= sizeof(pbContextMgr.resp.payload.log.str))
    len = sizeof(pbContextMgr.resp.payload.log.str) - 1;

  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8002b1a:	287f      	cmp	r0, #127	; 0x7f
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 8002b1c:	f04f 030d 	mov.w	r3, #13
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8002b20:	9901      	ldr	r1, [sp, #4]
 8002b22:	bf28      	it	cs
 8002b24:	207f      	movcs	r0, #127	; 0x7f
  pbContextMgr.resp.payload.log.level = lvl;
 8002b26:	f8c4 6088 	str.w	r6, [r4, #136]	; 0x88
  pbContextMgr.resp.which_payload = respMsg_log_tag;
 8002b2a:	f8a4 3086 	strh.w	r3, [r4, #134]	; 0x86
  memcpy(&pbContextMgr.resp.payload.log.str[0], str, len+1);
 8002b2e:	1c42      	adds	r2, r0, #1
 8002b30:	f104 008c 	add.w	r0, r4, #140	; 0x8c
 8002b34:	f007 fdbe 	bl	800a6b4 <memcpy>

  aiPbMgrSendResp(&(pbContextMgr.req), &(pbContextMgr.resp), state);
 8002b38:	f104 0180 	add.w	r1, r4, #128	; 0x80
 8002b3c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
 8002b40:	462a      	mov	r2, r5
 8002b42:	f7ff ff65 	bl	8002a10 <aiPbMgrSendResp>

  res = pb_decode_delimited(&pbContextMgr.input, ackMsg_fields, &ack);
 8002b46:	4620      	mov	r0, r4
 8002b48:	aa02      	add	r2, sp, #8
 8002b4a:	4906      	ldr	r1, [pc, #24]	; (8002b64 <aiPbMgrSendLogV2+0x6c>)
 8002b4c:	f002 fc5a 	bl	8005404 <pb_decode_delimited>
 8002b50:	4604      	mov	r4, r0
  pb_io_flush_istream();
 8002b52:	f7ff fe43 	bl	80027dc <pb_io_flush_istream>
  return res;
}
 8002b56:	4620      	mov	r0, r4
 8002b58:	b004      	add	sp, #16
 8002b5a:	bd70      	pop	{r4, r5, r6, pc}
    return false;
 8002b5c:	461c      	mov	r4, r3
 8002b5e:	e7fa      	b.n	8002b56 <aiPbMgrSendLogV2+0x5e>
 8002b60:	200008a0 	.word	0x200008a0
 8002b64:	08011130 	.word	0x08011130

08002b68 <aiPbMgrReceiveData>:

bool aiPbMgrReceiveData(aiPbData *data)
{
 8002b68:	b510      	push	{r4, lr}
  aiDataMsg msg;

  msg.datas.funcs.decode = &decode_data_cb;
 8002b6a:	4b09      	ldr	r3, [pc, #36]	; (8002b90 <aiPbMgrReceiveData+0x28>)
{
 8002b6c:	b086      	sub	sp, #24
 8002b6e:	4604      	mov	r4, r0
  msg.datas.arg = (void *)data;

  /* Waiting and decoding aiDataMsg message */
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 8002b70:	4908      	ldr	r1, [pc, #32]	; (8002b94 <aiPbMgrReceiveData+0x2c>)
 8002b72:	aa01      	add	r2, sp, #4
  msg.datas.arg = (void *)data;
 8002b74:	e9cd 3004 	strd	r3, r0, [sp, #16]
  pb_decode_delimited(&pbContextMgr.input, aiDataMsg_fields, &msg);
 8002b78:	4807      	ldr	r0, [pc, #28]	; (8002b98 <aiPbMgrReceiveData+0x30>)
 8002b7a:	f002 fc43 	bl	8005404 <pb_decode_delimited>
  pb_io_flush_istream();
 8002b7e:	f7ff fe2d 	bl	80027dc <pb_io_flush_istream>

  data->type = msg.type;
 8002b82:	9b01      	ldr	r3, [sp, #4]
  data->addr = msg.addr;

  return true;
}
 8002b84:	2001      	movs	r0, #1
  data->type = msg.type;
 8002b86:	6023      	str	r3, [r4, #0]
  data->addr = msg.addr;
 8002b88:	9b03      	ldr	r3, [sp, #12]
 8002b8a:	60a3      	str	r3, [r4, #8]
}
 8002b8c:	b006      	add	sp, #24
 8002b8e:	bd10      	pop	{r4, pc}
 8002b90:	080028a9 	.word	0x080028a9
 8002b94:	08011164 	.word	0x08011164
 8002b98:	200008a0 	.word	0x200008a0

08002b9c <aiPbMgrSendOperator>:


bool aiPbMgrSendOperator(const reqMsg *req, respMsg *resp,
    EnumState state, const char *name, const uint32_t type, const uint32_t id,
    aiOpPerf *perf)
{
 8002b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b9e:	4617      	mov	r7, r2
 8002ba0:	b085      	sub	sp, #20
  struct _encode_uint32 array;
  resp->which_payload = respMsg_op_tag;
 8002ba2:	2210      	movs	r2, #16
{
 8002ba4:	4606      	mov	r6, r0
 8002ba6:	460c      	mov	r4, r1
 8002ba8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
  if (name)
 8002baa:	4618      	mov	r0, r3
  resp->which_payload = respMsg_op_tag;
 8002bac:	80ca      	strh	r2, [r1, #6]
  if (name)
 8002bae:	b1fb      	cbz	r3, 8002bf0 <aiPbMgrSendOperator+0x54>
    aiPbStrCopy(name, &resp->payload.op.name[0], sizeof(resp->payload.op.name));
 8002bb0:	2240      	movs	r2, #64	; 0x40
 8002bb2:	3108      	adds	r1, #8
 8002bb4:	f7ff fed2 	bl	800295c <aiPbStrCopy>
  else
    resp->payload.op.name[0] = 0;
  resp->payload.op.type = type;
 8002bb8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002bba:	64a3      	str	r3, [r4, #72]	; 0x48
  resp->payload.op.id = id;
 8002bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8002bbe:	64e3      	str	r3, [r4, #76]	; 0x4c

  if (perf) {
 8002bc0:	b1d5      	cbz	r5, 8002bf8 <aiPbMgrSendOperator+0x5c>
    resp->payload.op.duration = perf->duration;
 8002bc2:	682b      	ldr	r3, [r5, #0]
 8002bc4:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = perf->counter_type;
 8002bc6:	686b      	ldr	r3, [r5, #4]
 8002bc8:	6563      	str	r3, [r4, #84]	; 0x54
    if (perf->counters) {
 8002bca:	68eb      	ldr	r3, [r5, #12]
 8002bcc:	b193      	cbz	r3, 8002bf4 <aiPbMgrSendOperator+0x58>
      array.size = perf->counter_n;
 8002bce:	68aa      	ldr	r2, [r5, #8]
	  array.data = (void *)perf->counters;
 8002bd0:	e9cd 2301 	strd	r2, r3, [sp, #4]
	  array.offset = 4;
 8002bd4:	2304      	movs	r3, #4
 8002bd6:	9303      	str	r3, [sp, #12]
      resp->payload.op.counters.funcs.encode = encode_uint32;
 8002bd8:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <aiPbMgrSendOperator+0x68>)
 8002bda:	65a3      	str	r3, [r4, #88]	; 0x58
      resp->payload.op.counters.arg = &array;
 8002bdc:	ab01      	add	r3, sp, #4
 8002bde:	65e3      	str	r3, [r4, #92]	; 0x5c
    resp->payload.op.duration = 0.0f;
    resp->payload.op.counter_type = 0;
    resp->payload.op.counters.funcs.encode = NULL;
  }

  aiPbMgrSendResp(req, resp, state);
 8002be0:	4630      	mov	r0, r6
 8002be2:	463a      	mov	r2, r7
 8002be4:	4621      	mov	r1, r4
 8002be6:	f7ff ff13 	bl	8002a10 <aiPbMgrSendResp>
  // aiPbMgrWaitAck();

  return true;
}
 8002bea:	2001      	movs	r0, #1
 8002bec:	b005      	add	sp, #20
 8002bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
    resp->payload.op.name[0] = 0;
 8002bf0:	720b      	strb	r3, [r1, #8]
 8002bf2:	e7e1      	b.n	8002bb8 <aiPbMgrSendOperator+0x1c>
      resp->payload.op.counters.funcs.encode = NULL;
 8002bf4:	65a3      	str	r3, [r4, #88]	; 0x58
 8002bf6:	e7f3      	b.n	8002be0 <aiPbMgrSendOperator+0x44>
    resp->payload.op.duration = 0.0f;
 8002bf8:	2300      	movs	r3, #0
    resp->payload.op.counters.funcs.encode = NULL;
 8002bfa:	e9c4 5515 	strd	r5, r5, [r4, #84]	; 0x54
    resp->payload.op.duration = 0.0f;
 8002bfe:	6523      	str	r3, [r4, #80]	; 0x50
    resp->payload.op.counter_type = 0;
 8002c00:	e7ee      	b.n	8002be0 <aiPbMgrSendOperator+0x44>
 8002c02:	bf00      	nop
 8002c04:	08002833 	.word	0x08002833

08002c08 <aiPbCmdSync>:
#if defined(_IS_GHS_COMPILER) && _IS_GHS_COMPILER
#define _ARM_TOOLS_ID       EnumTools_AI_GHS
#endif

void aiPbCmdSync(const reqMsg *req, respMsg *resp, void *param)
{
 8002c08:	b410      	push	{r4}
  resp->which_payload = respMsg_sync_tag;
 8002c0a:	240a      	movs	r4, #10
 8002c0c:	80cc      	strh	r4, [r1, #6]
  resp->payload.sync.version =
 8002c0e:	f44f 7440 	mov.w	r4, #768	; 0x300
 8002c12:	608c      	str	r4, [r1, #8]
#if defined(AI_PB_TEST) && (AI_PB_TEST == 1)
  resp->payload.sync.capability |= EnumCapability_CAP_SELF_TEST;
#endif

  resp->payload.sync.rtid = (uint32_t)param >> 16;
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8002c14:	b294      	uxth	r4, r2
  resp->payload.sync.rtid = (uint32_t)param >> 16;
 8002c16:	0c12      	lsrs	r2, r2, #16
  resp->payload.sync.capability |= ((uint32_t)param & 0xFFFF);
 8002c18:	60cc      	str	r4, [r1, #12]

  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 8002c1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
}
 8002c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
  resp->payload.sync.rtid |= (_ARM_TOOLS_ID << 8);
 8002c22:	610a      	str	r2, [r1, #16]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8002c24:	2200      	movs	r2, #0
 8002c26:	f7ff bef3 	b.w	8002a10 <aiPbMgrSendResp>
	...

08002c2c <aiPlatformVersion>:

#include <ai_platform_interface.h>


void aiPlatformVersion(void)
{
 8002c2c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  const ai_platform_version rt_ver = ai_platform_runtime_get_version();
 8002c2e:	f003 fa27 	bl	8006080 <ai_platform_runtime_get_version>

  LC_PRINT("\r\nAI platform (API %d.%d.%d - RUNTIME %d.%d.%d)\r\n",
 8002c32:	f3c0 4307 	ubfx	r3, r0, #16, #8
 8002c36:	2201      	movs	r2, #1
 8002c38:	9302      	str	r3, [sp, #8]
 8002c3a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 8002c3e:	b2c0      	uxtb	r0, r0
 8002c40:	4611      	mov	r1, r2
 8002c42:	9301      	str	r3, [sp, #4]
 8002c44:	2300      	movs	r3, #0
 8002c46:	9000      	str	r0, [sp, #0]
 8002c48:	4802      	ldr	r0, [pc, #8]	; (8002c54 <aiPlatformVersion+0x28>)
 8002c4a:	f000 fa3b 	bl	80030c4 <lc_print>
      AI_PLATFORM_API_MINOR,
      AI_PLATFORM_API_MICRO,
      rt_ver.major,
      rt_ver.minor,
      rt_ver.micro);
}
 8002c4e:	b007      	add	sp, #28
 8002c50:	f85d fb04 	ldr.w	pc, [sp], #4
 8002c54:	0800c3a0 	.word	0x0800c3a0

08002c58 <aiLogErr>:

void aiLogErr(const ai_error err, const char *fct)
{
 8002c58:	b410      	push	{r4}
  if (fct)
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8002c5a:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8002c5e:	b2c4      	uxtb	r4, r0
  if (fct)
 8002c60:	b129      	cbz	r1, 8002c6e <aiLogErr+0x16>
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8002c62:	4622      	mov	r2, r4
 8002c64:	4805      	ldr	r0, [pc, #20]	; (8002c7c <aiLogErr+0x24>)
        err.type, err.code);
  else
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
}
 8002c66:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8002c6a:	f000 ba2b 	b.w	80030c4 <lc_print>
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8002c6e:	4621      	mov	r1, r4
 8002c70:	461a      	mov	r2, r3
 8002c72:	4803      	ldr	r0, [pc, #12]	; (8002c80 <aiLogErr+0x28>)
}
 8002c74:	f85d 4b04 	ldr.w	r4, [sp], #4
    LC_PRINT("E: AI error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8002c78:	f000 ba24 	b.w	80030c4 <lc_print>
 8002c7c:	0800c3d2 	.word	0x0800c3d2
 8002c80:	0800c3ff 	.word	0x0800c3ff

08002c84 <aiPrintBufferInfo>:
void aiPrintBufferInfo(const ai_buffer *buffer)
{
  const ai_buffer_format fmt = buffer->format;

  /* shape + nb elem */
  LC_PRINT("(%d,%d,%d,",
 8002c84:	6981      	ldr	r1, [r0, #24]
{
 8002c86:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c8a:	4604      	mov	r4, r0
  const ai_buffer_format fmt = buffer->format;
 8002c8c:	6806      	ldr	r6, [r0, #0]
  LC_PRINT("(%d,%d,%d,",
 8002c8e:	4870      	ldr	r0, [pc, #448]	; (8002e50 <aiPrintBufferInfo+0x1cc>)
 8002c90:	e9d1 3202 	ldrd	r3, r2, [r1, #8]
{
 8002c94:	ed2d 8b02 	vpush	{d8}
  LC_PRINT("(%d,%d,%d,",
 8002c98:	6809      	ldr	r1, [r1, #0]
{
 8002c9a:	b083      	sub	sp, #12
  LC_PRINT("(%d,%d,%d,",
 8002c9c:	f000 fa12 	bl	80030c4 <lc_print>
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_HEIGHT),
     (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_WIDTH));

  if (AI_BUFFER_SHAPE_SIZE(buffer) == 5)
 8002ca0:	6962      	ldr	r2, [r4, #20]
 8002ca2:	69a0      	ldr	r0, [r4, #24]
 8002ca4:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002ca8:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 8002cac:	d119      	bne.n	8002ce2 <aiPrintBufferInfo+0x5e>
  {
    LC_PRINT("%d,%d)",
 8002cae:	6842      	ldr	r2, [r0, #4]
 8002cb0:	6901      	ldr	r1, [r0, #16]
 8002cb2:	4868      	ldr	r0, [pc, #416]	; (8002e54 <aiPrintBufferInfo+0x1d0>)
 8002cb4:	f000 fa06 	bl	80030c4 <lc_print>
  } else
  {
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
  }

  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8002cb8:	2101      	movs	r1, #1
 8002cba:	4620      	mov	r0, r4
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8002cbc:	f3c6 4743 	ubfx	r7, r6, #17, #4
  LC_PRINT("%d/", (int)AI_BUFFER_SIZE(buffer));
 8002cc0:	f002 ffa4 	bl	8005c0c <ai_buffer_get_size>
 8002cc4:	4601      	mov	r1, r0
 8002cc6:	4864      	ldr	r0, [pc, #400]	; (8002e58 <aiPrintBufferInfo+0x1d4>)
 8002cc8:	f000 f9fc 	bl	80030c4 <lc_print>
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8002ccc:	2f01      	cmp	r7, #1
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8002cce:	ea4f 18e6 	mov.w	r8, r6, asr #7
 8002cd2:	f3c6 15c6 	ubfx	r5, r6, #7, #7
    if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_FLOAT)
 8002cd6:	d113      	bne.n	8002d00 <aiPrintBufferInfo+0x7c>
      LC_PRINT("float%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8002cd8:	4629      	mov	r1, r5
 8002cda:	4860      	ldr	r0, [pc, #384]	; (8002e5c <aiPrintBufferInfo+0x1d8>)
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
      }
      LC_PRINT((s_ > max_)?"..":"");
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
      /* lower of 8b format */
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8002cdc:	f000 f9f2 	bl	80030c4 <lc_print>
 8002ce0:	e044      	b.n	8002d6c <aiPrintBufferInfo+0xe8>
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8002ce2:	f5b2 6fc0 	cmp.w	r2, #1536	; 0x600
    LC_PRINT("%d,%d)",
 8002ce6:	6843      	ldr	r3, [r0, #4]
  else if (AI_BUFFER_SHAPE_SIZE(buffer) == 6)
 8002ce8:	d105      	bne.n	8002cf6 <aiPrintBufferInfo+0x72>
    LC_PRINT("%d,%d,%d)",
 8002cea:	e9d0 1204 	ldrd	r1, r2, [r0, #16]
 8002cee:	485c      	ldr	r0, [pc, #368]	; (8002e60 <aiPrintBufferInfo+0x1dc>)
 8002cf0:	f000 f9e8 	bl	80030c4 <lc_print>
 8002cf4:	e7e0      	b.n	8002cb8 <aiPrintBufferInfo+0x34>
    LC_PRINT("%d)", (int)AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_CHANNEL));
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	485a      	ldr	r0, [pc, #360]	; (8002e64 <aiPrintBufferInfo+0x1e0>)
 8002cfa:	f000 f9e3 	bl	80030c4 <lc_print>
 8002cfe:	e7db      	b.n	8002cb8 <aiPrintBufferInfo+0x34>
    else if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_BOOL) {
 8002d00:	2f03      	cmp	r7, #3
 8002d02:	d102      	bne.n	8002d0a <aiPrintBufferInfo+0x86>
      LC_PRINT("bool%d", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8002d04:	4629      	mov	r1, r5
 8002d06:	4858      	ldr	r0, [pc, #352]	; (8002e68 <aiPrintBufferInfo+0x1e4>)
 8002d08:	e7e8      	b.n	8002cdc <aiPrintBufferInfo+0x58>
      LC_PRINT("%s%d", AI_BUFFER_FMT_GET_SIGN(fmt)?"i":"u",
 8002d0a:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8002e84 <aiPrintBufferInfo+0x200>
 8002d0e:	f416 0f00 	tst.w	r6, #8388608	; 0x800000
 8002d12:	462a      	mov	r2, r5
 8002d14:	f109 0102 	add.w	r1, r9, #2
 8002d18:	f109 003b 	add.w	r0, r9, #59	; 0x3b
 8002d1c:	bf18      	it	ne
 8002d1e:	4649      	movne	r1, r9
 8002d20:	f000 f9d0 	bl	80030c4 <lc_print>
  if (AI_BUFFER_FMT_GET_TYPE(fmt) == AI_BUFFER_FMT_TYPE_Q) {
 8002d24:	2f02      	cmp	r7, #2
 8002d26:	d121      	bne.n	8002d6c <aiPrintBufferInfo+0xe8>
    if (AI_BUFFER_META_INFO_INTQ(buffer->meta_info)) {
 8002d28:	68a3      	ldr	r3, [r4, #8]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d06a      	beq.n	8002e04 <aiPrintBufferInfo+0x180>
 8002d2e:	681a      	ldr	r2, [r3, #0]
 8002d30:	07d2      	lsls	r2, r2, #31
 8002d32:	d567      	bpl.n	8002e04 <aiPrintBufferInfo+0x180>
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d064      	beq.n	8002e04 <aiPrintBufferInfo+0x180>
      ai_u16 s_ = AI_BUFFER_META_INFO_INTQ_GET_SIZE(buffer->meta_info);
 8002d3a:	f8b3 8002 	ldrh.w	r8, [r3, #2]
      LC_PRINT(" %d:", s_);
 8002d3e:	f109 0040 	add.w	r0, r9, #64	; 0x40
      for (int idx=0; idx<max_; idx++) {
 8002d42:	2500      	movs	r5, #0
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8002d44:	ed9f 8a49 	vldr	s16, [pc, #292]	; 8002e6c <aiPrintBufferInfo+0x1e8>
      const int max_ = s_> 4?4:s_;
 8002d48:	4647      	mov	r7, r8
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8002d4a:	f109 0945 	add.w	r9, r9, #69	; 0x45
      LC_PRINT(" %d:", s_);
 8002d4e:	4641      	mov	r1, r8
      const int max_ = s_> 4?4:s_;
 8002d50:	2f04      	cmp	r7, #4
 8002d52:	bf28      	it	cs
 8002d54:	2704      	movcs	r7, #4
      LC_PRINT(" %d:", s_);
 8002d56:	f000 f9b5 	bl	80030c4 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8002d5a:	42bd      	cmp	r5, r7
 8002d5c:	db1a      	blt.n	8002d94 <aiPrintBufferInfo+0x110>
      LC_PRINT((s_ > max_)?"..":"");
 8002d5e:	4b44      	ldr	r3, [pc, #272]	; (8002e70 <aiPrintBufferInfo+0x1ec>)
 8002d60:	1cd8      	adds	r0, r3, #3
 8002d62:	4547      	cmp	r7, r8
 8002d64:	bf38      	it	cc
 8002d66:	4618      	movcc	r0, r3
 8002d68:	f000 f9ac 	bl	80030c4 <lc_print>
          AI_BUFFER_FMT_GET_FBITS(fmt)
      );
    }
  }
  /* @ + size in bytes */
  if (buffer->data)
 8002d6c:	6865      	ldr	r5, [r4, #4]
    LC_PRINT(" @0x%X/%d",
 8002d6e:	2101      	movs	r1, #1
 8002d70:	4620      	mov	r0, r4
  if (buffer->data)
 8002d72:	2d00      	cmp	r5, #0
 8002d74:	d057      	beq.n	8002e26 <aiPrintBufferInfo+0x1a2>
    LC_PRINT(" @0x%X/%d",
 8002d76:	f002 ff49 	bl	8005c0c <ai_buffer_get_size>
 8002d7a:	4631      	mov	r1, r6
 8002d7c:	f002 ff7a 	bl	8005c74 <ai_buffer_get_byte_size>
 8002d80:	4629      	mov	r1, r5
 8002d82:	4602      	mov	r2, r0
 8002d84:	483b      	ldr	r0, [pc, #236]	; (8002e74 <aiPrintBufferInfo+0x1f0>)
    );
  else
    LC_PRINT(" (User Domain)/%d",
        (int)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer), fmt)
    );
}
 8002d86:	b003      	add	sp, #12
 8002d88:	ecbd 8b02 	vpop	{d8}
 8002d8c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" @0x%X/%d",
 8002d90:	f000 b998 	b.w	80030c4 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8002d94:	68a2      	ldr	r2, [r4, #8]
 8002d96:	2a00      	cmp	r2, #0
 8002d98:	d053      	beq.n	8002e42 <aiPrintBufferInfo+0x1be>
 8002d9a:	6813      	ldr	r3, [r2, #0]
 8002d9c:	f013 0301 	ands.w	r3, r3, #1
 8002da0:	d02b      	beq.n	8002dfa <aiPrintBufferInfo+0x176>
 8002da2:	6852      	ldr	r2, [r2, #4]
 8002da4:	2a00      	cmp	r2, #0
 8002da6:	d04c      	beq.n	8002e42 <aiPrintBufferInfo+0x1be>
 8002da8:	6853      	ldr	r3, [r2, #4]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d04d      	beq.n	8002e4a <aiPrintBufferInfo+0x1c6>
 8002dae:	8851      	ldrh	r1, [r2, #2]
 8002db0:	42a9      	cmp	r1, r5
 8002db2:	dd4a      	ble.n	8002e4a <aiPrintBufferInfo+0x1c6>
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8002dba:	edd3 7a00 	vldr	s15, [r3]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8002dbe:	2a00      	cmp	r2, #0
 8002dc0:	d041      	beq.n	8002e46 <aiPrintBufferInfo+0x1c2>
 8002dc2:	8813      	ldrh	r3, [r2, #0]
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8002dc4:	6851      	ldr	r1, [r2, #4]
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8002dc6:	f013 0302 	ands.w	r3, r3, #2
 8002dca:	d00f      	beq.n	8002dec <aiPrintBufferInfo+0x168>
 8002dcc:	b1c1      	cbz	r1, 8002e00 <aiPrintBufferInfo+0x17c>
 8002dce:	8853      	ldrh	r3, [r2, #2]
 8002dd0:	42ab      	cmp	r3, r5
 8002dd2:	dd38      	ble.n	8002e46 <aiPrintBufferInfo+0x1c2>
 8002dd4:	684b      	ldr	r3, [r1, #4]
 8002dd6:	5d5b      	ldrb	r3, [r3, r5]
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8002dd8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8002ddc:	9300      	str	r3, [sp, #0]
 8002dde:	4648      	mov	r0, r9
      for (int idx=0; idx<max_; idx++) {
 8002de0:	3501      	adds	r5, #1
        LC_PRINT("(%f,%d),", (double)scale, zero_point);
 8002de2:	ec53 2b17 	vmov	r2, r3, d7
 8002de6:	f000 f96d 	bl	80030c4 <lc_print>
      for (int idx=0; idx<max_; idx++) {
 8002dea:	e7b6      	b.n	8002d5a <aiPrintBufferInfo+0xd6>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8002dec:	b141      	cbz	r1, 8002e00 <aiPrintBufferInfo+0x17c>
 8002dee:	8852      	ldrh	r2, [r2, #2]
 8002df0:	42aa      	cmp	r2, r5
 8002df2:	ddf1      	ble.n	8002dd8 <aiPrintBufferInfo+0x154>
 8002df4:	684b      	ldr	r3, [r1, #4]
 8002df6:	575b      	ldrsb	r3, [r3, r5]
 8002df8:	e7ee      	b.n	8002dd8 <aiPrintBufferInfo+0x154>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8002dfa:	eef0 7a48 	vmov.f32	s15, s16
 8002dfe:	e7eb      	b.n	8002dd8 <aiPrintBufferInfo+0x154>
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8002e00:	460b      	mov	r3, r1
 8002e02:	e7e9      	b.n	8002dd8 <aiPrintBufferInfo+0x154>
    } else if (AI_BUFFER_FMT_GET_BITS(fmt) < 8) {
 8002e04:	f018 0f78 	tst.w	r8, #120	; 0x78
 8002e08:	d102      	bne.n	8002e10 <aiPrintBufferInfo+0x18c>
      LC_PRINT(" int32-%db", (int)AI_BUFFER_FMT_GET_BITS(fmt));
 8002e0a:	4629      	mov	r1, r5
 8002e0c:	481a      	ldr	r0, [pc, #104]	; (8002e78 <aiPrintBufferInfo+0x1f4>)
 8002e0e:	e765      	b.n	8002cdc <aiPrintBufferInfo+0x58>
      LC_PRINT(" Q%d.%d",
 8002e10:	f006 027f 	and.w	r2, r6, #127	; 0x7f
 8002e14:	f3c6 51c0 	ubfx	r1, r6, #23, #1
 8002e18:	4818      	ldr	r0, [pc, #96]	; (8002e7c <aiPrintBufferInfo+0x1f8>)
 8002e1a:	3a40      	subs	r2, #64	; 0x40
 8002e1c:	4411      	add	r1, r2
 8002e1e:	1a69      	subs	r1, r5, r1
 8002e20:	f000 f950 	bl	80030c4 <lc_print>
 8002e24:	e7a2      	b.n	8002d6c <aiPrintBufferInfo+0xe8>
    LC_PRINT(" (User Domain)/%d",
 8002e26:	f002 fef1 	bl	8005c0c <ai_buffer_get_size>
 8002e2a:	4631      	mov	r1, r6
 8002e2c:	f002 ff22 	bl	8005c74 <ai_buffer_get_byte_size>
 8002e30:	4601      	mov	r1, r0
 8002e32:	4813      	ldr	r0, [pc, #76]	; (8002e80 <aiPrintBufferInfo+0x1fc>)
}
 8002e34:	b003      	add	sp, #12
 8002e36:	ecbd 8b02 	vpop	{d8}
 8002e3a:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    LC_PRINT(" (User Domain)/%d",
 8002e3e:	f000 b941 	b.w	80030c4 <lc_print>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8002e42:	eef0 7a48 	vmov.f32	s15, s16
        int zero_point = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(buffer->meta_info, idx);
 8002e46:	2300      	movs	r3, #0
 8002e48:	e7c6      	b.n	8002dd8 <aiPrintBufferInfo+0x154>
        ai_float scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(buffer->meta_info, idx);
 8002e4a:	eef0 7a48 	vmov.f32	s15, s16
 8002e4e:	e7b6      	b.n	8002dbe <aiPrintBufferInfo+0x13a>
 8002e50:	0800c42f 	.word	0x0800c42f
 8002e54:	0800c43a 	.word	0x0800c43a
 8002e58:	0800c44f 	.word	0x0800c44f
 8002e5c:	0800c453 	.word	0x0800c453
 8002e60:	0800c441 	.word	0x0800c441
 8002e64:	0800c44b 	.word	0x0800c44b
 8002e68:	0800c45b 	.word	0x0800c45b
 8002e6c:	00000000 	.word	0x00000000
 8002e70:	0800c42b 	.word	0x0800c42b
 8002e74:	0800c488 	.word	0x0800c488
 8002e78:	0800c475 	.word	0x0800c475
 8002e7c:	0800c480 	.word	0x0800c480
 8002e80:	0800c492 	.word	0x0800c492
 8002e84:	0800c427 	.word	0x0800c427

08002e88 <aiPrintNetworkInfo>:

void aiPrintNetworkInfo(const ai_network_report* report)
{
 8002e88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e8c:	4604      	mov	r4, r0
  LC_PRINT("Network informations...\r\n");
 8002e8e:	484b      	ldr	r0, [pc, #300]	; (8002fbc <aiPrintNetworkInfo+0x134>)
 8002e90:	f000 f918 	bl	80030c4 <lc_print>
  LC_PRINT(" model name         : %s\r\n", report->model_name);
 8002e94:	484a      	ldr	r0, [pc, #296]	; (8002fc0 <aiPrintNetworkInfo+0x138>)
 8002e96:	6821      	ldr	r1, [r4, #0]
 8002e98:	f000 f914 	bl	80030c4 <lc_print>
  LC_PRINT(" model signature    : %s\r\n", report->model_signature);
 8002e9c:	6861      	ldr	r1, [r4, #4]
 8002e9e:	4849      	ldr	r0, [pc, #292]	; (8002fc4 <aiPrintNetworkInfo+0x13c>)
 8002ea0:	f000 f910 	bl	80030c4 <lc_print>
  LC_PRINT(" model datetime     : %s\r\n", report->model_datetime);
 8002ea4:	68a1      	ldr	r1, [r4, #8]
 8002ea6:	4848      	ldr	r0, [pc, #288]	; (8002fc8 <aiPrintNetworkInfo+0x140>)
 8002ea8:	f000 f90c 	bl	80030c4 <lc_print>
  LC_PRINT(" compile datetime   : %s\r\n", report->compile_datetime);
 8002eac:	68e1      	ldr	r1, [r4, #12]
 8002eae:	4847      	ldr	r0, [pc, #284]	; (8002fcc <aiPrintNetworkInfo+0x144>)
 8002eb0:	f000 f908 	bl	80030c4 <lc_print>
  LC_PRINT(" runtime version    : %d.%d.%d\r\n",
      report->runtime_version.major,
      report->runtime_version.minor,
      report->runtime_version.micro);
#endif
  if (report->tool_revision[0])
 8002eb4:	69a1      	ldr	r1, [r4, #24]
 8002eb6:	780b      	ldrb	r3, [r1, #0]
 8002eb8:	b113      	cbz	r3, 8002ec0 <aiPrintNetworkInfo+0x38>
    LC_PRINT(" Tool revision      : %s\r\n", (report->tool_revision[0])?report->tool_revision:"");
 8002eba:	4845      	ldr	r0, [pc, #276]	; (8002fd0 <aiPrintNetworkInfo+0x148>)
 8002ebc:	f000 f902 	bl	80030c4 <lc_print>
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8002ec0:	7f21      	ldrb	r1, [r4, #28]
      report->tool_version.micro);
  LC_PRINT(" complexity         : " "%" PRIu64 " MACC\r\n", report->n_macc);
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);

  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8002ec2:	2500      	movs	r5, #0
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8002ec4:	7fa3      	ldrb	r3, [r4, #30]
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8002ec6:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8002eca:	7f62      	ldrb	r2, [r4, #29]
 8002ecc:	4841      	ldr	r0, [pc, #260]	; (8002fd4 <aiPrintNetworkInfo+0x14c>)
      LC_PRINT("  [%d] ", idx);
 8002ece:	4f42      	ldr	r7, [pc, #264]	; (8002fd8 <aiPrintNetworkInfo+0x150>)
  LC_PRINT(" tools version      : %d.%d.%d\r\n",
 8002ed0:	f000 f8f8 	bl	80030c4 <lc_print>
  LC_PRINT(" complexity         : " "%" PRIu64 " MACC\r\n", report->n_macc);
 8002ed4:	4841      	ldr	r0, [pc, #260]	; (8002fdc <aiPrintNetworkInfo+0x154>)
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8002ed6:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" complexity         : " "%" PRIu64 " MACC\r\n", report->n_macc);
 8002eda:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
 8002ede:	f000 f8f1 	bl	80030c4 <lc_print>
  LC_PRINT(" c-nodes            : %d\r\n", (int)report->n_nodes);
 8002ee2:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
 8002ee4:	483e      	ldr	r0, [pc, #248]	; (8002fe0 <aiPrintNetworkInfo+0x158>)
 8002ee6:	f000 f8ed 	bl	80030c4 <lc_print>
  LC_PRINT(" map_activations    : %d\r\n", report->map_activations.size);
 8002eea:	f8b4 1052 	ldrh.w	r1, [r4, #82]	; 0x52
 8002eee:	483d      	ldr	r0, [pc, #244]	; (8002fe4 <aiPrintNetworkInfo+0x15c>)
 8002ef0:	f000 f8e8 	bl	80030c4 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8002ef4:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8002ef8:	42ab      	cmp	r3, r5
 8002efa:	dc25      	bgt.n	8002f48 <aiPrintNetworkInfo+0xc0>
  }

  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
  for (int idx=0; idx<report->map_weights.size;idx++) {
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
      LC_PRINT("  [%d] ", idx);
 8002efc:	4f36      	ldr	r7, [pc, #216]	; (8002fd8 <aiPrintNetworkInfo+0x150>)
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8002efe:	2500      	movs	r5, #0
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8002f00:	f04f 081c 	mov.w	r8, #28
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8002f04:	f8b4 104a 	ldrh.w	r1, [r4, #74]	; 0x4a
      aiPrintBufferInfo(buffer);
      LC_PRINT("\r\n");
 8002f08:	f107 0908 	add.w	r9, r7, #8
  LC_PRINT(" map_weights        : %d\r\n", report->map_weights.size);
 8002f0c:	4836      	ldr	r0, [pc, #216]	; (8002fe8 <aiPrintNetworkInfo+0x160>)
 8002f0e:	f000 f8d9 	bl	80030c4 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8002f12:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
 8002f16:	42ab      	cmp	r3, r5
 8002f18:	dc25      	bgt.n	8002f66 <aiPrintNetworkInfo+0xde>
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
          report->n_outputs);

  for (int i=0; i<report->n_inputs; i++) {
    // LC_PRINT("  I[%d] %s\r\n", i, aiGetBufferDesc(&report->inputs[i]));
    LC_PRINT("  I[%d] ", i);
 8002f1a:	4e34      	ldr	r6, [pc, #208]	; (8002fec <aiPrintNetworkInfo+0x164>)
  for (int i=0; i<report->n_inputs; i++) {
 8002f1c:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->inputs[i]);
 8002f1e:	271c      	movs	r7, #28
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8002f20:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
    LC_PRINT("\r\n");
 8002f22:	f1a6 083c 	sub.w	r8, r6, #60	; 0x3c
  LC_PRINT(" n_inputs/n_outputs : %u/%u\r\n", report->n_inputs,
 8002f26:	8f21      	ldrh	r1, [r4, #56]	; 0x38
 8002f28:	4831      	ldr	r0, [pc, #196]	; (8002ff0 <aiPrintNetworkInfo+0x168>)
 8002f2a:	f000 f8cb 	bl	80030c4 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8002f2e:	8f23      	ldrh	r3, [r4, #56]	; 0x38
 8002f30:	42ab      	cmp	r3, r5
 8002f32:	dc27      	bgt.n	8002f84 <aiPrintNetworkInfo+0xfc>
  }

  for (int i=0; i<report->n_outputs; i++) {
    //LC_PRINT("  O[%d] %s\r\n", i, aiGetBufferDesc(&report->outputs[i]));
    LC_PRINT("  O[%d] ", i);
 8002f34:	4e2f      	ldr	r6, [pc, #188]	; (8002ff4 <aiPrintNetworkInfo+0x16c>)
  for (int i=0; i<report->n_outputs; i++) {
 8002f36:	2500      	movs	r5, #0
    aiPrintBufferInfo(&report->outputs[i]);
 8002f38:	271c      	movs	r7, #28
    LC_PRINT("\r\n");
 8002f3a:	f1a6 0845 	sub.w	r8, r6, #69	; 0x45
  for (int i=0; i<report->n_outputs; i++) {
 8002f3e:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
 8002f40:	42ab      	cmp	r3, r5
 8002f42:	dc2d      	bgt.n	8002fa0 <aiPrintNetworkInfo+0x118>
  }
}
 8002f44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8002f48:	6d60      	ldr	r0, [r4, #84]	; 0x54
      LC_PRINT("  [%d] ", idx);
 8002f4a:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_activations.buffer[idx];
 8002f4c:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 8002f50:	4638      	mov	r0, r7
 8002f52:	f000 f8b7 	bl	80030c4 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8002f56:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 8002f58:	4630      	mov	r0, r6
 8002f5a:	f7ff fe93 	bl	8002c84 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8002f5e:	4648      	mov	r0, r9
 8002f60:	f000 f8b0 	bl	80030c4 <lc_print>
  for (int idx=0; idx<report->map_activations.size;idx++) {
 8002f64:	e7c6      	b.n	8002ef4 <aiPrintNetworkInfo+0x6c>
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8002f66:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
      LC_PRINT("  [%d] ", idx);
 8002f68:	4629      	mov	r1, r5
      const ai_buffer *buffer = &report->map_weights.buffer[idx];
 8002f6a:	fb08 0605 	mla	r6, r8, r5, r0
      LC_PRINT("  [%d] ", idx);
 8002f6e:	4638      	mov	r0, r7
 8002f70:	f000 f8a8 	bl	80030c4 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8002f74:	3501      	adds	r5, #1
      aiPrintBufferInfo(buffer);
 8002f76:	4630      	mov	r0, r6
 8002f78:	f7ff fe84 	bl	8002c84 <aiPrintBufferInfo>
      LC_PRINT("\r\n");
 8002f7c:	4648      	mov	r0, r9
 8002f7e:	f000 f8a1 	bl	80030c4 <lc_print>
  for (int idx=0; idx<report->map_weights.size;idx++) {
 8002f82:	e7c6      	b.n	8002f12 <aiPrintNetworkInfo+0x8a>
    LC_PRINT("  I[%d] ", i);
 8002f84:	4629      	mov	r1, r5
 8002f86:	4630      	mov	r0, r6
 8002f88:	f000 f89c 	bl	80030c4 <lc_print>
    aiPrintBufferInfo(&report->inputs[i]);
 8002f8c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8002f8e:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_inputs; i++) {
 8002f92:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->inputs[i]);
 8002f94:	f7ff fe76 	bl	8002c84 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8002f98:	4640      	mov	r0, r8
 8002f9a:	f000 f893 	bl	80030c4 <lc_print>
  for (int i=0; i<report->n_inputs; i++) {
 8002f9e:	e7c6      	b.n	8002f2e <aiPrintNetworkInfo+0xa6>
    LC_PRINT("  O[%d] ", i);
 8002fa0:	4629      	mov	r1, r5
 8002fa2:	4630      	mov	r0, r6
 8002fa4:	f000 f88e 	bl	80030c4 <lc_print>
    aiPrintBufferInfo(&report->outputs[i]);
 8002fa8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002faa:	fb07 0005 	mla	r0, r7, r5, r0
  for (int i=0; i<report->n_outputs; i++) {
 8002fae:	3501      	adds	r5, #1
    aiPrintBufferInfo(&report->outputs[i]);
 8002fb0:	f7ff fe68 	bl	8002c84 <aiPrintBufferInfo>
    LC_PRINT("\r\n");
 8002fb4:	4640      	mov	r0, r8
 8002fb6:	f000 f885 	bl	80030c4 <lc_print>
  for (int i=0; i<report->n_outputs; i++) {
 8002fba:	e7c0      	b.n	8002f3e <aiPrintNetworkInfo+0xb6>
 8002fbc:	0800c4a4 	.word	0x0800c4a4
 8002fc0:	0800c4be 	.word	0x0800c4be
 8002fc4:	0800c4d9 	.word	0x0800c4d9
 8002fc8:	0800c4f4 	.word	0x0800c4f4
 8002fcc:	0800c50f 	.word	0x0800c50f
 8002fd0:	0800c52a 	.word	0x0800c52a
 8002fd4:	0800c545 	.word	0x0800c545
 8002fd8:	0800c5be 	.word	0x0800c5be
 8002fdc:	0800c566 	.word	0x0800c566
 8002fe0:	0800c588 	.word	0x0800c588
 8002fe4:	0800c5a3 	.word	0x0800c5a3
 8002fe8:	0800c5c9 	.word	0x0800c5c9
 8002fec:	0800c602 	.word	0x0800c602
 8002ff0:	0800c5e4 	.word	0x0800c5e4
 8002ff4:	0800c60b 	.word	0x0800c60b

08002ff8 <_put_c_buffer_cb>:
};

static void _put_c_buffer_cb(void *user, const char c)
{
  struct _buffer *buffer = (struct _buffer *)user;
  if (buffer->pos < (buffer->size - 1)) {
 8002ff8:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	429a      	cmp	r2, r3
 8003000:	d207      	bcs.n	8003012 <_put_c_buffer_cb+0x1a>
    buffer->buffer[buffer->pos] = c;
 8003002:	6803      	ldr	r3, [r0, #0]
 8003004:	5499      	strb	r1, [r3, r2]
    buffer->pos++;
    buffer->buffer[buffer->pos] = 0;
 8003006:	2100      	movs	r1, #0
    buffer->pos++;
 8003008:	6883      	ldr	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 800300a:	6802      	ldr	r2, [r0, #0]
    buffer->pos++;
 800300c:	3301      	adds	r3, #1
 800300e:	6083      	str	r3, [r0, #8]
    buffer->buffer[buffer->pos] = 0;
 8003010:	54d1      	strb	r1, [r2, r3]
  }
}
 8003012:	4770      	bx	lr

08003014 <_put_c_driver>:
  if (_ioWriteAllowed)
 8003014:	4b08      	ldr	r3, [pc, #32]	; (8003038 <_put_c_driver+0x24>)
 8003016:	781b      	ldrb	r3, [r3, #0]
{
 8003018:	b507      	push	{r0, r1, r2, lr}
 800301a:	f88d 1007 	strb.w	r1, [sp, #7]
  if (_ioWriteAllowed)
 800301e:	b13b      	cbz	r3, 8003030 <_put_c_driver+0x1c>

__STATIC_INLINE bool port_io_write(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 8003020:	f04f 33ff 	mov.w	r3, #4294967295
 8003024:	2201      	movs	r2, #1
 8003026:	f10d 0107 	add.w	r1, sp, #7
 800302a:	4804      	ldr	r0, [pc, #16]	; (800303c <_put_c_driver+0x28>)
 800302c:	f7ff fa3f 	bl	80024ae <HAL_UART_Transmit>
}
 8003030:	b003      	add	sp, #12
 8003032:	f85d fb04 	ldr.w	pc, [sp], #4
 8003036:	bf00      	nop
 8003038:	2000000c 	.word	0x2000000c
 800303c:	200007c0 	.word	0x200007c0

08003040 <ioRawWriteBuffer>:
 8003040:	b28a      	uxth	r2, r1
 8003042:	4601      	mov	r1, r0
 8003044:	4804      	ldr	r0, [pc, #16]	; (8003058 <ioRawWriteBuffer+0x18>)
{
 8003046:	b508      	push	{r3, lr}
 8003048:	f04f 33ff 	mov.w	r3, #4294967295
 800304c:	f7ff fa2f 	bl	80024ae <HAL_UART_Transmit>
}
 8003050:	fab0 f080 	clz	r0, r0
 8003054:	0940      	lsrs	r0, r0, #5
 8003056:	bd08      	pop	{r3, pc}
 8003058:	200007c0 	.word	0x200007c0

0800305c <ioRawReadBuffer>:

__STATIC_INLINE bool port_io_read(uint8_t *buff, int count)
{
  HAL_StatusTypeDef status;

  status = HAL_UART_Receive(&UartHandle, buff, count, HAL_MAX_DELAY);
 800305c:	b28a      	uxth	r2, r1
 800305e:	4601      	mov	r1, r0
 8003060:	4804      	ldr	r0, [pc, #16]	; (8003074 <ioRawReadBuffer+0x18>)
{
 8003062:	b508      	push	{r3, lr}
 8003064:	f04f 33ff 	mov.w	r3, #4294967295
 8003068:	f7ff fa71 	bl	800254e <HAL_UART_Receive>
}
 800306c:	fab0 f080 	clz	r0, r0
 8003070:	0940      	lsrs	r0, r0, #5
 8003072:	bd08      	pop	{r3, pc}
 8003074:	200007c0 	.word	0x200007c0

08003078 <ioRawDisableLLWrite>:
  _ioWriteAllowed = false;
 8003078:	4b01      	ldr	r3, [pc, #4]	; (8003080 <ioRawDisableLLWrite+0x8>)
 800307a:	2200      	movs	r2, #0
 800307c:	701a      	strb	r2, [r3, #0]
}
 800307e:	4770      	bx	lr
 8003080:	2000000c 	.word	0x2000000c

08003084 <_write>:
{
 8003084:	b510      	push	{r4, lr}
  if ((count < 0) && (fd != STDOUT_FILENO) && (fd != STDERR_FILENO)) {
 8003086:	1e14      	subs	r4, r2, #0
 8003088:	da0a      	bge.n	80030a0 <_write+0x1c>
 800308a:	3801      	subs	r0, #1
 800308c:	2801      	cmp	r0, #1
 800308e:	d907      	bls.n	80030a0 <_write+0x1c>
    errno = EBADF;
 8003090:	f007 fae4 	bl	800a65c <__errno>
    return -1;
 8003094:	f04f 34ff 	mov.w	r4, #4294967295
    errno = EBADF;
 8003098:	2309      	movs	r3, #9
 800309a:	6003      	str	r3, [r0, #0]
}
 800309c:	4620      	mov	r0, r4
 800309e:	bd10      	pop	{r4, pc}
  if (_ioWriteAllowed)
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <_write+0x38>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f9      	beq.n	800309c <_write+0x18>
  status = HAL_UART_Transmit(&UartHandle, buff, count, HAL_MAX_DELAY);
 80030a8:	b2a2      	uxth	r2, r4
 80030aa:	f04f 33ff 	mov.w	r3, #4294967295
 80030ae:	4804      	ldr	r0, [pc, #16]	; (80030c0 <_write+0x3c>)
 80030b0:	f7ff f9fd 	bl	80024ae <HAL_UART_Transmit>
  return (status ? count : 0);
 80030b4:	2800      	cmp	r0, #0
 80030b6:	bf18      	it	ne
 80030b8:	2400      	movne	r4, #0
 80030ba:	e7ef      	b.n	800309c <_write+0x18>
 80030bc:	2000000c 	.word	0x2000000c
 80030c0:	200007c0 	.word	0x200007c0

080030c4 <lc_print>:
{
 80030c4:	b40f      	push	{r0, r1, r2, r3}
 80030c6:	b507      	push	{r0, r1, r2, lr}
 80030c8:	ab04      	add	r3, sp, #16
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 80030ca:	2100      	movs	r1, #0
 80030cc:	4805      	ldr	r0, [pc, #20]	; (80030e4 <lc_print+0x20>)
{
 80030ce:	f853 2b04 	ldr.w	r2, [r3], #4
  va_start(ap, fmt);
 80030d2:	9301      	str	r3, [sp, #4]
  vlc_print(&_put_c_driver, NULL, fmt, ap);
 80030d4:	f001 f878 	bl	80041c8 <vlc_print>
}
 80030d8:	b003      	add	sp, #12
 80030da:	f85d eb04 	ldr.w	lr, [sp], #4
 80030de:	b004      	add	sp, #16
 80030e0:	4770      	bx	lr
 80030e2:	bf00      	nop
 80030e4:	08003015 	.word	0x08003015

080030e8 <lc_vsnprint>:

size_t lc_vsnprint(char *buff, size_t size, const char* fmt, va_list vlist)
{
 80030e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  struct _buffer buffer = {buff, size, 0};
 80030ea:	e9cd 0101 	strd	r0, r1, [sp, #4]
 80030ee:	2100      	movs	r1, #0
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 80030f0:	4804      	ldr	r0, [pc, #16]	; (8003104 <lc_vsnprint+0x1c>)
  struct _buffer buffer = {buff, size, 0};
 80030f2:	9103      	str	r1, [sp, #12]
  vlc_print(&_put_c_buffer_cb, &buffer, fmt, vlist);
 80030f4:	a901      	add	r1, sp, #4
 80030f6:	f001 f867 	bl	80041c8 <vlc_print>
  return buffer.pos - 1;
}
 80030fa:	9803      	ldr	r0, [sp, #12]
 80030fc:	3801      	subs	r0, #1
 80030fe:	b005      	add	sp, #20
 8003100:	f85d fb04 	ldr.w	pc, [sp], #4
 8003104:	08002ff9 	.word	0x08002ff9

08003108 <__wrap_malloc>:

void* __real_malloc(size_t bytes);
void __real_free(void *ptr);

void* __wrap_malloc(size_t bytes)
{
 8003108:	b538      	push	{r3, r4, r5, lr}
  uint8_t *ptr;

  io_malloc.cfg |= 1 << 1;
 800310a:	4d11      	ldr	r5, [pc, #68]	; (8003150 <__wrap_malloc+0x48>)

  /* ensure alignment for magic number */
  bytes = (bytes + 3) & ~3;
 800310c:	3003      	adds	r0, #3
  io_malloc.cfg |= 1 << 1;
 800310e:	682b      	ldr	r3, [r5, #0]
  bytes = (bytes + 3) & ~3;
 8003110:	f020 0403 	bic.w	r4, r0, #3
  io_malloc.cfg |= 1 << 1;
 8003114:	f043 0302 	orr.w	r3, r3, #2

  /* add 2x32-bit for size and magic  number */
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 8003118:	f104 0008 	add.w	r0, r4, #8
  io_malloc.cfg |= 1 << 1;
 800311c:	602b      	str	r3, [r5, #0]
  ptr = (uint8_t*)__real_malloc(bytes + 8);
 800311e:	f006 fc45 	bl	80099ac <malloc>

  /* remember size */
  if (ptr) {
 8003122:	b1a0      	cbz	r0, 800314e <__wrap_malloc+0x46>
    *((uint32_t*)ptr) = bytes;
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 8003124:	1903      	adds	r3, r0, r4
 8003126:	4a0b      	ldr	r2, [pc, #44]	; (8003154 <__wrap_malloc+0x4c>)
    *((uint32_t*)ptr) = bytes;
 8003128:	6004      	str	r4, [r0, #0]
    *((uint32_t*)(ptr + 4 + bytes)) = MAGIC_MALLOC_NUMBER;
 800312a:	605a      	str	r2, [r3, #4]
  }

  if ((ptr) && (io_malloc.cfg & 1UL)) {
 800312c:	682b      	ldr	r3, [r5, #0]
 800312e:	07db      	lsls	r3, r3, #31
 8003130:	d50c      	bpl.n	800314c <__wrap_malloc+0x44>
    io_malloc.alloc_req++;
 8003132:	68eb      	ldr	r3, [r5, #12]
 8003134:	3301      	adds	r3, #1
 8003136:	60eb      	str	r3, [r5, #12]
    io_malloc.alloc += bytes;
 8003138:	686b      	ldr	r3, [r5, #4]
 800313a:	4423      	add	r3, r4
 800313c:	606b      	str	r3, [r5, #4]

    io_malloc.used += bytes;
 800313e:	69ab      	ldr	r3, [r5, #24]
 8003140:	441c      	add	r4, r3

    if (io_malloc.used > io_malloc.max) {
 8003142:	696b      	ldr	r3, [r5, #20]
 8003144:	429c      	cmp	r4, r3
    io_malloc.used += bytes;
 8003146:	61ac      	str	r4, [r5, #24]
      io_malloc.max = io_malloc.used;
 8003148:	bf88      	it	hi
 800314a:	616c      	strhi	r4, [r5, #20]

    if (io_malloc.a_idx >= _IO_MALLOC_TRACK_MODE)
      io_malloc.a_idx = 0;
#endif
  }
  return ptr?(ptr + 4):NULL;
 800314c:	3004      	adds	r0, #4
}
 800314e:	bd38      	pop	{r3, r4, r5, pc}
 8003150:	20000a4c 	.word	0x20000a4c
 8003154:	efdcba98 	.word	0xefdcba98

08003158 <dwtCyclesToTime>:
 */

struct cyclesCount cyclesCount;

int dwtCyclesToTime(uint64_t clks, struct dwtTime *t)
{
 8003158:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800315c:	4604      	mov	r4, r0
 800315e:	468a      	mov	sl, r1
  if (!t)
 8003160:	4617      	mov	r7, r2
 8003162:	b382      	cbz	r2, 80031c6 <dwtCyclesToTime+0x6e>
    return -1;
  uint32_t fcpu = port_hal_get_cpu_freq();
  uint64_t s  = clks / fcpu;
  uint64_t ms = (clks * 1000) / fcpu;
 8003164:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
  uint32_t fcpu = port_hal_get_cpu_freq();
 8003168:	f7fe fcd6 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
  uint64_t s  = clks / fcpu;
 800316c:	2300      	movs	r3, #0
  uint32_t fcpu = port_hal_get_cpu_freq();
 800316e:	4602      	mov	r2, r0
  uint64_t s  = clks / fcpu;
 8003170:	9001      	str	r0, [sp, #4]
 8003172:	4651      	mov	r1, sl
 8003174:	4620      	mov	r0, r4
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003176:	f8df 9054 	ldr.w	r9, [pc, #84]	; 80031cc <dwtCyclesToTime+0x74>
  uint64_t s  = clks / fcpu;
 800317a:	f7fd f9c7 	bl	800050c <__aeabi_uldivmod>
 800317e:	4683      	mov	fp, r0
  uint64_t ms = (clks * 1000) / fcpu;
 8003180:	fba4 0106 	umull	r0, r1, r4, r6
 8003184:	9a01      	ldr	r2, [sp, #4]
 8003186:	2300      	movs	r3, #0
 8003188:	fb06 110a 	mla	r1, r6, sl, r1
 800318c:	f7fd f9be 	bl	800050c <__aeabi_uldivmod>
  ms -= (s * 1000);
 8003190:	fbab 3106 	umull	r3, r1, fp, r6
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003194:	9a01      	ldr	r2, [sp, #4]
  ms -= (s * 1000);
 8003196:	1ac5      	subs	r5, r0, r3
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 8003198:	fba4 0109 	umull	r0, r1, r4, r9
 800319c:	2300      	movs	r3, #0
 800319e:	fb09 110a 	mla	r1, r9, sl, r1
  us -= (ms * 1000 + s * 1000000);
 80031a2:	fbab 8909 	umull	r8, r9, fp, r9
  uint64_t us = (clks * 1000 * 1000) / fcpu;
 80031a6:	f7fd f9b1 	bl	800050c <__aeabi_uldivmod>
  t->fcpu = fcpu;
  t->s = s;
  t->ms = ms;
 80031aa:	60bd      	str	r5, [r7, #8]
 80031ac:	eba0 0008 	sub.w	r0, r0, r8
  us -= (ms * 1000 + s * 1000000);
 80031b0:	fba5 5606 	umull	r5, r6, r5, r6
  t->fcpu = fcpu;
 80031b4:	9a01      	ldr	r2, [sp, #4]
  us -= (ms * 1000 + s * 1000000);
 80031b6:	1b40      	subs	r0, r0, r5
  t->us = us;
 80031b8:	60f8      	str	r0, [r7, #12]
  return 0;
 80031ba:	2000      	movs	r0, #0
  t->s = s;
 80031bc:	e9c7 2b00 	strd	r2, fp, [r7]
}
 80031c0:	b003      	add	sp, #12
 80031c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return -1;
 80031c6:	f04f 30ff 	mov.w	r0, #4294967295
 80031ca:	e7f9      	b.n	80031c0 <dwtCyclesToTime+0x68>
 80031cc:	000f4240 	.word	0x000f4240

080031d0 <dwtCyclesToFloatMs>:

float dwtCyclesToFloatMs(uint64_t clks)
{
 80031d0:	b510      	push	{r4, lr}
 80031d2:	4604      	mov	r4, r0
 80031d4:	ed2d 8b02 	vpush	{d8}
 80031d8:	b082      	sub	sp, #8
 80031da:	9101      	str	r1, [sp, #4]
  float res;
  float fcpu = (float)port_hal_get_cpu_freq();
 80031dc:	f7fe fc9c 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
  res = ((float)clks * (float)1000.0) / fcpu;
 80031e0:	9901      	ldr	r1, [sp, #4]
  float fcpu = (float)port_hal_get_cpu_freq();
 80031e2:	ee08 0a10 	vmov	s16, r0
  res = ((float)clks * (float)1000.0) / fcpu;
 80031e6:	4620      	mov	r0, r4
 80031e8:	f7fd f94a 	bl	8000480 <__aeabi_ul2f>
 80031ec:	eddf 7a06 	vldr	s15, [pc, #24]	; 8003208 <dwtCyclesToFloatMs+0x38>
 80031f0:	ee07 0a10 	vmov	s14, r0
  float fcpu = (float)port_hal_get_cpu_freq();
 80031f4:	eeb8 8a48 	vcvt.f32.u32	s16, s16
  res = ((float)clks * (float)1000.0) / fcpu;
 80031f8:	ee27 0a27 	vmul.f32	s0, s14, s15
  return res;
}
 80031fc:	ee80 0a08 	vdiv.f32	s0, s0, s16
 8003200:	b002      	add	sp, #8
 8003202:	ecbd 8b02 	vpop	{d8}
 8003206:	bd10      	pop	{r4, pc}
 8003208:	447a0000 	.word	0x447a0000

0800320c <getFlashCacheConf>:

#if defined(STM32F7)

  mconf |= MCONF_F7;

  __I uint32_t acr = FLASH->ACR;
 800320c:	4b11      	ldr	r3, [pc, #68]	; (8003254 <getFlashCacheConf+0x48>)
{
 800320e:	b082      	sub	sp, #8
  __I uint32_t acr = FLASH->ACR;
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	9300      	str	r3, [sp, #0]
  __I uint32_t ccr = SCB->CCR;
 8003214:	4b10      	ldr	r3, [pc, #64]	; (8003258 <getFlashCacheConf+0x4c>)
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	9301      	str	r3, [sp, #4]

  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 800321a:	9800      	ldr	r0, [sp, #0]
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 800321c:	9b00      	ldr	r3, [sp, #0]
  mconf |= ((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos);
 800321e:	f000 000f 	and.w	r0, r0, #15
  if ((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos)
 8003222:	05db      	lsls	r3, r3, #23
    mconf |= MCONF_ART_PREF;
  if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 8003224:	9b00      	ldr	r3, [sp, #0]
    mconf |= MCONF_ART_PREF;
 8003226:	f040 7000 	orr.w	r0, r0, #33554432	; 0x2000000
 800322a:	bf48      	it	mi
 800322c:	f440 7080 	orrmi.w	r0, r0, #256	; 0x100
  if ((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos)
 8003230:	0599      	lsls	r1, r3, #22
    mconf |= MCONF_ART_EN;

  if (ccr & SCB_CCR_IC_Msk)
 8003232:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_ART_EN;
 8003234:	bf48      	it	mi
 8003236:	f440 7000 	orrmi.w	r0, r0, #512	; 0x200
  if (ccr & SCB_CCR_IC_Msk)
 800323a:	039a      	lsls	r2, r3, #14
    mconf |= MCONF_CORE_ICACHE;
  if (ccr & SCB_CCR_DC_Msk)
 800323c:	9b01      	ldr	r3, [sp, #4]
    mconf |= MCONF_CORE_ICACHE;
 800323e:	bf48      	it	mi
 8003240:	f440 6080 	orrmi.w	r0, r0, #1024	; 0x400
  if (ccr & SCB_CCR_DC_Msk)
 8003244:	03db      	lsls	r3, r3, #15
    mconf |= MCONF_CORE_DCACHE;
 8003246:	bf48      	it	mi
 8003248:	f440 6000 	orrmi.w	r0, r0, #2048	; 0x800
    mconf |= MCONF_CORE_DCACHE;

#endif

  return mconf;
}
 800324c:	f440 3080 	orr.w	r0, r0, #65536	; 0x10000
 8003250:	b002      	add	sp, #8
 8003252:	4770      	bx	lr
 8003254:	40023c00 	.word	0x40023c00
 8003258:	e000ed00 	.word	0xe000ed00

0800325c <getSysConf.part.0>:
void getSysConf(struct mcu_conf *conf)
 800325c:	b510      	push	{r4, lr}
 800325e:	4604      	mov	r4, r0
  conf->sclk = port_hal_get_cpu_freq();
 8003260:	f7fe fc5a 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8003264:	6020      	str	r0, [r4, #0]
  conf->hclk = port_hal_get_sys_freq();
 8003266:	f7fe fc57 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 800326a:	6060      	str	r0, [r4, #4]
  conf->conf = getFlashCacheConf();
 800326c:	f7ff ffce 	bl	800320c <getFlashCacheConf>
 8003270:	60a0      	str	r0, [r4, #8]
  conf->devid = port_hal_get_dev_id();
 8003272:	f7fd ffe5 	bl	8001240 <HAL_GetDEVID>
 8003276:	60e0      	str	r0, [r4, #12]
  conf->revid = port_hal_get_rev_id();
 8003278:	f7fd ffdc 	bl	8001234 <HAL_GetREVID>
 800327c:	6120      	str	r0, [r4, #16]
}
 800327e:	bd10      	pop	{r4, pc}

08003280 <getSysConf>:
  if (!conf)
 8003280:	b108      	cbz	r0, 8003286 <getSysConf+0x6>
 8003282:	f7ff bfeb 	b.w	800325c <getSysConf.part.0>
}
 8003286:	4770      	bx	lr

08003288 <systemSettingLog>:

void systemSettingLog(void)
{
 8003288:	b570      	push	{r4, r5, r6, lr}
 800328a:	b088      	sub	sp, #32
  LC_PRINT("Compiled with GHS-ARM Compiler %d\r\n", __GHS_VERSION_NUMBER);
#elif defined(_IS_HTC_COMPILER) && _IS_HTC_COMPILER
  LC_PRINT("Compiled with HIGHTEC Clang %d.%d.%d\r\n", __clang_major__, __clang_minor__,
      __clang_patchlevel__);
#elif defined(_IS_GCC_COMPILER) && _IS_GCC_COMPILER
  LC_PRINT("Compiled with GCC %d.%d.%d\r\n", __GNUC__, __GNUC_MINOR__,
 800328c:	2203      	movs	r2, #3
 800328e:	2301      	movs	r3, #1
 8003290:	210b      	movs	r1, #11
 8003292:	482d      	ldr	r0, [pc, #180]	; (8003348 <systemSettingLog+0xc0>)
 8003294:	f7ff ff16 	bl	80030c4 <lc_print>
  if (!conf)
 8003298:	a803      	add	r0, sp, #12
 800329a:	f7ff ffdf 	bl	800325c <getSysConf.part.0>


  /* Display Device configuration */
  getSysConf(&sys_conf);

  LC_PRINT(DEVICE_FAMILY " device configuration...\r\n");
 800329e:	482b      	ldr	r0, [pc, #172]	; (800334c <systemSettingLog+0xc4>)
 80032a0:	f7ff ff10 	bl	80030c4 <lc_print>

  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80032a4:	9906      	ldr	r1, [sp, #24]
  switch (dev_id) {
 80032a6:	f46f 6389 	mvn.w	r3, #1096	; 0x448
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80032aa:	4829      	ldr	r0, [pc, #164]	; (8003350 <systemSettingLog+0xc8>)
#else
  LC_PRINT(" Core Arch.   : M%d - %s\r\n", __CORTEX_M, "no FPU");
#endif

  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 80032ac:	4c29      	ldr	r4, [pc, #164]	; (8003354 <systemSettingLog+0xcc>)
 80032ae:	18cb      	adds	r3, r1, r3
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	2b09      	cmp	r3, #9
 80032b4:	bf96      	itet	ls
 80032b6:	4a28      	ldrls	r2, [pc, #160]	; (8003358 <systemSettingLog+0xd0>)
  LC_PRINT(" Device       : DevID:0x%04x (%s) RevID:0x%04x\r\n",
 80032b8:	4a28      	ldrhi	r2, [pc, #160]	; (800335c <systemSettingLog+0xd4>)
 80032ba:	f852 2023 	ldrls.w	r2, [r2, r3, lsl #2]
 80032be:	9b07      	ldr	r3, [sp, #28]
 80032c0:	f7ff ff00 	bl	80030c4 <lc_print>
  LC_PRINT(" Core Arch.   : M%d - %s %s\r\n", __CORTEX_M, "FPU ", ((__FPU_USED) ? "used" : "not used!"));
 80032c4:	4b26      	ldr	r3, [pc, #152]	; (8003360 <systemSettingLog+0xd8>)
 80032c6:	2107      	movs	r1, #7
 80032c8:	1d5a      	adds	r2, r3, #5
 80032ca:	f103 000a 	add.w	r0, r3, #10
 80032ce:	f7ff fef9 	bl	80030c4 <lc_print>
  LC_PRINT(" HAL version  : 0x%08x\r\n", (int)port_hal_get_hal_version());
 80032d2:	f7fd ffab 	bl	800122c <HAL_GetHalVersion>
 80032d6:	4601      	mov	r1, r0
 80032d8:	4822      	ldr	r0, [pc, #136]	; (8003364 <systemSettingLog+0xdc>)
 80032da:	f7ff fef3 	bl	80030c4 <lc_print>
  LC_PRINT(" SYSCLK clock : %u MHz\r\n", (int)sys_conf.sclk/1000000);
 80032de:	9903      	ldr	r1, [sp, #12]
 80032e0:	4821      	ldr	r0, [pc, #132]	; (8003368 <systemSettingLog+0xe0>)
 80032e2:	fb91 f1f4 	sdiv	r1, r1, r4
 80032e6:	f7ff feed 	bl	80030c4 <lc_print>
  LC_PRINT(" HCLK clock   : %u MHz\r\n", (int)sys_conf.hclk/1000000);
 80032ea:	9904      	ldr	r1, [sp, #16]
 80032ec:	481f      	ldr	r0, [pc, #124]	; (800336c <systemSettingLog+0xe4>)
 80032ee:	fb91 f1f4 	sdiv	r1, r1, r4
 80032f2:	f7ff fee7 	bl	80030c4 <lc_print>

#if defined(STM32F7)
  uint32_t acr = FLASH->ACR;
 80032f6:	4b1e      	ldr	r3, [pc, #120]	; (8003370 <systemSettingLog+0xe8>)
    return "False";
 80032f8:	4c1e      	ldr	r4, [pc, #120]	; (8003374 <systemSettingLog+0xec>)
  uint32_t acr = FLASH->ACR;
 80032fa:	6819      	ldr	r1, [r3, #0]
    return "False";
 80032fc:	1d65      	adds	r5, r4, #5
  uint32_t ccr = SCB->CCR;
 80032fe:	4b1e      	ldr	r3, [pc, #120]	; (8003378 <systemSettingLog+0xf0>)
    return "False";
 8003300:	f411 7f80 	tst.w	r1, #256	; 0x100
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8003304:	f104 00ec 	add.w	r0, r4, #236	; 0xec
  uint32_t ccr = SCB->CCR;
 8003308:	695e      	ldr	r6, [r3, #20]
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 800330a:	f001 030f 	and.w	r3, r1, #15
    return "False";
 800330e:	bf14      	ite	ne
 8003310:	4622      	movne	r2, r4
 8003312:	462a      	moveq	r2, r5
 8003314:	f411 7f00 	tst.w	r1, #512	; 0x200
  LC_PRINT(" FLASH conf.  : ACR=0x%08x - Prefetch=%s ART=%s latency=%d\r\n",
 8003318:	9300      	str	r3, [sp, #0]
 800331a:	bf14      	ite	ne
 800331c:	4623      	movne	r3, r4
 800331e:	462b      	moveq	r3, r5
 8003320:	f7ff fed0 	bl	80030c4 <lc_print>
    return "False";
 8003324:	f416 3f00 	tst.w	r6, #131072	; 0x20000
      (int)acr,
      bitToStr((acr & FLASH_ACR_PRFTEN_Msk) >> FLASH_ACR_PRFTEN_Pos),
      bitToStr((acr & FLASH_ACR_ARTEN_Msk) >> FLASH_ACR_ARTEN_Pos),
      (int)((acr & FLASH_ACR_LATENCY_Msk) >> FLASH_ACR_LATENCY_Pos));
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8003328:	f204 1029 	addw	r0, r4, #297	; 0x129
    return "False";
 800332c:	bf14      	ite	ne
 800332e:	4621      	movne	r1, r4
 8003330:	4629      	moveq	r1, r5
 8003332:	f416 3f80 	tst.w	r6, #65536	; 0x10000
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8003336:	bf14      	ite	ne
 8003338:	4622      	movne	r2, r4
 800333a:	462a      	moveq	r2, r5
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
      bitToStr(ccr & SCB_CCR_IC_Msk),
      bitToStr(ccr & SCB_CCR_DC_Msk));
#endif

}
 800333c:	b008      	add	sp, #32
 800333e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  LC_PRINT(" CACHE conf.  : $I/$D=(%s,%s)\r\n",
 8003342:	f7ff bebf 	b.w	80030c4 <lc_print>
 8003346:	bf00      	nop
 8003348:	0800c68d 	.word	0x0800c68d
 800334c:	0800c6aa 	.word	0x0800c6aa
 8003350:	0800c6ca 	.word	0x0800c6ca
 8003354:	000f4240 	.word	0x000f4240
 8003358:	0800cb40 	.word	0x0800cb40
 800335c:	0800c67a 	.word	0x0800c67a
 8003360:	0800c6fb 	.word	0x0800c6fb
 8003364:	0800c723 	.word	0x0800c723
 8003368:	0800c73c 	.word	0x0800c73c
 800336c:	0800c755 	.word	0x0800c755
 8003370:	40023c00 	.word	0x40023c00
 8003374:	0800c682 	.word	0x0800c682
 8003378:	e000ed00 	.word	0xe000ed00

0800337c <aiPbCmdSysInfo>:
 * Specific test APP commands
 * -----------------------------------------------------------------------------
 */

void aiPbCmdSysInfo(const reqMsg *req, respMsg *resp, void *param)
{
 800337c:	b530      	push	{r4, r5, lr}
 800337e:	b087      	sub	sp, #28
 8003380:	4605      	mov	r5, r0
 8003382:	460c      	mov	r4, r1
  UNUSED(param);
  struct mcu_conf conf;

  getSysConf(&conf);
 8003384:	a801      	add	r0, sp, #4
 8003386:	f7ff ff7b 	bl	8003280 <getSysConf>

  resp->which_payload = respMsg_sinfo_tag;
 800338a:	230b      	movs	r3, #11
  resp->payload.sinfo.devid = conf.devid;
  resp->payload.sinfo.sclock = conf.sclk;
  resp->payload.sinfo.hclock = conf.hclk;
  resp->payload.sinfo.cache = conf.conf;

  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 800338c:	2200      	movs	r2, #0
 800338e:	4621      	mov	r1, r4
  resp->which_payload = respMsg_sinfo_tag;
 8003390:	80e3      	strh	r3, [r4, #6]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 8003392:	4628      	mov	r0, r5
  resp->payload.sinfo.devid = conf.devid;
 8003394:	9b04      	ldr	r3, [sp, #16]
 8003396:	60a3      	str	r3, [r4, #8]
  resp->payload.sinfo.sclock = conf.sclk;
 8003398:	9b01      	ldr	r3, [sp, #4]
 800339a:	60e3      	str	r3, [r4, #12]
  resp->payload.sinfo.hclock = conf.hclk;
 800339c:	9b02      	ldr	r3, [sp, #8]
 800339e:	6123      	str	r3, [r4, #16]
  resp->payload.sinfo.cache = conf.conf;
 80033a0:	9b03      	ldr	r3, [sp, #12]
 80033a2:	6163      	str	r3, [r4, #20]
  aiPbMgrSendResp(req, resp, EnumState_S_IDLE);
 80033a4:	f7ff fb34 	bl	8002a10 <aiPbMgrSendResp>
}
 80033a8:	b007      	add	sp, #28
 80033aa:	bd30      	pop	{r4, r5, pc}

080033ac <encode_mempool_to_tensor_desc>:
{
 80033ac:	b570      	push	{r4, r5, r6, lr}
 80033ae:	461e      	mov	r6, r3
  array_u32->size = 1;
 80033b0:	2301      	movs	r3, #1
  if (info->name)
 80033b2:	6808      	ldr	r0, [r1, #0]
{
 80033b4:	460d      	mov	r5, r1
  array_u32->size = 1;
 80033b6:	6033      	str	r3, [r6, #0]
  array_u32->data = (void *)&info->size;
 80033b8:	1d0b      	adds	r3, r1, #4
{
 80033ba:	4614      	mov	r4, r2
  array_u32->data = (void *)&info->size;
 80033bc:	6073      	str	r3, [r6, #4]
  array_u32->offset = 4;
 80033be:	2304      	movs	r3, #4
 80033c0:	60b3      	str	r3, [r6, #8]
  if (info->name)
 80033c2:	b1a0      	cbz	r0, 80033ee <encode_mempool_to_tensor_desc+0x42>
    aiPbStrCopy(info->name, &msg->name[0],
 80033c4:	2240      	movs	r2, #64	; 0x40
 80033c6:	4621      	mov	r1, r4
 80033c8:	f7ff fac8 	bl	800295c <aiPbStrCopy>
  msg->format = AI_BUFFER_FORMAT_U8;
 80033cc:	4b09      	ldr	r3, [pc, #36]	; (80033f4 <encode_mempool_to_tensor_desc+0x48>)
 80033ce:	6423      	str	r3, [r4, #64]	; 0x40
  msg->size = info->size;
 80033d0:	686b      	ldr	r3, [r5, #4]
 80033d2:	6463      	str	r3, [r4, #68]	; 0x44
  msg->n_dims = AI_SHAPE_BCWH << 24 | array_u32->size;
 80033d4:	6833      	ldr	r3, [r6, #0]
 80033d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033da:	64a3      	str	r3, [r4, #72]	; 0x48
  msg->scale = 0.0;
 80033dc:	2300      	movs	r3, #0
 80033de:	6563      	str	r3, [r4, #84]	; 0x54
  msg->zeropoint = 0;
 80033e0:	2300      	movs	r3, #0
 80033e2:	65a3      	str	r3, [r4, #88]	; 0x58
  msg->addr = (uint32_t)info->addr;
 80033e4:	68ab      	ldr	r3, [r5, #8]
 80033e6:	65e3      	str	r3, [r4, #92]	; 0x5c
  msg->flags = EnumTensorFlag_TENSOR_FLAG_MEMPOOL;
 80033e8:	2308      	movs	r3, #8
 80033ea:	6623      	str	r3, [r4, #96]	; 0x60
}
 80033ec:	bd70      	pop	{r4, r5, r6, pc}
    msg->name[0] = 0;
 80033ee:	7010      	strb	r0, [r2, #0]
 80033f0:	e7ec      	b.n	80033cc <encode_mempool_to_tensor_desc+0x20>
 80033f2:	bf00      	nop
 80033f4:	00040440 	.word	0x00040440

080033f8 <fill_tensor_desc_msg>:
{
 80033f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033fa:	460c      	mov	r4, r1
  array_u32->size = buff->shape.size;
 80033fc:	6941      	ldr	r1, [r0, #20]
  array_u32->data = (uint32_t *)buff->shape.data;
 80033fe:	6986      	ldr	r6, [r0, #24]
  array_u32->offset = sizeof(buff->shape.data[0]);
 8003400:	2704      	movs	r7, #4
  array_u32->size = buff->shape.size;
 8003402:	f3c1 2117 	ubfx	r1, r1, #8, #24
{
 8003406:	4605      	mov	r5, r0
 8003408:	ed2d 8b02 	vpush	{d8}
  array_u32->size = buff->shape.size;
 800340c:	6011      	str	r1, [r2, #0]
{
 800340e:	eeb0 8a40 	vmov.f32	s16, s0
  array_u32->data = (uint32_t *)buff->shape.data;
 8003412:	6056      	str	r6, [r2, #4]
  array_u32->offset = sizeof(buff->shape.data[0]);
 8003414:	6097      	str	r7, [r2, #8]
  msg->name[0] = 0;
 8003416:	2200      	movs	r2, #0
 8003418:	7022      	strb	r2, [r4, #0]
  msg->format = (uint32_t)buff->format;
 800341a:	6802      	ldr	r2, [r0, #0]
  msg->flags = flags;
 800341c:	6623      	str	r3, [r4, #96]	; 0x60
  msg->n_dims = buff->shape.type << 24 | array_u32->size;
 800341e:	7d03      	ldrb	r3, [r0, #20]
  msg->format = (uint32_t)buff->format;
 8003420:	6422      	str	r2, [r4, #64]	; 0x40
  msg->n_dims = buff->shape.type << 24 | array_u32->size;
 8003422:	ea41 6103 	orr.w	r1, r1, r3, lsl #24
 8003426:	64a1      	str	r1, [r4, #72]	; 0x48
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8003428:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 800342a:	6836      	ldr	r6, [r6, #0]
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 800342c:	f002 fbee 	bl	8005c0c <ai_buffer_get_size>
  const ai_buffer_meta_info *meta_info = AI_BUFFER_META_INFO(buff);
 8003430:	68ab      	ldr	r3, [r5, #8]
  return (size_t)AI_BUFFER_SIZE(buffer) * batch_;
 8003432:	4370      	muls	r0, r6
  msg->zeropoint = zero_point;
 8003434:	9a08      	ldr	r2, [sp, #32]
  msg->scale = scale;
 8003436:	ed84 8a15 	vstr	s16, [r4, #84]	; 0x54
  msg->size = _get_buffer_element_size(buff);
 800343a:	6460      	str	r0, [r4, #68]	; 0x44
  msg->zeropoint = zero_point;
 800343c:	65a2      	str	r2, [r4, #88]	; 0x58
  if (AI_BUFFER_META_INFO_INTQ(meta_info)) {
 800343e:	b1a3      	cbz	r3, 800346a <fill_tensor_desc_msg+0x72>
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	07d0      	lsls	r0, r2, #31
 8003444:	d511      	bpl.n	800346a <fill_tensor_desc_msg+0x72>
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	b17b      	cbz	r3, 800346a <fill_tensor_desc_msg+0x72>
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 800344a:	685a      	ldr	r2, [r3, #4]
 800344c:	b192      	cbz	r2, 8003474 <fill_tensor_desc_msg+0x7c>
 800344e:	8859      	ldrh	r1, [r3, #2]
 8003450:	b181      	cbz	r1, 8003474 <fill_tensor_desc_msg+0x7c>
 8003452:	6811      	ldr	r1, [r2, #0]
 8003454:	6809      	ldr	r1, [r1, #0]
 8003456:	6561      	str	r1, [r4, #84]	; 0x54
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 8003458:	8819      	ldrh	r1, [r3, #0]
 800345a:	0789      	lsls	r1, r1, #30
 800345c:	d50c      	bpl.n	8003478 <fill_tensor_desc_msg+0x80>
 800345e:	b19a      	cbz	r2, 8003488 <fill_tensor_desc_msg+0x90>
 8003460:	885b      	ldrh	r3, [r3, #2]
 8003462:	b10b      	cbz	r3, 8003468 <fill_tensor_desc_msg+0x70>
 8003464:	6853      	ldr	r3, [r2, #4]
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	65a3      	str	r3, [r4, #88]	; 0x58
  msg->addr = (uint32_t)buff->data;
 800346a:	686b      	ldr	r3, [r5, #4]
}
 800346c:	ecbd 8b02 	vpop	{d8}
  msg->addr = (uint32_t)buff->data;
 8003470:	65e3      	str	r3, [r4, #92]	; 0x5c
}
 8003472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    msg->scale = AI_BUFFER_META_INFO_INTQ_GET_SCALE(meta_info, 0);
 8003474:	2100      	movs	r1, #0
 8003476:	e7ee      	b.n	8003456 <fill_tensor_desc_msg+0x5e>
    msg->zeropoint = AI_BUFFER_META_INFO_INTQ_GET_ZEROPOINT(meta_info, 0);
 8003478:	b132      	cbz	r2, 8003488 <fill_tensor_desc_msg+0x90>
 800347a:	885b      	ldrh	r3, [r3, #2]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d0f3      	beq.n	8003468 <fill_tensor_desc_msg+0x70>
 8003480:	6853      	ldr	r3, [r2, #4]
 8003482:	f993 3000 	ldrsb.w	r3, [r3]
 8003486:	e7ef      	b.n	8003468 <fill_tensor_desc_msg+0x70>
 8003488:	4613      	mov	r3, r2
 800348a:	e7ed      	b.n	8003468 <fill_tensor_desc_msg+0x70>

0800348c <encode_ai_buffer_to_tensor_desc>:
{
 800348c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800348e:	460c      	mov	r4, r1
 8003490:	4611      	mov	r1, r2
 8003492:	461a      	mov	r2, r3
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8003494:	68e3      	ldr	r3, [r4, #12]
  ai_buffer *buff = &((ai_buffer *)(info->buffer))[index];
 8003496:	6825      	ldr	r5, [r4, #0]
  fill_tensor_desc_msg(buff, msg, array_u32, info->flags, info->scale, info->zero_point);
 8003498:	9300      	str	r3, [sp, #0]
 800349a:	ed94 0a02 	vldr	s0, [r4, #8]
 800349e:	6863      	ldr	r3, [r4, #4]
 80034a0:	241c      	movs	r4, #28
 80034a2:	fb04 5000 	mla	r0, r4, r0, r5
 80034a6:	f7ff ffa7 	bl	80033f8 <fill_tensor_desc_msg>
}
 80034aa:	b003      	add	sp, #12
 80034ac:	bd30      	pop	{r4, r5, pc}

080034ae <_get_buffer_size>:
{
 80034ae:	b538      	push	{r3, r4, r5, lr}
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 80034b0:	6983      	ldr	r3, [r0, #24]
{
 80034b2:	4604      	mov	r4, r0
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 80034b4:	2101      	movs	r1, #1
  const ai_u32 batch_ = AI_BUFFER_SHAPE_ELEM(buffer, AI_SHAPE_BATCH);
 80034b6:	681d      	ldr	r5, [r3, #0]
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 80034b8:	f002 fba8 	bl	8005c0c <ai_buffer_get_size>
 80034bc:	6821      	ldr	r1, [r4, #0]
 80034be:	4368      	muls	r0, r5
}
 80034c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (size_t)AI_BUFFER_BYTE_SIZE(AI_BUFFER_SIZE(buffer) * batch_, buffer->format);
 80034c4:	f002 bbd6 	b.w	8005c74 <ai_buffer_get_byte_size>

080034c8 <cyclesCounterStart>:
  port_dwt_init();
#endif /* !USE_SYSTICK_ONLY */
}

__STATIC_INLINE void cyclesCounterStart(void)
{
 80034c8:	b508      	push	{r3, lr}
#else
#if USE_CORE_CLOCK_ONLY == 1
  port_dwt_reset();
  cyclesCount.dwt_start = port_dwt_get_cycles();
#else
  cyclesCount.tick_start = port_hal_get_tick();
 80034ca:	f7fd fe97 	bl	80011fc <HAL_GetTick>
 80034ce:	4b04      	ldr	r3, [pc, #16]	; (80034e0 <cyclesCounterStart+0x18>)
  port_dwt_reset();
 80034d0:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <cyclesCounterStart+0x1c>)
 80034d2:	2100      	movs	r1, #0
  cyclesCount.tick_start = port_hal_get_tick();
 80034d4:	6098      	str	r0, [r3, #8]
  port_dwt_reset();
 80034d6:	6051      	str	r1, [r2, #4]
  cyclesCount.dwt_start = port_dwt_get_cycles();
 80034d8:	6852      	ldr	r2, [r2, #4]
 80034da:	605a      	str	r2, [r3, #4]
#endif
#endif
}
 80034dc:	bd08      	pop	{r3, pc}
 80034de:	bf00      	nop
 80034e0:	20000a40 	.word	0x20000a40
 80034e4:	e0001000 	.word	0xe0001000

080034e8 <cyclesCounterEnd>:

__STATIC_INLINE uint64_t cyclesCounterEnd(void)
{
 80034e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
#if USE_CORE_CLOCK_ONLY == 1
  return (uint64_t)(port_dwt_get_cycles() - cyclesCount.dwt_start);
#else
  uint64_t dwt_e;
  uint64_t tick_e;
  dwt_e = port_dwt_get_cycles() - cyclesCount.dwt_start;
 80034ea:	4b10      	ldr	r3, [pc, #64]	; (800352c <cyclesCounterEnd+0x44>)
 80034ec:	4d10      	ldr	r5, [pc, #64]	; (8003530 <cyclesCounterEnd+0x48>)
 80034ee:	685c      	ldr	r4, [r3, #4]
 80034f0:	686b      	ldr	r3, [r5, #4]
 80034f2:	1ae4      	subs	r4, r4, r3
 80034f4:	2300      	movs	r3, #0
 80034f6:	9301      	str	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 80034f8:	f7fd fe80 	bl	80011fc <HAL_GetTick>
 80034fc:	68aa      	ldr	r2, [r5, #8]
  if (tick_e > cyclesCount.dwt_max) {
 80034fe:	9b01      	ldr	r3, [sp, #4]
  tick_e = port_hal_get_tick() - cyclesCount.tick_start;
 8003500:	1a80      	subs	r0, r0, r2
  if (tick_e > cyclesCount.dwt_max) {
 8003502:	682a      	ldr	r2, [r5, #0]
 8003504:	4290      	cmp	r0, r2
 8003506:	d90c      	bls.n	8003522 <cyclesCounterEnd+0x3a>
    /* overflow detected */
    dwt_e = ((tick_e/cyclesCount.dwt_max) * (uint64_t)UINT32_MAX + (uint64_t)dwt_e);
 8003508:	4619      	mov	r1, r3
 800350a:	f7fc ffff 	bl	800050c <__aeabi_uldivmod>
 800350e:	f04f 33ff 	mov.w	r3, #4294967295
 8003512:	fba0 0303 	umull	r0, r3, r0, r3
 8003516:	1900      	adds	r0, r0, r4
 8003518:	eba3 0301 	sub.w	r3, r3, r1
 800351c:	4604      	mov	r4, r0
 800351e:	f143 0300 	adc.w	r3, r3, #0
  }
  return dwt_e;
#endif
#endif
}
 8003522:	4620      	mov	r0, r4
 8003524:	4619      	mov	r1, r3
 8003526:	b003      	add	sp, #12
 8003528:	bd30      	pop	{r4, r5, pc}
 800352a:	bf00      	nop
 800352c:	e0001000 	.word	0xe0001000
 8003530:	20000a40 	.word	0x20000a40

08003534 <aiExecCtx>:
{
 8003534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003536:	4604      	mov	r4, r0
  if (!nn_name[0]) {
 8003538:	7800      	ldrb	r0, [r0, #0]
 800353a:	b930      	cbnz	r0, 800354a <aiExecCtx+0x16>
    if ((pos >= 0) && (pos < AI_MNETWORK_NUMBER) && net_exec_ctx[pos].handle)
 800353c:	b921      	cbnz	r1, 8003548 <aiExecCtx+0x14>
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <aiExecCtx+0x4c>)
 8003540:	6818      	ldr	r0, [r3, #0]
      cur = &net_exec_ctx[pos];
 8003542:	2800      	cmp	r0, #0
 8003544:	bf18      	it	ne
 8003546:	4618      	movne	r0, r3
}
 8003548:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (cur->handle &&
 800354a:	4e0d      	ldr	r6, [pc, #52]	; (8003580 <aiExecCtx+0x4c>)
 800354c:	6830      	ldr	r0, [r6, #0]
 800354e:	2800      	cmp	r0, #0
 8003550:	d0fa      	beq.n	8003548 <aiExecCtx+0x14>
          (strlen(cur->report.model_name) == strlen(nn_name)) &&
 8003552:	68b7      	ldr	r7, [r6, #8]
 8003554:	4638      	mov	r0, r7
 8003556:	f7fc fec3 	bl	80002e0 <strlen>
 800355a:	4605      	mov	r5, r0
 800355c:	4620      	mov	r0, r4
 800355e:	f7fc febf 	bl	80002e0 <strlen>
      if (cur->handle &&
 8003562:	4285      	cmp	r5, r0
 8003564:	d109      	bne.n	800357a <aiExecCtx+0x46>
          (strncmp(cur->report.model_name, nn_name,
 8003566:	462a      	mov	r2, r5
 8003568:	4621      	mov	r1, r4
 800356a:	4638      	mov	r0, r7
 800356c:	f007 f809 	bl	800a582 <strncmp>
      cur = &net_exec_ctx[pos];
 8003570:	2800      	cmp	r0, #0
 8003572:	bf0c      	ite	eq
 8003574:	4630      	moveq	r0, r6
 8003576:	2000      	movne	r0, #0
 8003578:	e7e6      	b.n	8003548 <aiExecCtx+0x14>
 800357a:	2000      	movs	r0, #0
 800357c:	e7e4      	b.n	8003548 <aiExecCtx+0x14>
 800357e:	bf00      	nop
 8003580:	20000ab8 	.word	0x20000ab8

08003584 <send_ai_io_tensor.isra.0>:
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 8003584:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003588:	461d      	mov	r5, r3
 800358a:	b08b      	sub	sp, #44	; 0x2c
  resp->which_payload = respMsg_tensor_tag;
 800358c:	2311      	movs	r3, #17
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 800358e:	460c      	mov	r4, r1
 8003590:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 8003594:	f10d 090c 	add.w	r9, sp, #12
  resp->which_payload = respMsg_tensor_tag;
 8003598:	80cb      	strh	r3, [r1, #6]
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 800359a:	4606      	mov	r6, r0
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 800359c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
static bool send_ai_io_tensor(const reqMsg *req, respMsg *resp,
 800359e:	4617      	mov	r7, r2
  fill_tensor_desc_msg(buffer, &resp->payload.tensor.desc, &array_u32, flags, scale, zero_point);
 80035a0:	3108      	adds	r1, #8
 80035a2:	464a      	mov	r2, r9
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	4628      	mov	r0, r5
 80035a8:	4643      	mov	r3, r8
 80035aa:	f7ff ff25 	bl	80033f8 <fill_tensor_desc_msg>
  resp->payload.tensor.desc.dims.funcs.encode = encode_uint32;
 80035ae:	4b10      	ldr	r3, [pc, #64]	; (80035f0 <send_ai_io_tensor.isra.0+0x6c>)
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 80035b0:	f418 7f00 	tst.w	r8, #512	; 0x200
  resp->payload.tensor.desc.dims.arg = &array_u32;
 80035b4:	e9c4 3915 	strd	r3, r9, [r4, #84]	; 0x54
  resp->payload.tensor.data.addr = (uint32_t)buffer->data;
 80035b8:	686b      	ldr	r3, [r5, #4]
 80035ba:	6763      	str	r3, [r4, #116]	; 0x74
  if (flags & EnumTensorFlag_TENSOR_FLAG_NO_DATA) {
 80035bc:	d115      	bne.n	80035ea <send_ai_io_tensor.isra.0+0x66>
    resp->payload.tensor.data.size = _get_buffer_size(buffer);
 80035be:	4628      	mov	r0, r5
 80035c0:	f7ff ff75 	bl	80034ae <_get_buffer_size>
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 80035c4:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80035c6:	2200      	movs	r2, #0
    resp->payload.tensor.data.size = 0;
 80035c8:	6720      	str	r0, [r4, #112]	; 0x70
  aiPbMgrSendResp(req, resp, state);
 80035ca:	4621      	mov	r1, r4
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 80035cc:	e9cd 3208 	strd	r3, r2, [sp, #32]
  resp->payload.tensor.data.datas.funcs.encode = &encode_data_cb;
 80035d0:	4b08      	ldr	r3, [pc, #32]	; (80035f4 <send_ai_io_tensor.isra.0+0x70>)
 80035d2:	67a3      	str	r3, [r4, #120]	; 0x78
  resp->payload.tensor.data.datas.arg = (void *)&data;
 80035d4:	ab06      	add	r3, sp, #24
  struct aiPbData data = { 0, resp->payload.tensor.data.size, resp->payload.tensor.data.addr, 0};
 80035d6:	e9cd 2006 	strd	r2, r0, [sp, #24]
  aiPbMgrSendResp(req, resp, state);
 80035da:	463a      	mov	r2, r7
 80035dc:	4630      	mov	r0, r6
  resp->payload.tensor.data.datas.arg = (void *)&data;
 80035de:	67e3      	str	r3, [r4, #124]	; 0x7c
  aiPbMgrSendResp(req, resp, state);
 80035e0:	f7ff fa16 	bl	8002a10 <aiPbMgrSendResp>
}
 80035e4:	b00b      	add	sp, #44	; 0x2c
 80035e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035ea:	2000      	movs	r0, #0
 80035ec:	e7ea      	b.n	80035c4 <send_ai_io_tensor.isra.0+0x40>
 80035ee:	bf00      	nop
 80035f0:	08002833 	.word	0x08002833
 80035f4:	0800288b 	.word	0x0800288b

080035f8 <aiOnExecNode_cb>:
    const ai_observer_node *node) {
 80035f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035fc:	460d      	mov	r5, r1
 80035fe:	4617      	mov	r7, r2
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8003600:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
    const ai_observer_node *node) {
 8003604:	ed2d 8b02 	vpush	{d8}
 8003608:	b093      	sub	sp, #76	; 0x4c
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 800360a:	f7ff ff6d 	bl	80034e8 <cyclesCounterEnd>
  if (flags & AI_OBSERVER_PRE_EVT) {
 800360e:	f015 0602 	ands.w	r6, r5, #2
  volatile uint64_t ts = cyclesCounterEnd(); /* time stamp to mark the entry */
 8003612:	e9cd 0104 	strd	r0, r1, [sp, #16]
  if (flags & AI_OBSERVER_PRE_EVT) {
 8003616:	d011      	beq.n	800363c <aiOnExecNode_cb+0x44>
    obs_ctx->n_cb_in++;
 8003618:	6863      	ldr	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 800361a:	05ea      	lsls	r2, r5, #23
    obs_ctx->n_cb_in++;
 800361c:	f103 0301 	add.w	r3, r3, #1
 8003620:	6063      	str	r3, [r4, #4]
    if (flags & AI_OBSERVER_FIRST_EVT)
 8003622:	d503      	bpl.n	800362c <aiOnExecNode_cb+0x34>
      obs_ctx->tnodes = ts;
 8003624:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003628:	e9c4 2308 	strd	r2, r3, [r4, #32]
  cyclesCounterStart();
 800362c:	f7ff ff4c 	bl	80034c8 <cyclesCounterStart>
}
 8003630:	2000      	movs	r0, #0
 8003632:	b013      	add	sp, #76	; 0x4c
 8003634:	ecbd 8b02 	vpop	{d8}
 8003638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  } else if (flags & AI_OBSERVER_POST_EVT) {
 800363c:	076b      	lsls	r3, r5, #29
 800363e:	d5f5      	bpl.n	800362c <aiOnExecNode_cb+0x34>
    cyclesCounterStart();
 8003640:	f7ff ff42 	bl	80034c8 <cyclesCounterStart>
    obs_ctx->tnodes += ts;
 8003644:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8003648:	e9d4 3208 	ldrd	r3, r2, [r4, #32]
 800364c:	181b      	adds	r3, r3, r0
 800364e:	eb42 0201 	adc.w	r2, r2, r1
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 8003652:	f415 7f00 	tst.w	r5, #512	; 0x200
    type |= (node->type & (ai_u16)0x7FFF);
 8003656:	887d      	ldrh	r5, [r7, #2]
    obs_ctx->tnodes += ts;
 8003658:	e9c4 3208 	strd	r3, r2, [r4, #32]
    obs_ctx->n_cb_out++;
 800365c:	68a3      	ldr	r3, [r4, #8]
    type |= (node->type & (ai_u16)0x7FFF);
 800365e:	f3c5 050e 	ubfx	r5, r5, #0, #15
    obs_ctx->n_cb_out++;
 8003662:	f103 0301 	add.w	r3, r3, #1
 8003666:	60a3      	str	r3, [r4, #8]
      type |= (EnumOperatorFlag_OPERATOR_FLAG_LAST << 24);
 8003668:	bf0c      	ite	eq
 800366a:	f04f 7380 	moveq.w	r3, #16777216	; 0x1000000
 800366e:	f04f 7340 	movne.w	r3, #50331648	; 0x3000000
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 8003672:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    type |= (node->type & (ai_u16)0x7FFF);
 8003676:	431d      	orrs	r5, r3
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 8003678:	f7ff fdaa 	bl	80031d0 <dwtCyclesToFloatMs>
 800367c:	ab04      	add	r3, sp, #16
 800367e:	2202      	movs	r2, #2
 8003680:	ed8d 0a07 	vstr	s0, [sp, #28]
 8003684:	930a      	str	r3, [sp, #40]	; 0x28
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003686:	ab07      	add	r3, sp, #28
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 8003688:	9209      	str	r2, [sp, #36]	; 0x24
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 800368a:	9302      	str	r3, [sp, #8]
 800368c:	88bb      	ldrh	r3, [r7, #4]
    aiOpPerf perf = {dwtCyclesToFloatMs(ts), 0,  2, (uint32_t *)&ts};
 800368e:	9608      	str	r6, [sp, #32]
    aiPbMgrSendOperator(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003690:	e9cd 5300 	strd	r5, r3, [sp]
 8003694:	4633      	mov	r3, r6
 8003696:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 800369a:	f7ff fa7f 	bl	8002b9c <aiPbMgrSendOperator>
    tl = GET_TENSOR_LIST_OUT(node->tensors);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	881a      	ldrh	r2, [r3, #0]
 80036a2:	2a01      	cmp	r2, #1
 80036a4:	d90e      	bls.n	80036c4 <aiOnExecNode_cb+0xcc>
 80036a6:	f8d3 8004 	ldr.w	r8, [r3, #4]
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 80036aa:	46b1      	mov	r9, r6
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 80036ac:	eddf 8a38 	vldr	s17, [pc, #224]	; 8003790 <aiOnExecNode_cb+0x198>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 80036b0:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 80036b4:	429e      	cmp	r6, r3
 80036b6:	d205      	bcs.n	80036c4 <aiOnExecNode_cb+0xcc>
 80036b8:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80036bc:	b113      	cbz	r3, 80036c4 <aiOnExecNode_cb+0xcc>
 80036be:	f853 7026 	ldr.w	r7, [r3, r6, lsl #2]
 80036c2:	b94f      	cbnz	r7, 80036d8 <aiOnExecNode_cb+0xe0>
    obs_ctx->tcom += cyclesCounterEnd();
 80036c4:	f7ff ff10 	bl	80034e8 <cyclesCounterEnd>
 80036c8:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 80036cc:	1818      	adds	r0, r3, r0
 80036ce:	eb42 0101 	adc.w	r1, r2, r1
 80036d2:	e9c4 0106 	strd	r0, r1, [r4, #24]
 80036d6:	e7a9      	b.n	800362c <aiOnExecNode_cb+0x34>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d046      	beq.n	800376c <aiOnExecNode_cb+0x174>
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	2a00      	cmp	r2, #0
 80036e2:	d043      	beq.n	800376c <aiOnExecNode_cb+0x174>
 80036e4:	8859      	ldrh	r1, [r3, #2]
 80036e6:	2900      	cmp	r1, #0
 80036e8:	d040      	beq.n	800376c <aiOnExecNode_cb+0x174>
 80036ea:	6812      	ldr	r2, [r2, #0]
 80036ec:	ed92 8a00 	vldr	s16, [r2]
      if (AI_TENSOR_FMT_GET_SIGN(t))
 80036f0:	69b8      	ldr	r0, [r7, #24]
 80036f2:	6802      	ldr	r2, [r0, #0]
 80036f4:	f412 0500 	ands.w	r5, r2, #8388608	; 0x800000
 80036f8:	d03b      	beq.n	8003772 <aiOnExecNode_cb+0x17a>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d044      	beq.n	8003788 <aiOnExecNode_cb+0x190>
 80036fe:	6859      	ldr	r1, [r3, #4]
 8003700:	2900      	cmp	r1, #0
 8003702:	d043      	beq.n	800378c <aiOnExecNode_cb+0x194>
 8003704:	885d      	ldrh	r5, [r3, #2]
 8003706:	b115      	cbz	r5, 800370e <aiOnExecNode_cb+0x116>
 8003708:	684b      	ldr	r3, [r1, #4]
 800370a:	f993 5000 	ldrsb.w	r5, [r3]
      ai_buffer buffer =
 800370e:	68c3      	ldr	r3, [r0, #12]
          AI_BUFFER_INIT(
 8003710:	2101      	movs	r1, #1
 8003712:	4638      	mov	r0, r7
      ai_buffer buffer =
 8003714:	920b      	str	r2, [sp, #44]	; 0x2c
 8003716:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800371a:	e9cd 390c 	strd	r3, r9, [sp, #48]	; 0x30
          AI_BUFFER_INIT(
 800371e:	f002 fa4b 	bl	8005bb8 <get_tensor_size>
      ai_buffer buffer =
 8003722:	7a3b      	ldrb	r3, [r7, #8]
 8003724:	900f      	str	r0, [sp, #60]	; 0x3c
 8003726:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
          AI_BUFFER_INIT(
 800372a:	68bb      	ldr	r3, [r7, #8]
      ai_buffer buffer =
 800372c:	9a10      	ldr	r2, [sp, #64]	; 0x40
          AI_BUFFER_INIT(
 800372e:	f3c3 2317 	ubfx	r3, r3, #8, #24
      ai_buffer buffer =
 8003732:	f363 221f 	bfi	r2, r3, #8, #24
 8003736:	9210      	str	r2, [sp, #64]	; 0x40
 8003738:	68fb      	ldr	r3, [r7, #12]
      if (obs_ctx->no_data)
 800373a:	7d22      	ldrb	r2, [r4, #20]
      ai_buffer buffer =
 800373c:	9311      	str	r3, [sp, #68]	; 0x44
      if (i == (GET_TENSOR_LIST_SIZE(tl) - 1))
 800373e:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8003742:	3b01      	subs	r3, #1
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8003744:	429e      	cmp	r6, r3
 8003746:	bf14      	ite	ne
 8003748:	2304      	movne	r3, #4
 800374a:	f44f 7382 	moveq.w	r3, #260	; 0x104
      if (obs_ctx->no_data)
 800374e:	b10a      	cbz	r2, 8003754 <aiOnExecNode_cb+0x15c>
        tens_flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8003750:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 8003754:	eeb0 0a48 	vmov.f32	s0, s16
 8003758:	2202      	movs	r2, #2
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 800375a:	3601      	adds	r6, #1
      send_ai_io_tensor(obs_ctx->creq, obs_ctx->cresp, EnumState_S_PROCESSING,
 800375c:	e9cd 3500 	strd	r3, r5, [sp]
 8003760:	ab0b      	add	r3, sp, #44	; 0x2c
 8003762:	e9d4 0103 	ldrd	r0, r1, [r4, #12]
 8003766:	f7ff ff0d 	bl	8003584 <send_ai_io_tensor.isra.0>
    AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl) {
 800376a:	e7a1      	b.n	80036b0 <aiOnExecNode_cb+0xb8>
      ai_float scale = AI_TENSOR_INTEGER_GET_SCALE(t, 0);
 800376c:	eeb0 8a68 	vmov.f32	s16, s17
 8003770:	e7be      	b.n	80036f0 <aiOnExecNode_cb+0xf8>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_U8(t, 0);
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0cb      	beq.n	800370e <aiOnExecNode_cb+0x116>
 8003776:	6859      	ldr	r1, [r3, #4]
 8003778:	2900      	cmp	r1, #0
 800377a:	d0c8      	beq.n	800370e <aiOnExecNode_cb+0x116>
 800377c:	885b      	ldrh	r3, [r3, #2]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d0c5      	beq.n	800370e <aiOnExecNode_cb+0x116>
 8003782:	684b      	ldr	r3, [r1, #4]
 8003784:	781d      	ldrb	r5, [r3, #0]
 8003786:	e7c2      	b.n	800370e <aiOnExecNode_cb+0x116>
        zero_point = AI_TENSOR_INTEGER_GET_ZEROPOINT_I8(t, 0);
 8003788:	461d      	mov	r5, r3
 800378a:	e7c0      	b.n	800370e <aiOnExecNode_cb+0x116>
 800378c:	460d      	mov	r5, r1
 800378e:	e7be      	b.n	800370e <aiOnExecNode_cb+0x116>
 8003790:	00000000 	.word	0x00000000

08003794 <aiPbCmdNNInfo>:

void aiPbCmdNNInfo(const reqMsg *req, respMsg *resp, void *param)
{
 8003794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003798:	4606      	mov	r6, r0
 800379a:	b09c      	sub	sp, #112	; 0x70
 800379c:	460c      	mov	r4, r1
  struct ai_network_exec_ctx *ctx;

  UNUSED(param);

  ctx = aiExecCtx(req->name, req->param);
 800379e:	300c      	adds	r0, #12
 80037a0:	f850 1c04 	ldr.w	r1, [r0, #-4]
 80037a4:	f7ff fec6 	bl	8003534 <aiExecCtx>
  if (ctx)
 80037a8:	4605      	mov	r5, r0
 80037aa:	2800      	cmp	r0, #0
 80037ac:	f000 80a9 	beq.w	8003902 <aiPbCmdNNInfo+0x16e>
  resp->which_payload = respMsg_minfo_tag;
 80037b0:	2316      	movs	r3, #22
    send_model_info(req, resp, EnumState_S_IDLE, &ctx->report,
 80037b2:	f890 7091 	ldrb.w	r7, [r0, #145]	; 0x91
 80037b6:	f890 8090 	ldrb.w	r8, [r0, #144]	; 0x90
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 80037ba:	2240      	movs	r2, #64	; 0x40
 80037bc:	f104 0108 	add.w	r1, r4, #8
 80037c0:	6880      	ldr	r0, [r0, #8]
  resp->which_payload = respMsg_minfo_tag;
 80037c2:	80e3      	strh	r3, [r4, #6]
  aiPbStrCopy(nn->model_name, &resp->payload.minfo.name[0],
 80037c4:	f7ff f8ca 	bl	800295c <aiPbStrCopy>
  resp->payload.minfo.rtid = _AI_RUNTIME_ID;
 80037c8:	2301      	movs	r3, #1
  aiPbStrCopy(nn->model_signature, &resp->payload.minfo.signature[0],
 80037ca:	2240      	movs	r2, #64	; 0x40
 80037cc:	f104 014c 	add.w	r1, r4, #76	; 0x4c
  resp->payload.minfo.rtid = _AI_RUNTIME_ID;
 80037d0:	64a3      	str	r3, [r4, #72]	; 0x48
  aiPbStrCopy(nn->model_signature, &resp->payload.minfo.signature[0],
 80037d2:	68e8      	ldr	r0, [r5, #12]
 80037d4:	f7ff f8c2 	bl	800295c <aiPbStrCopy>
  aiPbStrCopy(nn->compile_datetime, &resp->payload.minfo.compile_datetime[0],
 80037d8:	2240      	movs	r2, #64	; 0x40
 80037da:	f104 018c 	add.w	r1, r4, #140	; 0x8c
 80037de:	6968      	ldr	r0, [r5, #20]
 80037e0:	f7ff f8bc 	bl	800295c <aiPbStrCopy>
  resp->payload.minfo.runtime_version = _ai_version_to_uint32(&nn->runtime_version);
 80037e4:	69eb      	ldr	r3, [r5, #28]
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 80037e6:	f1b8 0f00 	cmp.w	r8, #0
  struct _encode_tensor_desc tensor_ins = {
 80037ea:	a914      	add	r1, sp, #80	; 0x50
 80037ec:	ba1b      	rev	r3, r3
 80037ee:	4849      	ldr	r0, [pc, #292]	; (8003914 <aiPbCmdNNInfo+0x180>)
 80037f0:	9104      	str	r1, [sp, #16]
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 80037f2:	f04f 0c00 	mov.w	ip, #0
  resp->payload.minfo.runtime_version = _ai_version_to_uint32(&nn->runtime_version);
 80037f6:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 80037fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 80037fc:	4946      	ldr	r1, [pc, #280]	; (8003918 <aiPbCmdNNInfo+0x184>)
 80037fe:	ba1b      	rev	r3, r3
  struct _encode_tensor_desc tensor_ins = {
 8003800:	9002      	str	r0, [sp, #8]
  struct _encode_tensor_desc tensor_outs = {
 8003802:	9005      	str	r0, [sp, #20]
 8003804:	a818      	add	r0, sp, #96	; 0x60
  resp->payload.minfo.tool_version = _ai_version_to_uint32(&nn->tool_version);
 8003806:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 800380a:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 800380e:	f8cd c068 	str.w	ip, [sp, #104]	; 0x68
  struct _encode_tensor_desc tensor_outs = {
 8003812:	9007      	str	r0, [sp, #28]
  resp->payload.minfo.n_macc = (uint64_t)nn->n_macc;
 8003814:	e9d5 230e 	ldrd	r2, r3, [r5, #56]	; 0x38
 8003818:	e9c4 2336 	strd	r2, r3, [r4, #216]	; 0xd8
  resp->payload.minfo.n_nodes = nn->n_nodes;
 800381c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003820:	6c6a      	ldr	r2, [r5, #68]	; 0x44
  resp->payload.minfo.n_nodes = nn->n_nodes;
 8003822:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 8003826:	f240 4301 	movw	r3, #1025	; 0x401
 800382a:	bf08      	it	eq
 800382c:	2301      	moveq	r3, #1
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 800382e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
      &encode_ai_buffer_to_tensor_desc, nn->n_inputs, &tensor_desc_ins };
 8003832:	f8b5 2040 	ldrh.w	r2, [r5, #64]	; 0x40
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003836:	2300      	movs	r3, #0
  resp->payload.minfo.inputs.funcs.encode = encode_tensor_desc;
 8003838:	f8c4 10e8 	str.w	r1, [r4, #232]	; 0xe8
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 800383c:	429f      	cmp	r7, r3
  struct _encode_tensor_desc tensor_ins = {
 800383e:	9203      	str	r2, [sp, #12]
  resp->payload.minfo.n_inputs = nn->n_inputs;
 8003840:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8003844:	aa02      	add	r2, sp, #8
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8003846:	6caf      	ldr	r7, [r5, #72]	; 0x48
  resp->payload.minfo.inputs.arg = (void *)&tensor_ins;
 8003848:	f8c4 20ec 	str.w	r2, [r4, #236]	; 0xec
    flags |= EnumTensorFlag_TENSOR_FLAG_IN_MEMPOOL;
 800384c:	f240 4202 	movw	r2, #1026	; 0x402
 8003850:	bf08      	it	eq
 8003852:	2202      	moveq	r2, #2
  struct _data_tensor_desc tensor_desc_ins = {&nn->inputs[0], flags, 0.0, 0};
 8003854:	9317      	str	r3, [sp, #92]	; 0x5c
  struct _data_tensor_desc tensor_desc_outs = {&nn->outputs[0], flags, 0.0, 0};
 8003856:	931b      	str	r3, [sp, #108]	; 0x6c
 8003858:	e9cd 7218 	strd	r7, r2, [sp, #96]	; 0x60
      &encode_ai_buffer_to_tensor_desc, nn->n_outputs, &tensor_desc_outs };
 800385c:	f8b5 2042 	ldrh.w	r2, [r5, #66]	; 0x42
  struct _encode_tensor_desc tensor_outs = {
 8003860:	9206      	str	r2, [sp, #24]
  resp->payload.minfo.outputs.funcs.encode = encode_tensor_desc;
 8003862:	e9c4 213c 	strd	r2, r1, [r4, #240]	; 0xf0
  resp->payload.minfo.outputs.arg = (void *)&tensor_outs;
 8003866:	aa05      	add	r2, sp, #20
 8003868:	f8c4 20f8 	str.w	r2, [r4, #248]	; 0xf8
  if (nn->map_activations.size) {
 800386c:	f8b5 705a 	ldrh.w	r7, [r5, #90]	; 0x5a
 8003870:	2f00      	cmp	r7, #0
 8003872:	d042      	beq.n	80038fa <aiPbCmdNNInfo+0x166>
      size_acts += nn->map_activations.buffer[i].size;
 8003874:	6de8      	ldr	r0, [r5, #92]	; 0x5c
    for (int i=0; i<nn->map_activations.size; i++)
 8003876:	461a      	mov	r2, r3
      size_acts += nn->map_activations.buffer[i].size;
 8003878:	f04f 0e1c 	mov.w	lr, #28
 800387c:	3010      	adds	r0, #16
 800387e:	fb0e fc02 	mul.w	ip, lr, r2
    for (int i=0; i<nn->map_activations.size; i++)
 8003882:	3201      	adds	r2, #1
      size_acts += nn->map_activations.buffer[i].size;
 8003884:	f850 c00c 	ldr.w	ip, [r0, ip]
    for (int i=0; i<nn->map_activations.size; i++)
 8003888:	42ba      	cmp	r2, r7
      size_acts += nn->map_activations.buffer[i].size;
 800388a:	4463      	add	r3, ip
    for (int i=0; i<nn->map_activations.size; i++)
 800388c:	dbf7      	blt.n	800387e <aiPbCmdNNInfo+0xea>
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 800388e:	4a23      	ldr	r2, [pc, #140]	; (800391c <aiPbCmdNNInfo+0x188>)
  struct _encode_tensor_desc tensor_acts = {
 8003890:	a808      	add	r0, sp, #32
 8003892:	4f23      	ldr	r7, [pc, #140]	; (8003920 <aiPbCmdNNInfo+0x18c>)
 8003894:	900d      	str	r0, [sp, #52]	; 0x34
  if (nn->map_weights.size) {
 8003896:	f8b5 0052 	ldrh.w	r0, [r5, #82]	; 0x52
  struct _encode_tensor_desc tensor_acts = {
 800389a:	970b      	str	r7, [sp, #44]	; 0x2c
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 800389c:	e9cd 2308 	strd	r2, r3, [sp, #32]
  struct _encode_tensor_desc tensor_acts = {
 80038a0:	2201      	movs	r2, #1
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 80038a2:	2300      	movs	r3, #0
  struct _encode_tensor_desc tensor_acts = {
 80038a4:	920c      	str	r2, [sp, #48]	; 0x30
  struct _mempool_attr_desc tensor_desc_acts = {"acts", size_acts, 0};
 80038a6:	930a      	str	r3, [sp, #40]	; 0x28
  resp->payload.minfo.activations.funcs.encode = encode_tensor_desc;
 80038a8:	e9c4 213f 	strd	r2, r1, [r4, #252]	; 0xfc
  resp->payload.minfo.activations.arg = (void *)&tensor_acts;
 80038ac:	aa0b      	add	r2, sp, #44	; 0x2c
 80038ae:	f8c4 2104 	str.w	r2, [r4, #260]	; 0x104
  if (nn->map_weights.size) {
 80038b2:	b320      	cbz	r0, 80038fe <aiPbCmdNNInfo+0x16a>
      size_params += nn->map_weights.buffer[i].size;
 80038b4:	6d6d      	ldr	r5, [r5, #84]	; 0x54
    for (int i=0; i<nn->map_weights.size; i++)
 80038b6:	461a      	mov	r2, r3
      size_params += nn->map_weights.buffer[i].size;
 80038b8:	f04f 0e1c 	mov.w	lr, #28
 80038bc:	3510      	adds	r5, #16
 80038be:	fb0e fc02 	mul.w	ip, lr, r2
    for (int i=0; i<nn->map_weights.size; i++)
 80038c2:	3201      	adds	r2, #1
      size_params += nn->map_weights.buffer[i].size;
 80038c4:	f855 c00c 	ldr.w	ip, [r5, ip]
    for (int i=0; i<nn->map_weights.size; i++)
 80038c8:	4282      	cmp	r2, r0
      size_params += nn->map_weights.buffer[i].size;
 80038ca:	4463      	add	r3, ip
    for (int i=0; i<nn->map_weights.size; i++)
 80038cc:	dbf7      	blt.n	80038be <aiPbCmdNNInfo+0x12a>
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 80038ce:	4a15      	ldr	r2, [pc, #84]	; (8003924 <aiPbCmdNNInfo+0x190>)
  struct _encode_tensor_desc tensor_w = {
 80038d0:	a80e      	add	r0, sp, #56	; 0x38
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 80038d2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  struct _encode_tensor_desc tensor_w = {
 80038d6:	2301      	movs	r3, #1
  struct _mempool_attr_desc tensor_desc_w = {"params", size_params, 0};
 80038d8:	2200      	movs	r2, #0
  struct _encode_tensor_desc tensor_w = {
 80038da:	9013      	str	r0, [sp, #76]	; 0x4c
  aiPbMgrSendResp(req, resp, state);
 80038dc:	4630      	mov	r0, r6
  struct _encode_tensor_desc tensor_w = {
 80038de:	9312      	str	r3, [sp, #72]	; 0x48
  resp->payload.minfo.params.funcs.encode = encode_tensor_desc;
 80038e0:	e9c4 3142 	strd	r3, r1, [r4, #264]	; 0x108
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 80038e4:	ab11      	add	r3, sp, #68	; 0x44
  aiPbMgrSendResp(req, resp, state);
 80038e6:	4621      	mov	r1, r4
  resp->payload.minfo.params.arg = (void *)&tensor_w;
 80038e8:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
  struct _encode_tensor_desc tensor_w = {
 80038ec:	e9cd 2710 	strd	r2, r7, [sp, #64]	; 0x40
  aiPbMgrSendResp(req, resp, state);
 80038f0:	f7ff f88e 	bl	8002a10 <aiPbMgrSendResp>
        ctx->inputs_in_activations, ctx->outputs_in_activations);
  else
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
        EnumError_E_INVALID_PARAM, EnumError_E_INVALID_PARAM);
}
 80038f4:	b01c      	add	sp, #112	; 0x70
 80038f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  ai_size size_acts = 0;
 80038fa:	463b      	mov	r3, r7
 80038fc:	e7c7      	b.n	800388e <aiPbCmdNNInfo+0xfa>
  ai_size size_params = 0;
 80038fe:	4603      	mov	r3, r0
 8003900:	e7e5      	b.n	80038ce <aiPbCmdNNInfo+0x13a>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003902:	2304      	movs	r3, #4
 8003904:	4621      	mov	r1, r4
 8003906:	4630      	mov	r0, r6
 8003908:	461a      	mov	r2, r3
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	f7ff f8d4 	bl	8002ab8 <aiPbMgrSendAck>
}
 8003910:	e7f0      	b.n	80038f4 <aiPbCmdNNInfo+0x160>
 8003912:	bf00      	nop
 8003914:	0800348d 	.word	0x0800348d
 8003918:	080029a9 	.word	0x080029a9
 800391c:	0800c7f3 	.word	0x0800c7f3
 8003920:	080033ad 	.word	0x080033ad
 8003924:	0800c7f8 	.word	0x0800c7f8

08003928 <_print_debug>:
{
 8003928:	b40e      	push	{r1, r2, r3}
 800392a:	b517      	push	{r0, r1, r2, r4, lr}
  if (!debug)
 800392c:	b178      	cbz	r0, 800394e <_print_debug+0x26>
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 800392e:	4c0f      	ldr	r4, [pc, #60]	; (800396c <_print_debug+0x44>)
  va_start(ap, fmt);
 8003930:	ab06      	add	r3, sp, #24
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 8003932:	2150      	movs	r1, #80	; 0x50
 8003934:	9a05      	ldr	r2, [sp, #20]
 8003936:	4620      	mov	r0, r4
  va_start(ap, fmt);
 8003938:	9301      	str	r3, [sp, #4]
  s = LC_VSNPRINT(_print_buffer, _PRINT_BUFFER_SIZE, fmt, ap);
 800393a:	f7ff fbd5 	bl	80030e8 <lc_vsnprint>
      _print_buffer[s] = 0;
 800393e:	2100      	movs	r1, #0
 8003940:	1823      	adds	r3, r4, r0
  while (s) {
 8003942:	b948      	cbnz	r0, 8003958 <_print_debug+0x30>
  aiPbMgrSendLogV2(EnumState_S_WAITING, 1, &_print_buffer[0]);
 8003944:	2101      	movs	r1, #1
 8003946:	4a09      	ldr	r2, [pc, #36]	; (800396c <_print_debug+0x44>)
 8003948:	4608      	mov	r0, r1
 800394a:	f7ff f8d5 	bl	8002af8 <aiPbMgrSendLogV2>
}
 800394e:	b003      	add	sp, #12
 8003950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003954:	b003      	add	sp, #12
 8003956:	4770      	bx	lr
    if ((_print_buffer[s] == '\n') || (_print_buffer[s] == '\r'))
 8003958:	781a      	ldrb	r2, [r3, #0]
 800395a:	2a0a      	cmp	r2, #10
 800395c:	d001      	beq.n	8003962 <_print_debug+0x3a>
 800395e:	2a0d      	cmp	r2, #13
 8003960:	d100      	bne.n	8003964 <_print_debug+0x3c>
      _print_buffer[s] = 0;
 8003962:	7019      	strb	r1, [r3, #0]
    s--;
 8003964:	3801      	subs	r0, #1
 8003966:	3b01      	subs	r3, #1
 8003968:	e7eb      	b.n	8003942 <_print_debug+0x1a>
 800396a:	bf00      	nop
 800396c:	20000a68 	.word	0x20000a68

08003970 <aiPbCmdNNRun>:

void aiPbCmdNNRun(const reqMsg *req, respMsg *resp, void *param)
{
 8003970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003974:	4605      	mov	r5, r0
 8003976:	460e      	mov	r6, r1
  ai_buffer *ai_output;

  UNUSED(param);

  /* 0 - Check if requested c-name model is available -------------- */
  ctx = aiExecCtx(req->name, -1);
 8003978:	300c      	adds	r0, #12
 800397a:	f04f 31ff 	mov.w	r1, #4294967295
{
 800397e:	ed2d 8b02 	vpush	{d8}
 8003982:	b0a1      	sub	sp, #132	; 0x84
  ctx = aiExecCtx(req->name, -1);
 8003984:	f7ff fdd6 	bl	8003534 <aiExecCtx>
  if (!ctx) {
 8003988:	4604      	mov	r4, r0
 800398a:	b910      	cbnz	r0, 8003992 <aiPbCmdNNRun+0x22>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800398c:	2304      	movs	r3, #4

  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
  if (batch != 1) {
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
        "ai_mnetwork_run");
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	e098      	b.n	8003ac4 <aiPbCmdNNRun+0x154>
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 8003992:	68ab      	ldr	r3, [r5, #8]
  net_obs_ctx.no_data = true;
 8003994:	2101      	movs	r1, #1
 8003996:	4a9b      	ldr	r2, [pc, #620]	; (8003c04 <aiPbCmdNNRun+0x294>)
  net_obs_ctx.tcom = 0ULL;
 8003998:	f04f 0800 	mov.w	r8, #0
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER_WITH_DATA) ==
 800399c:	075f      	lsls	r7, r3, #29
  net_obs_ctx.tcom = 0ULL;
 800399e:	f04f 0900 	mov.w	r9, #0
  net_obs_ctx.no_data = true;
 80039a2:	7511      	strb	r1, [r2, #20]
  net_obs_ctx.n_cb_in  = 0;
 80039a4:	f04f 0700 	mov.w	r7, #0
  if ((req->param & EnumRunParam_P_RUN_MODE_PER_LAYER) ==
 80039a8:	bf52      	itee	pl
 80039aa:	f3c3 0140 	ubfxpl	r1, r3, #1, #1
    net_obs_ctx.is_enabled = true;
 80039ae:	7011      	strbmi	r1, [r2, #0]
    net_obs_ctx.no_data = false;
 80039b0:	2100      	movmi	r1, #0
  ctx->obs_ctx = &net_obs_ctx;
 80039b2:	f8c4 2094 	str.w	r2, [r4, #148]	; 0x94
 80039b6:	bf58      	it	pl
 80039b8:	7011      	strbpl	r1, [r2, #0]
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 80039ba:	f3c3 2000 	ubfx	r0, r3, #8, #1
    net_obs_ctx.no_data = false;
 80039be:	bf48      	it	mi
 80039c0:	7511      	strbmi	r1, [r2, #20]
  ctx->debug = req->param & EnumRunParam_P_RUN_CONF_DEBUG?true:false;
 80039c2:	f884 0092 	strb.w	r0, [r4, #146]	; 0x92
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data.. opt=0x%x, param=0x%x\r\n", req->opt, req->param);
 80039c6:	4990      	ldr	r1, [pc, #576]	; (8003c08 <aiPbCmdNNRun+0x298>)
  net_obs_ctx.tcom = 0ULL;
 80039c8:	e9c2 8906 	strd	r8, r9, [r2, #24]
  net_obs_ctx.tnodes = 0ULL;
 80039cc:	e9c2 8908 	strd	r8, r9, [r2, #32]
  net_obs_ctx.n_cb_out = 0;
 80039d0:	e9c2 7701 	strd	r7, r7, [r2, #4]
  bool first_only = req->param & EnumRunParam_P_RUN_CONF_SAME_VALUE?true:false;
 80039d4:	f3c3 2240 	ubfx	r2, r3, #9, #1
 80039d8:	9206      	str	r2, [sp, #24]
  bool direct_write = req->param & EnumRunParam_P_RUN_CONF_DIRECT_WRITE?true:false;
 80039da:	f3c3 2280 	ubfx	r2, r3, #10, #1
 80039de:	9205      	str	r2, [sp, #20]
  PB_LC_PRINT(ctx->debug, "RUN: Waiting data.. opt=0x%x, param=0x%x\r\n", req->opt, req->param);
 80039e0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
 80039e2:	f7ff ffa1 	bl	8003928 <_print_debug>
  ai_output = ctx->report.outputs;
 80039e6:	e9d4 a311 	ldrd	sl, r3, [r4, #68]	; 0x44
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 80039ea:	4650      	mov	r0, sl
 80039ec:	46d0      	mov	r8, sl
  ai_output = ctx->report.outputs;
 80039ee:	9307      	str	r3, [sp, #28]
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 80039f0:	f7ff fd5d 	bl	80034ae <_get_buffer_size>
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 80039f4:	2201      	movs	r2, #1
      _get_buffer_size(&ai_input[0]), EnumError_E_NONE);
 80039f6:	4603      	mov	r3, r0
  aiPbMgrSendAck(req, resp, EnumState_S_WAITING,
 80039f8:	4631      	mov	r1, r6
 80039fa:	4628      	mov	r0, r5
 80039fc:	9700      	str	r7, [sp, #0]
 80039fe:	f7ff f85b 	bl	8002ab8 <aiPbMgrSendAck>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8003a02:	f8b4 9040 	ldrh.w	r9, [r4, #64]	; 0x40
 8003a06:	45b9      	cmp	r9, r7
 8003a08:	dc2b      	bgt.n	8003a62 <aiPbCmdNNRun+0xf2>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8003a0a:	f8d4 7094 	ldr.w	r7, [r4, #148]	; 0x94
  if (obs_ctx->is_enabled == false)
 8003a0e:	783b      	ldrb	r3, [r7, #0]
 8003a10:	b18b      	cbz	r3, 8003a36 <aiPbCmdNNRun+0xc6>
  if (ctx->handle == AI_HANDLE_NULL)
 8003a12:	6820      	ldr	r0, [r4, #0]
 8003a14:	b178      	cbz	r0, 8003a36 <aiPbCmdNNRun+0xc6>
  ai_mnetwork_get_private_handle(ctx->handle,
 8003a16:	a90e      	add	r1, sp, #56	; 0x38
 8003a18:	aa12      	add	r2, sp, #72	; 0x48
  obs_ctx->cresp = cresp;
 8003a1a:	e9c7 5603 	strd	r5, r6, [r7, #12]
  ai_mnetwork_get_private_handle(ctx->handle,
 8003a1e:	f000 fb23 	bl	8004068 <ai_mnetwork_get_private_handle>
  obs_ctx->plt_ctx.on_node = aiOnExecNode_cb;
 8003a22:	4b7a      	ldr	r3, [pc, #488]	; (8003c0c <aiPbCmdNNRun+0x29c>)
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8003a24:	f107 0128 	add.w	r1, r7, #40	; 0x28
  obs_ctx->plt_ctx.cookie = (ai_handle)ctx;
 8003a28:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8003a2c:	2306      	movs	r3, #6
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8003a2e:	980e      	ldr	r0, [sp, #56]	; 0x38
  obs_ctx->plt_ctx.flags = AI_OBSERVER_PRE_EVT | AI_OBSERVER_POST_EVT;
 8003a30:	633b      	str	r3, [r7, #48]	; 0x30
  res = ai_platform_observer_register_s(net_hdl, &obs_ctx->plt_ctx);
 8003a32:	f004 fb3b 	bl	80080ac <ai_platform_observer_register_s>
  PB_LC_PRINT(ctx->debug, "RUN: processing\r\n");
 8003a36:	4976      	ldr	r1, [pc, #472]	; (8003c10 <aiPbCmdNNRun+0x2a0>)
 8003a38:	f894 0092 	ldrb.w	r0, [r4, #146]	; 0x92
 8003a3c:	f7ff ff74 	bl	8003928 <_print_debug>
  cyclesCounterStart();
 8003a40:	f7ff fd42 	bl	80034c8 <cyclesCounterStart>
  batch = ai_mnetwork_run(ctx->handle, ai_input, ai_output);
 8003a44:	9a07      	ldr	r2, [sp, #28]
 8003a46:	4651      	mov	r1, sl
 8003a48:	6820      	ldr	r0, [r4, #0]
 8003a4a:	f000 fafc 	bl	8004046 <ai_mnetwork_run>
  if (batch != 1) {
 8003a4e:	2801      	cmp	r0, #1
 8003a50:	d073      	beq.n	8003b3a <aiPbCmdNNRun+0x1ca>
    aiLogErr(ai_mnetwork_get_error(ctx->handle),
 8003a52:	6820      	ldr	r0, [r4, #0]
 8003a54:	f000 facb 	bl	8003fee <ai_mnetwork_get_error>
 8003a58:	496e      	ldr	r1, [pc, #440]	; (8003c14 <aiPbCmdNNRun+0x2a4>)
 8003a5a:	f7ff f8fd 	bl	8002c58 <aiLogErr>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003a5e:	230a      	movs	r3, #10
 8003a60:	e795      	b.n	800398e <aiPbCmdNNRun+0x1e>
    if ((i + 1) == ctx->report.n_inputs)
 8003a62:	3701      	adds	r7, #1
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8003a64:	4640      	mov	r0, r8
      state = EnumState_S_PROCESSING;
 8003a66:	454f      	cmp	r7, r9
 8003a68:	bf14      	ite	ne
 8003a6a:	2301      	movne	r3, #1
 8003a6c:	2302      	moveq	r3, #2
 8003a6e:	ee08 3a10 	vmov	s16, r3
  aiPbData data = { 0, _get_buffer_size(buffer), (uintptr_t)buffer->data, 0};
 8003a72:	2300      	movs	r3, #0
 8003a74:	9312      	str	r3, [sp, #72]	; 0x48
 8003a76:	f7ff fd1a 	bl	80034ae <_get_buffer_size>
 8003a7a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8003a7e:	9013      	str	r0, [sp, #76]	; 0x4c
 8003a80:	9314      	str	r3, [sp, #80]	; 0x50
 8003a82:	2300      	movs	r3, #0
 8003a84:	9315      	str	r3, [sp, #84]	; 0x54
  if ((first_only) || (direct_write))
 8003a86:	9b06      	ldr	r3, [sp, #24]
 8003a88:	b90b      	cbnz	r3, 8003a8e <aiPbCmdNNRun+0x11e>
 8003a8a:	9b05      	ldr	r3, [sp, #20]
 8003a8c:	b183      	cbz	r3, 8003ab0 <aiPbCmdNNRun+0x140>
    data.size = _get_element_size(buffer);
 8003a8e:	f8d8 1000 	ldr.w	r1, [r8]
  if (is_binary)
 8003a92:	4a61      	ldr	r2, [pc, #388]	; (8003c18 <aiPbCmdNNRun+0x2a8>)
 8003a94:	f021 437e 	bic.w	r3, r1, #4261412864	; 0xfe000000
 8003a98:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d01b      	beq.n	8003ad8 <aiPbCmdNNRun+0x168>
  return (size_t)AI_BUFFER_BYTE_SIZE(1, buffer->format);
 8003aa0:	2001      	movs	r0, #1
 8003aa2:	f002 f8e7 	bl	8005c74 <ai_buffer_get_byte_size>
  if (direct_write)
 8003aa6:	9b05      	ldr	r3, [sp, #20]
    data.size = _get_element_size(buffer);
 8003aa8:	9013      	str	r0, [sp, #76]	; 0x4c
  if (direct_write)
 8003aaa:	b10b      	cbz	r3, 8003ab0 <aiPbCmdNNRun+0x140>
    data.addr = (uintptr_t)&temp;
 8003aac:	ab0e      	add	r3, sp, #56	; 0x38
 8003aae:	9314      	str	r3, [sp, #80]	; 0x50
  aiPbMgrReceiveData(&data);
 8003ab0:	a812      	add	r0, sp, #72	; 0x48
 8003ab2:	f7ff f859 	bl	8002b68 <aiPbMgrReceiveData>
  if (data.nb_read != data.size) {
 8003ab6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8003ab8:	f8dd 904c 	ldr.w	r9, [sp, #76]	; 0x4c
 8003abc:	454b      	cmp	r3, r9
 8003abe:	d00d      	beq.n	8003adc <aiPbCmdNNRun+0x16c>
    aiPbMgrSendAck(req, resp, EnumState_S_ERROR,
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	9200      	str	r2, [sp, #0]
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	4631      	mov	r1, r6
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f7fe fff5 	bl	8002ab8 <aiPbMgrSendAck>
    }
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
  }

  aiObserverUnbind(ctx);
}
 8003ace:	b021      	add	sp, #132	; 0x84
 8003ad0:	ecbd 8b02 	vpop	{d8}
 8003ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return 4;
 8003ad8:	2004      	movs	r0, #4
 8003ada:	e7e4      	b.n	8003aa6 <aiPbCmdNNRun+0x136>
  if ((first_only) && (!direct_write))/* broadcast the value */
 8003adc:	9b06      	ldr	r3, [sp, #24]
 8003ade:	b96b      	cbnz	r3, 8003afc <aiPbCmdNNRun+0x18c>
    aiPbMgrSendAck(req, resp, state, data.size, EnumError_E_NONE);
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	ee18 2a10 	vmov	r2, s16
 8003ae6:	4631      	mov	r1, r6
 8003ae8:	4628      	mov	r0, r5
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	f108 081c 	add.w	r8, r8, #28
 8003af0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8003af2:	f7fe ffe1 	bl	8002ab8 <aiPbMgrSendAck>
      aiPbMgrWaitAck();
 8003af6:	f7fe ffe9 	bl	8002acc <aiPbMgrWaitAck>
    if (res != true)
 8003afa:	e782      	b.n	8003a02 <aiPbCmdNNRun+0x92>
  if ((first_only) && (!direct_write))/* broadcast the value */
 8003afc:	9b05      	ldr	r3, [sp, #20]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d1ee      	bne.n	8003ae0 <aiPbCmdNNRun+0x170>
      const uintptr_t r_ptr = (uintptr_t)buffer->data;
 8003b02:	f8d8 1004 	ldr.w	r1, [r8, #4]
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 8003b06:	f04f 0b01 	mov.w	fp, #1
      uintptr_t w_ptr = r_ptr + el_s;
 8003b0a:	eb01 0309 	add.w	r3, r1, r9
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 8003b0e:	4640      	mov	r0, r8
 8003b10:	e9cd 1308 	strd	r1, r3, [sp, #32]
 8003b14:	f7ff fccb 	bl	80034ae <_get_buffer_size>
 8003b18:	fbb0 f0f9 	udiv	r0, r0, r9
 8003b1c:	4583      	cmp	fp, r0
 8003b1e:	e9dd 1308 	ldrd	r1, r3, [sp, #32]
 8003b22:	d2dd      	bcs.n	8003ae0 <aiPbCmdNNRun+0x170>
        memcpy((void *)w_ptr, (void *)r_ptr, el_s);
 8003b24:	4618      	mov	r0, r3
 8003b26:	464a      	mov	r2, r9
 8003b28:	9108      	str	r1, [sp, #32]
 8003b2a:	f006 fdc3 	bl	800a6b4 <memcpy>
 8003b2e:	4603      	mov	r3, r0
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 8003b30:	f10b 0b01 	add.w	fp, fp, #1
 8003b34:	9908      	ldr	r1, [sp, #32]
        w_ptr += el_s;
 8003b36:	444b      	add	r3, r9
      for (size_t pos = 1; pos <  _get_buffer_size(buffer) / el_s; pos++)
 8003b38:	e7e9      	b.n	8003b0e <aiPbCmdNNRun+0x19e>
  tend = cyclesCounterEnd();
 8003b3a:	f7ff fcd5 	bl	80034e8 <cyclesCounterEnd>
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8003b3e:	2700      	movs	r7, #0
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8003b40:	f240 2902 	movw	r9, #514	; 0x202
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8003b44:	ed9f 8a35 	vldr	s16, [pc, #212]	; 8003c1c <aiPbCmdNNRun+0x2ac>
  tend = cyclesCounterEnd();
 8003b48:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  PB_LC_PRINT(ctx->debug, "RUN: processing done\r\n");
 8003b4c:	4934      	ldr	r1, [pc, #208]	; (8003c20 <aiPbCmdNNRun+0x2b0>)
 8003b4e:	f894 0092 	ldrb.w	r0, [r4, #146]	; 0x92
 8003b52:	f7ff fee9 	bl	8003928 <_print_debug>
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8003b56:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
  tend = obs_ctx->tcom + obs_ctx->tnodes + tend;
 8003b5a:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8003b5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8003b62:	1880      	adds	r0, r0, r2
 8003b64:	eb41 0103 	adc.w	r1, r1, r3
 8003b68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8003b6a:	18c0      	adds	r0, r0, r3
 8003b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003b6e:	eb41 0103 	adc.w	r1, r1, r3
  tend = aiObserverAdjustInferenceTime(ctx, tend);
 8003b72:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8003b76:	f7ff fb2b 	bl	80031d0 <dwtCyclesToFloatMs>
 8003b7a:	ab0c      	add	r3, sp, #48	; 0x30
 8003b7c:	2202      	movs	r2, #2
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8003b7e:	4631      	mov	r1, r6
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8003b80:	9311      	str	r3, [sp, #68]	; 0x44
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8003b82:	ab0e      	add	r3, sp, #56	; 0x38
 8003b84:	9700      	str	r7, [sp, #0]
 8003b86:	4628      	mov	r0, r5
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8003b88:	ed8d 0a0e 	vstr	s0, [sp, #56]	; 0x38
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8003b8c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8003b90:	68a3      	ldr	r3, [r4, #8]
  aiOpPerf perf = {dwtCyclesToFloatMs(tend), 0,  2, (uint32_t *)&tend};
 8003b92:	e9cd 720f 	strd	r7, r2, [sp, #60]	; 0x3c
  aiPbMgrSendOperator(req, resp, EnumState_S_PROCESSING, ctx->report.model_name, 0, 0, &perf);
 8003b96:	f7ff f801 	bl	8002b9c <aiPbMgrSendOperator>
  PB_LC_PRINT(ctx->debug, "RUN: send output tensors\r\n");
 8003b9a:	4922      	ldr	r1, [pc, #136]	; (8003c24 <aiPbCmdNNRun+0x2b4>)
 8003b9c:	f894 0092 	ldrb.w	r0, [r4, #146]	; 0x92
 8003ba0:	f7ff fec2 	bl	8003928 <_print_debug>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003ba4:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8003ba8:	f8b4 2042 	ldrh.w	r2, [r4, #66]	; 0x42
 8003bac:	42ba      	cmp	r2, r7
 8003bae:	dc0f      	bgt.n	8003bd0 <aiPbCmdNNRun+0x260>
  struct ai_network_user_obs_ctx  *obs_ctx = ctx->obs_ctx;
 8003bb0:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
  if (obs_ctx->is_enabled == false)
 8003bb4:	782b      	ldrb	r3, [r5, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d089      	beq.n	8003ace <aiPbCmdNNRun+0x15e>
  ai_mnetwork_get_private_handle(ctx->handle, &net_hdl, &pparams);
 8003bba:	a90b      	add	r1, sp, #44	; 0x2c
 8003bbc:	aa12      	add	r2, sp, #72	; 0x48
 8003bbe:	6820      	ldr	r0, [r4, #0]
 8003bc0:	f000 fa52 	bl	8004068 <ai_mnetwork_get_private_handle>
  ai_platform_observer_unregister_s(net_hdl, &obs_ctx->plt_ctx);
 8003bc4:	f105 0128 	add.w	r1, r5, #40	; 0x28
 8003bc8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8003bca:	f004 fb31 	bl	8008230 <ai_platform_observer_unregister_s>
  return 0;
 8003bce:	e77e      	b.n	8003ace <aiPbCmdNNRun+0x15e>
    if (req->param & EnumRunParam_P_RUN_MODE_PERF) {
 8003bd0:	68ab      	ldr	r3, [r5, #8]
    if ((i + 1) == ctx->report.n_outputs) {
 8003bd2:	3701      	adds	r7, #1
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8003bd4:	2100      	movs	r1, #0
 8003bd6:	eeb0 0a48 	vmov.f32	s0, s16
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8003bda:	f013 0f08 	tst.w	r3, #8
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8003bde:	4628      	mov	r0, r5
      flags |= EnumTensorFlag_TENSOR_FLAG_NO_DATA;
 8003be0:	bf0c      	ite	eq
 8003be2:	2302      	moveq	r3, #2
 8003be4:	464b      	movne	r3, r9
    if ((i + 1) == ctx->report.n_outputs) {
 8003be6:	4297      	cmp	r7, r2
      flags |= EnumTensorFlag_TENSOR_FLAG_LAST;
 8003be8:	bf06      	itte	eq
 8003bea:	f443 7380 	orreq.w	r3, r3, #256	; 0x100
      state = EnumState_S_DONE;
 8003bee:	2203      	moveq	r2, #3
    EnumState state = EnumState_S_PROCESSING;
 8003bf0:	2202      	movne	r2, #2
    send_ai_io_tensor(req, resp, state, &ai_output[i], flags, 0.0, 0);
 8003bf2:	e9cd 3100 	strd	r3, r1, [sp]
 8003bf6:	4643      	mov	r3, r8
 8003bf8:	4631      	mov	r1, r6
 8003bfa:	f108 081c 	add.w	r8, r8, #28
 8003bfe:	f7ff fcc1 	bl	8003584 <send_ai_io_tensor.isra.0>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003c02:	e7d1      	b.n	8003ba8 <aiPbCmdNNRun+0x238>
 8003c04:	20000b50 	.word	0x20000b50
 8003c08:	0800c7ff 	.word	0x0800c7ff
 8003c0c:	080035f9 	.word	0x080035f9
 8003c10:	0800c82a 	.word	0x0800c82a
 8003c14:	0800c83c 	.word	0x0800c83c
 8003c18:	000400c0 	.word	0x000400c0
 8003c1c:	00000000 	.word	0x00000000
 8003c20:	0800c84c 	.word	0x0800c84c
 8003c24:	0800c863 	.word	0x0800c863

08003c28 <aiValidationInit>:
 * Exported/Public functions
 * -----------------------------------------------------------------------------
 */

int aiValidationInit(void)
{
 8003c28:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  LC_PRINT("\r\n#\r\n");
 8003c2a:	4c20      	ldr	r4, [pc, #128]	; (8003cac <aiValidationInit+0x84>)
  port_dwt_reset();
 8003c2c:	2500      	movs	r5, #0
 8003c2e:	4e20      	ldr	r6, [pc, #128]	; (8003cb0 <aiValidationInit+0x88>)
 8003c30:	f104 008b 	add.w	r0, r4, #139	; 0x8b
 8003c34:	f7ff fa46 	bl	80030c4 <lc_print>
  LC_PRINT("# %s %d.%d\r\n", _APP_NAME_ , _APP_VERSION_MAJOR_, _APP_VERSION_MINOR_);
 8003c38:	2300      	movs	r3, #0
 8003c3a:	f104 0191 	add.w	r1, r4, #145	; 0x91
 8003c3e:	2207      	movs	r2, #7
 8003c40:	f104 009f 	add.w	r0, r4, #159	; 0x9f
 8003c44:	f7ff fa3e 	bl	80030c4 <lc_print>
  LC_PRINT("#\r\n");
 8003c48:	f104 00ac 	add.w	r0, r4, #172	; 0xac
 8003c4c:	f7ff fa3a 	bl	80030c4 <lc_print>

  systemSettingLog();
 8003c50:	f7ff fb1a 	bl	8003288 <systemSettingLog>

  crcIpInit();
 8003c54:	f000 f924 	bl	8003ea0 <port_hal_crc_ip_init_imp>
  port_dwt_init();
 8003c58:	f000 f932 	bl	8003ec0 <port_dwt_init_imp>
  port_dwt_reset();
 8003c5c:	6075      	str	r5, [r6, #4]
  port_hal_delay(100);
 8003c5e:	2064      	movs	r0, #100	; 0x64
 8003c60:	f7fd fad2 	bl	8001208 <HAL_Delay>
  st = port_dwt_get_cycles();
 8003c64:	6870      	ldr	r0, [r6, #4]
  dwtCyclesToTime(st/100, &t);
 8003c66:	2664      	movs	r6, #100	; 0x64
 8003c68:	466a      	mov	r2, sp
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	fbb0 f0f6 	udiv	r0, r0, r6
 8003c70:	f7ff fa72 	bl	8003158 <dwtCyclesToTime>
  LC_PRINT(" Timestamp    : SysTick + DWT (delay(1)=%d.%03d ms)\r\n",
 8003c74:	9a03      	ldr	r2, [sp, #12]
 8003c76:	f104 00b0 	add.w	r0, r4, #176	; 0xb0
 8003c7a:	e9dd 1301 	ldrd	r1, r3, [sp, #4]
 8003c7e:	fb06 3101 	mla	r1, r6, r1, r3
 8003c82:	f7ff fa1f 	bl	80030c4 <lc_print>
  dwtCyclesToTime(UINT32_MAX, &t);
 8003c86:	466a      	mov	r2, sp
 8003c88:	2100      	movs	r1, #0
 8003c8a:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8e:	f7ff fa63 	bl	8003158 <dwtCyclesToTime>
  cyclesCount.dwt_max = t.s * 1000 + t.ms;
 8003c92:	9a01      	ldr	r2, [sp, #4]
 8003c94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003c98:	9b02      	ldr	r3, [sp, #8]
 8003c9a:	fb01 3302 	mla	r3, r1, r2, r3
 8003c9e:	4a05      	ldr	r2, [pc, #20]	; (8003cb4 <aiValidationInit+0x8c>)
 8003ca0:	6013      	str	r3, [r2, #0]
  port_dwt_init();
 8003ca2:	f000 f90d 	bl	8003ec0 <port_dwt_init_imp>
  cyclesCounterInit();

  return 0;
}
 8003ca6:	4628      	mov	r0, r5
 8003ca8:	b004      	add	sp, #16
 8003caa:	bd70      	pop	{r4, r5, r6, pc}
 8003cac:	0800c7f3 	.word	0x0800c7f3
 8003cb0:	e0001000 	.word	0xe0001000
 8003cb4:	20000a40 	.word	0x20000a40

08003cb8 <aiValidationProcess>:

int aiValidationProcess(void)
{
 8003cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8003cbc:	2700      	movs	r7, #0
 8003cbe:	4c66      	ldr	r4, [pc, #408]	; (8003e58 <aiValidationProcess+0x1a0>)
  int res = -1;
 8003cc0:	f04f 35ff 	mov.w	r5, #4294967295
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8003cc4:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 8003e94 <aiValidationProcess+0x1dc>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003cc8:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 8003e98 <aiValidationProcess+0x1e0>
  aiPlatformVersion();
 8003ccc:	f7fe ffae 	bl	8002c2c <aiPlatformVersion>
  LC_PRINT("Discovering the network(s)...\r\n");
 8003cd0:	4862      	ldr	r0, [pc, #392]	; (8003e5c <aiValidationProcess+0x1a4>)
    net_exec_ctx[idx].handle = AI_HANDLE_NULL;
 8003cd2:	f844 7b08 	str.w	r7, [r4], #8
  LC_PRINT("Discovering the network(s)...\r\n");
 8003cd6:	f7ff f9f5 	bl	80030c4 <lc_print>
    nn_name = ai_mnetwork_find(NULL, idx);
 8003cda:	4639      	mov	r1, r7
 8003cdc:	2000      	movs	r0, #0
 8003cde:	f000 f92d 	bl	8003f3c <ai_mnetwork_find>
    if (nn_name) {
 8003ce2:	4606      	mov	r6, r0
 8003ce4:	b1b0      	cbz	r0, 8003d14 <aiValidationProcess+0x5c>
      LC_PRINT("\r\nFound network \"%s\"\r\n", nn_name);
 8003ce6:	4601      	mov	r1, r0
 8003ce8:	4640      	mov	r0, r8
 8003cea:	f7ff f9eb 	bl	80030c4 <lc_print>
  LC_PRINT("Creating the network \"%s\"..\r\n", nn_name);
 8003cee:	4631      	mov	r1, r6
 8003cf0:	485b      	ldr	r0, [pc, #364]	; (8003e60 <aiValidationProcess+0x1a8>)
 8003cf2:	f7ff f9e7 	bl	80030c4 <lc_print>
  err = ai_mnetwork_create(nn_name, &ctx->handle, NULL);
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	f1a4 0108 	sub.w	r1, r4, #8
 8003cfc:	4630      	mov	r0, r6
 8003cfe:	f000 f92b 	bl	8003f58 <ai_mnetwork_create>
  if (err.type) {
 8003d02:	f010 05ff 	ands.w	r5, r0, #255	; 0xff
 8003d06:	d016      	beq.n	8003d36 <aiValidationProcess+0x7e>
        nn_name = NULL;
 8003d08:	2600      	movs	r6, #0
    return -1;
 8003d0a:	f04f 35ff 	mov.w	r5, #4294967295
    aiLogErr(err, "ai_mnetwork_create");
 8003d0e:	4955      	ldr	r1, [pc, #340]	; (8003e64 <aiValidationProcess+0x1ac>)
 8003d10:	f7fe ffa2 	bl	8002c58 <aiLogErr>
    idx++;
 8003d14:	3701      	adds	r7, #1
  } while (nn_name);
 8003d16:	3498      	adds	r4, #152	; 0x98
 8003d18:	2e00      	cmp	r6, #0
 8003d1a:	d1de      	bne.n	8003cda <aiValidationProcess+0x22>
  int r;

  r = aiInit();
  if (r) {
 8003d1c:	2d00      	cmp	r5, #0
 8003d1e:	d077      	beq.n	8003e10 <aiValidationProcess+0x158>
    LC_PRINT("\r\nE:  aiInit() r=%d\r\n", r);
 8003d20:	4851      	ldr	r0, [pc, #324]	; (8003e68 <aiValidationProcess+0x1b0>)
 8003d22:	4629      	mov	r1, r5
 8003d24:	f7ff f9ce 	bl	80030c4 <lc_print>
    port_hal_delay(2000);
 8003d28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003d2c:	f7fd fa6c 	bl	8001208 <HAL_Delay>
  do {
    r = aiPbMgrWaitAndProcess();
  } while (r==0);

  return r;
}
 8003d30:	4628      	mov	r0, r5
 8003d32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  LC_PRINT("Initializing the network\r\n");
 8003d36:	484d      	ldr	r0, [pc, #308]	; (8003e6c <aiValidationProcess+0x1b4>)
 8003d38:	f7ff f9c4 	bl	80030c4 <lc_print>
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8003d3c:	4621      	mov	r1, r4
 8003d3e:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8003d42:	f000 f949 	bl	8003fd8 <ai_mnetwork_get_report>
 8003d46:	4682      	mov	sl, r0
    err = ai_mnetwork_get_error(ctx->handle);
 8003d48:	f854 0c08 	ldr.w	r0, [r4, #-8]
  if (!ai_mnetwork_get_report(ctx->handle, &ctx->report)) {
 8003d4c:	f1ba 0f00 	cmp.w	sl, #0
 8003d50:	d10e      	bne.n	8003d70 <aiValidationProcess+0xb8>
    err = ai_mnetwork_get_error(ctx->handle);
 8003d52:	f000 f94c 	bl	8003fee <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_get_info");
 8003d56:	4946      	ldr	r1, [pc, #280]	; (8003e70 <aiValidationProcess+0x1b8>)
 8003d58:	f7fe ff7e 	bl	8002c58 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8003d5c:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8003d60:	f000 f924 	bl	8003fac <ai_mnetwork_destroy>
        nn_name = NULL;
 8003d64:	4656      	mov	r6, sl
    return -2;
 8003d66:	f06f 0501 	mvn.w	r5, #1
    ctx->handle = AI_HANDLE_NULL;
 8003d6a:	f844 ac08 	str.w	sl, [r4, #-8]
      if (res)
 8003d6e:	e7d1      	b.n	8003d14 <aiValidationProcess+0x5c>
  if (!ai_mnetwork_init(ctx->handle)) {
 8003d70:	f000 f94a 	bl	8004008 <ai_mnetwork_init>
 8003d74:	4682      	mov	sl, r0
 8003d76:	b980      	cbnz	r0, 8003d9a <aiValidationProcess+0xe2>
    err = ai_mnetwork_get_error(ctx->handle);
 8003d78:	f854 0c08 	ldr.w	r0, [r4, #-8]
        nn_name = NULL;
 8003d7c:	4656      	mov	r6, sl
    err = ai_mnetwork_get_error(ctx->handle);
 8003d7e:	f000 f936 	bl	8003fee <ai_mnetwork_get_error>
    aiLogErr(err, "ai_mnetwork_init");
 8003d82:	493c      	ldr	r1, [pc, #240]	; (8003e74 <aiValidationProcess+0x1bc>)
 8003d84:	f7fe ff68 	bl	8002c58 <aiLogErr>
    ai_mnetwork_destroy(ctx->handle);
 8003d88:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8003d8c:	f000 f90e 	bl	8003fac <ai_mnetwork_destroy>
    return -4;
 8003d90:	f06f 0503 	mvn.w	r5, #3
    ctx->handle = AI_HANDLE_NULL;
 8003d94:	f844 ac08 	str.w	sl, [r4, #-8]
      if (res)
 8003d98:	e7bc      	b.n	8003d14 <aiValidationProcess+0x5c>
  if (ai_mnetwork_get_report(ctx->handle,
 8003d9a:	4621      	mov	r1, r4
 8003d9c:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8003da0:	f000 f91a 	bl	8003fd8 <ai_mnetwork_get_report>
 8003da4:	4682      	mov	sl, r0
 8003da6:	b1b0      	cbz	r0, 8003dd6 <aiValidationProcess+0x11e>
    aiPrintNetworkInfo(&ctx->report);
 8003da8:	4620      	mov	r0, r4
 8003daa:	f7ff f86d 	bl	8002e88 <aiPrintNetworkInfo>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8003dae:	462b      	mov	r3, r5
  ctx->inputs_in_activations = false;
 8003db0:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
    if (!ctx->report.inputs[i].data)
 8003db4:	201c      	movs	r0, #28
  ctx->outputs_in_activations = false;
 8003db6:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
      ctx->inputs_in_activations = true;
 8003dba:	2501      	movs	r5, #1
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 8003dbc:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8003e9c <aiValidationProcess+0x1e4>
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8003dc0:	8f22      	ldrh	r2, [r4, #56]	; 0x38
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	db0a      	blt.n	8003ddc <aiValidationProcess+0x124>
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003dc6:	2300      	movs	r3, #0
    if (!ctx->report.outputs[i].data)
 8003dc8:	201c      	movs	r0, #28
      ctx->outputs_in_activations = true;
 8003dca:	2501      	movs	r5, #1
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003dcc:	8f62      	ldrh	r2, [r4, #58]	; 0x3a
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	db11      	blt.n	8003df6 <aiValidationProcess+0x13e>
      res = aiBootstrap(&net_exec_ctx[idx], nn_name);
 8003dd2:	2500      	movs	r5, #0
 8003dd4:	e79e      	b.n	8003d14 <aiValidationProcess+0x5c>
    err = ai_mnetwork_get_error(ctx->handle);
 8003dd6:	f854 0c08 	ldr.w	r0, [r4, #-8]
 8003dda:	e7ba      	b.n	8003d52 <aiValidationProcess+0x9a>
    if (!ctx->report.inputs[i].data)
 8003ddc:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8003dde:	fb00 2203 	mla	r2, r0, r3, r2
 8003de2:	6851      	ldr	r1, [r2, #4]
 8003de4:	b921      	cbnz	r1, 8003df0 <aiValidationProcess+0x138>
      ctx->report.inputs[i].data = AI_HANDLE_PTR(data_ins[i]);
 8003de6:	f85c 1023 	ldr.w	r1, [ip, r3, lsl #2]
 8003dea:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < ctx->report.n_inputs; i++) {
 8003dec:	3301      	adds	r3, #1
 8003dee:	e7e7      	b.n	8003dc0 <aiValidationProcess+0x108>
      ctx->inputs_in_activations = true;
 8003df0:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
 8003df4:	e7fa      	b.n	8003dec <aiValidationProcess+0x134>
    if (!ctx->report.outputs[i].data)
 8003df6:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003df8:	fb00 2203 	mla	r2, r0, r3, r2
 8003dfc:	6851      	ldr	r1, [r2, #4]
 8003dfe:	b921      	cbnz	r1, 8003e0a <aiValidationProcess+0x152>
      ctx->report.outputs[i].data = AI_HANDLE_PTR(data_outs[i]);
 8003e00:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8003e04:	6051      	str	r1, [r2, #4]
  for (int i = 0; i < ctx->report.n_outputs; i++) {
 8003e06:	3301      	adds	r3, #1
 8003e08:	e7e0      	b.n	8003dcc <aiValidationProcess+0x114>
      ctx->outputs_in_activations = true;
 8003e0a:	f884 5089 	strb.w	r5, [r4, #137]	; 0x89
 8003e0e:	e7fa      	b.n	8003e06 <aiValidationProcess+0x14e>
    LC_PRINT("\r\n");
 8003e10:	4819      	ldr	r0, [pc, #100]	; (8003e78 <aiValidationProcess+0x1c0>)
 8003e12:	f7ff f957 	bl	80030c4 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8003e16:	4819      	ldr	r0, [pc, #100]	; (8003e7c <aiValidationProcess+0x1c4>)
 8003e18:	f7ff f954 	bl	80030c4 <lc_print>
    LC_PRINT("| READY to receive a CMD from the HOST... |\r\n");
 8003e1c:	4818      	ldr	r0, [pc, #96]	; (8003e80 <aiValidationProcess+0x1c8>)
 8003e1e:	f7ff f951 	bl	80030c4 <lc_print>
    LC_PRINT("-------------------------------------------\r\n");
 8003e22:	4816      	ldr	r0, [pc, #88]	; (8003e7c <aiValidationProcess+0x1c4>)
 8003e24:	f7ff f94e 	bl	80030c4 <lc_print>
    LC_PRINT("\r\n");
 8003e28:	4813      	ldr	r0, [pc, #76]	; (8003e78 <aiValidationProcess+0x1c0>)
 8003e2a:	f7ff f94b 	bl	80030c4 <lc_print>
    LC_PRINT("# Note: At this point, default ASCII-base terminal should be closed\r\n");
 8003e2e:	4815      	ldr	r0, [pc, #84]	; (8003e84 <aiValidationProcess+0x1cc>)
 8003e30:	f7ff f948 	bl	80030c4 <lc_print>
    LC_PRINT("# and a serial COM interface should be used\r\n");
 8003e34:	4814      	ldr	r0, [pc, #80]	; (8003e88 <aiValidationProcess+0x1d0>)
 8003e36:	f7ff f945 	bl	80030c4 <lc_print>
    LC_PRINT("# (i.e. Python ai_runner module). Protocol version = %d.%d\r\n",
 8003e3a:	4814      	ldr	r0, [pc, #80]	; (8003e8c <aiValidationProcess+0x1d4>)
 8003e3c:	462a      	mov	r2, r5
 8003e3e:	2103      	movs	r1, #3
 8003e40:	f7ff f940 	bl	80030c4 <lc_print>
  aiPbMgrInit(pbCmdFuncTab);
 8003e44:	4812      	ldr	r0, [pc, #72]	; (8003e90 <aiValidationProcess+0x1d8>)
 8003e46:	f7fe fd4f 	bl	80028e8 <aiPbMgrInit>
    r = aiPbMgrWaitAndProcess();
 8003e4a:	f7fe fdf3 	bl	8002a34 <aiPbMgrWaitAndProcess>
  } while (r==0);
 8003e4e:	4605      	mov	r5, r0
 8003e50:	2800      	cmp	r0, #0
 8003e52:	d0fa      	beq.n	8003e4a <aiValidationProcess+0x192>
 8003e54:	e76c      	b.n	8003d30 <aiValidationProcess+0x78>
 8003e56:	bf00      	nop
 8003e58:	20000ab8 	.word	0x20000ab8
 8003e5c:	0800c8d9 	.word	0x0800c8d9
 8003e60:	0800c910 	.word	0x0800c910
 8003e64:	0800c92e 	.word	0x0800c92e
 8003e68:	0800c982 	.word	0x0800c982
 8003e6c:	0800c941 	.word	0x0800c941
 8003e70:	0800c95c 	.word	0x0800c95c
 8003e74:	0800c971 	.word	0x0800c971
 8003e78:	0800c998 	.word	0x0800c998
 8003e7c:	0800c99b 	.word	0x0800c99b
 8003e80:	0800c9c9 	.word	0x0800c9c9
 8003e84:	0800c9f7 	.word	0x0800c9f7
 8003e88:	0800ca3d 	.word	0x0800ca3d
 8003e8c:	0800ca6b 	.word	0x0800ca6b
 8003e90:	20000010 	.word	0x20000010
 8003e94:	0800c8f9 	.word	0x0800c8f9
 8003e98:	20000054 	.word	0x20000054
 8003e9c:	20000050 	.word	0x20000050

08003ea0 <port_hal_crc_ip_init_imp>:
  __HAL_RCC_CRC_CLK_ENABLE();
#elif defined(STM32MP1)
  __HAL_RCC_CRC2_CLK_ENABLE();
#else
  /* By default the CRC IP clock is enabled */
  __HAL_RCC_CRC_CLK_ENABLE();
 8003ea0:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <port_hal_crc_ip_init_imp+0x1c>)
{
 8003ea2:	b082      	sub	sp, #8
  __HAL_RCC_CRC_CLK_ENABLE();
 8003ea4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ea6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003eaa:	631a      	str	r2, [r3, #48]	; 0x30
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eb2:	9301      	str	r3, [sp, #4]
 8003eb4:	9b01      	ldr	r3, [sp, #4]
#endif
}
 8003eb6:	b002      	add	sp, #8
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	40023800 	.word	0x40023800

08003ec0 <port_dwt_init_imp>:

#if defined(HAS_DWT_CTRL) && HAS_DWT_CTRL == 1

void port_dwt_init_imp()
{
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8003ec0:	4a08      	ldr	r2, [pc, #32]	; (8003ee4 <port_dwt_init_imp+0x24>)
 8003ec2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	; 0xfc
 8003ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eca:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
#ifdef STM32F7
  DWT->LAR = 0xC5ACCE55;
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <port_dwt_init_imp+0x28>)
 8003ed0:	4a06      	ldr	r2, [pc, #24]	; (8003eec <port_dwt_init_imp+0x2c>)
 8003ed2:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
#endif
  DWT->CYCCNT = 0;
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	605a      	str	r2, [r3, #4]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	f042 0201 	orr.w	r2, r2, #1
 8003ee0:	601a      	str	r2, [r3, #0]
}
 8003ee2:	4770      	bx	lr
 8003ee4:	e000ed00 	.word	0xe000ed00
 8003ee8:	e0001000 	.word	0xe0001000
 8003eec:	c5acce55 	.word	0xc5acce55

08003ef0 <ai_mnetwork_handle>:

AI_DECLARE_STATIC
struct network_instance *ai_mnetwork_handle(struct network_instance *inst)
{
    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        if ((inst) && (&gnetworks[i] == inst))
 8003ef0:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <ai_mnetwork_handle+0x18>)
 8003ef2:	b120      	cbz	r0, 8003efe <ai_mnetwork_handle+0xe>
            return inst;
        else if ((!inst) && (gnetworks[i].entry == NULL))
            return &gnetworks[i];
    }
    return NULL;
 8003ef4:	4298      	cmp	r0, r3
 8003ef6:	bf0c      	ite	eq
 8003ef8:	4618      	moveq	r0, r3
 8003efa:	2000      	movne	r0, #0
 8003efc:	4770      	bx	lr
        else if ((!inst) && (gnetworks[i].entry == NULL))
 8003efe:	681a      	ldr	r2, [r3, #0]
            return inst;
 8003f00:	2a00      	cmp	r2, #0
 8003f02:	bf08      	it	eq
 8003f04:	4618      	moveq	r0, r3
}
 8003f06:	4770      	bx	lr
 8003f08:	20000b98 	.word	0x20000b98

08003f0c <ai_mnetwork_is_valid.constprop.0>:
ai_bool ai_mnetwork_is_valid(const char* name,
 8003f0c:	b510      	push	{r4, lr}
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003f0e:	4604      	mov	r4, r0
 8003f10:	b160      	cbz	r0, 8003f2c <ai_mnetwork_is_valid.constprop.0+0x20>
 8003f12:	f7fc f9e5 	bl	80002e0 <strlen>
 8003f16:	2805      	cmp	r0, #5
 8003f18:	4602      	mov	r2, r0
 8003f1a:	d107      	bne.n	8003f2c <ai_mnetwork_is_valid.constprop.0+0x20>
            (strncmp(entry->name, name, strlen(entry->name)) == 0))
 8003f1c:	4621      	mov	r1, r4
 8003f1e:	4804      	ldr	r0, [pc, #16]	; (8003f30 <ai_mnetwork_is_valid.constprop.0+0x24>)
 8003f20:	f006 fb2f 	bl	800a582 <strncmp>
    if (name && (strlen(entry->name) == strlen(name)) &&
 8003f24:	fab0 f080 	clz	r0, r0
 8003f28:	0940      	lsrs	r0, r0, #5
}
 8003f2a:	bd10      	pop	{r4, pc}
    return false;
 8003f2c:	2000      	movs	r0, #0
 8003f2e:	e7fc      	b.n	8003f2a <ai_mnetwork_is_valid.constprop.0+0x1e>
 8003f30:	0800cb68 	.word	0x0800cb68

08003f34 <MX_X_CUBE_AI_Init>:
    aiValidationInit();
 8003f34:	f7ff be78 	b.w	8003c28 <aiValidationInit>

08003f38 <MX_X_CUBE_AI_Process>:
    aiValidationProcess();
 8003f38:	f7ff bebe 	b.w	8003cb8 <aiValidationProcess>

08003f3c <ai_mnetwork_find>:
    }
}

AI_API_ENTRY
const char* ai_mnetwork_find(const char *name, ai_int idx)
{
 8003f3c:	b510      	push	{r4, lr}
 8003f3e:	460c      	mov	r4, r1
    const ai_network_entry_t *entry;

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry))
 8003f40:	f7ff ffe4 	bl	8003f0c <ai_mnetwork_is_valid.constprop.0>
 8003f44:	b920      	cbnz	r0, 8003f50 <ai_mnetwork_find+0x14>
        else {
            if (!idx--)
                return entry->name;
        }
    }
    return NULL;
 8003f46:	2c00      	cmp	r4, #0
 8003f48:	4802      	ldr	r0, [pc, #8]	; (8003f54 <ai_mnetwork_find+0x18>)
 8003f4a:	bf18      	it	ne
 8003f4c:	2000      	movne	r0, #0
}
 8003f4e:	bd10      	pop	{r4, pc}
            return entry->name;
 8003f50:	4800      	ldr	r0, [pc, #0]	; (8003f54 <ai_mnetwork_find+0x18>)
 8003f52:	e7fc      	b.n	8003f4e <ai_mnetwork_find+0x12>
 8003f54:	0800cb68 	.word	0x0800cb68

08003f58 <ai_mnetwork_create>:

AI_API_ENTRY
ai_error ai_mnetwork_create(const char *name, ai_handle* network,
        const ai_buffer* network_config)
{
 8003f58:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f5a:	4606      	mov	r6, r0
    const ai_network_entry_t *entry;
    const ai_network_entry_t *found = NULL;
    ai_error err;
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003f5c:	2000      	movs	r0, #0
{
 8003f5e:	9201      	str	r2, [sp, #4]
 8003f60:	460d      	mov	r5, r1
    struct network_instance *inst = ai_mnetwork_handle(NULL);
 8003f62:	f7ff ffc5 	bl	8003ef0 <ai_mnetwork_handle>

    if (!inst) {
 8003f66:	4604      	mov	r4, r0
 8003f68:	b1e0      	cbz	r0, 8003fa4 <ai_mnetwork_create+0x4c>
        return err;
    }

    for (int i=0; i<AI_MNETWORK_NUMBER; i++) {
        entry = &networks[i];
        if (ai_mnetwork_is_valid(name, entry)) {
 8003f6a:	4630      	mov	r0, r6
 8003f6c:	f7ff ffce 	bl	8003f0c <ai_mnetwork_is_valid.constprop.0>
 8003f70:	9901      	ldr	r1, [sp, #4]
 8003f72:	b910      	cbnz	r0, 8003f7a <ai_mnetwork_create+0x22>
 8003f74:	2214      	movs	r2, #20
 8003f76:	2310      	movs	r3, #16
 8003f78:	e00d      	b.n	8003f96 <ai_mnetwork_create+0x3e>
    }

    if (network_config == NULL)
        err = found->ai_create(network, found->config);
    else
        err = found->ai_create(network, network_config);
 8003f7a:	4628      	mov	r0, r5
 8003f7c:	f000 fbf2 	bl	8004764 <ai_myrnn_create>
 8003f80:	f3c0 2317 	ubfx	r3, r0, #8, #24
 8003f84:	b2c2      	uxtb	r2, r0
    if ((err.code == AI_ERROR_CODE_NONE) && (err.type == AI_ERROR_NONE)) {
 8003f86:	ea52 2103 	orrs.w	r1, r2, r3, lsl #8
 8003f8a:	d104      	bne.n	8003f96 <ai_mnetwork_create+0x3e>
        inst->entry = found;
 8003f8c:	4906      	ldr	r1, [pc, #24]	; (8003fa8 <ai_mnetwork_create+0x50>)
 8003f8e:	6021      	str	r1, [r4, #0]
        inst->handle = *network;
 8003f90:	6829      	ldr	r1, [r5, #0]
 8003f92:	6061      	str	r1, [r4, #4]
        *network = (ai_handle*)inst;
 8003f94:	602c      	str	r4, [r5, #0]
        return err;
 8003f96:	2000      	movs	r0, #0
 8003f98:	f362 0007 	bfi	r0, r2, #0, #8
 8003f9c:	f363 201f 	bfi	r0, r3, #8, #24
    }

    return err;
}
 8003fa0:	b002      	add	sp, #8
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
 8003fa4:	2231      	movs	r2, #49	; 0x31
 8003fa6:	e7e6      	b.n	8003f76 <ai_mnetwork_create+0x1e>
 8003fa8:	0800cb70 	.word	0x0800cb70

08003fac <ai_mnetwork_destroy>:

AI_API_ENTRY
ai_handle ai_mnetwork_destroy(ai_handle network)
{
 8003fac:	b538      	push	{r3, r4, r5, lr}
 8003fae:	4604      	mov	r4, r0
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003fb0:	f7ff ff9e 	bl	8003ef0 <ai_mnetwork_handle>
    if (inn) {
 8003fb4:	4605      	mov	r5, r0
 8003fb6:	b158      	cbz	r0, 8003fd0 <ai_mnetwork_destroy+0x24>
        ai_handle hdl = inn->entry->ai_destroy(inn->handle);
 8003fb8:	6803      	ldr	r3, [r0, #0]
 8003fba:	6840      	ldr	r0, [r0, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	4798      	blx	r3
        if (hdl != inn->handle) {
 8003fc0:	686b      	ldr	r3, [r5, #4]
 8003fc2:	4283      	cmp	r3, r0
 8003fc4:	d004      	beq.n	8003fd0 <ai_mnetwork_destroy+0x24>
        if ((inst) && (&gnetworks[i] == inst)) {
 8003fc6:	4b03      	ldr	r3, [pc, #12]	; (8003fd4 <ai_mnetwork_destroy+0x28>)
 8003fc8:	2400      	movs	r4, #0
 8003fca:	429d      	cmp	r5, r3
 8003fcc:	d100      	bne.n	8003fd0 <ai_mnetwork_destroy+0x24>
            gnetworks[i].entry = NULL;
 8003fce:	602c      	str	r4, [r5, #0]
            ai_mnetwork_release_handle(inn);
            network = AI_HANDLE_NULL;
        }
    }
    return network;
}
 8003fd0:	4620      	mov	r0, r4
 8003fd2:	bd38      	pop	{r3, r4, r5, pc}
 8003fd4:	20000b98 	.word	0x20000b98

08003fd8 <ai_mnetwork_get_report>:

AI_API_ENTRY
ai_bool ai_mnetwork_get_report(ai_handle network, ai_network_report* report)
{
 8003fd8:	b510      	push	{r4, lr}
    struct network_instance *inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003fda:	f7ff ff89 	bl	8003ef0 <ai_mnetwork_handle>
    if (inn)
 8003fde:	b128      	cbz	r0, 8003fec <ai_mnetwork_get_report+0x14>
        return inn->entry->ai_get_report(inn->handle, report);
 8003fe0:	6802      	ldr	r2, [r0, #0]
 8003fe2:	6840      	ldr	r0, [r0, #4]
 8003fe4:	68d2      	ldr	r2, [r2, #12]
    else
        return false;
}
 8003fe6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_report(inn->handle, report);
 8003fea:	4710      	bx	r2
}
 8003fec:	bd10      	pop	{r4, pc}

08003fee <ai_mnetwork_get_error>:

AI_API_ENTRY
ai_error ai_mnetwork_get_error(ai_handle network)
{
 8003fee:	b510      	push	{r4, lr}
    struct network_instance *inn;
    ai_error err;
    err.type = AI_ERROR_INVALID_PARAM;
    err.code = AI_ERROR_CODE_NETWORK;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 8003ff0:	f7ff ff7e 	bl	8003ef0 <ai_mnetwork_handle>
    if (inn)
 8003ff4:	b128      	cbz	r0, 8004002 <ai_mnetwork_get_error+0x14>
        return inn->entry->ai_get_error(inn->handle);
 8003ff6:	6803      	ldr	r3, [r0, #0]
 8003ff8:	6840      	ldr	r0, [r0, #4]
 8003ffa:	695b      	ldr	r3, [r3, #20]
    else
        return err;
}
 8003ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_get_error(inn->handle);
 8004000:	4718      	bx	r3
}
 8004002:	f241 0014 	movw	r0, #4116	; 0x1014
 8004006:	bd10      	pop	{r4, pc}

08004008 <ai_mnetwork_init>:

AI_API_ENTRY
ai_bool ai_mnetwork_init(ai_handle network)
{
 8004008:	b530      	push	{r4, r5, lr}
 800400a:	b08f      	sub	sp, #60	; 0x3c
    struct network_instance *inn;
    ai_network_params par;

    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800400c:	f7ff ff70 	bl	8003ef0 <ai_mnetwork_handle>
    if (inn) {
 8004010:	4604      	mov	r4, r0
 8004012:	b168      	cbz	r0, 8004030 <ai_mnetwork_init+0x28>
        inn->entry->ai_data_params_get(&par);
 8004014:	6803      	ldr	r3, [r0, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004016:	2500      	movs	r5, #0
        inn->entry->ai_data_params_get(&par);
 8004018:	4668      	mov	r0, sp
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4798      	blx	r3
        for (int idx=0; idx < par.map_activations.size; idx++)
 800401e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8004022:	6823      	ldr	r3, [r4, #0]
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004024:	42aa      	cmp	r2, r5
 8004026:	dc05      	bgt.n	8004034 <ai_mnetwork_init+0x2c>
        return inn->entry->ai_init(inn->handle, &par);
 8004028:	69db      	ldr	r3, [r3, #28]
 800402a:	4669      	mov	r1, sp
 800402c:	6860      	ldr	r0, [r4, #4]
 800402e:	4798      	blx	r3
    }
    else
        return false;
}
 8004030:	b00f      	add	sp, #60	; 0x3c
 8004032:	bd30      	pop	{r4, r5, pc}
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8004034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004036:	4629      	mov	r1, r5
 8004038:	a803      	add	r0, sp, #12
 800403a:	f853 2025 	ldr.w	r2, [r3, r5, lsl #2]
        for (int idx=0; idx < par.map_activations.size; idx++)
 800403e:	3501      	adds	r5, #1
          AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&par.map_activations, idx, inn->entry->activations[idx]);
 8004040:	f001 fe2a 	bl	8005c98 <ai_buffer_array_item_set_address>
        for (int idx=0; idx < par.map_activations.size; idx++)
 8004044:	e7eb      	b.n	800401e <ai_mnetwork_init+0x16>

08004046 <ai_mnetwork_run>:

AI_API_ENTRY
ai_i32 ai_mnetwork_run(ai_handle network, const ai_buffer* input,
        ai_buffer* output)
{
 8004046:	b513      	push	{r0, r1, r4, lr}
 8004048:	9201      	str	r2, [sp, #4]
    struct network_instance* inn;
    inn =  ai_mnetwork_handle((struct network_instance *)network);
 800404a:	f7ff ff51 	bl	8003ef0 <ai_mnetwork_handle>
    if (inn)
 800404e:	4603      	mov	r3, r0
 8004050:	b140      	cbz	r0, 8004064 <ai_mnetwork_run+0x1e>
        return inn->entry->ai_run(inn->handle, input, output);
 8004052:	6800      	ldr	r0, [r0, #0]
 8004054:	9a01      	ldr	r2, [sp, #4]
 8004056:	6a04      	ldr	r4, [r0, #32]
 8004058:	6858      	ldr	r0, [r3, #4]
 800405a:	4623      	mov	r3, r4
    else
        return 0;
}
 800405c:	b002      	add	sp, #8
 800405e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return inn->entry->ai_run(inn->handle, input, output);
 8004062:	4718      	bx	r3
}
 8004064:	b002      	add	sp, #8
 8004066:	bd10      	pop	{r4, pc}

08004068 <ai_mnetwork_get_private_handle>:

AI_API_ENTRY
 int ai_mnetwork_get_private_handle(ai_handle network,
         ai_handle *phandle,
         ai_network_params *pparams)
 {
 8004068:	b538      	push	{r3, r4, r5, lr}
 800406a:	4615      	mov	r5, r2
     struct network_instance* inn;
     inn =  ai_mnetwork_handle((struct network_instance *)network);
 800406c:	f7ff ff40 	bl	8003ef0 <ai_mnetwork_handle>
     if (inn && phandle && pparams) {
 8004070:	b188      	cbz	r0, 8004096 <ai_mnetwork_get_private_handle+0x2e>
 8004072:	b181      	cbz	r1, 8004096 <ai_mnetwork_get_private_handle+0x2e>
 8004074:	b17d      	cbz	r5, 8004096 <ai_mnetwork_get_private_handle+0x2e>
         *phandle = inn->handle;
 8004076:	6843      	ldr	r3, [r0, #4]
         *pparams = inn->params;
 8004078:	f100 0408 	add.w	r4, r0, #8
         *phandle = inn->handle;
 800407c:	600b      	str	r3, [r1, #0]
         *pparams = inn->params;
 800407e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004086:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004088:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800408a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800408e:	e885 0003 	stmia.w	r5, {r0, r1}
         return 0;
 8004092:	2000      	movs	r0, #0
     }
     else
         return -1;
 }
 8004094:	bd38      	pop	{r3, r4, r5, pc}
         return -1;
 8004096:	f04f 30ff 	mov.w	r0, #4294967295
 800409a:	e7fb      	b.n	8004094 <ai_mnetwork_get_private_handle+0x2c>

0800409c <_write_number>:

  return count;
}

static int _write_number(uint64_t number, struct specifier *specifier)
{
 800409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  char sign_neg = 0;
  char chr;

  buf[idx--] = 0;

  if (specifier->flags & FLAG_IS_SIGNED) {
 80040a0:	6896      	ldr	r6, [r2, #8]
{
 80040a2:	b091      	sub	sp, #68	; 0x44
  buf[idx--] = 0;
 80040a4:	2500      	movs	r5, #0
{
 80040a6:	4614      	mov	r4, r2
  if (specifier->flags & FLAG_IS_SIGNED) {
 80040a8:	f016 0304 	ands.w	r3, r6, #4
  buf[idx--] = 0;
 80040ac:	f88d 503f 	strb.w	r5, [sp, #63]	; 0x3f
  if (specifier->flags & FLAG_IS_SIGNED) {
 80040b0:	d02a      	beq.n	8004108 <_write_number+0x6c>
    if ((int64_t)number < 0) {
 80040b2:	42a9      	cmp	r1, r5
 80040b4:	da08      	bge.n	80040c8 <_write_number+0x2c>
      number = -number;
      sign_neg = '-';
      specifier->width -= 1;
 80040b6:	6813      	ldr	r3, [r2, #0]
      number = -number;
 80040b8:	4240      	negs	r0, r0
      sign_neg = '-';
 80040ba:	f04f 052d 	mov.w	r5, #45	; 0x2d
      specifier->width -= 1;
 80040be:	f103 33ff 	add.w	r3, r3, #4294967295
      number = -number;
 80040c2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
      specifier->width -= 1;
 80040c6:	6013      	str	r3, [r2, #0]
 80040c8:	f016 0f08 	tst.w	r6, #8
 80040cc:	f10d 093f 	add.w	r9, sp, #63	; 0x3f
  do {
    uint64_t t;
    if (specifier->flags & FLAG_HEX) {
      chr = number & 0x0F;
      t = number >> 4;
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80040d0:	f04f 073e 	mov.w	r7, #62	; 0x3e
    if (specifier->flags & FLAG_HEX) {
 80040d4:	f006 0a10 	and.w	sl, r6, #16
 80040d8:	bf14      	ite	ne
 80040da:	f04f 0841 	movne.w	r8, #65	; 0x41
 80040de:	f04f 0861 	moveq.w	r8, #97	; 0x61
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80040e2:	f1a8 080a 	sub.w	r8, r8, #10
      chr = number & 0x0F;
 80040e6:	fa5f fb80 	uxtb.w	fp, r0
    if (specifier->flags & FLAG_HEX) {
 80040ea:	f1ba 0f00 	cmp.w	sl, #0
 80040ee:	d033      	beq.n	8004158 <_write_number+0xbc>
      chr = number & 0x0F;
 80040f0:	f00b 030f 	and.w	r3, fp, #15
      t = number >> 4;
 80040f4:	0900      	lsrs	r0, r0, #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 80040f6:	2b09      	cmp	r3, #9
      t = number >> 4;
 80040f8:	ea40 7001 	orr.w	r0, r0, r1, lsl #28
 80040fc:	ea4f 1111 	mov.w	r1, r1, lsr #4
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004100:	d906      	bls.n	8004110 <_write_number+0x74>
 8004102:	4443      	add	r3, r8
    } else {
      t = number / 10;
      chr = (number - t * 10) + '0';
 8004104:	b2db      	uxtb	r3, r3
 8004106:	e004      	b.n	8004112 <_write_number+0x76>
  char sign_neg = 0;
 8004108:	461d      	mov	r5, r3
 800410a:	e7dd      	b.n	80040c8 <_write_number+0x2c>
    }
    number = t;
    buf[idx--] = chr;
 800410c:	4617      	mov	r7, r2
 800410e:	e7ea      	b.n	80040e6 <_write_number+0x4a>
      chr = (chr >= 10) ? (chr + (specifier->flags & FLAG_CAPS ? 'A' : 'a') - 10) : (chr + '0');
 8004110:	3330      	adds	r3, #48	; 0x30
    buf[idx--] = chr;
 8004112:	f809 3d01 	strb.w	r3, [r9, #-1]!
    count++;
  } while (number);
 8004116:	ea50 0301 	orrs.w	r3, r0, r1
    buf[idx--] = chr;
 800411a:	f107 32ff 	add.w	r2, r7, #4294967295
    count++;
 800411e:	f1c7 0b3f 	rsb	fp, r7, #63	; 0x3f
  } while (number);
 8004122:	d1f3      	bne.n	800410c <_write_number+0x70>

  if ((sign_neg) && (!(specifier->flags & FLAG_ZERO_EXTEND))) {
 8004124:	f006 0101 	and.w	r1, r6, #1
 8004128:	b155      	cbz	r5, 8004140 <_write_number+0xa4>
 800412a:	b949      	cbnz	r1, 8004140 <_write_number+0xa4>
    buf[idx--] = sign_neg;
 800412c:	f102 0340 	add.w	r3, r2, #64	; 0x40
    count++;
 8004130:	f1c7 0b40 	rsb	fp, r7, #64	; 0x40
    buf[idx--] = sign_neg;
 8004134:	eb0d 0203 	add.w	r2, sp, r3
 8004138:	232d      	movs	r3, #45	; 0x2d
 800413a:	f802 3c40 	strb.w	r3, [r2, #-64]
 800413e:	1eba      	subs	r2, r7, #2
 8004140:	2900      	cmp	r1, #0
  }

  while ((count < specifier->width) && (!(specifier->flags & FLAG_NEG_PAD))) {
 8004142:	6823      	ldr	r3, [r4, #0]
 8004144:	f006 0602 	and.w	r6, r6, #2
 8004148:	bf14      	ite	ne
 800414a:	2130      	movne	r1, #48	; 0x30
 800414c:	2120      	moveq	r1, #32
 800414e:	455b      	cmp	r3, fp
 8004150:	dd13      	ble.n	800417a <_write_number+0xde>
 8004152:	b166      	cbz	r6, 800416e <_write_number+0xd2>
    else
      buf[idx--] = ' ';
    count++;
  }

  if ((sign_neg) && (count < (specifier->width + 1))) {
 8004154:	b9a5      	cbnz	r5, 8004180 <_write_number+0xe4>
 8004156:	e01c      	b.n	8004192 <_write_number+0xf6>
      t = number / 10;
 8004158:	220a      	movs	r2, #10
 800415a:	2300      	movs	r3, #0
 800415c:	f7fc f9d6 	bl	800050c <__aeabi_uldivmod>
      chr = (number - t * 10) + '0';
 8004160:	f10b 0330 	add.w	r3, fp, #48	; 0x30
 8004164:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 8004168:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800416c:	e7ca      	b.n	8004104 <_write_number+0x68>
    if (specifier->flags & FLAG_ZERO_EXTEND)
 800416e:	f80d 1002 	strb.w	r1, [sp, r2]
    count++;
 8004172:	f10b 0b01 	add.w	fp, fp, #1
 8004176:	3a01      	subs	r2, #1
 8004178:	e7e9      	b.n	800414e <_write_number+0xb2>
  if ((sign_neg) && (count < (specifier->width + 1))) {
 800417a:	b155      	cbz	r5, 8004192 <_write_number+0xf6>
 800417c:	455b      	cmp	r3, fp
 800417e:	d108      	bne.n	8004192 <_write_number+0xf6>
    buf[idx--] = sign_neg;
 8004180:	f102 0340 	add.w	r3, r2, #64	; 0x40
 8004184:	212d      	movs	r1, #45	; 0x2d
    count++;
 8004186:	f10b 0b01 	add.w	fp, fp, #1
    buf[idx--] = sign_neg;
 800418a:	3a01      	subs	r2, #1
 800418c:	446b      	add	r3, sp
 800418e:	f803 1c40 	strb.w	r1, [r3, #-64]
  }

  idx++;


  for(int i = 0; i < count; i++) {
 8004192:	eb0d 0602 	add.w	r6, sp, r2
 8004196:	2500      	movs	r5, #0
 8004198:	3501      	adds	r5, #1
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 800419a:	68e3      	ldr	r3, [r4, #12]
 800419c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80041a0:	6920      	ldr	r0, [r4, #16]
 80041a2:	4798      	blx	r3
  for(int i = 0; i < count; i++) {
 80041a4:	45ab      	cmp	fp, r5
 80041a6:	d1f7      	bne.n	8004198 <_write_number+0xfc>
  }

  if (specifier->flags & FLAG_NEG_PAD) {
 80041a8:	68a3      	ldr	r3, [r4, #8]
 80041aa:	079b      	lsls	r3, r3, #30
 80041ac:	d408      	bmi.n	80041c0 <_write_number+0x124>
      _WRITE_C(' ');
    }
  }

  return count;
}
 80041ae:	4628      	mov	r0, r5
 80041b0:	b011      	add	sp, #68	; 0x44
 80041b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      _WRITE_C(' ');
 80041b6:	3501      	adds	r5, #1
 80041b8:	68e3      	ldr	r3, [r4, #12]
 80041ba:	2120      	movs	r1, #32
 80041bc:	6920      	ldr	r0, [r4, #16]
 80041be:	4798      	blx	r3
    while (count < specifier->width) {
 80041c0:	6823      	ldr	r3, [r4, #0]
 80041c2:	42ab      	cmp	r3, r5
 80041c4:	dcf7      	bgt.n	80041b6 <_write_number+0x11a>
 80041c6:	e7f2      	b.n	80041ae <_write_number+0x112>

080041c8 <vlc_print>:
{
  return *(*fmtP)++;
}

int vlc_print(void (*putc_fct)(void*, const char), void *user, const char* fmt, va_list vl)
{
 80041c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041cc:	461c      	mov	r4, r3
 80041ce:	4606      	mov	r6, r0
  char c, t;
  int count = 0;
 80041d0:	2300      	movs	r3, #0
{
 80041d2:	460f      	mov	r7, r1
 80041d4:	ed2d 8b02 	vpush	{d8}
 80041d8:	b09b      	sub	sp, #108	; 0x6c
  int count = 0;
 80041da:	9301      	str	r3, [sp, #4]
  return *(*fmtP)++;
 80041dc:	4613      	mov	r3, r2
 80041de:	f813 1b01 	ldrb.w	r1, [r3], #1
 80041e2:	9302      	str	r3, [sp, #8]
  bool error = false;

  while (((c = _getChar(&fmt)) != 0) && (!error))
 80041e4:	b929      	cbnz	r1, 80041f2 <vlc_print+0x2a>
      putc_fct(user, c);
      count++;
    }
  }
  return count;
}
 80041e6:	9801      	ldr	r0, [sp, #4]
 80041e8:	b01b      	add	sp, #108	; 0x6c
 80041ea:	ecbd 8b02 	vpop	{d8}
 80041ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (c == '\n')
 80041f2:	290a      	cmp	r1, #10
 80041f4:	d104      	bne.n	8004200 <vlc_print+0x38>
      putc_fct(user, c);
 80041f6:	4638      	mov	r0, r7
 80041f8:	47b0      	blx	r6
      count++;
 80041fa:	9b01      	ldr	r3, [sp, #4]
 80041fc:	3301      	adds	r3, #1
 80041fe:	e119      	b.n	8004434 <vlc_print+0x26c>
    else if (c == '%')
 8004200:	2925      	cmp	r1, #37	; 0x25
 8004202:	d1f8      	bne.n	80041f6 <vlc_print+0x2e>
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004204:	2300      	movs	r3, #0
 8004206:	9709      	str	r7, [sp, #36]	; 0x24
 8004208:	469c      	mov	ip, r3
 800420a:	469e      	mov	lr, r3
 800420c:	461a      	mov	r2, r3
 800420e:	4698      	mov	r8, r3
 8004210:	4618      	mov	r0, r3
      bool long_type = false;
 8004212:	469b      	mov	fp, r3
      bool has_precision = false;
 8004214:	4699      	mov	r9, r3
      struct specifier specifier = { 0, 0, 0, putc_fct, user };
 8004216:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800421a:	e9cd 3607 	strd	r3, r6, [sp, #28]
  return *(*fmtP)++;
 800421e:	9d02      	ldr	r5, [sp, #8]
 8004220:	f815 1b01 	ldrb.w	r1, [r5], #1
 8004224:	9502      	str	r5, [sp, #8]
        if (!c)
 8004226:	b329      	cbz	r1, 8004274 <vlc_print+0xac>
        else if (c == '0')
 8004228:	2939      	cmp	r1, #57	; 0x39
 800422a:	d814      	bhi.n	8004256 <vlc_print+0x8e>
 800422c:	292c      	cmp	r1, #44	; 0x2c
 800422e:	d91e      	bls.n	800426e <vlc_print+0xa6>
 8004230:	f1a1 052d 	sub.w	r5, r1, #45	; 0x2d
 8004234:	2d0c      	cmp	r5, #12
 8004236:	d811      	bhi.n	800425c <vlc_print+0x94>
 8004238:	e8df f015 	tbh	[pc, r5, lsl #1]
 800423c:	02270048 	.word	0x02270048
 8004240:	00340010 	.word	0x00340010
 8004244:	004b004b 	.word	0x004b004b
 8004248:	004b004b 	.word	0x004b004b
 800424c:	004b004b 	.word	0x004b004b
 8004250:	004b004b 	.word	0x004b004b
 8004254:	004b      	.short	0x004b
 8004256:	296c      	cmp	r1, #108	; 0x6c
 8004258:	f000 822e 	beq.w	80046b8 <vlc_print+0x4f0>
          switch(c)
 800425c:	2978      	cmp	r1, #120	; 0x78
 800425e:	d809      	bhi.n	8004274 <vlc_print+0xac>
 8004260:	2962      	cmp	r1, #98	; 0x62
 8004262:	d841      	bhi.n	80042e8 <vlc_print+0x120>
 8004264:	2946      	cmp	r1, #70	; 0x46
 8004266:	f000 813b 	beq.w	80044e0 <vlc_print+0x318>
 800426a:	2958      	cmp	r1, #88	; 0x58
 800426c:	d070      	beq.n	8004350 <vlc_print+0x188>
 800426e:	2925      	cmp	r1, #37	; 0x25
 8004270:	f000 8096 	beq.w	80043a0 <vlc_print+0x1d8>
 8004274:	b10b      	cbz	r3, 800427a <vlc_print+0xb2>
 8004276:	f8cd c01c 	str.w	ip, [sp, #28]
 800427a:	f1be 0f00 	cmp.w	lr, #0
 800427e:	d000      	beq.n	8004282 <vlc_print+0xba>
 8004280:	9206      	str	r2, [sp, #24]
 8004282:	f1b8 0f00 	cmp.w	r8, #0
 8004286:	d000      	beq.n	800428a <vlc_print+0xc2>
 8004288:	9005      	str	r0, [sp, #20]
        putc_fct(user, '<');
 800428a:	213c      	movs	r1, #60	; 0x3c
 800428c:	4638      	mov	r0, r7
 800428e:	47b0      	blx	r6
        putc_fct(user, '!');
 8004290:	2121      	movs	r1, #33	; 0x21
 8004292:	4638      	mov	r0, r7
        va_arg(vl, signed long);
 8004294:	3404      	adds	r4, #4
        putc_fct(user, '!');
 8004296:	47b0      	blx	r6
        putc_fct(user, '>');
 8004298:	213e      	movs	r1, #62	; 0x3e
 800429a:	4638      	mov	r0, r7
 800429c:	47b0      	blx	r6
        count += 3;
 800429e:	9b01      	ldr	r3, [sp, #4]
 80042a0:	3303      	adds	r3, #3
 80042a2:	e0c7      	b.n	8004434 <vlc_print+0x26c>
          if (!specifier.width && !specifier.precision) {
 80042a4:	ea50 0102 	orrs.w	r1, r0, r2
 80042a8:	d105      	bne.n	80042b6 <vlc_print+0xee>
            specifier.flags |= FLAG_ZERO_EXTEND;
 80042aa:	f04c 0c01 	orr.w	ip, ip, #1
 80042ae:	460a      	mov	r2, r1
 80042b0:	4608      	mov	r0, r1
 80042b2:	2301      	movs	r3, #1
 80042b4:	e7b3      	b.n	800421e <vlc_print+0x56>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80042b6:	210a      	movs	r1, #10
          } else if (has_precision) {
 80042b8:	f1b9 0f00 	cmp.w	r9, #0
 80042bc:	d002      	beq.n	80042c4 <vlc_print+0xfc>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80042be:	434a      	muls	r2, r1
 80042c0:	46ce      	mov	lr, r9
 80042c2:	e7ac      	b.n	800421e <vlc_print+0x56>
            specifier.width = specifier.width * 10 + (c - '0');
 80042c4:	4348      	muls	r0, r1
            specifier.width = specifier.width * 10 + (c - '0');
 80042c6:	f04f 0801 	mov.w	r8, #1
 80042ca:	e7a8      	b.n	800421e <vlc_print+0x56>
          specifier.flags |= FLAG_NEG_PAD;
 80042cc:	f04c 0c02 	orr.w	ip, ip, #2
 80042d0:	e7ef      	b.n	80042b2 <vlc_print+0xea>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80042d2:	3930      	subs	r1, #48	; 0x30
 80042d4:	250a      	movs	r5, #10
          if (has_precision) {
 80042d6:	f1b9 0f00 	cmp.w	r9, #0
 80042da:	d002      	beq.n	80042e2 <vlc_print+0x11a>
            specifier.precision = specifier.precision * 10 + (c - '0');
 80042dc:	fb05 1202 	mla	r2, r5, r2, r1
 80042e0:	e7ee      	b.n	80042c0 <vlc_print+0xf8>
            specifier.width = specifier.width * 10 + (c - '0');
 80042e2:	fb05 1000 	mla	r0, r5, r0, r1
 80042e6:	e7ee      	b.n	80042c6 <vlc_print+0xfe>
          switch(c)
 80042e8:	3963      	subs	r1, #99	; 0x63
 80042ea:	2915      	cmp	r1, #21
 80042ec:	d8c2      	bhi.n	8004274 <vlc_print+0xac>
 80042ee:	f20f 0908 	addw	r9, pc, #8
 80042f2:	f859 f021 	ldr.w	pc, [r9, r1, lsl #2]
 80042f6:	bf00      	nop
 80042f8:	080043bb 	.word	0x080043bb
 80042fc:	08004499 	.word	0x08004499
 8004300:	08004275 	.word	0x08004275
 8004304:	080044e1 	.word	0x080044e1
 8004308:	08004275 	.word	0x08004275
 800430c:	08004275 	.word	0x08004275
 8004310:	08004499 	.word	0x08004499
 8004314:	08004275 	.word	0x08004275
 8004318:	08004275 	.word	0x08004275
 800431c:	08004275 	.word	0x08004275
 8004320:	08004275 	.word	0x08004275
 8004324:	08004275 	.word	0x08004275
 8004328:	08004275 	.word	0x08004275
 800432c:	0800447d 	.word	0x0800447d
 8004330:	08004275 	.word	0x08004275
 8004334:	08004275 	.word	0x08004275
 8004338:	080043d7 	.word	0x080043d7
 800433c:	08004275 	.word	0x08004275
 8004340:	08004691 	.word	0x08004691
 8004344:	08004275 	.word	0x08004275
 8004348:	08004275 	.word	0x08004275
 800434c:	08004371 	.word	0x08004371
 8004350:	b10b      	cbz	r3, 8004356 <vlc_print+0x18e>
 8004352:	f8cd c01c 	str.w	ip, [sp, #28]
 8004356:	f1be 0f00 	cmp.w	lr, #0
 800435a:	d000      	beq.n	800435e <vlc_print+0x196>
 800435c:	9206      	str	r2, [sp, #24]
 800435e:	f1b8 0f00 	cmp.w	r8, #0
 8004362:	d000      	beq.n	8004366 <vlc_print+0x19e>
 8004364:	9005      	str	r0, [sp, #20]
            specifier.flags |= FLAG_CAPS;
 8004366:	9b07      	ldr	r3, [sp, #28]
 8004368:	f043 0308 	orr.w	r3, r3, #8
 800436c:	9307      	str	r3, [sp, #28]
 800436e:	e00a      	b.n	8004386 <vlc_print+0x1be>
 8004370:	b10b      	cbz	r3, 8004376 <vlc_print+0x1ae>
 8004372:	f8cd c01c 	str.w	ip, [sp, #28]
 8004376:	f1be 0f00 	cmp.w	lr, #0
 800437a:	d000      	beq.n	800437e <vlc_print+0x1b6>
 800437c:	9206      	str	r2, [sp, #24]
 800437e:	f1b8 0f00 	cmp.w	r8, #0
 8004382:	d000      	beq.n	8004386 <vlc_print+0x1be>
 8004384:	9005      	str	r0, [sp, #20]
            specifier.flags |= FLAG_HEX;
 8004386:	9b07      	ldr	r3, [sp, #28]
            count += _write_number(val, &specifier);
 8004388:	aa05      	add	r2, sp, #20
 800438a:	f854 0b04 	ldr.w	r0, [r4], #4
 800438e:	2100      	movs	r1, #0
            specifier.flags |= FLAG_HEX;
 8004390:	f043 0310 	orr.w	r3, r3, #16
 8004394:	9307      	str	r3, [sp, #28]
            count += _write_number(val, &specifier);
 8004396:	f7ff fe81 	bl	800409c <_write_number>
 800439a:	9b01      	ldr	r3, [sp, #4]
 800439c:	4403      	add	r3, r0
 800439e:	e049      	b.n	8004434 <vlc_print+0x26c>
 80043a0:	b10b      	cbz	r3, 80043a6 <vlc_print+0x1de>
 80043a2:	f8cd c01c 	str.w	ip, [sp, #28]
 80043a6:	f1be 0f00 	cmp.w	lr, #0
 80043aa:	d000      	beq.n	80043ae <vlc_print+0x1e6>
 80043ac:	9206      	str	r2, [sp, #24]
 80043ae:	f1b8 0f00 	cmp.w	r8, #0
 80043b2:	d000      	beq.n	80043b6 <vlc_print+0x1ee>
 80043b4:	9005      	str	r0, [sp, #20]
            putc_fct(user, c);
 80043b6:	2125      	movs	r1, #37	; 0x25
 80043b8:	e71d      	b.n	80041f6 <vlc_print+0x2e>
 80043ba:	b10b      	cbz	r3, 80043c0 <vlc_print+0x1f8>
 80043bc:	f8cd c01c 	str.w	ip, [sp, #28]
 80043c0:	f1be 0f00 	cmp.w	lr, #0
 80043c4:	d000      	beq.n	80043c8 <vlc_print+0x200>
 80043c6:	9206      	str	r2, [sp, #24]
 80043c8:	f1b8 0f00 	cmp.w	r8, #0
 80043cc:	d000      	beq.n	80043d0 <vlc_print+0x208>
 80043ce:	9005      	str	r0, [sp, #20]
            putc_fct(user, t);
 80043d0:	f814 1b04 	ldrb.w	r1, [r4], #4
 80043d4:	e70f      	b.n	80041f6 <vlc_print+0x2e>
 80043d6:	b10b      	cbz	r3, 80043dc <vlc_print+0x214>
 80043d8:	f8cd c01c 	str.w	ip, [sp, #28]
 80043dc:	f1be 0f00 	cmp.w	lr, #0
 80043e0:	d000      	beq.n	80043e4 <vlc_print+0x21c>
 80043e2:	9206      	str	r2, [sp, #24]
 80043e4:	f1b8 0f00 	cmp.w	r8, #0
 80043e8:	d000      	beq.n	80043ec <vlc_print+0x224>
 80043ea:	9005      	str	r0, [sp, #20]
            if (!str) str = "(null)";
 80043ec:	4bb4      	ldr	r3, [pc, #720]	; (80046c0 <vlc_print+0x4f8>)
            str = va_arg(vl, char*);
 80043ee:	f854 bb04 	ldr.w	fp, [r4], #4
            if (!str) str = "(null)";
 80043f2:	f1bb 0f00 	cmp.w	fp, #0
 80043f6:	bf08      	it	eq
 80043f8:	469b      	moveq	fp, r3
  int len = strlen(str);
 80043fa:	4658      	mov	r0, fp
 80043fc:	f7fb ff70 	bl	80002e0 <strlen>
  if (specifier->precision) {
 8004400:	9b06      	ldr	r3, [sp, #24]
  int len = strlen(str);
 8004402:	4681      	mov	r9, r0
  if (specifier->precision) {
 8004404:	b113      	cbz	r3, 800440c <vlc_print+0x244>
    len = (len > specifier->precision)?specifier->precision:len;
 8004406:	4298      	cmp	r0, r3
 8004408:	bfa8      	it	ge
 800440a:	4699      	movge	r9, r3
  if (!(specifier->flags & FLAG_NEG_PAD)) {
 800440c:	9b07      	ldr	r3, [sp, #28]
 800440e:	f013 0a02 	ands.w	sl, r3, #2
 8004412:	d01c      	beq.n	800444e <vlc_print+0x286>
  int count = 0;
 8004414:	f04f 0800 	mov.w	r8, #0
 8004418:	465b      	mov	r3, fp
  for (int i = 0; i < len; i++) {
 800441a:	eba3 020b 	sub.w	r2, r3, fp
 800441e:	4591      	cmp	r9, r2
 8004420:	dc17      	bgt.n	8004452 <vlc_print+0x28a>
 8004422:	f1b9 0f00 	cmp.w	r9, #0
 8004426:	bfa8      	it	ge
 8004428:	44c8      	addge	r8, r9
  if (specifier->flags & FLAG_NEG_PAD) {
 800442a:	f1ba 0f00 	cmp.w	sl, #0
 800442e:	d122      	bne.n	8004476 <vlc_print+0x2ae>
            count += _write_string(str, &specifier);
 8004430:	9b01      	ldr	r3, [sp, #4]
 8004432:	4443      	add	r3, r8
      count++;
 8004434:	9301      	str	r3, [sp, #4]
 8004436:	e049      	b.n	80044cc <vlc_print+0x304>
      _WRITE_C(' ');
 8004438:	f108 0801 	add.w	r8, r8, #1
 800443c:	2120      	movs	r1, #32
 800443e:	4638      	mov	r0, r7
 8004440:	47b0      	blx	r6
    for(int i = len; i < specifier->width; i++) {
 8004442:	eb08 0309 	add.w	r3, r8, r9
 8004446:	9a05      	ldr	r2, [sp, #20]
 8004448:	429a      	cmp	r2, r3
 800444a:	dcf5      	bgt.n	8004438 <vlc_print+0x270>
 800444c:	e7e4      	b.n	8004418 <vlc_print+0x250>
  int count = 0;
 800444e:	46d0      	mov	r8, sl
 8004450:	e7f7      	b.n	8004442 <vlc_print+0x27a>
    _WRITE_C(*str++);
 8004452:	f813 1b01 	ldrb.w	r1, [r3], #1
 8004456:	4638      	mov	r0, r7
 8004458:	9303      	str	r3, [sp, #12]
 800445a:	47b0      	blx	r6
 800445c:	9b03      	ldr	r3, [sp, #12]
  for (int i = 0; i < len; i++) {
 800445e:	e7dc      	b.n	800441a <vlc_print+0x252>
      _WRITE_C(' ');
 8004460:	f108 0801 	add.w	r8, r8, #1
 8004464:	2120      	movs	r1, #32
 8004466:	4638      	mov	r0, r7
 8004468:	47b0      	blx	r6
    for(int i = len; i < specifier->width; i++) {
 800446a:	eb09 0308 	add.w	r3, r9, r8
 800446e:	9a05      	ldr	r2, [sp, #20]
 8004470:	429a      	cmp	r2, r3
 8004472:	dcf5      	bgt.n	8004460 <vlc_print+0x298>
 8004474:	e7dc      	b.n	8004430 <vlc_print+0x268>
 8004476:	eba9 0908 	sub.w	r9, r9, r8
 800447a:	e7f6      	b.n	800446a <vlc_print+0x2a2>
 800447c:	b10b      	cbz	r3, 8004482 <vlc_print+0x2ba>
 800447e:	f8cd c01c 	str.w	ip, [sp, #28]
 8004482:	f1be 0f00 	cmp.w	lr, #0
 8004486:	d000      	beq.n	800448a <vlc_print+0x2c2>
 8004488:	9206      	str	r2, [sp, #24]
            specifier.flags |= FLAG_ZERO_EXTEND;
 800448a:	9b07      	ldr	r3, [sp, #28]
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	9307      	str	r3, [sp, #28]
            specifier.width = 8;
 8004492:	2308      	movs	r3, #8
 8004494:	9305      	str	r3, [sp, #20]
 8004496:	e766      	b.n	8004366 <vlc_print+0x19e>
 8004498:	b10b      	cbz	r3, 800449e <vlc_print+0x2d6>
 800449a:	f8cd c01c 	str.w	ip, [sp, #28]
 800449e:	f1be 0f00 	cmp.w	lr, #0
 80044a2:	d000      	beq.n	80044a6 <vlc_print+0x2de>
 80044a4:	9206      	str	r2, [sp, #24]
 80044a6:	f1b8 0f00 	cmp.w	r8, #0
 80044aa:	d000      	beq.n	80044ae <vlc_print+0x2e6>
 80044ac:	9005      	str	r0, [sp, #20]
            specifier.flags |= FLAG_IS_SIGNED;
 80044ae:	9b07      	ldr	r3, [sp, #28]
            val = va_arg(vl, unsigned int);
 80044b0:	f104 0804 	add.w	r8, r4, #4
            specifier.flags |= FLAG_IS_SIGNED;
 80044b4:	f043 0304 	orr.w	r3, r3, #4
 80044b8:	9307      	str	r3, [sp, #28]
                val = va_arg(vl, signed int);
 80044ba:	6820      	ldr	r0, [r4, #0]
 80044bc:	17c1      	asrs	r1, r0, #31
            count += _write_number(val, &specifier);
 80044be:	aa05      	add	r2, sp, #20
            break;
 80044c0:	4644      	mov	r4, r8
            count += _write_number(val, &specifier);
 80044c2:	f7ff fdeb 	bl	800409c <_write_number>
 80044c6:	9b01      	ldr	r3, [sp, #4]
 80044c8:	4403      	add	r3, r0
 80044ca:	9301      	str	r3, [sp, #4]
            break;
 80044cc:	9a02      	ldr	r2, [sp, #8]
 80044ce:	e685      	b.n	80041dc <vlc_print+0x14>
                val = va_arg(vl, uint64_t);
 80044d0:	3407      	adds	r4, #7
 80044d2:	f024 0407 	bic.w	r4, r4, #7
 80044d6:	46a0      	mov	r8, r4
 80044d8:	6861      	ldr	r1, [r4, #4]
 80044da:	f858 0b08 	ldr.w	r0, [r8], #8
 80044de:	e7ee      	b.n	80044be <vlc_print+0x2f6>
 80044e0:	b10b      	cbz	r3, 80044e6 <vlc_print+0x31e>
 80044e2:	f8cd c01c 	str.w	ip, [sp, #28]
 80044e6:	f1be 0f00 	cmp.w	lr, #0
 80044ea:	d000      	beq.n	80044ee <vlc_print+0x326>
 80044ec:	9206      	str	r2, [sp, #24]
 80044ee:	f1b8 0f00 	cmp.w	r8, #0
 80044f2:	d000      	beq.n	80044f6 <vlc_print+0x32e>
 80044f4:	9005      	str	r0, [sp, #20]
            dbl = va_arg(vl, double);
 80044f6:	3407      	adds	r4, #7
            if (specifier.precision == 0)
 80044f8:	9b06      	ldr	r3, [sp, #24]
            dbl = va_arg(vl, double);
 80044fa:	f024 0407 	bic.w	r4, r4, #7
 80044fe:	ecb4 8b02 	vldmia	r4!, {d8}
            if (specifier.precision == 0)
 8004502:	b90b      	cbnz	r3, 8004508 <vlc_print+0x340>
              specifier.precision = 6;
 8004504:	2306      	movs	r3, #6
 8004506:	9306      	str	r3, [sp, #24]
  double mul = 1.0;
 8004508:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
  for (int i=0;i <specifier->precision; i++)
 800450c:	f8dd 8018 	ldr.w	r8, [sp, #24]
    mul *= 10;
 8004510:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
  for (int i=0;i <specifier->precision; i++)
 8004514:	2300      	movs	r3, #0
 8004516:	4543      	cmp	r3, r8
 8004518:	f2c0 80ab 	blt.w	8004672 <vlc_print+0x4aa>
  if (is_signed)
 800451c:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 8004520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004524:	f140 80a9 	bpl.w	800467a <vlc_print+0x4b2>
    number = -number;
 8004528:	eeb1 5b48 	vneg.f64	d5, d8
  number += (half_ / mul);
 800452c:	eeb6 4b00 	vmov.f64	d4, #96	; 0x3f000000  0.5
  uint32_t count = 0;
 8004530:	f04f 0900 	mov.w	r9, #0
  uint32_t idx = sizeof(buf) - 1;
 8004534:	f04f 0a3f 	mov.w	sl, #63	; 0x3f
  number += (half_ / mul);
 8004538:	ee84 6b07 	vdiv.f64	d6, d4, d7
 800453c:	ee36 6b05 	vadd.f64	d6, d6, d5
  val = (uint64_t)(number * mul);
 8004540:	ee26 7b07 	vmul.f64	d7, d6, d7
 8004544:	ec51 0b17 	vmov	r0, r1, d7
 8004548:	f7fb fffa 	bl	8000540 <__aeabi_d2ulz>
 800454c:	4602      	mov	r2, r0
    uint64_t t = val / 10;
 800454e:	4693      	mov	fp, r2
 8004550:	2300      	movs	r3, #0
 8004552:	220a      	movs	r2, #10
 8004554:	460d      	mov	r5, r1
 8004556:	4658      	mov	r0, fp
 8004558:	f7fb ffd8 	bl	800050c <__aeabi_uldivmod>
    chr = (val - t * 10) + '0';
 800455c:	f10b 0e30 	add.w	lr, fp, #48	; 0x30
 8004560:	eb00 0380 	add.w	r3, r0, r0, lsl #2
    uint64_t t = val / 10;
 8004564:	4602      	mov	r2, r0
    buf[idx--] = chr;
 8004566:	f10a 3cff 	add.w	ip, sl, #4294967295
    chr = (val - t * 10) + '0';
 800456a:	ebae 0043 	sub.w	r0, lr, r3, lsl #1
    buf[idx--] = chr;
 800456e:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 8004572:	446b      	add	r3, sp
 8004574:	f803 0c40 	strb.w	r0, [r3, #-64]
    count++;
 8004578:	f109 0301 	add.w	r3, r9, #1
    if (count == specifier->precision) {
 800457c:	4598      	cmp	r8, r3
      buf[idx--] = '.';
 800457e:	bf09      	itett	eq
 8004580:	f10c 0368 	addeq.w	r3, ip, #104	; 0x68
    count++;
 8004584:	4699      	movne	r9, r3
      buf[idx--] = '.';
 8004586:	f1aa 0a02 	subeq.w	sl, sl, #2
      count++;
 800458a:	f109 0902 	addeq.w	r9, r9, #2
      buf[idx--] = '.';
 800458e:	bf05      	ittet	eq
 8004590:	eb0d 0c03 	addeq.w	ip, sp, r3
 8004594:	232e      	moveq	r3, #46	; 0x2e
    buf[idx--] = chr;
 8004596:	46e2      	movne	sl, ip
      buf[idx--] = '.';
 8004598:	f80c 3c40 	strbeq.w	r3, [ip, #-64]
  } while (val);
 800459c:	f1bb 0f0a 	cmp.w	fp, #10
 80045a0:	462b      	mov	r3, r5
 80045a2:	f173 0300 	sbcs.w	r3, r3, #0
 80045a6:	d2d2      	bcs.n	800454e <vlc_print+0x386>
    buf[idx--] = '0';
 80045a8:	45c1      	cmp	r9, r8
 80045aa:	f1c8 0001 	rsb	r0, r8, #1
 80045ae:	eba8 0b09 	sub.w	fp, r8, r9
 80045b2:	ab0a      	add	r3, sp, #40	; 0x28
 80045b4:	4448      	add	r0, r9
 80045b6:	bf84      	itt	hi
 80045b8:	2001      	movhi	r0, #1
 80045ba:	f04f 0b00 	movhi.w	fp, #0
 80045be:	2130      	movs	r1, #48	; 0x30
 80045c0:	4450      	add	r0, sl
 80045c2:	465a      	mov	r2, fp
 80045c4:	4418      	add	r0, r3
 80045c6:	f005 ffd4 	bl	800a572 <memset>
 80045ca:	eba9 0308 	sub.w	r3, r9, r8
 80045ce:	45c1      	cmp	r9, r8
 80045d0:	bf88      	it	hi
 80045d2:	2300      	movhi	r3, #0
 80045d4:	44d9      	add	r9, fp
  if (count == specifier->precision) {
 80045d6:	45c8      	cmp	r8, r9
 80045d8:	449a      	add	sl, r3
 80045da:	f108 0801 	add.w	r8, r8, #1
 80045de:	d108      	bne.n	80045f2 <vlc_print+0x42a>
    buf[idx--] = '.';
 80045e0:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 80045e4:	222e      	movs	r2, #46	; 0x2e
    count++;
 80045e6:	46c1      	mov	r9, r8
    buf[idx--] = '.';
 80045e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80045ec:	446b      	add	r3, sp
 80045ee:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (count == specifier->precision + 1)
 80045f2:	45c8      	cmp	r8, r9
 80045f4:	d109      	bne.n	800460a <vlc_print+0x442>
    buf[idx--] = '0';
 80045f6:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 80045fa:	2230      	movs	r2, #48	; 0x30
    count++;
 80045fc:	f109 0901 	add.w	r9, r9, #1
    buf[idx--] = '0';
 8004600:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004604:	446b      	add	r3, sp
 8004606:	f803 2c40 	strb.w	r2, [r3, #-64]
  if (is_signed) {
 800460a:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
 800460e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004612:	d509      	bpl.n	8004628 <vlc_print+0x460>
    buf[idx--] = '-';
 8004614:	f10a 0368 	add.w	r3, sl, #104	; 0x68
 8004618:	222d      	movs	r2, #45	; 0x2d
    count++;
 800461a:	f109 0901 	add.w	r9, r9, #1
    buf[idx--] = '-';
 800461e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004622:	446b      	add	r3, sp
 8004624:	f803 2c40 	strb.w	r2, [r3, #-64]
  while (count < specifier->width) {
 8004628:	f8dd 8014 	ldr.w	r8, [sp, #20]
    buf[idx--] = ' ';
 800462c:	ab0a      	add	r3, sp, #40	; 0x28
 800462e:	2120      	movs	r1, #32
 8004630:	45c1      	cmp	r9, r8
 8004632:	f1c8 0001 	rsb	r0, r8, #1
 8004636:	eba8 0b09 	sub.w	fp, r8, r9
 800463a:	4448      	add	r0, r9
 800463c:	bf84      	itt	hi
 800463e:	2001      	movhi	r0, #1
 8004640:	f04f 0b00 	movhi.w	fp, #0
 8004644:	4450      	add	r0, sl
 8004646:	465a      	mov	r2, fp
 8004648:	44cb      	add	fp, r9
 800464a:	4418      	add	r0, r3
 800464c:	f005 ff91 	bl	800a572 <memset>
 8004650:	eba9 0308 	sub.w	r3, r9, r8
 8004654:	aa0a      	add	r2, sp, #40	; 0x28
 8004656:	45c1      	cmp	r9, r8
 8004658:	bf88      	it	hi
 800465a:	2300      	movhi	r3, #0
  for(int i = 0; i < count; i++) {
 800465c:	4453      	add	r3, sl
 800465e:	eb02 0903 	add.w	r9, r2, r3
 8004662:	445b      	add	r3, fp
 8004664:	eb03 0802 	add.w	r8, r3, r2
 8004668:	45c8      	cmp	r8, r9
 800466a:	d109      	bne.n	8004680 <vlc_print+0x4b8>
            count += _write_double(dbl, &specifier);
 800466c:	9b01      	ldr	r3, [sp, #4]
 800466e:	445b      	add	r3, fp
 8004670:	e6e0      	b.n	8004434 <vlc_print+0x26c>
    mul *= 10;
 8004672:	ee27 7b06 	vmul.f64	d7, d7, d6
  for (int i=0;i <specifier->precision; i++)
 8004676:	3301      	adds	r3, #1
 8004678:	e74d      	b.n	8004516 <vlc_print+0x34e>
 800467a:	eeb0 5b48 	vmov.f64	d5, d8
 800467e:	e755      	b.n	800452c <vlc_print+0x364>
    specifier->putc_fct(specifier->user, (buf + idx)[i]);
 8004680:	f819 1f01 	ldrb.w	r1, [r9, #1]!
 8004684:	4638      	mov	r0, r7
 8004686:	47b0      	blx	r6
  for(int i = 0; i < count; i++) {
 8004688:	e7ee      	b.n	8004668 <vlc_print+0x4a0>
        if (!c)
 800468a:	f04f 0901 	mov.w	r9, #1
 800468e:	e5c6      	b.n	800421e <vlc_print+0x56>
 8004690:	b10b      	cbz	r3, 8004696 <vlc_print+0x4ce>
 8004692:	f8cd c01c 	str.w	ip, [sp, #28]
 8004696:	f1be 0f00 	cmp.w	lr, #0
 800469a:	d000      	beq.n	800469e <vlc_print+0x4d6>
 800469c:	9206      	str	r2, [sp, #24]
 800469e:	f1b8 0f00 	cmp.w	r8, #0
 80046a2:	d000      	beq.n	80046a6 <vlc_print+0x4de>
 80046a4:	9005      	str	r0, [sp, #20]
              if (long_type)
 80046a6:	f1bb 0f00 	cmp.w	fp, #0
 80046aa:	f47f af11 	bne.w	80044d0 <vlc_print+0x308>
                val = va_arg(vl, unsigned int);
 80046ae:	46a0      	mov	r8, r4
 80046b0:	4659      	mov	r1, fp
 80046b2:	f858 0b04 	ldr.w	r0, [r8], #4
 80046b6:	e702      	b.n	80044be <vlc_print+0x2f6>
        if (!c)
 80046b8:	f04f 0b01 	mov.w	fp, #1
      while (done == false) {
 80046bc:	e5af      	b.n	800421e <vlc_print+0x56>
 80046be:	bf00      	nop
 80046c0:	0800cb9c 	.word	0x0800cb9c

080046c4 <ai_myrnn_get_report>:


AI_API_ENTRY
ai_bool ai_myrnn_get_report(
  ai_handle network, ai_network_report* report)
{
 80046c4:	b570      	push	{r4, r5, r6, lr}
 80046c6:	460d      	mov	r5, r1
 80046c8:	b0a2      	sub	sp, #136	; 0x88
 80046ca:	4606      	mov	r6, r0
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 80046cc:	f001 fea0 	bl	8006410 <ai_platform_context_acquire>
 80046d0:	4604      	mov	r4, r0

  if (report && net_ctx)
 80046d2:	2d00      	cmp	r5, #0
 80046d4:	d034      	beq.n	8004740 <ai_myrnn_get_report+0x7c>
 80046d6:	2800      	cmp	r0, #0
 80046d8:	d02f      	beq.n	800473a <ai_myrnn_get_report+0x76>
  {
    ai_network_report r = {
 80046da:	2278      	movs	r2, #120	; 0x78
 80046dc:	2100      	movs	r1, #0
 80046de:	a804      	add	r0, sp, #16
 80046e0:	f005 ff47 	bl	800a572 <memset>
 80046e4:	4b17      	ldr	r3, [pc, #92]	; (8004744 <ai_myrnn_get_report+0x80>)
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	4b17      	ldr	r3, [pc, #92]	; (8004748 <ai_myrnn_get_report+0x84>)
 80046ea:	9301      	str	r3, [sp, #4]
 80046ec:	4b17      	ldr	r3, [pc, #92]	; (800474c <ai_myrnn_get_report+0x88>)
 80046ee:	9302      	str	r3, [sp, #8]
 80046f0:	4b17      	ldr	r3, [pc, #92]	; (8004750 <ai_myrnn_get_report+0x8c>)
 80046f2:	9303      	str	r3, [sp, #12]
      .model_signature   = AI_MYRNN_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 80046f4:	f001 fc40 	bl	8005f78 <ai_platform_runtime_get_revision>
    ai_network_report r = {
 80046f8:	9004      	str	r0, [sp, #16]
      .runtime_version   = ai_platform_runtime_get_version(),
 80046fa:	f001 fcc1 	bl	8006080 <ai_platform_runtime_get_version>
    ai_network_report r = {
 80046fe:	4b15      	ldr	r3, [pc, #84]	; (8004754 <ai_myrnn_get_report+0x90>)
      .runtime_version   = ai_platform_runtime_get_version(),
 8004700:	9005      	str	r0, [sp, #20]
    ai_network_report r = {
 8004702:	9306      	str	r3, [sp, #24]
 8004704:	f44f 7384 	mov.w	r3, #264	; 0x108
 8004708:	f8ad 301c 	strh.w	r3, [sp, #28]
      .tool_revision     = AI_TOOLS_REVISION_ID,
      .tool_version      = {AI_TOOLS_VERSION_MAJOR, AI_TOOLS_VERSION_MINOR,
                            AI_TOOLS_VERSION_MICRO, 0x0},
      .tool_api_version  = AI_STRUCT_INIT,

      .api_version            = ai_platform_api_get_version(),
 800470c:	f001 fd50 	bl	80061b0 <ai_platform_api_get_version>
 8004710:	9009      	str	r0, [sp, #36]	; 0x24
      .interface_api_version  = ai_platform_interface_api_get_version(),
 8004712:	f001 fde5 	bl	80062e0 <ai_platform_interface_api_get_version>
    ai_network_report r = {
 8004716:	4a10      	ldr	r2, [pc, #64]	; (8004758 <ai_myrnn_get_report+0x94>)
 8004718:	2300      	movs	r3, #0
      .interface_api_version  = ai_platform_interface_api_get_version(),
 800471a:	900a      	str	r0, [sp, #40]	; 0x28
      .map_activations   = AI_STRUCT_INIT,
      .n_nodes           = 0,
      .signature         = 0x0,
    };

    if (!ai_platform_api_get_network_report(network, &r)) return false;
 800471c:	4669      	mov	r1, sp
 800471e:	4630      	mov	r0, r6
    ai_network_report r = {
 8004720:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8004724:	4b0d      	ldr	r3, [pc, #52]	; (800475c <ai_myrnn_get_report+0x98>)
 8004726:	9311      	str	r3, [sp, #68]	; 0x44
    if (!ai_platform_api_get_network_report(network, &r)) return false;
 8004728:	f002 f810 	bl	800674c <ai_platform_api_get_network_report>
 800472c:	4604      	mov	r4, r0
 800472e:	b120      	cbz	r0, 800473a <ai_myrnn_get_report+0x76>

    *report = r;
 8004730:	2288      	movs	r2, #136	; 0x88
 8004732:	4669      	mov	r1, sp
 8004734:	4628      	mov	r0, r5
 8004736:	f005 ffbd 	bl	800a6b4 <memcpy>
    return true;
  }
  return false;
}
 800473a:	4620      	mov	r0, r4
 800473c:	b022      	add	sp, #136	; 0x88
 800473e:	bd70      	pop	{r4, r5, r6, pc}
  return false;
 8004740:	462c      	mov	r4, r5
 8004742:	e7fa      	b.n	800473a <ai_myrnn_get_report+0x76>
 8004744:	0800cb68 	.word	0x0800cb68
 8004748:	0800cba3 	.word	0x0800cba3
 800474c:	0800cbc4 	.word	0x0800cbc4
 8004750:	0800cbdd 	.word	0x0800cbdd
 8004754:	08011821 	.word	0x08011821
 8004758:	0003394b 	.word	0x0003394b
 800475c:	a1facade 	.word	0xa1facade

08004760 <ai_myrnn_get_error>:

AI_API_ENTRY
ai_error ai_myrnn_get_error(ai_handle network)
{
  return ai_platform_network_get_error(network);
 8004760:	f001 bee2 	b.w	8006528 <ai_platform_network_get_error>

08004764 <ai_myrnn_create>:
}

AI_API_ENTRY
ai_error ai_myrnn_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8004764:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 8004766:	2305      	movs	r3, #5
 8004768:	2200      	movs	r2, #0
 800476a:	e9cd 3200 	strd	r3, r2, [sp]
 800476e:	2301      	movs	r3, #1
 8004770:	4a02      	ldr	r2, [pc, #8]	; (800477c <ai_myrnn_create+0x18>)
 8004772:	f002 fc17 	bl	8006fa4 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8004776:	b003      	add	sp, #12
 8004778:	f85d fb04 	ldr.w	pc, [sp], #4
 800477c:	200003d8 	.word	0x200003d8

08004780 <ai_myrnn_destroy>:
}

AI_API_ENTRY
ai_handle ai_myrnn_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8004780:	f002 bdea 	b.w	8007358 <ai_platform_network_destroy>

08004784 <ai_myrnn_init>:
}

AI_API_ENTRY
ai_bool ai_myrnn_init(
  ai_handle network, const ai_network_params* params)
{
 8004784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004788:	4607      	mov	r7, r0
 800478a:	460e      	mov	r6, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800478c:	f002 feec 	bl	8007568 <ai_platform_network_init>
  if (!net_ctx) return false;
 8004790:	4604      	mov	r4, r0
 8004792:	2800      	cmp	r0, #0
 8004794:	d05b      	beq.n	800484e <ai_myrnn_init+0xca>
  if (ai_platform_get_weights_map(g_myrnn_weights_map, 1, params)) {
 8004796:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 8004894 <ai_myrnn_init+0x110>
 800479a:	4632      	mov	r2, r6
 800479c:	2101      	movs	r1, #1
 800479e:	4640      	mov	r0, r8
 80047a0:	f001 fb20 	bl	8005de4 <ai_platform_get_weights_map>
 80047a4:	4605      	mov	r5, r0
 80047a6:	2800      	cmp	r0, #0
 80047a8:	d053      	beq.n	8004852 <ai_myrnn_init+0xce>
    simple_rnn_kernel_array.format |= AI_FMT_FLAG_CONST;
 80047aa:	4a30      	ldr	r2, [pc, #192]	; (800486c <ai_myrnn_init+0xe8>)
 80047ac:	6813      	ldr	r3, [r2, #0]
 80047ae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047b2:	6013      	str	r3, [r2, #0]
    simple_rnn_kernel_array.data = AI_PTR(g_myrnn_weights_map[0] + 0);
 80047b4:	f8d8 3000 	ldr.w	r3, [r8]
    simple_rnn_kernel_array.data_start = AI_PTR(g_myrnn_weights_map[0] + 0);
 80047b8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    simple_rnn_recurrent_array.format |= AI_FMT_FLAG_CONST;
 80047bc:	4a2c      	ldr	r2, [pc, #176]	; (8004870 <ai_myrnn_init+0xec>)
 80047be:	6811      	ldr	r1, [r2, #0]
 80047c0:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80047c4:	6011      	str	r1, [r2, #0]
    simple_rnn_recurrent_array.data = AI_PTR(g_myrnn_weights_map[0] + 256);
 80047c6:	f503 7180 	add.w	r1, r3, #256	; 0x100
    simple_rnn_recurrent_array.data_start = AI_PTR(g_myrnn_weights_map[0] + 256);
 80047ca:	e9c2 1102 	strd	r1, r1, [r2, #8]
    simple_rnn_bias_array.format |= AI_FMT_FLAG_CONST;
 80047ce:	4a29      	ldr	r2, [pc, #164]	; (8004874 <ai_myrnn_init+0xf0>)
 80047d0:	6811      	ldr	r1, [r2, #0]
 80047d2:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80047d6:	6011      	str	r1, [r2, #0]
    simple_rnn_bias_array.data = AI_PTR(g_myrnn_weights_map[0] + 16640);
 80047d8:	f503 4182 	add.w	r1, r3, #16640	; 0x4100
    simple_rnn_bias_array.data_start = AI_PTR(g_myrnn_weights_map[0] + 16640);
 80047dc:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80047e0:	4a25      	ldr	r2, [pc, #148]	; (8004878 <ai_myrnn_init+0xf4>)
 80047e2:	6811      	ldr	r1, [r2, #0]
 80047e4:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
 80047e8:	6011      	str	r1, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_myrnn_weights_map[0] + 16896);
 80047ea:	f503 4184 	add.w	r1, r3, #16896	; 0x4200
    dense_dense_bias_array.data = AI_PTR(g_myrnn_weights_map[0] + 17152);
 80047ee:	f503 4386 	add.w	r3, r3, #17152	; 0x4300
    dense_dense_weights_array.data_start = AI_PTR(g_myrnn_weights_map[0] + 16896);
 80047f2:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80047f6:	4a21      	ldr	r2, [pc, #132]	; (800487c <ai_myrnn_init+0xf8>)
 80047f8:	6811      	ldr	r1, [r2, #0]
 80047fa:	f041 4180 	orr.w	r1, r1, #1073741824	; 0x40000000
    dense_dense_bias_array.data_start = AI_PTR(g_myrnn_weights_map[0] + 17152);
 80047fe:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8004802:	6011      	str	r1, [r2, #0]
  if (ai_platform_get_activations_map(g_myrnn_activations_map, 1, params)) {
 8004804:	f8df 8090 	ldr.w	r8, [pc, #144]	; 8004898 <ai_myrnn_init+0x114>
 8004808:	4632      	mov	r2, r6
 800480a:	2101      	movs	r1, #1
 800480c:	4640      	mov	r0, r8
 800480e:	f001 fb41 	bl	8005e94 <ai_platform_get_activations_map>
 8004812:	4606      	mov	r6, r0
 8004814:	b318      	cbz	r0, 800485e <ai_myrnn_init+0xda>
    input_0_output_array.data = AI_PTR(g_myrnn_activations_map[0] + 0);
 8004816:	f8d8 3000 	ldr.w	r3, [r8]
 800481a:	4a19      	ldr	r2, [pc, #100]	; (8004880 <ai_myrnn_init+0xfc>)
    simple_rnn_scratch0_array.data = AI_PTR(g_myrnn_activations_map[0] + 200);
 800481c:	f103 01c8 	add.w	r1, r3, #200	; 0xc8
    input_0_output_array.data_start = AI_PTR(g_myrnn_activations_map[0] + 0);
 8004820:	e9c2 3302 	strd	r3, r3, [r2, #8]
    simple_rnn_scratch0_array.data = AI_PTR(g_myrnn_activations_map[0] + 200);
 8004824:	4a17      	ldr	r2, [pc, #92]	; (8004884 <ai_myrnn_init+0x100>)
    simple_rnn_scratch0_array.data_start = AI_PTR(g_myrnn_activations_map[0] + 200);
 8004826:	e9c2 1102 	strd	r1, r1, [r2, #8]
    simple_rnn_output_array.data = AI_PTR(g_myrnn_activations_map[0] + 712);
 800482a:	f503 7132 	add.w	r1, r3, #712	; 0x2c8
 800482e:	4a16      	ldr	r2, [pc, #88]	; (8004888 <ai_myrnn_init+0x104>)
    simple_rnn_output_array.data_start = AI_PTR(g_myrnn_activations_map[0] + 712);
 8004830:	e9c2 1102 	strd	r1, r1, [r2, #8]
    dense_dense_output_array.data = AI_PTR(g_myrnn_activations_map[0] + 0);
 8004834:	4a15      	ldr	r2, [pc, #84]	; (800488c <ai_myrnn_init+0x108>)
    dense_dense_output_array.data_start = AI_PTR(g_myrnn_activations_map[0] + 0);
 8004836:	e9c2 3302 	strd	r3, r3, [r2, #8]
    dense_output_array.data = AI_PTR(g_myrnn_activations_map[0] + 4);
 800483a:	3304      	adds	r3, #4
 800483c:	4a14      	ldr	r2, [pc, #80]	; (8004890 <ai_myrnn_init+0x10c>)
    dense_output_array.data_start = AI_PTR(g_myrnn_activations_map[0] + 4);
 800483e:	e9c2 3302 	strd	r3, r3, [r2, #8]

  ai_bool ok = true;
  ok &= myrnn_configure_weights(net_ctx, params);
  ok &= myrnn_configure_activations(net_ctx, params);

  ok &= ai_platform_network_post_init(network);
 8004842:	4638      	mov	r0, r7
 8004844:	f003 f82c 	bl	80078a0 <ai_platform_network_post_init>
 8004848:	4030      	ands	r0, r6
 800484a:	4005      	ands	r5, r0
 800484c:	b2e8      	uxtb	r0, r5

  return ok;
}
 800484e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8004852:	2212      	movs	r2, #18
 8004854:	2130      	movs	r1, #48	; 0x30
 8004856:	4620      	mov	r0, r4
 8004858:	f001 ff72 	bl	8006740 <ai_platform_network_set_error>
  return false;
 800485c:	e7d2      	b.n	8004804 <ai_myrnn_init+0x80>
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800485e:	2213      	movs	r2, #19
 8004860:	2130      	movs	r1, #48	; 0x30
 8004862:	4620      	mov	r0, r4
 8004864:	f001 ff6c 	bl	8006740 <ai_platform_network_set_error>
  return false;
 8004868:	e7eb      	b.n	8004842 <ai_myrnn_init+0xbe>
 800486a:	bf00      	nop
 800486c:	20000498 	.word	0x20000498
 8004870:	20000518 	.word	0x20000518
 8004874:	2000046c 	.word	0x2000046c
 8004878:	2000037c 	.word	0x2000037c
 800487c:	20000308 	.word	0x20000308
 8004880:	20000440 	.word	0x20000440
 8004884:	20000544 	.word	0x20000544
 8004888:	200004ec 	.word	0x200004ec
 800488c:	20000350 	.word	0x20000350
 8004890:	200003c8 	.word	0x200003c8
 8004894:	20001020 	.word	0x20001020
 8004898:	2000101c 	.word	0x2000101c

0800489c <ai_myrnn_run>:

AI_API_ENTRY
ai_i32 ai_myrnn_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 800489c:	f003 b92a 	b.w	8007af4 <ai_platform_network_process>

080048a0 <ai_myrnn_forward>:
}

AI_API_ENTRY
ai_i32 ai_myrnn_forward(ai_handle network, const ai_buffer* input)
{
  return ai_platform_network_process(network, input, NULL);
 80048a0:	2200      	movs	r2, #0
 80048a2:	f003 b927 	b.w	8007af4 <ai_platform_network_process>
	...

080048a8 <ai_myrnn_data_params_get>:
 * @ingroup myrnn_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_myrnn_data_params_get(ai_network_params* params)
{
 80048a8:	b530      	push	{r4, r5, lr}
  if (!params) return false;
 80048aa:	4603      	mov	r3, r0
{
 80048ac:	b085      	sub	sp, #20
  if (!params) return false;
 80048ae:	b170      	cbz	r0, 80048ce <ai_myrnn_data_params_get+0x26>
  
  const ai_buffer_array map_activations = 
 80048b0:	4c08      	ldr	r4, [pc, #32]	; (80048d4 <ai_myrnn_data_params_get+0x2c>)
 80048b2:	466a      	mov	r2, sp
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MYRNN_DATA_ACTIVATIONS_COUNT, g_myrnn_data_map_activations);
  
  const ai_buffer_array map_weights = 
 80048b4:	ad02      	add	r5, sp, #8
  const ai_buffer_array map_activations = 
 80048b6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80048ba:	e882 0003 	stmia.w	r2, {r0, r1}
  const ai_buffer_array map_weights = 
 80048be:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
 80048c2:	e885 0003 	stmia.w	r5, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_MYRNN_DATA_WEIGHTS_COUNT, g_myrnn_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 80048c6:	4629      	mov	r1, r5
 80048c8:	4618      	mov	r0, r3
 80048ca:	f001 fb3b 	bl	8005f44 <ai_platform_bind_network_params>
}
 80048ce:	b005      	add	sp, #20
 80048d0:	bd30      	pop	{r4, r5, pc}
 80048d2:	bf00      	nop
 80048d4:	0800caec 	.word	0x0800caec

080048d8 <pb_field_iter_begin>:

bool pb_field_iter_begin(pb_field_iter_t *iter, const pb_field_t *fields, void *dest_struct)
{
    iter->start = fields;
    iter->pos = fields;
    iter->required_field_index = 0;
 80048d8:	2300      	movs	r3, #0
    iter->pos = fields;
 80048da:	e9c0 1100 	strd	r1, r1, [r0]
    iter->dest_struct = dest_struct;
 80048de:	e9c0 3202 	strd	r3, r2, [r0, #8]
    iter->pData = (char*)dest_struct + iter->pos->data_offset;
 80048e2:	f8b1 3003 	ldrh.w	r3, [r1, #3]
 80048e6:	441a      	add	r2, r3
 80048e8:	6102      	str	r2, [r0, #16]
    iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 80048ea:	f9b1 3005 	ldrsh.w	r3, [r1, #5]
 80048ee:	441a      	add	r2, r3
 80048f0:	6142      	str	r2, [r0, #20]
    
    return (iter->pos->tag != 0);
 80048f2:	8808      	ldrh	r0, [r1, #0]
}
 80048f4:	3800      	subs	r0, #0
 80048f6:	bf18      	it	ne
 80048f8:	2001      	movne	r0, #1
 80048fa:	4770      	bx	lr

080048fc <pb_field_iter_next>:

bool pb_field_iter_next(pb_field_iter_t *iter)
{
    const pb_field_t *prev_field = iter->pos;
 80048fc:	6841      	ldr	r1, [r0, #4]
{
 80048fe:	4603      	mov	r3, r0

    if (prev_field->tag == 0)
 8004900:	880a      	ldrh	r2, [r1, #0]
{
 8004902:	b570      	push	{r4, r5, r6, lr}
    if (prev_field->tag == 0)
 8004904:	2a00      	cmp	r2, #0
 8004906:	d038      	beq.n	800497a <pb_field_iter_next+0x7e>
        /* Handle empty message types, where the first field is already the terminator.
         * In other cases, the iter->pos never points to the terminator. */
        return false;
    }
    
    iter->pos++;
 8004908:	f101 020f 	add.w	r2, r1, #15
    
    if (iter->pos->tag == 0)
 800490c:	f8b1 400f 	ldrh.w	r4, [r1, #15]
    iter->pos++;
 8004910:	6042      	str	r2, [r0, #4]
    if (iter->pos->tag == 0)
 8004912:	b92c      	cbnz	r4, 8004920 <pb_field_iter_next+0x24>
    {
        /* Wrapped back to beginning, reinitialize */
        (void)pb_field_iter_begin(iter, iter->start, iter->dest_struct);
 8004914:	68c2      	ldr	r2, [r0, #12]
 8004916:	6801      	ldr	r1, [r0, #0]
 8004918:	f7ff ffde 	bl	80048d8 <pb_field_iter_begin>
        return false;
 800491c:	4620      	mov	r0, r4
    
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
        return true;
    }
}
 800491e:	bd70      	pop	{r4, r5, r6, pc}
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8004920:	7888      	ldrb	r0, [r1, #2]
        size_t prev_size = prev_field->data_size;
 8004922:	f8b1 2007 	ldrh.w	r2, [r1, #7]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 8004926:	f000 0630 	and.w	r6, r0, #48	; 0x30
            iter->pos->data_offset == PB_SIZE_MAX)
 800492a:	8a4c      	ldrh	r4, [r1, #18]
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_ONEOF &&
 800492c:	2e30      	cmp	r6, #48	; 0x30
 800492e:	d10a      	bne.n	8004946 <pb_field_iter_next+0x4a>
 8004930:	7c4d      	ldrb	r5, [r1, #17]
 8004932:	f005 0530 	and.w	r5, r5, #48	; 0x30
 8004936:	2d30      	cmp	r5, #48	; 0x30
 8004938:	d119      	bne.n	800496e <pb_field_iter_next+0x72>
            PB_HTYPE(iter->pos->type) == PB_HTYPE_ONEOF &&
 800493a:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800493e:	42ac      	cmp	r4, r5
 8004940:	d115      	bne.n	800496e <pb_field_iter_next+0x72>
            return true;
 8004942:	2001      	movs	r0, #1
 8004944:	e7eb      	b.n	800491e <pb_field_iter_next+0x22>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_STATIC &&
 8004946:	f000 05f0 	and.w	r5, r0, #240	; 0xf0
 800494a:	2d20      	cmp	r5, #32
 800494c:	d10f      	bne.n	800496e <pb_field_iter_next+0x72>
            prev_size *= prev_field->array_size;
 800494e:	f8b1 0009 	ldrh.w	r0, [r1, #9]
 8004952:	4342      	muls	r2, r0
        if (PB_HTYPE(prev_field->type) == PB_HTYPE_REQUIRED)
 8004954:	b916      	cbnz	r6, 800495c <pb_field_iter_next+0x60>
            iter->required_field_index++;
 8004956:	6898      	ldr	r0, [r3, #8]
 8004958:	3001      	adds	r0, #1
 800495a:	6098      	str	r0, [r3, #8]
        iter->pData = (char*)iter->pData + prev_size + iter->pos->data_offset;
 800495c:	4414      	add	r4, r2
 800495e:	691a      	ldr	r2, [r3, #16]
 8004960:	4422      	add	r2, r4
 8004962:	611a      	str	r2, [r3, #16]
        iter->pSize = (char*)iter->pData + iter->pos->size_offset;
 8004964:	f9b1 1014 	ldrsh.w	r1, [r1, #20]
 8004968:	440a      	add	r2, r1
 800496a:	615a      	str	r2, [r3, #20]
        return true;
 800496c:	e7e9      	b.n	8004942 <pb_field_iter_next+0x46>
        else if (PB_ATYPE(prev_field->type) == PB_ATYPE_POINTER)
 800496e:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
            prev_size = sizeof(void*);
 8004972:	2880      	cmp	r0, #128	; 0x80
 8004974:	bf08      	it	eq
 8004976:	2204      	moveq	r2, #4
 8004978:	e7ec      	b.n	8004954 <pb_field_iter_next+0x58>
        return false;
 800497a:	4610      	mov	r0, r2
 800497c:	e7cf      	b.n	800491e <pb_field_iter_next+0x22>

0800497e <pb_field_iter_find>:

bool pb_field_iter_find(pb_field_iter_t *iter, uint32_t tag)
{
 800497e:	b570      	push	{r4, r5, r6, lr}
 8004980:	4604      	mov	r4, r0
 8004982:	460d      	mov	r5, r1
    const pb_field_t *start = iter->pos;
 8004984:	6846      	ldr	r6, [r0, #4]
    
    do {
        if (iter->pos->tag == tag &&
 8004986:	6863      	ldr	r3, [r4, #4]
 8004988:	881a      	ldrh	r2, [r3, #0]
 800498a:	42aa      	cmp	r2, r5
 800498c:	d104      	bne.n	8004998 <pb_field_iter_find+0x1a>
 800498e:	789b      	ldrb	r3, [r3, #2]
 8004990:	f003 030f 	and.w	r3, r3, #15
 8004994:	2b08      	cmp	r3, #8
 8004996:	d107      	bne.n	80049a8 <pb_field_iter_find+0x2a>
        {
            /* Found the wanted field */
            return true;
        }
        
        (void)pb_field_iter_next(iter);
 8004998:	4620      	mov	r0, r4
 800499a:	f7ff ffaf 	bl	80048fc <pb_field_iter_next>
    } while (iter->pos != start);
 800499e:	6863      	ldr	r3, [r4, #4]
 80049a0:	42b3      	cmp	r3, r6
 80049a2:	d1f0      	bne.n	8004986 <pb_field_iter_find+0x8>
    
    /* Searched all the way back to start, and found nothing. */
    return false;
 80049a4:	2000      	movs	r0, #0
}
 80049a6:	bd70      	pop	{r4, r5, r6, pc}
            return true;
 80049a8:	2001      	movs	r0, #1
 80049aa:	e7fc      	b.n	80049a6 <pb_field_iter_find+0x28>

080049ac <buf_read>:
/*******************************
 * pb_istream_t implementation *
 *******************************/

static bool checkreturn buf_read(pb_istream_t *stream, pb_byte_t *buf, size_t count)
{
 80049ac:	b510      	push	{r4, lr}
    size_t i;
    const pb_byte_t *source = (const pb_byte_t*)stream->state;
 80049ae:	6844      	ldr	r4, [r0, #4]
    stream->state = (pb_byte_t*)stream->state + count;
 80049b0:	18a3      	adds	r3, r4, r2
 80049b2:	6043      	str	r3, [r0, #4]
    
    if (buf != NULL)
 80049b4:	b939      	cbnz	r1, 80049c6 <buf_read+0x1a>
        for (i = 0; i < count; i++)
            buf[i] = source[i];
    }
    
    return true;
}
 80049b6:	2001      	movs	r0, #1
 80049b8:	bd10      	pop	{r4, pc}
            buf[i] = source[i];
 80049ba:	5ce0      	ldrb	r0, [r4, r3]
 80049bc:	54c8      	strb	r0, [r1, r3]
        for (i = 0; i < count; i++)
 80049be:	3301      	adds	r3, #1
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d1fa      	bne.n	80049ba <buf_read+0xe>
 80049c4:	e7f7      	b.n	80049b6 <buf_read+0xa>
 80049c6:	2300      	movs	r3, #0
 80049c8:	e7fa      	b.n	80049c0 <buf_read+0x14>

080049ca <pb_field_set_to_default>:
    return false;
}

/* Initialize message fields to default values, recursively */
static void pb_field_set_to_default(pb_field_iter_t *iter)
{
 80049ca:	b570      	push	{r4, r5, r6, lr}
    pb_type_t type;
    type = iter->pos->type;
 80049cc:	6845      	ldr	r5, [r0, #4]
{
 80049ce:	b086      	sub	sp, #24
 80049d0:	4603      	mov	r3, r0
    type = iter->pos->type;
 80049d2:	78aa      	ldrb	r2, [r5, #2]
    
    if (PB_LTYPE(type) == PB_LTYPE_EXTENSION)
 80049d4:	f002 060f 	and.w	r6, r2, #15
 80049d8:	2e08      	cmp	r6, #8
 80049da:	d11e      	bne.n	8004a1a <pb_field_set_to_default+0x50>
    {
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 80049dc:	6903      	ldr	r3, [r0, #16]
        while (ext != NULL)
        {
            pb_field_iter_t ext_iter;
            ext->found = false;
 80049de:	2600      	movs	r6, #0
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 80049e0:	681c      	ldr	r4, [r3, #0]
        while (ext != NULL)
 80049e2:	b90c      	cbnz	r4, 80049e8 <pb_field_set_to_default+0x1e>
    }
    else if (PB_ATYPE(type) == PB_ATYPE_CALLBACK)
    {
        /* Don't overwrite callback */
    }
}
 80049e4:	b006      	add	sp, #24
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80049e8:	6823      	ldr	r3, [r4, #0]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 80049ea:	4668      	mov	r0, sp
 80049ec:	6862      	ldr	r2, [r4, #4]
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 80049ee:	689d      	ldr	r5, [r3, #8]
            ext->found = false;
 80049f0:	7326      	strb	r6, [r4, #12]
    (void)pb_field_iter_begin(iter, field, extension->dest);
 80049f2:	4629      	mov	r1, r5
 80049f4:	f7ff ff70 	bl	80048d8 <pb_field_iter_begin>
    iter->pData = extension->dest;
 80049f8:	6863      	ldr	r3, [r4, #4]
            pb_field_set_to_default(&ext_iter);
 80049fa:	4668      	mov	r0, sp
    iter->pData = extension->dest;
 80049fc:	9304      	str	r3, [sp, #16]
    iter->pSize = &extension->found;
 80049fe:	f104 030c 	add.w	r3, r4, #12
 8004a02:	9305      	str	r3, [sp, #20]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004a04:	78ab      	ldrb	r3, [r5, #2]
 8004a06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004a0a:	2b80      	cmp	r3, #128	; 0x80
        iter->pData = &extension->dest;
 8004a0c:	bf04      	itt	eq
 8004a0e:	1d23      	addeq	r3, r4, #4
 8004a10:	9304      	streq	r3, [sp, #16]
            pb_field_set_to_default(&ext_iter);
 8004a12:	f7ff ffda 	bl	80049ca <pb_field_set_to_default>
            ext = ext->next;
 8004a16:	68a4      	ldr	r4, [r4, #8]
 8004a18:	e7e3      	b.n	80049e2 <pb_field_set_to_default+0x18>
    else if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8004a1a:	f012 01c0 	ands.w	r1, r2, #192	; 0xc0
 8004a1e:	d127      	bne.n	8004a70 <pb_field_set_to_default+0xa6>
        if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && iter->pSize != iter->pData)
 8004a20:	f002 0030 	and.w	r0, r2, #48	; 0x30
 8004a24:	2810      	cmp	r0, #16
 8004a26:	d110      	bne.n	8004a4a <pb_field_set_to_default+0x80>
 8004a28:	e9d3 0204 	ldrd	r0, r2, [r3, #16]
 8004a2c:	4282      	cmp	r2, r0
 8004a2e:	d000      	beq.n	8004a32 <pb_field_set_to_default+0x68>
            *(bool*)iter->pSize = false;
 8004a30:	7011      	strb	r1, [r2, #0]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8004a32:	2e07      	cmp	r6, #7
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8004a34:	f8d5 400b 	ldr.w	r4, [r5, #11]
        pb_extension_t *ext = *(pb_extension_t* const *)iter->pData;
 8004a38:	6918      	ldr	r0, [r3, #16]
            if (PB_LTYPE(iter->pos->type) == PB_LTYPE_SUBMESSAGE)
 8004a3a:	d10b      	bne.n	8004a54 <pb_field_set_to_default+0x8a>
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8004a3c:	4601      	mov	r1, r0
 8004a3e:	4620      	mov	r0, r4
}
 8004a40:	b006      	add	sp, #24
 8004a42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                pb_message_set_to_defaults((const pb_field_t *) iter->pos->ptr, iter->pData);
 8004a46:	f000 b81b 	b.w	8004a80 <pb_message_set_to_defaults>
        else if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004a4a:	0690      	lsls	r0, r2, #26
 8004a4c:	d5f1      	bpl.n	8004a32 <pb_field_set_to_default+0x68>
            *(pb_size_t*)iter->pSize = 0;
 8004a4e:	695b      	ldr	r3, [r3, #20]
 8004a50:	8019      	strh	r1, [r3, #0]
}
 8004a52:	e7c7      	b.n	80049e4 <pb_field_set_to_default+0x1a>
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8004a54:	f8b5 2007 	ldrh.w	r2, [r5, #7]
 8004a58:	4621      	mov	r1, r4
            else if (iter->pos->ptr != NULL)
 8004a5a:	b124      	cbz	r4, 8004a66 <pb_field_set_to_default+0x9c>
}
 8004a5c:	b006      	add	sp, #24
 8004a5e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
 8004a62:	f005 be27 	b.w	800a6b4 <memcpy>
}
 8004a66:	b006      	add	sp, #24
 8004a68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
                memset(iter->pData, 0, iter->pos->data_size);
 8004a6c:	f005 bd81 	b.w	800a572 <memset>
    else if (PB_ATYPE(type) == PB_ATYPE_POINTER)
 8004a70:	2980      	cmp	r1, #128	; 0x80
 8004a72:	d1b7      	bne.n	80049e4 <pb_field_set_to_default+0x1a>
        *(void**)iter->pData = NULL;
 8004a74:	6900      	ldr	r0, [r0, #16]
 8004a76:	2100      	movs	r1, #0
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004a78:	0692      	lsls	r2, r2, #26
        *(void**)iter->pData = NULL;
 8004a7a:	6001      	str	r1, [r0, #0]
        if (PB_HTYPE(type) == PB_HTYPE_REPEATED ||
 8004a7c:	d5b2      	bpl.n	80049e4 <pb_field_set_to_default+0x1a>
 8004a7e:	e7e6      	b.n	8004a4e <pb_field_set_to_default+0x84>

08004a80 <pb_message_set_to_defaults>:

static void pb_message_set_to_defaults(const pb_field_t fields[], void *dest_struct)
{
 8004a80:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8004a82:	460a      	mov	r2, r1
    pb_field_iter_t iter;

    if (!pb_field_iter_begin(&iter, fields, dest_struct))
 8004a84:	4601      	mov	r1, r0
 8004a86:	4668      	mov	r0, sp
 8004a88:	f7ff ff26 	bl	80048d8 <pb_field_iter_begin>
 8004a8c:	b130      	cbz	r0, 8004a9c <pb_message_set_to_defaults+0x1c>
        return; /* Empty message type */
    
    do
    {
        pb_field_set_to_default(&iter);
 8004a8e:	4668      	mov	r0, sp
 8004a90:	f7ff ff9b 	bl	80049ca <pb_field_set_to_default>
    } while (pb_field_iter_next(&iter));
 8004a94:	4668      	mov	r0, sp
 8004a96:	f7ff ff31 	bl	80048fc <pb_field_iter_next>
 8004a9a:	e7f7      	b.n	8004a8c <pb_message_set_to_defaults+0xc>
}
 8004a9c:	b007      	add	sp, #28
 8004a9e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08004aa4 <pb_readbyte>:
    if (stream->bytes_left == 0)
 8004aa4:	6883      	ldr	r3, [r0, #8]
{
 8004aa6:	b510      	push	{r4, lr}
 8004aa8:	4604      	mov	r4, r0
    if (stream->bytes_left == 0)
 8004aaa:	b93b      	cbnz	r3, 8004abc <pb_readbyte+0x18>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8004aac:	68c2      	ldr	r2, [r0, #12]
 8004aae:	490b      	ldr	r1, [pc, #44]	; (8004adc <pb_readbyte+0x38>)
 8004ab0:	2a00      	cmp	r2, #0
 8004ab2:	bf08      	it	eq
 8004ab4:	460a      	moveq	r2, r1
 8004ab6:	60c2      	str	r2, [r0, #12]
 8004ab8:	4618      	mov	r0, r3
}
 8004aba:	bd10      	pop	{r4, pc}
    if (!stream->callback(stream, buf, 1))
 8004abc:	6803      	ldr	r3, [r0, #0]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	4798      	blx	r3
 8004ac2:	b930      	cbnz	r0, 8004ad2 <pb_readbyte+0x2e>
        PB_RETURN_ERROR(stream, "io error");
 8004ac4:	68e3      	ldr	r3, [r4, #12]
 8004ac6:	4a06      	ldr	r2, [pc, #24]	; (8004ae0 <pb_readbyte+0x3c>)
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	bf08      	it	eq
 8004acc:	4613      	moveq	r3, r2
 8004ace:	60e3      	str	r3, [r4, #12]
 8004ad0:	e7f3      	b.n	8004aba <pb_readbyte+0x16>
    stream->bytes_left--;
 8004ad2:	68a3      	ldr	r3, [r4, #8]
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	60a3      	str	r3, [r4, #8]
    return true;    
 8004ad8:	e7ef      	b.n	8004aba <pb_readbyte+0x16>
 8004ada:	bf00      	nop
 8004adc:	08010f28 	.word	0x08010f28
 8004ae0:	08010f36 	.word	0x08010f36

08004ae4 <pb_decode_varint32_eof>:
{
 8004ae4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004ae8:	4688      	mov	r8, r1
    if (!pb_readbyte(stream, &byte))
 8004aea:	f10d 0107 	add.w	r1, sp, #7
{
 8004aee:	4605      	mov	r5, r0
 8004af0:	4614      	mov	r4, r2
    if (!pb_readbyte(stream, &byte))
 8004af2:	f7ff ffd7 	bl	8004aa4 <pb_readbyte>
 8004af6:	4606      	mov	r6, r0
 8004af8:	b958      	cbnz	r0, 8004b12 <pb_decode_varint32_eof+0x2e>
        if (stream->bytes_left == 0)
 8004afa:	68ab      	ldr	r3, [r5, #8]
 8004afc:	b10b      	cbz	r3, 8004b02 <pb_decode_varint32_eof+0x1e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8004afe:	2600      	movs	r6, #0
 8004b00:	e003      	b.n	8004b0a <pb_decode_varint32_eof+0x26>
            if (eof)
 8004b02:	2c00      	cmp	r4, #0
 8004b04:	d0fb      	beq.n	8004afe <pb_decode_varint32_eof+0x1a>
                *eof = true;
 8004b06:	2301      	movs	r3, #1
 8004b08:	7023      	strb	r3, [r4, #0]
}
 8004b0a:	4630      	mov	r0, r6
 8004b0c:	b002      	add	sp, #8
 8004b0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((byte & 0x80) == 0)
 8004b12:	f99d 3007 	ldrsb.w	r3, [sp, #7]
 8004b16:	f89d 4007 	ldrb.w	r4, [sp, #7]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	da2a      	bge.n	8004b74 <pb_decode_varint32_eof+0x90>
        result = byte & 0x7F;
 8004b1e:	f004 047f 	and.w	r4, r4, #127	; 0x7f
        uint_fast8_t bitpos = 7;
 8004b22:	2707      	movs	r7, #7
            if (!pb_readbyte(stream, &byte))
 8004b24:	f10d 0107 	add.w	r1, sp, #7
 8004b28:	4628      	mov	r0, r5
 8004b2a:	f7ff ffbb 	bl	8004aa4 <pb_readbyte>
 8004b2e:	2800      	cmp	r0, #0
 8004b30:	d0e5      	beq.n	8004afe <pb_decode_varint32_eof+0x1a>
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8004b32:	f89d 3007 	ldrb.w	r3, [sp, #7]
            if (bitpos >= 32)
 8004b36:	2f1f      	cmp	r7, #31
 8004b38:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004b3c:	d90f      	bls.n	8004b5e <pb_decode_varint32_eof+0x7a>
                uint8_t sign_extension = (bitpos < 63) ? 0xFF : 0x01;
 8004b3e:	2f3f      	cmp	r7, #63	; 0x3f
 8004b40:	bf34      	ite	cc
 8004b42:	21ff      	movcc	r1, #255	; 0xff
 8004b44:	2101      	movcs	r1, #1
                if ((byte & 0x7F) != 0x00 && ((result >> 31) == 0 || byte != sign_extension))
 8004b46:	b162      	cbz	r2, 8004b62 <pb_decode_varint32_eof+0x7e>
 8004b48:	2c00      	cmp	r4, #0
 8004b4a:	da01      	bge.n	8004b50 <pb_decode_varint32_eof+0x6c>
 8004b4c:	4299      	cmp	r1, r3
 8004b4e:	d008      	beq.n	8004b62 <pb_decode_varint32_eof+0x7e>
                    PB_RETURN_ERROR(stream, "varint overflow");
 8004b50:	68eb      	ldr	r3, [r5, #12]
 8004b52:	4a0a      	ldr	r2, [pc, #40]	; (8004b7c <pb_decode_varint32_eof+0x98>)
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	bf08      	it	eq
 8004b58:	4613      	moveq	r3, r2
 8004b5a:	60eb      	str	r3, [r5, #12]
 8004b5c:	e7cf      	b.n	8004afe <pb_decode_varint32_eof+0x1a>
                result |= (uint32_t)(byte & 0x7F) << bitpos;
 8004b5e:	40ba      	lsls	r2, r7
 8004b60:	4314      	orrs	r4, r2
        } while (byte & 0x80);
 8004b62:	061a      	lsls	r2, r3, #24
            bitpos = (uint_fast8_t)(bitpos + 7);
 8004b64:	f107 0707 	add.w	r7, r7, #7
        } while (byte & 0x80);
 8004b68:	d4dc      	bmi.n	8004b24 <pb_decode_varint32_eof+0x40>
        if (bitpos == 35 && (byte & 0x70) != 0)
 8004b6a:	2f23      	cmp	r7, #35	; 0x23
 8004b6c:	d102      	bne.n	8004b74 <pb_decode_varint32_eof+0x90>
 8004b6e:	f013 0f70 	tst.w	r3, #112	; 0x70
 8004b72:	d1ed      	bne.n	8004b50 <pb_decode_varint32_eof+0x6c>
   *dest = result;
 8004b74:	f8c8 4000 	str.w	r4, [r8]
   return true;
 8004b78:	e7c7      	b.n	8004b0a <pb_decode_varint32_eof+0x26>
 8004b7a:	bf00      	nop
 8004b7c:	08010f3f 	.word	0x08010f3f

08004b80 <pb_read>:
{
 8004b80:	b530      	push	{r4, r5, lr}
 8004b82:	4604      	mov	r4, r0
 8004b84:	b085      	sub	sp, #20
 8004b86:	4615      	mov	r5, r2
	if (buf == NULL && stream->callback != buf_read)
 8004b88:	b9a9      	cbnz	r1, 8004bb6 <pb_read+0x36>
 8004b8a:	6802      	ldr	r2, [r0, #0]
 8004b8c:	4b17      	ldr	r3, [pc, #92]	; (8004bec <pb_read+0x6c>)
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d011      	beq.n	8004bb6 <pb_read+0x36>
		while (count > 16)
 8004b92:	2d10      	cmp	r5, #16
 8004b94:	d806      	bhi.n	8004ba4 <pb_read+0x24>
		return pb_read(stream, tmp, count);
 8004b96:	462a      	mov	r2, r5
 8004b98:	4669      	mov	r1, sp
 8004b9a:	4620      	mov	r0, r4
 8004b9c:	f7ff fff0 	bl	8004b80 <pb_read>
}
 8004ba0:	b005      	add	sp, #20
 8004ba2:	bd30      	pop	{r4, r5, pc}
			if (!pb_read(stream, tmp, 16))
 8004ba4:	2210      	movs	r2, #16
 8004ba6:	4669      	mov	r1, sp
 8004ba8:	4620      	mov	r0, r4
 8004baa:	f7ff ffe9 	bl	8004b80 <pb_read>
 8004bae:	2800      	cmp	r0, #0
 8004bb0:	d0f6      	beq.n	8004ba0 <pb_read+0x20>
			count -= 16;
 8004bb2:	3d10      	subs	r5, #16
 8004bb4:	e7ed      	b.n	8004b92 <pb_read+0x12>
    if (stream->bytes_left < count)
 8004bb6:	68a3      	ldr	r3, [r4, #8]
 8004bb8:	42ab      	cmp	r3, r5
 8004bba:	d207      	bcs.n	8004bcc <pb_read+0x4c>
        PB_RETURN_ERROR(stream, "end-of-stream");
 8004bbc:	68e3      	ldr	r3, [r4, #12]
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	4a0b      	ldr	r2, [pc, #44]	; (8004bf0 <pb_read+0x70>)
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	bf08      	it	eq
 8004bc6:	4613      	moveq	r3, r2
 8004bc8:	60e3      	str	r3, [r4, #12]
 8004bca:	e7e9      	b.n	8004ba0 <pb_read+0x20>
    if (!stream->callback(stream, buf, count))
 8004bcc:	6823      	ldr	r3, [r4, #0]
 8004bce:	462a      	mov	r2, r5
 8004bd0:	4620      	mov	r0, r4
 8004bd2:	4798      	blx	r3
 8004bd4:	b930      	cbnz	r0, 8004be4 <pb_read+0x64>
        PB_RETURN_ERROR(stream, "io error");
 8004bd6:	68e3      	ldr	r3, [r4, #12]
 8004bd8:	4a06      	ldr	r2, [pc, #24]	; (8004bf4 <pb_read+0x74>)
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	bf08      	it	eq
 8004bde:	4613      	moveq	r3, r2
 8004be0:	60e3      	str	r3, [r4, #12]
 8004be2:	e7dd      	b.n	8004ba0 <pb_read+0x20>
    stream->bytes_left -= count;
 8004be4:	68a3      	ldr	r3, [r4, #8]
 8004be6:	1b5b      	subs	r3, r3, r5
 8004be8:	60a3      	str	r3, [r4, #8]
    return true;
 8004bea:	e7d9      	b.n	8004ba0 <pb_read+0x20>
 8004bec:	080049ad 	.word	0x080049ad
 8004bf0:	08010f28 	.word	0x08010f28
 8004bf4:	08010f36 	.word	0x08010f36

08004bf8 <pb_decode_varint32>:
    return pb_decode_varint32_eof(stream, dest, NULL);
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f7ff bf73 	b.w	8004ae4 <pb_decode_varint32_eof>
	...

08004c00 <pb_dec_fixed_length_bytes>:
        return false;
    return status;
}

static bool checkreturn pb_dec_fixed_length_bytes(pb_istream_t *stream, const pb_field_t *field, void *dest)
{
 8004c00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c02:	460f      	mov	r7, r1
    uint32_t size;

    if (!pb_decode_varint32(stream, &size))
 8004c04:	a901      	add	r1, sp, #4
{
 8004c06:	4604      	mov	r4, r0
 8004c08:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 8004c0a:	f7ff fff5 	bl	8004bf8 <pb_decode_varint32>
 8004c0e:	4605      	mov	r5, r0
 8004c10:	b188      	cbz	r0, 8004c36 <pb_dec_fixed_length_bytes+0x36>
        return false;

    if (size > PB_SIZE_MAX)
 8004c12:	9901      	ldr	r1, [sp, #4]
 8004c14:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
 8004c18:	d307      	bcc.n	8004c2a <pb_dec_fixed_length_bytes+0x2a>
        PB_RETURN_ERROR(stream, "bytes overflow");
 8004c1a:	68e3      	ldr	r3, [r4, #12]
 8004c1c:	4a0e      	ldr	r2, [pc, #56]	; (8004c58 <pb_dec_fixed_length_bytes+0x58>)
        memset(dest, 0, field->data_size);
        return true;
    }

    if (size != field->data_size)
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	bf08      	it	eq
 8004c22:	4613      	moveq	r3, r2
 8004c24:	2500      	movs	r5, #0
 8004c26:	60e3      	str	r3, [r4, #12]
 8004c28:	e005      	b.n	8004c36 <pb_dec_fixed_length_bytes+0x36>
        memset(dest, 0, field->data_size);
 8004c2a:	f8b7 2007 	ldrh.w	r2, [r7, #7]
    if (size == 0)
 8004c2e:	b929      	cbnz	r1, 8004c3c <pb_dec_fixed_length_bytes+0x3c>
        memset(dest, 0, field->data_size);
 8004c30:	4630      	mov	r0, r6
 8004c32:	f005 fc9e 	bl	800a572 <memset>

    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
}
 8004c36:	4628      	mov	r0, r5
 8004c38:	b003      	add	sp, #12
 8004c3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (size != field->data_size)
 8004c3c:	4291      	cmp	r1, r2
 8004c3e:	d002      	beq.n	8004c46 <pb_dec_fixed_length_bytes+0x46>
        PB_RETURN_ERROR(stream, "incorrect fixed length bytes size");
 8004c40:	68e3      	ldr	r3, [r4, #12]
 8004c42:	4a06      	ldr	r2, [pc, #24]	; (8004c5c <pb_dec_fixed_length_bytes+0x5c>)
 8004c44:	e7eb      	b.n	8004c1e <pb_dec_fixed_length_bytes+0x1e>
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 8004c46:	460a      	mov	r2, r1
 8004c48:	4620      	mov	r0, r4
 8004c4a:	4631      	mov	r1, r6
}
 8004c4c:	b003      	add	sp, #12
 8004c4e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    return pb_read(stream, (pb_byte_t*)dest, field->data_size);
 8004c52:	f7ff bf95 	b.w	8004b80 <pb_read>
 8004c56:	bf00      	nop
 8004c58:	08010f4f 	.word	0x08010f4f
 8004c5c:	08010f5e 	.word	0x08010f5e

08004c60 <pb_dec_string>:
{
 8004c60:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8004c64:	4688      	mov	r8, r1
    if (!pb_decode_varint32(stream, &size))
 8004c66:	a901      	add	r1, sp, #4
{
 8004c68:	4604      	mov	r4, r0
 8004c6a:	4616      	mov	r6, r2
    if (!pb_decode_varint32(stream, &size))
 8004c6c:	f7ff ffc4 	bl	8004bf8 <pb_decode_varint32>
 8004c70:	b198      	cbz	r0, 8004c9a <pb_dec_string+0x3a>
    alloc_size = size + 1;
 8004c72:	9d01      	ldr	r5, [sp, #4]
 8004c74:	2700      	movs	r7, #0
 8004c76:	1c6a      	adds	r2, r5, #1
 8004c78:	d208      	bcs.n	8004c8c <pb_dec_string+0x2c>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004c7a:	f898 3002 	ldrb.w	r3, [r8, #2]
 8004c7e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004c82:	2b80      	cmp	r3, #128	; 0x80
 8004c84:	d10c      	bne.n	8004ca0 <pb_dec_string+0x40>
        PB_RETURN_ERROR(stream, "no malloc support");
 8004c86:	68e3      	ldr	r3, [r4, #12]
 8004c88:	4a0c      	ldr	r2, [pc, #48]	; (8004cbc <pb_dec_string+0x5c>)
 8004c8a:	e001      	b.n	8004c90 <pb_dec_string+0x30>
        PB_RETURN_ERROR(stream, "size too large");
 8004c8c:	68e3      	ldr	r3, [r4, #12]
 8004c8e:	4a0c      	ldr	r2, [pc, #48]	; (8004cc0 <pb_dec_string+0x60>)
        PB_RETURN_ERROR(stream, "no malloc support");
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	bf08      	it	eq
 8004c94:	4613      	moveq	r3, r2
 8004c96:	4638      	mov	r0, r7
 8004c98:	60e3      	str	r3, [r4, #12]
}
 8004c9a:	b002      	add	sp, #8
 8004c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if (alloc_size > field->data_size)
 8004ca0:	f8b8 3007 	ldrh.w	r3, [r8, #7]
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d202      	bcs.n	8004cae <pb_dec_string+0x4e>
            PB_RETURN_ERROR(stream, "string overflow");
 8004ca8:	68e3      	ldr	r3, [r4, #12]
 8004caa:	4a06      	ldr	r2, [pc, #24]	; (8004cc4 <pb_dec_string+0x64>)
 8004cac:	e7f0      	b.n	8004c90 <pb_dec_string+0x30>
    status = pb_read(stream, (pb_byte_t*)dest, size);
 8004cae:	462a      	mov	r2, r5
 8004cb0:	4631      	mov	r1, r6
 8004cb2:	4620      	mov	r0, r4
 8004cb4:	f7ff ff64 	bl	8004b80 <pb_read>
    *((pb_byte_t*)dest + size) = 0;
 8004cb8:	5577      	strb	r7, [r6, r5]
    return status;
 8004cba:	e7ee      	b.n	8004c9a <pb_dec_string+0x3a>
 8004cbc:	08010f8f 	.word	0x08010f8f
 8004cc0:	08010f80 	.word	0x08010f80
 8004cc4:	08010fa1 	.word	0x08010fa1

08004cc8 <pb_dec_bytes>:
{
 8004cc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004cca:	460e      	mov	r6, r1
    if (!pb_decode_varint32(stream, &size))
 8004ccc:	a901      	add	r1, sp, #4
{
 8004cce:	4604      	mov	r4, r0
 8004cd0:	4615      	mov	r5, r2
    if (!pb_decode_varint32(stream, &size))
 8004cd2:	f7ff ff91 	bl	8004bf8 <pb_decode_varint32>
 8004cd6:	b190      	cbz	r0, 8004cfe <pb_dec_bytes+0x36>
    if (size > PB_SIZE_MAX)
 8004cd8:	9a01      	ldr	r2, [sp, #4]
 8004cda:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8004cde:	d302      	bcc.n	8004ce6 <pb_dec_bytes+0x1e>
            PB_RETURN_ERROR(stream, "bytes overflow");
 8004ce0:	68e3      	ldr	r3, [r4, #12]
 8004ce2:	4a0f      	ldr	r2, [pc, #60]	; (8004d20 <pb_dec_bytes+0x58>)
 8004ce4:	e007      	b.n	8004cf6 <pb_dec_bytes+0x2e>
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004ce6:	78b3      	ldrb	r3, [r6, #2]
    alloc_size = PB_BYTES_ARRAY_T_ALLOCSIZE(size);
 8004ce8:	1c91      	adds	r1, r2, #2
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8004cea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004cee:	2b80      	cmp	r3, #128	; 0x80
 8004cf0:	d108      	bne.n	8004d04 <pb_dec_bytes+0x3c>
        PB_RETURN_ERROR(stream, "no malloc support");
 8004cf2:	68e3      	ldr	r3, [r4, #12]
 8004cf4:	4a0b      	ldr	r2, [pc, #44]	; (8004d24 <pb_dec_bytes+0x5c>)
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	bf08      	it	eq
 8004cfa:	4613      	moveq	r3, r2
 8004cfc:	60e3      	str	r3, [r4, #12]
}
 8004cfe:	2000      	movs	r0, #0
 8004d00:	b002      	add	sp, #8
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
        if (alloc_size > field->data_size)
 8004d04:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8004d08:	428b      	cmp	r3, r1
 8004d0a:	d3e9      	bcc.n	8004ce0 <pb_dec_bytes+0x18>
    bdest->size = (pb_size_t)size;
 8004d0c:	4629      	mov	r1, r5
    return pb_read(stream, bdest->bytes, size);
 8004d0e:	4620      	mov	r0, r4
    bdest->size = (pb_size_t)size;
 8004d10:	f821 2b02 	strh.w	r2, [r1], #2
}
 8004d14:	b002      	add	sp, #8
 8004d16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    return pb_read(stream, bdest->bytes, size);
 8004d1a:	f7ff bf31 	b.w	8004b80 <pb_read>
 8004d1e:	bf00      	nop
 8004d20:	08010f4f 	.word	0x08010f4f
 8004d24:	08010f8f 	.word	0x08010f8f

08004d28 <pb_decode_varint>:
{
 8004d28:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    uint64_t result = 0;
 8004d2c:	2500      	movs	r5, #0
{
 8004d2e:	4606      	mov	r6, r0
 8004d30:	460f      	mov	r7, r1
    uint64_t result = 0;
 8004d32:	46a8      	mov	r8, r5
    uint_fast8_t bitpos = 0;
 8004d34:	462c      	mov	r4, r5
        if (!pb_readbyte(stream, &byte))
 8004d36:	f10d 0107 	add.w	r1, sp, #7
 8004d3a:	4630      	mov	r0, r6
 8004d3c:	f7ff feb2 	bl	8004aa4 <pb_readbyte>
 8004d40:	b320      	cbz	r0, 8004d8c <pb_decode_varint+0x64>
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8004d42:	f89d c007 	ldrb.w	ip, [sp, #7]
 8004d46:	f1a4 0320 	sub.w	r3, r4, #32
 8004d4a:	f1c4 0120 	rsb	r1, r4, #32
 8004d4e:	f00c 027f 	and.w	r2, ip, #127	; 0x7f
    } while (byte & 0x80);
 8004d52:	f01c 0f80 	tst.w	ip, #128	; 0x80
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8004d56:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5a:	fa22 f101 	lsr.w	r1, r2, r1
 8004d5e:	fa02 f204 	lsl.w	r2, r2, r4
        bitpos = (uint_fast8_t)(bitpos + 7);
 8004d62:	f104 0407 	add.w	r4, r4, #7
        result |= (uint64_t)(byte & 0x7F) << bitpos;
 8004d66:	ea43 0301 	orr.w	r3, r3, r1
 8004d6a:	ea45 0502 	orr.w	r5, r5, r2
 8004d6e:	ea43 0808 	orr.w	r8, r3, r8
    } while (byte & 0x80);
 8004d72:	d102      	bne.n	8004d7a <pb_decode_varint+0x52>
    *dest = result;
 8004d74:	e9c7 5800 	strd	r5, r8, [r7]
    return true;
 8004d78:	e008      	b.n	8004d8c <pb_decode_varint+0x64>
        if (bitpos >= 64)
 8004d7a:	2c46      	cmp	r4, #70	; 0x46
 8004d7c:	d1db      	bne.n	8004d36 <pb_decode_varint+0xe>
            PB_RETURN_ERROR(stream, "varint overflow");
 8004d7e:	68f3      	ldr	r3, [r6, #12]
 8004d80:	2000      	movs	r0, #0
 8004d82:	4a04      	ldr	r2, [pc, #16]	; (8004d94 <pb_decode_varint+0x6c>)
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	bf08      	it	eq
 8004d88:	4613      	moveq	r3, r2
 8004d8a:	60f3      	str	r3, [r6, #12]
}
 8004d8c:	b002      	add	sp, #8
 8004d8e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d92:	bf00      	nop
 8004d94:	08010f3f 	.word	0x08010f3f

08004d98 <pb_dec_uvarint>:
{
 8004d98:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004d9a:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 8004d9c:	4669      	mov	r1, sp
{
 8004d9e:	4604      	mov	r4, r0
 8004da0:	4615      	mov	r5, r2
    if (!pb_decode_varint(stream, &value))
 8004da2:	f7ff ffc1 	bl	8004d28 <pb_decode_varint>
 8004da6:	b138      	cbz	r0, 8004db8 <pb_dec_uvarint+0x20>
    if (field->data_size == sizeof(pb_uint64_t))
 8004da8:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8004dac:	2b08      	cmp	r3, #8
 8004dae:	d105      	bne.n	8004dbc <pb_dec_uvarint+0x24>
        clamped = *(pb_uint64_t*)dest = value;
 8004db0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004db4:	e9c5 2300 	strd	r2, r3, [r5]
}
 8004db8:	b002      	add	sp, #8
 8004dba:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(uint32_t))
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d10b      	bne.n	8004dd8 <pb_dec_uvarint+0x40>
        clamped = *(uint32_t*)dest = (uint32_t)value;
 8004dc0:	9b00      	ldr	r3, [sp, #0]
 8004dc2:	602b      	str	r3, [r5, #0]
 8004dc4:	2200      	movs	r2, #0
    if (clamped != value)
 8004dc6:	e9dd 5100 	ldrd	r5, r1, [sp]
 8004dca:	4291      	cmp	r1, r2
 8004dcc:	bf08      	it	eq
 8004dce:	429d      	cmpeq	r5, r3
 8004dd0:	d0f2      	beq.n	8004db8 <pb_dec_uvarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8004dd2:	68e3      	ldr	r3, [r4, #12]
 8004dd4:	4a0b      	ldr	r2, [pc, #44]	; (8004e04 <pb_dec_uvarint+0x6c>)
 8004dd6:	e00e      	b.n	8004df6 <pb_dec_uvarint+0x5e>
    else if (field->data_size == sizeof(uint_least16_t))
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d103      	bne.n	8004de4 <pb_dec_uvarint+0x4c>
        clamped = *(uint_least16_t*)dest = (uint_least16_t)value;
 8004ddc:	9b00      	ldr	r3, [sp, #0]
 8004dde:	802b      	strh	r3, [r5, #0]
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	e7ef      	b.n	8004dc4 <pb_dec_uvarint+0x2c>
    else if (field->data_size == sizeof(uint_least8_t))
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d104      	bne.n	8004df2 <pb_dec_uvarint+0x5a>
        clamped = *(uint_least8_t*)dest = (uint_least8_t)value;
 8004de8:	9b00      	ldr	r3, [sp, #0]
 8004dea:	702b      	strb	r3, [r5, #0]
 8004dec:	f003 03ff 	and.w	r3, r3, #255	; 0xff
 8004df0:	e7e8      	b.n	8004dc4 <pb_dec_uvarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8004df2:	68e3      	ldr	r3, [r4, #12]
 8004df4:	4a04      	ldr	r2, [pc, #16]	; (8004e08 <pb_dec_uvarint+0x70>)
        PB_RETURN_ERROR(stream, "integer too large");
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	bf08      	it	eq
 8004dfa:	4613      	moveq	r3, r2
 8004dfc:	2000      	movs	r0, #0
 8004dfe:	60e3      	str	r3, [r4, #12]
 8004e00:	e7da      	b.n	8004db8 <pb_dec_uvarint+0x20>
 8004e02:	bf00      	nop
 8004e04:	08010fc3 	.word	0x08010fc3
 8004e08:	08010fb1 	.word	0x08010fb1

08004e0c <pb_dec_varint>:
{
 8004e0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004e0e:	460e      	mov	r6, r1
    if (!pb_decode_varint(stream, &value))
 8004e10:	4669      	mov	r1, sp
{
 8004e12:	4605      	mov	r5, r0
 8004e14:	4614      	mov	r4, r2
    if (!pb_decode_varint(stream, &value))
 8004e16:	f7ff ff87 	bl	8004d28 <pb_decode_varint>
 8004e1a:	b138      	cbz	r0, 8004e2c <pb_dec_varint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 8004e1c:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8004e20:	2b08      	cmp	r3, #8
        svalue = (pb_int64_t)value;
 8004e22:	e9dd 2100 	ldrd	r2, r1, [sp]
    if (field->data_size == sizeof(pb_int64_t))
 8004e26:	d103      	bne.n	8004e30 <pb_dec_varint+0x24>
        clamped = *(pb_int64_t*)dest = svalue;
 8004e28:	e9c4 2100 	strd	r2, r1, [r4]
}
 8004e2c:	b002      	add	sp, #8
 8004e2e:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 8004e30:	2b04      	cmp	r3, #4
        svalue = (int32_t)value;
 8004e32:	ea4f 76e2 	mov.w	r6, r2, asr #31
    else if (field->data_size == sizeof(int32_t))
 8004e36:	d101      	bne.n	8004e3c <pb_dec_varint+0x30>
        clamped = *(int32_t*)dest = (int32_t)svalue;
 8004e38:	6022      	str	r2, [r4, #0]
    if (clamped != svalue)
 8004e3a:	e7f7      	b.n	8004e2c <pb_dec_varint+0x20>
    else if (field->data_size == sizeof(int_least16_t))
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d109      	bne.n	8004e54 <pb_dec_varint+0x48>
        clamped = *(int_least16_t*)dest = (int_least16_t)svalue;
 8004e40:	b213      	sxth	r3, r2
 8004e42:	8023      	strh	r3, [r4, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8004e44:	17d9      	asrs	r1, r3, #31
    if (clamped != svalue)
 8004e46:	42b1      	cmp	r1, r6
 8004e48:	bf08      	it	eq
 8004e4a:	4293      	cmpeq	r3, r2
 8004e4c:	d0ee      	beq.n	8004e2c <pb_dec_varint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 8004e4e:	68eb      	ldr	r3, [r5, #12]
 8004e50:	4a07      	ldr	r2, [pc, #28]	; (8004e70 <pb_dec_varint+0x64>)
 8004e52:	e006      	b.n	8004e62 <pb_dec_varint+0x56>
    else if (field->data_size == sizeof(int_least8_t))
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d102      	bne.n	8004e5e <pb_dec_varint+0x52>
        clamped = *(int_least8_t*)dest = (int_least8_t)svalue;
 8004e58:	b253      	sxtb	r3, r2
 8004e5a:	7023      	strb	r3, [r4, #0]
 8004e5c:	e7f2      	b.n	8004e44 <pb_dec_varint+0x38>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8004e5e:	68eb      	ldr	r3, [r5, #12]
 8004e60:	4a04      	ldr	r2, [pc, #16]	; (8004e74 <pb_dec_varint+0x68>)
        PB_RETURN_ERROR(stream, "integer too large");
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	bf08      	it	eq
 8004e66:	4613      	moveq	r3, r2
 8004e68:	2000      	movs	r0, #0
 8004e6a:	60eb      	str	r3, [r5, #12]
 8004e6c:	e7de      	b.n	8004e2c <pb_dec_varint+0x20>
 8004e6e:	bf00      	nop
 8004e70:	08010fc3 	.word	0x08010fc3
 8004e74:	08010fb1 	.word	0x08010fb1

08004e78 <pb_decode_tag>:
{
 8004e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e7a:	461d      	mov	r5, r3
    *eof = false;
 8004e7c:	2300      	movs	r3, #0
{
 8004e7e:	460e      	mov	r6, r1
 8004e80:	4617      	mov	r7, r2
    *eof = false;
 8004e82:	702b      	strb	r3, [r5, #0]
    *wire_type = (pb_wire_type_t) 0;
 8004e84:	700b      	strb	r3, [r1, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8004e86:	a901      	add	r1, sp, #4
    *tag = 0;
 8004e88:	6013      	str	r3, [r2, #0]
    if (!pb_decode_varint32_eof(stream, &temp, eof))
 8004e8a:	462a      	mov	r2, r5
 8004e8c:	f7ff fe2a 	bl	8004ae4 <pb_decode_varint32_eof>
 8004e90:	b120      	cbz	r0, 8004e9c <pb_decode_tag+0x24>
    if (temp == 0)
 8004e92:	9c01      	ldr	r4, [sp, #4]
 8004e94:	b924      	cbnz	r4, 8004ea0 <pb_decode_tag+0x28>
        *eof = true; /* Special feature: allow 0-terminated messages. */
 8004e96:	2301      	movs	r3, #1
        return false;
 8004e98:	4620      	mov	r0, r4
        *eof = true; /* Special feature: allow 0-terminated messages. */
 8004e9a:	702b      	strb	r3, [r5, #0]
}
 8004e9c:	b003      	add	sp, #12
 8004e9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    *tag = temp >> 3;
 8004ea0:	08e3      	lsrs	r3, r4, #3
    *wire_type = (pb_wire_type_t)(temp & 7);
 8004ea2:	f004 0407 	and.w	r4, r4, #7
    *tag = temp >> 3;
 8004ea6:	603b      	str	r3, [r7, #0]
    *wire_type = (pb_wire_type_t)(temp & 7);
 8004ea8:	7034      	strb	r4, [r6, #0]
    return true;
 8004eaa:	e7f7      	b.n	8004e9c <pb_decode_tag+0x24>

08004eac <pb_skip_field>:
{
 8004eac:	b513      	push	{r0, r1, r4, lr}
 8004eae:	4604      	mov	r4, r0
    switch (wire_type)
 8004eb0:	2905      	cmp	r1, #5
 8004eb2:	d821      	bhi.n	8004ef8 <pb_skip_field+0x4c>
 8004eb4:	e8df f001 	tbb	[pc, r1]
 8004eb8:	20170f03 	.word	0x20170f03
 8004ebc:	1e20      	.short	0x1e20
        if (!pb_read(stream, &byte, 1))
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	a901      	add	r1, sp, #4
 8004ec2:	4620      	mov	r0, r4
 8004ec4:	f7ff fe5c 	bl	8004b80 <pb_read>
 8004ec8:	b118      	cbz	r0, 8004ed2 <pb_skip_field+0x26>
    } while (byte & 0x80);
 8004eca:	f99d 3004 	ldrsb.w	r3, [sp, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	dbf5      	blt.n	8004ebe <pb_skip_field+0x12>
}
 8004ed2:	b002      	add	sp, #8
 8004ed4:	bd10      	pop	{r4, pc}
        case PB_WT_64BIT: return pb_read(stream, NULL, 8);
 8004ed6:	2208      	movs	r2, #8
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8004ed8:	2100      	movs	r1, #0
 8004eda:	4620      	mov	r0, r4
}
 8004edc:	b002      	add	sp, #8
 8004ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8004ee2:	f7ff be4d 	b.w	8004b80 <pb_read>
    if (!pb_decode_varint32(stream, &length))
 8004ee6:	a901      	add	r1, sp, #4
 8004ee8:	f7ff fe86 	bl	8004bf8 <pb_decode_varint32>
 8004eec:	2800      	cmp	r0, #0
 8004eee:	d0f0      	beq.n	8004ed2 <pb_skip_field+0x26>
    return pb_read(stream, NULL, length);
 8004ef0:	9a01      	ldr	r2, [sp, #4]
 8004ef2:	e7f1      	b.n	8004ed8 <pb_skip_field+0x2c>
        case PB_WT_32BIT: return pb_read(stream, NULL, 4);
 8004ef4:	2204      	movs	r2, #4
 8004ef6:	e7ef      	b.n	8004ed8 <pb_skip_field+0x2c>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 8004ef8:	68c3      	ldr	r3, [r0, #12]
 8004efa:	4a03      	ldr	r2, [pc, #12]	; (8004f08 <pb_skip_field+0x5c>)
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	bf08      	it	eq
 8004f00:	4613      	moveq	r3, r2
 8004f02:	60c3      	str	r3, [r0, #12]
 8004f04:	2000      	movs	r0, #0
 8004f06:	e7e4      	b.n	8004ed2 <pb_skip_field+0x26>
 8004f08:	08010fd5 	.word	0x08010fd5

08004f0c <pb_make_string_substream>:
{
 8004f0c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004f0e:	460d      	mov	r5, r1
    if (!pb_decode_varint32(stream, &size))
 8004f10:	a901      	add	r1, sp, #4
{
 8004f12:	4604      	mov	r4, r0
    if (!pb_decode_varint32(stream, &size))
 8004f14:	f7ff fe70 	bl	8004bf8 <pb_decode_varint32>
 8004f18:	4606      	mov	r6, r0
 8004f1a:	b168      	cbz	r0, 8004f38 <pb_make_string_substream+0x2c>
    *substream = *stream;
 8004f1c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8004f20:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
    if (substream->bytes_left < size)
 8004f24:	9901      	ldr	r1, [sp, #4]
 8004f26:	428a      	cmp	r2, r1
 8004f28:	d209      	bcs.n	8004f3e <pb_make_string_substream+0x32>
        PB_RETURN_ERROR(stream, "parent stream too short");
 8004f2a:	68e3      	ldr	r3, [r4, #12]
 8004f2c:	2600      	movs	r6, #0
 8004f2e:	4a06      	ldr	r2, [pc, #24]	; (8004f48 <pb_make_string_substream+0x3c>)
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	bf08      	it	eq
 8004f34:	4613      	moveq	r3, r2
 8004f36:	60e3      	str	r3, [r4, #12]
}
 8004f38:	4630      	mov	r0, r6
 8004f3a:	b002      	add	sp, #8
 8004f3c:	bd70      	pop	{r4, r5, r6, pc}
    substream->bytes_left = size;
 8004f3e:	60a9      	str	r1, [r5, #8]
    stream->bytes_left -= size;
 8004f40:	68a3      	ldr	r3, [r4, #8]
 8004f42:	1a5b      	subs	r3, r3, r1
 8004f44:	60a3      	str	r3, [r4, #8]
    return true;
 8004f46:	e7f7      	b.n	8004f38 <pb_make_string_substream+0x2c>
 8004f48:	08010fe7 	.word	0x08010fe7

08004f4c <pb_close_string_substream>:
    if (substream->bytes_left) {
 8004f4c:	688a      	ldr	r2, [r1, #8]
{
 8004f4e:	b538      	push	{r3, r4, r5, lr}
 8004f50:	4605      	mov	r5, r0
 8004f52:	460c      	mov	r4, r1
    if (substream->bytes_left) {
 8004f54:	b92a      	cbnz	r2, 8004f62 <pb_close_string_substream+0x16>
    stream->state = substream->state;
 8004f56:	6863      	ldr	r3, [r4, #4]
    return true;
 8004f58:	2001      	movs	r0, #1
    stream->state = substream->state;
 8004f5a:	606b      	str	r3, [r5, #4]
    stream->errmsg = substream->errmsg;
 8004f5c:	68e3      	ldr	r3, [r4, #12]
 8004f5e:	60eb      	str	r3, [r5, #12]
}
 8004f60:	bd38      	pop	{r3, r4, r5, pc}
        if (!pb_read(substream, NULL, substream->bytes_left))
 8004f62:	2100      	movs	r1, #0
 8004f64:	4620      	mov	r0, r4
 8004f66:	f7ff fe0b 	bl	8004b80 <pb_read>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d1f3      	bne.n	8004f56 <pb_close_string_substream+0xa>
 8004f6e:	e7f7      	b.n	8004f60 <pb_close_string_substream+0x14>

08004f70 <decode_field>:
{
 8004f70:	460b      	mov	r3, r1
    switch (PB_ATYPE(iter->pos->type))
 8004f72:	6851      	ldr	r1, [r2, #4]
{
 8004f74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004f78:	4616      	mov	r6, r2
    switch (PB_ATYPE(iter->pos->type))
 8004f7a:	788a      	ldrb	r2, [r1, #2]
{
 8004f7c:	b089      	sub	sp, #36	; 0x24
 8004f7e:	4605      	mov	r5, r0
    switch (PB_ATYPE(iter->pos->type))
 8004f80:	f002 04c0 	and.w	r4, r2, #192	; 0xc0
 8004f84:	2c40      	cmp	r4, #64	; 0x40
 8004f86:	f000 8083 	beq.w	8005090 <decode_field+0x120>
 8004f8a:	2c80      	cmp	r4, #128	; 0x80
 8004f8c:	d07d      	beq.n	800508a <decode_field+0x11a>
 8004f8e:	b964      	cbnz	r4, 8004faa <decode_field+0x3a>
    func = PB_DECODERS[PB_LTYPE(type)];
 8004f90:	f002 0c0f 	and.w	ip, r2, #15
 8004f94:	f002 0230 	and.w	r2, r2, #48	; 0x30
 8004f98:	4f6e      	ldr	r7, [pc, #440]	; (8005154 <decode_field+0x1e4>)
    switch (PB_HTYPE(type))
 8004f9a:	2a20      	cmp	r2, #32
    func = PB_DECODERS[PB_LTYPE(type)];
 8004f9c:	f857 702c 	ldr.w	r7, [r7, ip, lsl #2]
    switch (PB_HTYPE(type))
 8004fa0:	d02b      	beq.n	8004ffa <decode_field+0x8a>
 8004fa2:	d805      	bhi.n	8004fb0 <decode_field+0x40>
 8004fa4:	b1da      	cbz	r2, 8004fde <decode_field+0x6e>
 8004fa6:	2a10      	cmp	r2, #16
 8004fa8:	d01f      	beq.n	8004fea <decode_field+0x7a>
            PB_RETURN_ERROR(stream, "invalid field type");
 8004faa:	68eb      	ldr	r3, [r5, #12]
 8004fac:	4a6a      	ldr	r2, [pc, #424]	; (8005158 <decode_field+0x1e8>)
 8004fae:	e04c      	b.n	800504a <decode_field+0xda>
    switch (PB_HTYPE(type))
 8004fb0:	2a30      	cmp	r2, #48	; 0x30
 8004fb2:	d1fa      	bne.n	8004faa <decode_field+0x3a>
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8004fb4:	880a      	ldrh	r2, [r1, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8004fb6:	f1bc 0f07 	cmp.w	ip, #7
            *(pb_size_t*)iter->pSize = iter->pos->tag;
 8004fba:	6973      	ldr	r3, [r6, #20]
 8004fbc:	801a      	strh	r2, [r3, #0]
            if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8004fbe:	d10b      	bne.n	8004fd8 <decode_field+0x68>
                memset(iter->pData, 0, iter->pos->data_size);
 8004fc0:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	6930      	ldr	r0, [r6, #16]
 8004fc8:	f005 fad3 	bl	800a572 <memset>
                pb_message_set_to_defaults((const pb_field_t*)iter->pos->ptr, iter->pData);
 8004fcc:	6873      	ldr	r3, [r6, #4]
 8004fce:	6931      	ldr	r1, [r6, #16]
 8004fd0:	f8d3 000b 	ldr.w	r0, [r3, #11]
 8004fd4:	f7ff fd54 	bl	8004a80 <pb_message_set_to_defaults>
            return func(stream, iter->pos, iter->pData);
 8004fd8:	6932      	ldr	r2, [r6, #16]
 8004fda:	6871      	ldr	r1, [r6, #4]
 8004fdc:	e00b      	b.n	8004ff6 <decode_field+0x86>
            return func(stream, iter->pos, iter->pData);
 8004fde:	6932      	ldr	r2, [r6, #16]
            return func(stream, iter->pos, iter->pData);
 8004fe0:	463b      	mov	r3, r7
}
 8004fe2:	b009      	add	sp, #36	; 0x24
 8004fe4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
            return func(stream, iter->pos, iter->pData);
 8004fe8:	4718      	bx	r3
            if (iter->pSize != iter->pData)
 8004fea:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
 8004fee:	4293      	cmp	r3, r2
                *(bool*)iter->pSize = true;
 8004ff0:	bf1c      	itt	ne
 8004ff2:	2001      	movne	r0, #1
 8004ff4:	7018      	strbne	r0, [r3, #0]
            return func(stream, iter->pos, iter->pData);
 8004ff6:	4628      	mov	r0, r5
 8004ff8:	e7f2      	b.n	8004fe0 <decode_field+0x70>
            if (wire_type == PB_WT_STRING
 8004ffa:	2b02      	cmp	r3, #2
            if (iter->pSize != iter->pData)
 8004ffc:	f8d6 8014 	ldr.w	r8, [r6, #20]
            if (wire_type == PB_WT_STRING
 8005000:	d134      	bne.n	800506c <decode_field+0xfc>
                && PB_LTYPE(type) <= PB_LTYPE_LAST_PACKABLE)
 8005002:	f1bc 0f04 	cmp.w	ip, #4
 8005006:	d831      	bhi.n	800506c <decode_field+0xfc>
                if (!pb_make_string_substream(stream, &substream))
 8005008:	a904      	add	r1, sp, #16
 800500a:	f7ff ff7f 	bl	8004f0c <pb_make_string_substream>
 800500e:	4604      	mov	r4, r0
 8005010:	b970      	cbnz	r0, 8005030 <decode_field+0xc0>
            PB_RETURN_ERROR(stream, "invalid field type");
 8005012:	2400      	movs	r4, #0
 8005014:	e026      	b.n	8005064 <decode_field+0xf4>
                    void *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8005016:	f8b1 0007 	ldrh.w	r0, [r1, #7]
 800501a:	6932      	ldr	r2, [r6, #16]
                    if (!func(&substream, iter->pos, pItem))
 800501c:	fb03 2200 	mla	r2, r3, r0, r2
 8005020:	a804      	add	r0, sp, #16
 8005022:	47b8      	blx	r7
 8005024:	b1b0      	cbz	r0, 8005054 <decode_field+0xe4>
                    (*size)++;
 8005026:	f8b8 3000 	ldrh.w	r3, [r8]
 800502a:	3301      	adds	r3, #1
 800502c:	f8a8 3000 	strh.w	r3, [r8]
                while (substream.bytes_left > 0 && *size < iter->pos->array_size)
 8005030:	9b06      	ldr	r3, [sp, #24]
 8005032:	b133      	cbz	r3, 8005042 <decode_field+0xd2>
 8005034:	6871      	ldr	r1, [r6, #4]
 8005036:	f8b8 3000 	ldrh.w	r3, [r8]
 800503a:	f8b1 2009 	ldrh.w	r2, [r1, #9]
 800503e:	429a      	cmp	r2, r3
 8005040:	d8e9      	bhi.n	8005016 <decode_field+0xa6>
                if (substream.bytes_left != 0)
 8005042:	9b06      	ldr	r3, [sp, #24]
 8005044:	b143      	cbz	r3, 8005058 <decode_field+0xe8>
                    PB_RETURN_ERROR(stream, "array overflow");
 8005046:	68eb      	ldr	r3, [r5, #12]
 8005048:	4a44      	ldr	r2, [pc, #272]	; (800515c <decode_field+0x1ec>)
            PB_RETURN_ERROR(stream, "invalid field type");
 800504a:	2b00      	cmp	r3, #0
 800504c:	bf08      	it	eq
 800504e:	4613      	moveq	r3, r2
 8005050:	60eb      	str	r3, [r5, #12]
 8005052:	e7de      	b.n	8005012 <decode_field+0xa2>
                        status = false;
 8005054:	4604      	mov	r4, r0
 8005056:	e7f4      	b.n	8005042 <decode_field+0xd2>
                if (!pb_close_string_substream(stream, &substream))
 8005058:	a904      	add	r1, sp, #16
 800505a:	4628      	mov	r0, r5
 800505c:	f7ff ff76 	bl	8004f4c <pb_close_string_substream>
 8005060:	2800      	cmp	r0, #0
 8005062:	d0d6      	beq.n	8005012 <decode_field+0xa2>
}
 8005064:	4620      	mov	r0, r4
 8005066:	b009      	add	sp, #36	; 0x24
 8005068:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 800506c:	f8b8 3000 	ldrh.w	r3, [r8]
 8005070:	6932      	ldr	r2, [r6, #16]
                if ((*size)++ >= iter->pos->array_size)
 8005072:	1c5c      	adds	r4, r3, #1
                char *pItem = (char*)iter->pData + iter->pos->data_size * (*size);
 8005074:	f8b1 0007 	ldrh.w	r0, [r1, #7]
                if ((*size)++ >= iter->pos->array_size)
 8005078:	f8a8 4000 	strh.w	r4, [r8]
 800507c:	f8b1 4009 	ldrh.w	r4, [r1, #9]
 8005080:	429c      	cmp	r4, r3
 8005082:	d9e0      	bls.n	8005046 <decode_field+0xd6>
                return func(stream, iter->pos, pItem);
 8005084:	fb03 2200 	mla	r2, r3, r0, r2
 8005088:	e7b5      	b.n	8004ff6 <decode_field+0x86>
    PB_RETURN_ERROR(stream, "no malloc support");
 800508a:	68c3      	ldr	r3, [r0, #12]
 800508c:	4a34      	ldr	r2, [pc, #208]	; (8005160 <decode_field+0x1f0>)
 800508e:	e7dc      	b.n	800504a <decode_field+0xda>
    pb_callback_t *pCallback = (pb_callback_t*)iter->pData;
 8005090:	6937      	ldr	r7, [r6, #16]
    if (pCallback == NULL || pCallback->funcs.decode == NULL)
 8005092:	b10f      	cbz	r7, 8005098 <decode_field+0x128>
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	b932      	cbnz	r2, 80050a6 <decode_field+0x136>
        return pb_skip_field(stream, wire_type);
 8005098:	4619      	mov	r1, r3
 800509a:	4628      	mov	r0, r5
}
 800509c:	b009      	add	sp, #36	; 0x24
 800509e:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        return pb_skip_field(stream, wire_type);
 80050a2:	f7ff bf03 	b.w	8004eac <pb_skip_field>
    if (wire_type == PB_WT_STRING)
 80050a6:	2b02      	cmp	r3, #2
    void **arg = &(pCallback->arg);
 80050a8:	f107 0804 	add.w	r8, r7, #4
    if (wire_type == PB_WT_STRING)
 80050ac:	d11c      	bne.n	80050e8 <decode_field+0x178>
        if (!pb_make_string_substream(stream, &substream))
 80050ae:	a904      	add	r1, sp, #16
 80050b0:	f7ff ff2c 	bl	8004f0c <pb_make_string_substream>
 80050b4:	4604      	mov	r4, r0
 80050b6:	2800      	cmp	r0, #0
 80050b8:	d0d4      	beq.n	8005064 <decode_field+0xf4>
            if (!pCallback->funcs.decode(&substream, iter->pos, arg))
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	4642      	mov	r2, r8
 80050be:	6871      	ldr	r1, [r6, #4]
 80050c0:	a804      	add	r0, sp, #16
 80050c2:	4798      	blx	r3
 80050c4:	4604      	mov	r4, r0
 80050c6:	b930      	cbnz	r0, 80050d6 <decode_field+0x166>
                PB_RETURN_ERROR(stream, "callback failed");
 80050c8:	68eb      	ldr	r3, [r5, #12]
 80050ca:	4a26      	ldr	r2, [pc, #152]	; (8005164 <decode_field+0x1f4>)
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	bf08      	it	eq
 80050d0:	4613      	moveq	r3, r2
 80050d2:	60eb      	str	r3, [r5, #12]
 80050d4:	e7c6      	b.n	8005064 <decode_field+0xf4>
        } while (substream.bytes_left);
 80050d6:	9b06      	ldr	r3, [sp, #24]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d1ee      	bne.n	80050ba <decode_field+0x14a>
        if (!pb_close_string_substream(stream, &substream))
 80050dc:	a904      	add	r1, sp, #16
 80050de:	4628      	mov	r0, r5
 80050e0:	f7ff ff34 	bl	8004f4c <pb_close_string_substream>
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 80050e4:	4604      	mov	r4, r0
 80050e6:	e7bd      	b.n	8005064 <decode_field+0xf4>
    switch (wire_type)
 80050e8:	2b01      	cmp	r3, #1
 80050ea:	d020      	beq.n	800512e <decode_field+0x1be>
 80050ec:	2b05      	cmp	r3, #5
 80050ee:	d026      	beq.n	800513e <decode_field+0x1ce>
 80050f0:	bb63      	cbnz	r3, 800514c <decode_field+0x1dc>
 80050f2:	461c      	mov	r4, r3
 80050f4:	f10d 0904 	add.w	r9, sp, #4
                (*size)++;
 80050f8:	3401      	adds	r4, #1
                if (*size > max_size) return false;
 80050fa:	2c0b      	cmp	r4, #11
 80050fc:	d089      	beq.n	8005012 <decode_field+0xa2>
                if (!pb_read(stream, buf, 1)) return false;
 80050fe:	2201      	movs	r2, #1
 8005100:	4649      	mov	r1, r9
 8005102:	4628      	mov	r0, r5
 8005104:	f7ff fd3c 	bl	8004b80 <pb_read>
 8005108:	2800      	cmp	r0, #0
 800510a:	d082      	beq.n	8005012 <decode_field+0xa2>
            } while (*buf++ & 0x80);
 800510c:	f919 3b01 	ldrsb.w	r3, [r9], #1
 8005110:	2b00      	cmp	r3, #0
 8005112:	dbf1      	blt.n	80050f8 <decode_field+0x188>
        substream = pb_istream_from_buffer(buffer, size);
 8005114:	4b14      	ldr	r3, [pc, #80]	; (8005168 <decode_field+0x1f8>)
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8005116:	4642      	mov	r2, r8
 8005118:	6871      	ldr	r1, [r6, #4]
 800511a:	a804      	add	r0, sp, #16
        substream = pb_istream_from_buffer(buffer, size);
 800511c:	9304      	str	r3, [sp, #16]
 800511e:	ab01      	add	r3, sp, #4
 8005120:	e9cd 3405 	strd	r3, r4, [sp, #20]
 8005124:	2300      	movs	r3, #0
 8005126:	9307      	str	r3, [sp, #28]
        return pCallback->funcs.decode(&substream, iter->pos, arg);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	4798      	blx	r3
 800512c:	e7da      	b.n	80050e4 <decode_field+0x174>
            *size = 8;
 800512e:	2408      	movs	r4, #8
            return pb_read(stream, buf, 8);
 8005130:	2208      	movs	r2, #8
 8005132:	a901      	add	r1, sp, #4
 8005134:	f7ff fd24 	bl	8004b80 <pb_read>
        if (!read_raw_value(stream, wire_type, buffer, &size))
 8005138:	2800      	cmp	r0, #0
 800513a:	d1eb      	bne.n	8005114 <decode_field+0x1a4>
 800513c:	e769      	b.n	8005012 <decode_field+0xa2>
            return pb_read(stream, buf, 4);
 800513e:	2204      	movs	r2, #4
            *size = 4;
 8005140:	2404      	movs	r4, #4
            return pb_read(stream, buf, 4);
 8005142:	eb0d 0102 	add.w	r1, sp, r2
 8005146:	f7ff fd1b 	bl	8004b80 <pb_read>
 800514a:	e7f5      	b.n	8005138 <decode_field+0x1c8>
        default: PB_RETURN_ERROR(stream, "invalid wire_type");
 800514c:	68c3      	ldr	r3, [r0, #12]
 800514e:	4a07      	ldr	r2, [pc, #28]	; (800516c <decode_field+0x1fc>)
 8005150:	e77b      	b.n	800504a <decode_field+0xda>
 8005152:	bf00      	nop
 8005154:	08011084 	.word	0x08011084
 8005158:	0801100e 	.word	0x0801100e
 800515c:	08010fff 	.word	0x08010fff
 8005160:	08010f8f 	.word	0x08010f8f
 8005164:	08011021 	.word	0x08011021
 8005168:	080049ad 	.word	0x080049ad
 800516c:	08010fd5 	.word	0x08010fd5

08005170 <pb_decode_noinit>:
{
 8005170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8005174:	2500      	movs	r5, #0
{
 8005176:	b091      	sub	sp, #68	; 0x44
 8005178:	4604      	mov	r4, r0
    uint32_t extension_range_start = 0;
 800517a:	46a8      	mov	r8, r5
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 800517c:	a804      	add	r0, sp, #16
    pb_size_t fixed_count_size = 0;
 800517e:	f8ad 5002 	strh.w	r5, [sp, #2]
    uint32_t fields_seen[(PB_MAX_REQUIRED_FIELDS + 31) / 32] = {0, 0};
 8005182:	e9cd 5502 	strd	r5, r5, [sp, #8]
    (void)pb_field_iter_begin(&iter, fields, dest_struct);
 8005186:	f7ff fba7 	bl	80048d8 <pb_field_iter_begin>
    while (stream->bytes_left)
 800518a:	68a3      	ldr	r3, [r4, #8]
 800518c:	b9f3      	cbnz	r3, 80051cc <pb_decode_noinit+0x5c>
    if (fixed_count_field != NULL &&
 800518e:	b135      	cbz	r5, 800519e <pb_decode_noinit+0x2e>
 8005190:	f8b5 2009 	ldrh.w	r2, [r5, #9]
 8005194:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005198:	429a      	cmp	r2, r3
 800519a:	f040 8093 	bne.w	80052c4 <pb_decode_noinit+0x154>
        } while (pb_field_iter_next(&iter));
 800519e:	a804      	add	r0, sp, #16
            last_type = iter.pos->type;
 80051a0:	e9dd 3505 	ldrd	r3, r5, [sp, #20]
 80051a4:	789e      	ldrb	r6, [r3, #2]
        } while (pb_field_iter_next(&iter));
 80051a6:	f7ff fba9 	bl	80048fc <pb_field_iter_next>
 80051aa:	2800      	cmp	r0, #0
 80051ac:	d1f7      	bne.n	800519e <pb_decode_noinit+0x2e>
        if (PB_HTYPE(last_type) == PB_HTYPE_REQUIRED && iter.pos->tag != 0)
 80051ae:	f016 0f30 	tst.w	r6, #48	; 0x30
 80051b2:	d103      	bne.n	80051bc <pb_decode_noinit+0x4c>
 80051b4:	9b05      	ldr	r3, [sp, #20]
 80051b6:	881b      	ldrh	r3, [r3, #0]
 80051b8:	b103      	cbz	r3, 80051bc <pb_decode_noinit+0x4c>
            req_field_count++;
 80051ba:	3501      	adds	r5, #1
        if (req_field_count > PB_MAX_REQUIRED_FIELDS)
 80051bc:	2d40      	cmp	r5, #64	; 0x40
 80051be:	f200 80c9 	bhi.w	8005354 <pb_decode_noinit+0x1e4>
        if (req_field_count > 0)
 80051c2:	2d00      	cmp	r5, #0
 80051c4:	f040 80c7 	bne.w	8005356 <pb_decode_noinit+0x1e6>
    return true;
 80051c8:	2001      	movs	r0, #1
 80051ca:	e00c      	b.n	80051e6 <pb_decode_noinit+0x76>
        if (!pb_decode_tag(stream, &wire_type, &tag, &eof))
 80051cc:	f10d 0301 	add.w	r3, sp, #1
 80051d0:	aa01      	add	r2, sp, #4
 80051d2:	4669      	mov	r1, sp
 80051d4:	4620      	mov	r0, r4
 80051d6:	f7ff fe4f 	bl	8004e78 <pb_decode_tag>
 80051da:	b938      	cbnz	r0, 80051ec <pb_decode_noinit+0x7c>
            if (eof)
 80051dc:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d1d4      	bne.n	800518e <pb_decode_noinit+0x1e>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80051e4:	2000      	movs	r0, #0
}
 80051e6:	b011      	add	sp, #68	; 0x44
 80051e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        if (!pb_field_iter_find(&iter, tag))
 80051ec:	9f01      	ldr	r7, [sp, #4]
 80051ee:	a804      	add	r0, sp, #16
 80051f0:	4639      	mov	r1, r7
 80051f2:	f7ff fbc4 	bl	800497e <pb_field_iter_find>
 80051f6:	2800      	cmp	r0, #0
 80051f8:	d151      	bne.n	800529e <pb_decode_noinit+0x12e>
            if (tag >= extension_range_start)
 80051fa:	4547      	cmp	r7, r8
 80051fc:	f0c0 80b2 	bcc.w	8005364 <pb_decode_noinit+0x1f4>
    const pb_field_t *start = iter->pos;
 8005200:	9e05      	ldr	r6, [sp, #20]
        if (PB_LTYPE(iter->pos->type) == PB_LTYPE_EXTENSION)
 8005202:	9a05      	ldr	r2, [sp, #20]
 8005204:	7893      	ldrb	r3, [r2, #2]
 8005206:	f003 030f 	and.w	r3, r3, #15
 800520a:	2b08      	cmp	r3, #8
 800520c:	f000 80b3 	beq.w	8005376 <pb_decode_noinit+0x206>
        (void)pb_field_iter_next(iter);
 8005210:	a804      	add	r0, sp, #16
 8005212:	f7ff fb73 	bl	80048fc <pb_field_iter_next>
    } while (iter->pos != start);
 8005216:	9b05      	ldr	r3, [sp, #20]
 8005218:	429e      	cmp	r6, r3
 800521a:	d1f2      	bne.n	8005202 <pb_decode_noinit+0x92>
                    extension_range_start = (uint32_t)-1;
 800521c:	f04f 38ff 	mov.w	r8, #4294967295
                if (tag >= extension_range_start)
 8005220:	4547      	cmp	r7, r8
                    if (!decode_extension(stream, tag, wire_type, &iter))
 8005222:	f89d b000 	ldrb.w	fp, [sp]
                if (tag >= extension_range_start)
 8005226:	f0c0 809d 	bcc.w	8005364 <pb_decode_noinit+0x1f4>
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 800522a:	9a08      	ldr	r2, [sp, #32]
                    size_t pos = stream->bytes_left;
 800522c:	f8d4 9008 	ldr.w	r9, [r4, #8]
    pb_extension_t *extension = *(pb_extension_t* const *)iter->pData;
 8005230:	6816      	ldr	r6, [r2, #0]
    while (extension != NULL && pos == stream->bytes_left)
 8005232:	68a2      	ldr	r2, [r4, #8]
 8005234:	2e00      	cmp	r6, #0
 8005236:	f000 8092 	beq.w	800535e <pb_decode_noinit+0x1ee>
 800523a:	4591      	cmp	r9, r2
 800523c:	d1a5      	bne.n	800518a <pb_decode_noinit+0x1a>
        if (extension->type->decode)
 800523e:	6832      	ldr	r2, [r6, #0]
 8005240:	f8d2 a000 	ldr.w	sl, [r2]
 8005244:	f1ba 0f00 	cmp.w	sl, #0
 8005248:	d008      	beq.n	800525c <pb_decode_noinit+0xec>
            status = extension->type->decode(stream, extension, tag, wire_type);
 800524a:	465b      	mov	r3, fp
 800524c:	463a      	mov	r2, r7
 800524e:	4631      	mov	r1, r6
 8005250:	4620      	mov	r0, r4
 8005252:	47d0      	blx	sl
        if (!status)
 8005254:	2800      	cmp	r0, #0
 8005256:	d0c5      	beq.n	80051e4 <pb_decode_noinit+0x74>
        extension = extension->next;
 8005258:	68b6      	ldr	r6, [r6, #8]
 800525a:	e7ea      	b.n	8005232 <pb_decode_noinit+0xc2>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 800525c:	f8d2 a008 	ldr.w	sl, [r2, #8]
    if (field->tag != tag)
 8005260:	f8ba 2000 	ldrh.w	r2, [sl]
 8005264:	4297      	cmp	r7, r2
 8005266:	d1f7      	bne.n	8005258 <pb_decode_noinit+0xe8>
    (void)pb_field_iter_begin(iter, field, extension->dest);
 8005268:	6872      	ldr	r2, [r6, #4]
 800526a:	4651      	mov	r1, sl
 800526c:	a80a      	add	r0, sp, #40	; 0x28
 800526e:	f7ff fb33 	bl	80048d8 <pb_field_iter_begin>
    iter->pData = extension->dest;
 8005272:	6872      	ldr	r2, [r6, #4]
    extension->found = true;
 8005274:	f04f 0301 	mov.w	r3, #1
    return decode_field(stream, wire_type, &iter);
 8005278:	4659      	mov	r1, fp
    iter->pData = extension->dest;
 800527a:	920e      	str	r2, [sp, #56]	; 0x38
    iter->pSize = &extension->found;
 800527c:	f106 020c 	add.w	r2, r6, #12
    return decode_field(stream, wire_type, &iter);
 8005280:	4620      	mov	r0, r4
    iter->pSize = &extension->found;
 8005282:	920f      	str	r2, [sp, #60]	; 0x3c
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005284:	f89a 2002 	ldrb.w	r2, [sl, #2]
 8005288:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
 800528c:	2a80      	cmp	r2, #128	; 0x80
        iter->pData = &extension->dest;
 800528e:	bf04      	itt	eq
 8005290:	1d32      	addeq	r2, r6, #4
 8005292:	920e      	streq	r2, [sp, #56]	; 0x38
    return decode_field(stream, wire_type, &iter);
 8005294:	aa0a      	add	r2, sp, #40	; 0x28
    extension->found = true;
 8005296:	7333      	strb	r3, [r6, #12]
    return decode_field(stream, wire_type, &iter);
 8005298:	f7ff fe6a 	bl	8004f70 <decode_field>
 800529c:	e7da      	b.n	8005254 <pb_decode_noinit+0xe4>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REPEATED
 800529e:	9a05      	ldr	r2, [sp, #20]
 80052a0:	7893      	ldrb	r3, [r2, #2]
 80052a2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d121      	bne.n	80052ee <pb_decode_noinit+0x17e>
            && iter.pSize == iter.pData)
 80052aa:	e9dd 3108 	ldrd	r3, r1, [sp, #32]
 80052ae:	4299      	cmp	r1, r3
 80052b0:	d116      	bne.n	80052e0 <pb_decode_noinit+0x170>
            if (fixed_count_field != iter.pos) {
 80052b2:	42aa      	cmp	r2, r5
 80052b4:	d010      	beq.n	80052d8 <pb_decode_noinit+0x168>
                if (fixed_count_field != NULL &&
 80052b6:	b165      	cbz	r5, 80052d2 <pb_decode_noinit+0x162>
 80052b8:	f8b5 1009 	ldrh.w	r1, [r5, #9]
 80052bc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80052c0:	4299      	cmp	r1, r3
 80052c2:	d006      	beq.n	80052d2 <pb_decode_noinit+0x162>
        PB_RETURN_ERROR(stream, "wrong size for fixed count field");
 80052c4:	68e3      	ldr	r3, [r4, #12]
 80052c6:	4a2d      	ldr	r2, [pc, #180]	; (800537c <pb_decode_noinit+0x20c>)
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	bf08      	it	eq
 80052cc:	4613      	moveq	r3, r2
 80052ce:	60e3      	str	r3, [r4, #12]
 80052d0:	e788      	b.n	80051e4 <pb_decode_noinit+0x74>
                fixed_count_size = 0;
 80052d2:	2300      	movs	r3, #0
 80052d4:	f8ad 3002 	strh.w	r3, [sp, #2]
            iter.pSize = &fixed_count_size;
 80052d8:	f10d 0302 	add.w	r3, sp, #2
 80052dc:	4615      	mov	r5, r2
 80052de:	9309      	str	r3, [sp, #36]	; 0x24
        if (!decode_field(stream, wire_type, &iter))
 80052e0:	aa04      	add	r2, sp, #16
 80052e2:	f89d 1000 	ldrb.w	r1, [sp]
 80052e6:	4620      	mov	r0, r4
 80052e8:	f7ff fe42 	bl	8004f70 <decode_field>
 80052ec:	e03f      	b.n	800536e <pb_decode_noinit+0x1fe>
        if (PB_HTYPE(iter.pos->type) == PB_HTYPE_REQUIRED
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d1f6      	bne.n	80052e0 <pb_decode_noinit+0x170>
            && iter.required_field_index < PB_MAX_REQUIRED_FIELDS)
 80052f2:	9a06      	ldr	r2, [sp, #24]
 80052f4:	2a3f      	cmp	r2, #63	; 0x3f
 80052f6:	d8f3      	bhi.n	80052e0 <pb_decode_noinit+0x170>
            fields_seen[iter.required_field_index >> 5] |= tmp;
 80052f8:	0951      	lsrs	r1, r2, #5
 80052fa:	ab10      	add	r3, sp, #64	; 0x40
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 80052fc:	f002 021f 	and.w	r2, r2, #31
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8005300:	eb03 0181 	add.w	r1, r3, r1, lsl #2
            uint32_t tmp = ((uint32_t)1 << (iter.required_field_index & 31));
 8005304:	2301      	movs	r3, #1
 8005306:	4093      	lsls	r3, r2
            fields_seen[iter.required_field_index >> 5] |= tmp;
 8005308:	f851 2c38 	ldr.w	r2, [r1, #-56]
 800530c:	4313      	orrs	r3, r2
 800530e:	f841 3c38 	str.w	r3, [r1, #-56]
 8005312:	e7e5      	b.n	80052e0 <pb_decode_noinit+0x170>
                if (fields_seen[i] != allbits)
 8005314:	f851 6b04 	ldr.w	r6, [r1], #4
 8005318:	3601      	adds	r6, #1
 800531a:	d006      	beq.n	800532a <pb_decode_noinit+0x1ba>
                    PB_RETURN_ERROR(stream, "missing required field");
 800531c:	68e3      	ldr	r3, [r4, #12]
 800531e:	4a18      	ldr	r2, [pc, #96]	; (8005380 <pb_decode_noinit+0x210>)
 8005320:	2b00      	cmp	r3, #0
 8005322:	bf08      	it	eq
 8005324:	4613      	moveq	r3, r2
 8005326:	60e3      	str	r3, [r4, #12]
 8005328:	e75d      	b.n	80051e6 <pb_decode_noinit+0x76>
            for (i = 0; i < (req_field_count >> 5); i++)
 800532a:	3201      	adds	r2, #1
 800532c:	4293      	cmp	r3, r2
 800532e:	d1f1      	bne.n	8005314 <pb_decode_noinit+0x1a4>
            if ((req_field_count & 31) != 0)
 8005330:	f015 051f 	ands.w	r5, r5, #31
 8005334:	f43f af48 	beq.w	80051c8 <pb_decode_noinit+0x58>
                if (fields_seen[req_field_count >> 5] !=
 8005338:	aa10      	add	r2, sp, #64	; 0x40
                    (allbits >> (32 - (req_field_count & 31))))
 800533a:	f1c5 0520 	rsb	r5, r5, #32
                if (fields_seen[req_field_count >> 5] !=
 800533e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
                    (allbits >> (32 - (req_field_count & 31))))
 8005342:	f04f 32ff 	mov.w	r2, #4294967295
                if (fields_seen[req_field_count >> 5] !=
 8005346:	f853 3c38 	ldr.w	r3, [r3, #-56]
                    (allbits >> (32 - (req_field_count & 31))))
 800534a:	40ea      	lsrs	r2, r5
                if (fields_seen[req_field_count >> 5] !=
 800534c:	4293      	cmp	r3, r2
 800534e:	f43f af3b 	beq.w	80051c8 <pb_decode_noinit+0x58>
 8005352:	e7e3      	b.n	800531c <pb_decode_noinit+0x1ac>
            req_field_count = PB_MAX_REQUIRED_FIELDS;
 8005354:	2540      	movs	r5, #64	; 0x40
            for (i = 0; i < (req_field_count >> 5); i++)
 8005356:	096b      	lsrs	r3, r5, #5
 8005358:	a902      	add	r1, sp, #8
 800535a:	2200      	movs	r2, #0
 800535c:	e7e6      	b.n	800532c <pb_decode_noinit+0x1bc>
                    if (pos != stream->bytes_left)
 800535e:	4591      	cmp	r9, r2
 8005360:	f47f af13 	bne.w	800518a <pb_decode_noinit+0x1a>
            if (!pb_skip_field(stream, wire_type))
 8005364:	f89d 1000 	ldrb.w	r1, [sp]
 8005368:	4620      	mov	r0, r4
 800536a:	f7ff fd9f 	bl	8004eac <pb_skip_field>
        if (!decode_field(stream, wire_type, &iter))
 800536e:	2800      	cmp	r0, #0
 8005370:	f47f af0b 	bne.w	800518a <pb_decode_noinit+0x1a>
 8005374:	e736      	b.n	80051e4 <pb_decode_noinit+0x74>
                    extension_range_start = iter.pos->tag;
 8005376:	f8b2 8000 	ldrh.w	r8, [r2]
 800537a:	e751      	b.n	8005220 <pb_decode_noinit+0xb0>
 800537c:	08011031 	.word	0x08011031
 8005380:	08011052 	.word	0x08011052

08005384 <pb_decode>:
{
 8005384:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005386:	460c      	mov	r4, r1
 8005388:	4605      	mov	r5, r0
    pb_message_set_to_defaults(fields, dest_struct);
 800538a:	4611      	mov	r1, r2
 800538c:	9201      	str	r2, [sp, #4]
 800538e:	4620      	mov	r0, r4
 8005390:	f7ff fb76 	bl	8004a80 <pb_message_set_to_defaults>
    status = pb_decode_noinit(stream, fields, dest_struct);
 8005394:	9a01      	ldr	r2, [sp, #4]
 8005396:	4621      	mov	r1, r4
 8005398:	4628      	mov	r0, r5
}
 800539a:	b003      	add	sp, #12
 800539c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    status = pb_decode_noinit(stream, fields, dest_struct);
 80053a0:	f7ff bee6 	b.w	8005170 <pb_decode_noinit>

080053a4 <pb_dec_submessage>:
{
 80053a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053a6:	b087      	sub	sp, #28
 80053a8:	460e      	mov	r6, r1
 80053aa:	4605      	mov	r5, r0
 80053ac:	9201      	str	r2, [sp, #4]
    const pb_field_t* submsg_fields = (const pb_field_t*)field->ptr;
 80053ae:	f8d1 700b 	ldr.w	r7, [r1, #11]
    if (!pb_make_string_substream(stream, &substream))
 80053b2:	a902      	add	r1, sp, #8
 80053b4:	f7ff fdaa 	bl	8004f0c <pb_make_string_substream>
 80053b8:	b1e0      	cbz	r0, 80053f4 <pb_dec_submessage+0x50>
    if (field->ptr == NULL)
 80053ba:	f8d6 400b 	ldr.w	r4, [r6, #11]
 80053be:	9a01      	ldr	r2, [sp, #4]
 80053c0:	b944      	cbnz	r4, 80053d4 <pb_dec_submessage+0x30>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 80053c2:	68eb      	ldr	r3, [r5, #12]
 80053c4:	4a0e      	ldr	r2, [pc, #56]	; (8005400 <pb_dec_submessage+0x5c>)
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	bf08      	it	eq
 80053ca:	4613      	moveq	r3, r2
 80053cc:	60eb      	str	r3, [r5, #12]
}
 80053ce:	4620      	mov	r0, r4
 80053d0:	b007      	add	sp, #28
 80053d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 80053d4:	78b3      	ldrb	r3, [r6, #2]
        status = pb_decode(&substream, submsg_fields, dest);
 80053d6:	4639      	mov	r1, r7
 80053d8:	a802      	add	r0, sp, #8
    if (PB_HTYPE(field->type) == PB_HTYPE_REPEATED)
 80053da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80053de:	2b20      	cmp	r3, #32
 80053e0:	d10a      	bne.n	80053f8 <pb_dec_submessage+0x54>
        status = pb_decode(&substream, submsg_fields, dest);
 80053e2:	f7ff ffcf 	bl	8005384 <pb_decode>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 80053e6:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 80053e8:	a902      	add	r1, sp, #8
 80053ea:	4628      	mov	r0, r5
 80053ec:	f7ff fdae 	bl	8004f4c <pb_close_string_substream>
 80053f0:	2800      	cmp	r0, #0
 80053f2:	d1ec      	bne.n	80053ce <pb_dec_submessage+0x2a>
        return false;
 80053f4:	2400      	movs	r4, #0
 80053f6:	e7ea      	b.n	80053ce <pb_dec_submessage+0x2a>
        status = pb_decode_noinit(&substream, submsg_fields, dest);
 80053f8:	f7ff feba 	bl	8005170 <pb_decode_noinit>
 80053fc:	e7f3      	b.n	80053e6 <pb_dec_submessage+0x42>
 80053fe:	bf00      	nop
 8005400:	08011069 	.word	0x08011069

08005404 <pb_decode_delimited>:
{
 8005404:	b530      	push	{r4, r5, lr}
 8005406:	b087      	sub	sp, #28
 8005408:	460c      	mov	r4, r1
 800540a:	4605      	mov	r5, r0
    if (!pb_make_string_substream(stream, &substream))
 800540c:	a902      	add	r1, sp, #8
{
 800540e:	9201      	str	r2, [sp, #4]
    if (!pb_make_string_substream(stream, &substream))
 8005410:	f7ff fd7c 	bl	8004f0c <pb_make_string_substream>
 8005414:	b150      	cbz	r0, 800542c <pb_decode_delimited+0x28>
    status = pb_decode(&substream, fields, dest_struct);
 8005416:	4621      	mov	r1, r4
 8005418:	9a01      	ldr	r2, [sp, #4]
 800541a:	a802      	add	r0, sp, #8
 800541c:	f7ff ffb2 	bl	8005384 <pb_decode>
    if (!pb_close_string_substream(stream, &substream))
 8005420:	a902      	add	r1, sp, #8
    status = pb_decode(&substream, fields, dest_struct);
 8005422:	4604      	mov	r4, r0
    if (!pb_close_string_substream(stream, &substream))
 8005424:	4628      	mov	r0, r5
 8005426:	f7ff fd91 	bl	8004f4c <pb_close_string_substream>
 800542a:	b900      	cbnz	r0, 800542e <pb_decode_delimited+0x2a>
        return false;
 800542c:	2400      	movs	r4, #0
}
 800542e:	4620      	mov	r0, r4
 8005430:	b007      	add	sp, #28
 8005432:	bd30      	pop	{r4, r5, pc}

08005434 <pb_decode_svarint>:
{
 8005434:	b513      	push	{r0, r1, r4, lr}
 8005436:	460c      	mov	r4, r1
    if (!pb_decode_varint(stream, &value))
 8005438:	4669      	mov	r1, sp
 800543a:	f7ff fc75 	bl	8004d28 <pb_decode_varint>
 800543e:	b160      	cbz	r0, 800545a <pb_decode_svarint+0x26>
    if (value & 1)
 8005440:	e9dd 1300 	ldrd	r1, r3, [sp]
        *dest = (pb_int64_t)(~(value >> 1));
 8005444:	084a      	lsrs	r2, r1, #1
    if (value & 1)
 8005446:	07c9      	lsls	r1, r1, #31
        *dest = (pb_int64_t)(~(value >> 1));
 8005448:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800544c:	ea4f 0353 	mov.w	r3, r3, lsr #1
 8005450:	bf44      	itt	mi
 8005452:	43d2      	mvnmi	r2, r2
 8005454:	43db      	mvnmi	r3, r3
        *dest = (pb_int64_t)(value >> 1);
 8005456:	e9c4 2300 	strd	r2, r3, [r4]
}
 800545a:	b002      	add	sp, #8
 800545c:	bd10      	pop	{r4, pc}
	...

08005460 <pb_dec_svarint>:
{
 8005460:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005462:	460e      	mov	r6, r1
    if (!pb_decode_svarint(stream, &value))
 8005464:	4669      	mov	r1, sp
{
 8005466:	4604      	mov	r4, r0
 8005468:	4615      	mov	r5, r2
    if (!pb_decode_svarint(stream, &value))
 800546a:	f7ff ffe3 	bl	8005434 <pb_decode_svarint>
 800546e:	b138      	cbz	r0, 8005480 <pb_dec_svarint+0x20>
    if (field->data_size == sizeof(pb_int64_t))
 8005470:	f8b6 3007 	ldrh.w	r3, [r6, #7]
 8005474:	2b08      	cmp	r3, #8
 8005476:	d105      	bne.n	8005484 <pb_dec_svarint+0x24>
        clamped = *(pb_int64_t*)dest = value;
 8005478:	e9dd 2300 	ldrd	r2, r3, [sp]
 800547c:	e9c5 2300 	strd	r2, r3, [r5]
}
 8005480:	b002      	add	sp, #8
 8005482:	bd70      	pop	{r4, r5, r6, pc}
    else if (field->data_size == sizeof(int32_t))
 8005484:	2b04      	cmp	r3, #4
 8005486:	d10b      	bne.n	80054a0 <pb_dec_svarint+0x40>
        clamped = *(int32_t*)dest = (int32_t)value;
 8005488:	9b00      	ldr	r3, [sp, #0]
 800548a:	602b      	str	r3, [r5, #0]
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 800548c:	17da      	asrs	r2, r3, #31
    if (clamped != value)
 800548e:	e9dd 5100 	ldrd	r5, r1, [sp]
 8005492:	4291      	cmp	r1, r2
 8005494:	bf08      	it	eq
 8005496:	429d      	cmpeq	r5, r3
 8005498:	d0f2      	beq.n	8005480 <pb_dec_svarint+0x20>
        PB_RETURN_ERROR(stream, "integer too large");
 800549a:	68e3      	ldr	r3, [r4, #12]
 800549c:	4a0a      	ldr	r2, [pc, #40]	; (80054c8 <pb_dec_svarint+0x68>)
 800549e:	e00d      	b.n	80054bc <pb_dec_svarint+0x5c>
    else if (field->data_size == sizeof(int_least16_t))
 80054a0:	2b02      	cmp	r3, #2
 80054a2:	d103      	bne.n	80054ac <pb_dec_svarint+0x4c>
        clamped = *(int_least16_t*)dest = (int_least16_t)value;
 80054a4:	f9bd 3000 	ldrsh.w	r3, [sp]
 80054a8:	802b      	strh	r3, [r5, #0]
 80054aa:	e7ef      	b.n	800548c <pb_dec_svarint+0x2c>
    else if (field->data_size == sizeof(int_least8_t))
 80054ac:	2b01      	cmp	r3, #1
 80054ae:	d103      	bne.n	80054b8 <pb_dec_svarint+0x58>
        clamped = *(int_least8_t*)dest = (int_least8_t)value;
 80054b0:	f99d 3000 	ldrsb.w	r3, [sp]
 80054b4:	702b      	strb	r3, [r5, #0]
 80054b6:	e7e9      	b.n	800548c <pb_dec_svarint+0x2c>
        PB_RETURN_ERROR(stream, "invalid data_size");
 80054b8:	68e3      	ldr	r3, [r4, #12]
 80054ba:	4a04      	ldr	r2, [pc, #16]	; (80054cc <pb_dec_svarint+0x6c>)
        PB_RETURN_ERROR(stream, "integer too large");
 80054bc:	2b00      	cmp	r3, #0
 80054be:	bf08      	it	eq
 80054c0:	4613      	moveq	r3, r2
 80054c2:	2000      	movs	r0, #0
 80054c4:	60e3      	str	r3, [r4, #12]
 80054c6:	e7db      	b.n	8005480 <pb_dec_svarint+0x20>
 80054c8:	08010fc3 	.word	0x08010fc3
 80054cc:	08010fb1 	.word	0x08010fb1

080054d0 <pb_decode_fixed32>:
    if (!pb_read(stream, bytes, 4))
 80054d0:	2204      	movs	r2, #4
{
 80054d2:	b513      	push	{r0, r1, r4, lr}
 80054d4:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 4))
 80054d6:	eb0d 0102 	add.w	r1, sp, r2
 80054da:	f7ff fb51 	bl	8004b80 <pb_read>
 80054de:	b108      	cbz	r0, 80054e4 <pb_decode_fixed32+0x14>
    *(uint32_t*)dest = ((uint32_t)bytes[0] << 0) |
 80054e0:	9b01      	ldr	r3, [sp, #4]
 80054e2:	6023      	str	r3, [r4, #0]
}
 80054e4:	b002      	add	sp, #8
 80054e6:	bd10      	pop	{r4, pc}

080054e8 <pb_dec_fixed32>:
    return pb_decode_fixed32(stream, dest);
 80054e8:	4611      	mov	r1, r2
 80054ea:	f7ff bff1 	b.w	80054d0 <pb_decode_fixed32>

080054ee <pb_decode_fixed64>:
{
 80054ee:	b513      	push	{r0, r1, r4, lr}
    if (!pb_read(stream, bytes, 8))
 80054f0:	2208      	movs	r2, #8
{
 80054f2:	460c      	mov	r4, r1
    if (!pb_read(stream, bytes, 8))
 80054f4:	4669      	mov	r1, sp
 80054f6:	f7ff fb43 	bl	8004b80 <pb_read>
 80054fa:	b118      	cbz	r0, 8005504 <pb_decode_fixed64+0x16>
    *(uint64_t*)dest = ((uint64_t)bytes[0] << 0) |
 80054fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005500:	e9c4 2300 	strd	r2, r3, [r4]
}
 8005504:	b002      	add	sp, #8
 8005506:	bd10      	pop	{r4, pc}

08005508 <pb_dec_fixed64>:
    return pb_decode_fixed64(stream, dest);
 8005508:	4611      	mov	r1, r2
 800550a:	f7ff bff0 	b.w	80054ee <pb_decode_fixed64>

0800550e <pb_check_proto3_default_value>:
}

/* In proto3, all fields are optional and are only encoded if their value is "non-zero".
 * This function implements the check for the zero value. */
static bool pb_check_proto3_default_value(const pb_field_t *field, const void *pData)
{
 800550e:	b510      	push	{r4, lr}
 8005510:	460a      	mov	r2, r1
    pb_type_t type = field->type;
 8005512:	7881      	ldrb	r1, [r0, #2]
{
 8005514:	b086      	sub	sp, #24
    const void *pSize = (const char*)pData + field->size_offset;

    if (PB_HTYPE(type) == PB_HTYPE_REQUIRED)
 8005516:	f011 0330 	ands.w	r3, r1, #48	; 0x30
 800551a:	d042      	beq.n	80055a2 <pb_check_proto3_default_value+0x94>
    {
        /* Required proto2 fields inside proto3 submessage, pretty rare case */
        return false;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 800551c:	2b20      	cmp	r3, #32
    const void *pSize = (const char*)pData + field->size_offset;
 800551e:	f9b0 4005 	ldrsh.w	r4, [r0, #5]
    else if (PB_HTYPE(type) == PB_HTYPE_REPEATED)
 8005522:	d104      	bne.n	800552e <pb_check_proto3_default_value+0x20>
        return *(const pb_size_t*)pSize == 0;
    }
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
    {
        /* Oneof fields */
        return *(const pb_size_t*)pSize == 0;
 8005524:	5b10      	ldrh	r0, [r2, r4]
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
    {
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
        {
            const pb_bytes_array_t *bytes = (const pb_bytes_array_t*)pData;
            return bytes->size == 0;
 8005526:	fab0 f080 	clz	r0, r0
 800552a:	0940      	lsrs	r0, r0, #5
 800552c:	e007      	b.n	800553e <pb_check_proto3_default_value+0x30>
    else if (PB_HTYPE(type) == PB_HTYPE_ONEOF)
 800552e:	2b30      	cmp	r3, #48	; 0x30
 8005530:	d0f8      	beq.n	8005524 <pb_check_proto3_default_value+0x16>
    else if (PB_HTYPE(type) == PB_HTYPE_OPTIONAL && field->size_offset)
 8005532:	2b10      	cmp	r3, #16
 8005534:	d105      	bne.n	8005542 <pb_check_proto3_default_value+0x34>
 8005536:	b124      	cbz	r4, 8005542 <pb_check_proto3_default_value+0x34>
        return *(const bool*)pSize == false;
 8005538:	5d10      	ldrb	r0, [r2, r4]
 800553a:	f080 0001 	eor.w	r0, r0, #1
	        }
	    }

	    return true;
	}
}
 800553e:	b006      	add	sp, #24
 8005540:	bd10      	pop	{r4, pc}
    if (PB_ATYPE(type) == PB_ATYPE_STATIC)
 8005542:	f011 0fc0 	tst.w	r1, #192	; 0xc0
 8005546:	d006      	beq.n	8005556 <pb_check_proto3_default_value+0x48>
 8005548:	f8b0 3007 	ldrh.w	r3, [r0, #7]
 800554c:	4413      	add	r3, r2
	    for (i = 0; i < field->data_size; i++)
 800554e:	4293      	cmp	r3, r2
 8005550:	d123      	bne.n	800559a <pb_check_proto3_default_value+0x8c>
	    return true;
 8005552:	2001      	movs	r0, #1
 8005554:	e7f3      	b.n	800553e <pb_check_proto3_default_value+0x30>
        if (PB_LTYPE(type) == PB_LTYPE_BYTES)
 8005556:	f001 030f 	and.w	r3, r1, #15
 800555a:	2b05      	cmp	r3, #5
 800555c:	d101      	bne.n	8005562 <pb_check_proto3_default_value+0x54>
            return bytes->size == 0;
 800555e:	8810      	ldrh	r0, [r2, #0]
 8005560:	e7e1      	b.n	8005526 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_STRING)
 8005562:	2b06      	cmp	r3, #6
 8005564:	d101      	bne.n	800556a <pb_check_proto3_default_value+0x5c>
            return *(const char*)pData == '\0';
 8005566:	7810      	ldrb	r0, [r2, #0]
 8005568:	e7dd      	b.n	8005526 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_FIXED_LENGTH_BYTES)
 800556a:	2b09      	cmp	r3, #9
 800556c:	d102      	bne.n	8005574 <pb_check_proto3_default_value+0x66>
            return field->data_size == 0;
 800556e:	f8b0 0007 	ldrh.w	r0, [r0, #7]
 8005572:	e7d8      	b.n	8005526 <pb_check_proto3_default_value+0x18>
        else if (PB_LTYPE(type) == PB_LTYPE_SUBMESSAGE)
 8005574:	2b07      	cmp	r3, #7
 8005576:	d1e7      	bne.n	8005548 <pb_check_proto3_default_value+0x3a>
            if (pb_field_iter_begin(&iter, (const pb_field_t*)field->ptr, pb_const_cast(pData)))
 8005578:	f8d0 100b 	ldr.w	r1, [r0, #11]
 800557c:	4668      	mov	r0, sp
 800557e:	f7ff f9ab 	bl	80048d8 <pb_field_iter_begin>
 8005582:	2800      	cmp	r0, #0
 8005584:	d0e5      	beq.n	8005552 <pb_check_proto3_default_value+0x44>
                    if (!pb_check_proto3_default_value(iter.pos, iter.pData))
 8005586:	9904      	ldr	r1, [sp, #16]
 8005588:	9801      	ldr	r0, [sp, #4]
 800558a:	f7ff ffc0 	bl	800550e <pb_check_proto3_default_value>
 800558e:	2800      	cmp	r0, #0
 8005590:	d0d5      	beq.n	800553e <pb_check_proto3_default_value+0x30>
                } while (pb_field_iter_next(&iter));
 8005592:	4668      	mov	r0, sp
 8005594:	f7ff f9b2 	bl	80048fc <pb_field_iter_next>
 8005598:	e7f3      	b.n	8005582 <pb_check_proto3_default_value+0x74>
	        if (p[i] != 0)
 800559a:	f812 1b01 	ldrb.w	r1, [r2], #1
 800559e:	2900      	cmp	r1, #0
 80055a0:	d0d5      	beq.n	800554e <pb_check_proto3_default_value+0x40>
        return false;
 80055a2:	2000      	movs	r0, #0
 80055a4:	e7cb      	b.n	800553e <pb_check_proto3_default_value+0x30>
	...

080055a8 <pb_write>:
{
 80055a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (stream->callback != NULL)
 80055aa:	6806      	ldr	r6, [r0, #0]
{
 80055ac:	4604      	mov	r4, r0
 80055ae:	4615      	mov	r5, r2
        if (stream->bytes_written + count > stream->max_size)
 80055b0:	68c3      	ldr	r3, [r0, #12]
    if (stream->callback != NULL)
 80055b2:	b1a6      	cbz	r6, 80055de <pb_write+0x36>
        if (stream->bytes_written + count > stream->max_size)
 80055b4:	4413      	add	r3, r2
 80055b6:	6887      	ldr	r7, [r0, #8]
 80055b8:	429f      	cmp	r7, r3
 80055ba:	d207      	bcs.n	80055cc <pb_write+0x24>
            PB_RETURN_ERROR(stream, "stream full");
 80055bc:	6903      	ldr	r3, [r0, #16]
 80055be:	4a0a      	ldr	r2, [pc, #40]	; (80055e8 <pb_write+0x40>)
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	bf08      	it	eq
 80055c4:	4613      	moveq	r3, r2
 80055c6:	6103      	str	r3, [r0, #16]
 80055c8:	2000      	movs	r0, #0
}
 80055ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (!stream->callback(stream, buf, count))
 80055cc:	47b0      	blx	r6
 80055ce:	b930      	cbnz	r0, 80055de <pb_write+0x36>
            PB_RETURN_ERROR(stream, "io error");
 80055d0:	6923      	ldr	r3, [r4, #16]
 80055d2:	4a06      	ldr	r2, [pc, #24]	; (80055ec <pb_write+0x44>)
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	bf08      	it	eq
 80055d8:	4613      	moveq	r3, r2
 80055da:	6123      	str	r3, [r4, #16]
 80055dc:	e7f5      	b.n	80055ca <pb_write+0x22>
    stream->bytes_written += count;
 80055de:	68e3      	ldr	r3, [r4, #12]
    return true;
 80055e0:	2001      	movs	r0, #1
    stream->bytes_written += count;
 80055e2:	442b      	add	r3, r5
 80055e4:	60e3      	str	r3, [r4, #12]
    return true;
 80055e6:	e7f0      	b.n	80055ca <pb_write+0x22>
 80055e8:	080110ac 	.word	0x080110ac
 80055ec:	08010f36 	.word	0x08010f36

080055f0 <pb_encode_varint>:
bool checkreturn pb_encode_varint(pb_ostream_t *stream, pb_uint64_t value)
{
    pb_byte_t buffer[10];
    size_t i = 0;
    
    if (value <= 0x7F)
 80055f0:	2a80      	cmp	r2, #128	; 0x80
 80055f2:	f173 0100 	sbcs.w	r1, r3, #0
{
 80055f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80055f8:	4605      	mov	r5, r0
 80055fa:	b085      	sub	sp, #20
    if (value <= 0x7F)
 80055fc:	d207      	bcs.n	800560e <pb_encode_varint+0x1e>
    {
        pb_byte_t v = (pb_byte_t)value;
 80055fe:	f88d 2004 	strb.w	r2, [sp, #4]
        return pb_write(stream, &v, 1);
 8005602:	a901      	add	r1, sp, #4
 8005604:	2201      	movs	r2, #1
        value >>= 7;
        i++;
    }
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
    
    return pb_write(stream, buffer, i);
 8005606:	f7ff ffcf 	bl	80055a8 <pb_write>
}
 800560a:	b005      	add	sp, #20
 800560c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800560e:	ae01      	add	r6, sp, #4
    size_t i = 0;
 8005610:	2400      	movs	r4, #0
        buffer[i] = (pb_byte_t)((value & 0x7F) | 0x80);
 8005612:	f062 017f 	orn	r1, r2, #127	; 0x7f
 8005616:	b2d0      	uxtb	r0, r2
 8005618:	f806 1b01 	strb.w	r1, [r6], #1
        value >>= 7;
 800561c:	09d1      	lsrs	r1, r2, #7
 800561e:	ea41 6243 	orr.w	r2, r1, r3, lsl #25
 8005622:	4621      	mov	r1, r4
 8005624:	09db      	lsrs	r3, r3, #7
        i++;
 8005626:	3401      	adds	r4, #1
    while (value)
 8005628:	ea52 0703 	orrs.w	r7, r2, r3
 800562c:	d1f1      	bne.n	8005612 <pb_encode_varint+0x22>
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 800562e:	f101 0310 	add.w	r3, r1, #16
 8005632:	f000 027f 	and.w	r2, r0, #127	; 0x7f
    return pb_write(stream, buffer, i);
 8005636:	a901      	add	r1, sp, #4
 8005638:	4628      	mov	r0, r5
    buffer[i-1] &= 0x7F; /* Unset top bit on last byte */
 800563a:	446b      	add	r3, sp
 800563c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    return pb_write(stream, buffer, i);
 8005640:	4622      	mov	r2, r4
 8005642:	e7e0      	b.n	8005606 <pb_encode_varint+0x16>

08005644 <pb_enc_uvarint>:

static bool checkreturn pb_enc_uvarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    pb_uint64_t value = 0;
    
    if (field->data_size == sizeof(uint_least8_t))
 8005644:	f8b1 3007 	ldrh.w	r3, [r1, #7]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d104      	bne.n	8005656 <pb_enc_uvarint+0x12>
        value = *(const uint_least8_t*)src;
 800564c:	7811      	ldrb	r1, [r2, #0]
    else if (field->data_size == sizeof(uint_least16_t))
        value = *(const uint_least16_t*)src;
    else if (field->data_size == sizeof(uint32_t))
        value = *(const uint32_t*)src;
 800564e:	2300      	movs	r3, #0
    else if (field->data_size == sizeof(pb_uint64_t))
        value = *(const pb_uint64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_varint(stream, value);
 8005650:	460a      	mov	r2, r1
 8005652:	f7ff bfcd 	b.w	80055f0 <pb_encode_varint>
    else if (field->data_size == sizeof(uint_least16_t))
 8005656:	2b02      	cmp	r3, #2
 8005658:	d101      	bne.n	800565e <pb_enc_uvarint+0x1a>
        value = *(const uint_least16_t*)src;
 800565a:	8811      	ldrh	r1, [r2, #0]
 800565c:	e7f7      	b.n	800564e <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(uint32_t))
 800565e:	2b04      	cmp	r3, #4
 8005660:	d101      	bne.n	8005666 <pb_enc_uvarint+0x22>
        value = *(const uint32_t*)src;
 8005662:	6811      	ldr	r1, [r2, #0]
 8005664:	e7f3      	b.n	800564e <pb_enc_uvarint+0xa>
    else if (field->data_size == sizeof(pb_uint64_t))
 8005666:	2b08      	cmp	r3, #8
 8005668:	d102      	bne.n	8005670 <pb_enc_uvarint+0x2c>
        value = *(const pb_uint64_t*)src;
 800566a:	e9d2 1300 	ldrd	r1, r3, [r2]
 800566e:	e7ef      	b.n	8005650 <pb_enc_uvarint+0xc>
        PB_RETURN_ERROR(stream, "invalid data_size");
 8005670:	6903      	ldr	r3, [r0, #16]
 8005672:	4a03      	ldr	r2, [pc, #12]	; (8005680 <pb_enc_uvarint+0x3c>)
 8005674:	2b00      	cmp	r3, #0
 8005676:	bf08      	it	eq
 8005678:	4613      	moveq	r3, r2
 800567a:	6103      	str	r3, [r0, #16]
}
 800567c:	2000      	movs	r0, #0
 800567e:	4770      	bx	lr
 8005680:	08010fb1 	.word	0x08010fb1

08005684 <pb_enc_varint>:
{
 8005684:	4613      	mov	r3, r2
    if (field->data_size == sizeof(int_least8_t))
 8005686:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 800568a:	2a01      	cmp	r2, #1
 800568c:	d104      	bne.n	8005698 <pb_enc_varint+0x14>
        value = *(const int_least8_t*)src;
 800568e:	f993 2000 	ldrsb.w	r2, [r3]
        value = *(const int32_t*)src;
 8005692:	17d3      	asrs	r3, r2, #31
      return pb_encode_varint(stream, (pb_uint64_t)value);
 8005694:	f7ff bfac 	b.w	80055f0 <pb_encode_varint>
    else if (field->data_size == sizeof(int_least16_t))
 8005698:	2a02      	cmp	r2, #2
 800569a:	d102      	bne.n	80056a2 <pb_enc_varint+0x1e>
        value = *(const int_least16_t*)src;
 800569c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80056a0:	e7f7      	b.n	8005692 <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(int32_t))
 80056a2:	2a04      	cmp	r2, #4
 80056a4:	d101      	bne.n	80056aa <pb_enc_varint+0x26>
        value = *(const int32_t*)src;
 80056a6:	681a      	ldr	r2, [r3, #0]
 80056a8:	e7f3      	b.n	8005692 <pb_enc_varint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 80056aa:	2a08      	cmp	r2, #8
 80056ac:	d102      	bne.n	80056b4 <pb_enc_varint+0x30>
        value = *(const pb_int64_t*)src;
 80056ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056b2:	e7ef      	b.n	8005694 <pb_enc_varint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 80056b4:	6903      	ldr	r3, [r0, #16]
 80056b6:	4a03      	ldr	r2, [pc, #12]	; (80056c4 <pb_enc_varint+0x40>)
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	bf08      	it	eq
 80056bc:	4613      	moveq	r3, r2
 80056be:	6103      	str	r3, [r0, #16]
}
 80056c0:	2000      	movs	r0, #0
 80056c2:	4770      	bx	lr
 80056c4:	08010fb1 	.word	0x08010fb1

080056c8 <pb_encode_svarint>:
        zigzagged = ~((pb_uint64_t)value << 1);
 80056c8:	1892      	adds	r2, r2, r2
 80056ca:	eb43 0103 	adc.w	r1, r3, r3
    return pb_encode_varint(stream, zigzagged);
 80056ce:	ea82 72e3 	eor.w	r2, r2, r3, asr #31
 80056d2:	ea81 73e3 	eor.w	r3, r1, r3, asr #31
 80056d6:	f7ff bf8b 	b.w	80055f0 <pb_encode_varint>
	...

080056dc <pb_enc_svarint>:

static bool checkreturn pb_enc_svarint(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 80056dc:	4613      	mov	r3, r2
    pb_int64_t value = 0;
    
    if (field->data_size == sizeof(int_least8_t))
 80056de:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 80056e2:	2a01      	cmp	r2, #1
 80056e4:	d104      	bne.n	80056f0 <pb_enc_svarint+0x14>
        value = *(const int_least8_t*)src;
 80056e6:	f993 2000 	ldrsb.w	r2, [r3]
    else if (field->data_size == sizeof(int_least16_t))
        value = *(const int_least16_t*)src;
    else if (field->data_size == sizeof(int32_t))
        value = *(const int32_t*)src;
 80056ea:	17d3      	asrs	r3, r2, #31
    else if (field->data_size == sizeof(pb_int64_t))
        value = *(const pb_int64_t*)src;
    else
        PB_RETURN_ERROR(stream, "invalid data_size");
    
    return pb_encode_svarint(stream, value);
 80056ec:	f7ff bfec 	b.w	80056c8 <pb_encode_svarint>
    else if (field->data_size == sizeof(int_least16_t))
 80056f0:	2a02      	cmp	r2, #2
 80056f2:	d102      	bne.n	80056fa <pb_enc_svarint+0x1e>
        value = *(const int_least16_t*)src;
 80056f4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80056f8:	e7f7      	b.n	80056ea <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(int32_t))
 80056fa:	2a04      	cmp	r2, #4
 80056fc:	d101      	bne.n	8005702 <pb_enc_svarint+0x26>
        value = *(const int32_t*)src;
 80056fe:	681a      	ldr	r2, [r3, #0]
 8005700:	e7f3      	b.n	80056ea <pb_enc_svarint+0xe>
    else if (field->data_size == sizeof(pb_int64_t))
 8005702:	2a08      	cmp	r2, #8
 8005704:	d102      	bne.n	800570c <pb_enc_svarint+0x30>
        value = *(const pb_int64_t*)src;
 8005706:	e9d3 2300 	ldrd	r2, r3, [r3]
 800570a:	e7ef      	b.n	80056ec <pb_enc_svarint+0x10>
        PB_RETURN_ERROR(stream, "invalid data_size");
 800570c:	6903      	ldr	r3, [r0, #16]
 800570e:	4a03      	ldr	r2, [pc, #12]	; (800571c <pb_enc_svarint+0x40>)
 8005710:	2b00      	cmp	r3, #0
 8005712:	bf08      	it	eq
 8005714:	4613      	moveq	r3, r2
 8005716:	6103      	str	r3, [r0, #16]
}
 8005718:	2000      	movs	r0, #0
 800571a:	4770      	bx	lr
 800571c:	08010fb1 	.word	0x08010fb1

08005720 <pb_encode_fixed32>:
{
 8005720:	b507      	push	{r0, r1, r2, lr}
    return pb_write(stream, bytes, 4);
 8005722:	2204      	movs	r2, #4
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8005724:	680b      	ldr	r3, [r1, #0]
    return pb_write(stream, bytes, 4);
 8005726:	eb0d 0102 	add.w	r1, sp, r2
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800572a:	9301      	str	r3, [sp, #4]
    return pb_write(stream, bytes, 4);
 800572c:	f7ff ff3c 	bl	80055a8 <pb_write>
}
 8005730:	b003      	add	sp, #12
 8005732:	f85d fb04 	ldr.w	pc, [sp], #4

08005736 <pb_enc_fixed32>:
}

static bool checkreturn pb_enc_fixed32(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
    PB_UNUSED(field);
    return pb_encode_fixed32(stream, src);
 8005736:	4611      	mov	r1, r2
 8005738:	f7ff bff2 	b.w	8005720 <pb_encode_fixed32>

0800573c <pb_encode_fixed64>:
{
 800573c:	b507      	push	{r0, r1, r2, lr}
    bytes[0] = (pb_byte_t)(val & 0xFF);
 800573e:	e9d1 2300 	ldrd	r2, r3, [r1]
    return pb_write(stream, bytes, 8);
 8005742:	4669      	mov	r1, sp
    bytes[0] = (pb_byte_t)(val & 0xFF);
 8005744:	9200      	str	r2, [sp, #0]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 8005746:	0a1a      	lsrs	r2, r3, #8
    bytes[4] = (pb_byte_t)((val >> 32) & 0xFF);
 8005748:	f88d 3004 	strb.w	r3, [sp, #4]
    bytes[5] = (pb_byte_t)((val >> 40) & 0xFF);
 800574c:	f88d 2005 	strb.w	r2, [sp, #5]
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8005750:	0c1a      	lsrs	r2, r3, #16
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 8005752:	0e1b      	lsrs	r3, r3, #24
    bytes[6] = (pb_byte_t)((val >> 48) & 0xFF);
 8005754:	f88d 2006 	strb.w	r2, [sp, #6]
    return pb_write(stream, bytes, 8);
 8005758:	2208      	movs	r2, #8
    bytes[7] = (pb_byte_t)((val >> 56) & 0xFF);
 800575a:	f88d 3007 	strb.w	r3, [sp, #7]
    return pb_write(stream, bytes, 8);
 800575e:	f7ff ff23 	bl	80055a8 <pb_write>
}
 8005762:	b003      	add	sp, #12
 8005764:	f85d fb04 	ldr.w	pc, [sp], #4

08005768 <pb_enc_fixed64>:
    return pb_encode_fixed64(stream, src);
 8005768:	4611      	mov	r1, r2
 800576a:	f7ff bfe7 	b.w	800573c <pb_encode_fixed64>

0800576e <pb_encode_tag>:
{
 800576e:	4613      	mov	r3, r2
    return pb_encode_varint(stream, tag);
 8005770:	ea41 02c2 	orr.w	r2, r1, r2, lsl #3
 8005774:	0f5b      	lsrs	r3, r3, #29
 8005776:	f7ff bf3b 	b.w	80055f0 <pb_encode_varint>
	...

0800577c <pb_encode_tag_for_field>:
    switch (PB_LTYPE(field->type))
 800577c:	788b      	ldrb	r3, [r1, #2]
 800577e:	f003 030f 	and.w	r3, r3, #15
 8005782:	2b09      	cmp	r3, #9
 8005784:	d811      	bhi.n	80057aa <pb_encode_tag_for_field+0x2e>
 8005786:	e8df f003 	tbb	[pc, r3]
 800578a:	0c0c      	.short	0x0c0c
 800578c:	0a0e050c 	.word	0x0a0e050c
 8005790:	0a100a0a 	.word	0x0a100a0a
 8005794:	2305      	movs	r3, #5
    return pb_encode_tag(stream, wiretype, field->tag);
 8005796:	880a      	ldrh	r2, [r1, #0]
 8005798:	4619      	mov	r1, r3
 800579a:	f7ff bfe8 	b.w	800576e <pb_encode_tag>
            wiretype = PB_WT_STRING;
 800579e:	2302      	movs	r3, #2
            break;
 80057a0:	e7f9      	b.n	8005796 <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_VARINT;
 80057a2:	2300      	movs	r3, #0
 80057a4:	e7f7      	b.n	8005796 <pb_encode_tag_for_field+0x1a>
            wiretype = PB_WT_64BIT;
 80057a6:	2301      	movs	r3, #1
 80057a8:	e7f5      	b.n	8005796 <pb_encode_tag_for_field+0x1a>
            PB_RETURN_ERROR(stream, "invalid field type");
 80057aa:	6903      	ldr	r3, [r0, #16]
 80057ac:	4a03      	ldr	r2, [pc, #12]	; (80057bc <pb_encode_tag_for_field+0x40>)
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	bf08      	it	eq
 80057b2:	4613      	moveq	r3, r2
 80057b4:	6103      	str	r3, [r0, #16]
}
 80057b6:	2000      	movs	r0, #0
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	0801100e 	.word	0x0801100e

080057c0 <encode_field>:
{
 80057c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c4:	4616      	mov	r6, r2
    switch (PB_ATYPE(field->type))
 80057c6:	788a      	ldrb	r2, [r1, #2]
{
 80057c8:	b086      	sub	sp, #24
 80057ca:	4605      	mov	r5, r0
    switch (PB_ATYPE(field->type))
 80057cc:	f002 03c0 	and.w	r3, r2, #192	; 0xc0
{
 80057d0:	460c      	mov	r4, r1
    switch (PB_ATYPE(field->type))
 80057d2:	2b40      	cmp	r3, #64	; 0x40
 80057d4:	f000 80dd 	beq.w	8005992 <encode_field+0x1d2>
 80057d8:	0653      	lsls	r3, r2, #25
 80057da:	d41b      	bmi.n	8005814 <encode_field+0x54>
    func = PB_ENCODERS[PB_LTYPE(field->type)];
 80057dc:	4b75      	ldr	r3, [pc, #468]	; (80059b4 <encode_field+0x1f4>)
 80057de:	f002 010f 	and.w	r1, r2, #15
 80057e2:	f853 7021 	ldr.w	r7, [r3, r1, lsl #2]
    if (field->size_offset)
 80057e6:	f9b4 3005 	ldrsh.w	r3, [r4, #5]
 80057ea:	b1b3      	cbz	r3, 800581a <encode_field+0x5a>
        pSize = (const char*)pData + field->size_offset;
 80057ec:	4433      	add	r3, r6
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 80057ee:	78a2      	ldrb	r2, [r4, #2]
 80057f0:	f002 00c0 	and.w	r0, r2, #192	; 0xc0
 80057f4:	2880      	cmp	r0, #128	; 0x80
 80057f6:	d105      	bne.n	8005804 <encode_field+0x44>
        pData = *(const void* const*)pData;
 80057f8:	6836      	ldr	r6, [r6, #0]
        implicit_has = (pData != NULL);
 80057fa:	1e31      	subs	r1, r6, #0
 80057fc:	bf18      	it	ne
 80057fe:	2101      	movne	r1, #1
 8005800:	f88d 1003 	strb.w	r1, [sp, #3]
    switch (PB_HTYPE(field->type))
 8005804:	f002 0130 	and.w	r1, r2, #48	; 0x30
 8005808:	2920      	cmp	r1, #32
 800580a:	d03e      	beq.n	800588a <encode_field+0xca>
 800580c:	d818      	bhi.n	8005840 <encode_field+0x80>
 800580e:	b361      	cbz	r1, 800586a <encode_field+0xaa>
 8005810:	2910      	cmp	r1, #16
 8005812:	d033      	beq.n	800587c <encode_field+0xbc>
            PB_RETURN_ERROR(stream, "invalid field type");
 8005814:	692b      	ldr	r3, [r5, #16]
 8005816:	4a68      	ldr	r2, [pc, #416]	; (80059b8 <encode_field+0x1f8>)
 8005818:	e02b      	b.n	8005872 <encode_field+0xb2>
    else if (PB_HTYPE(field->type) == PB_HTYPE_OPTIONAL)
 800581a:	f002 0230 	and.w	r2, r2, #48	; 0x30
 800581e:	2a10      	cmp	r2, #16
 8005820:	d10a      	bne.n	8005838 <encode_field+0x78>
        implicit_has = !pb_check_proto3_default_value(field, pData);
 8005822:	4631      	mov	r1, r6
 8005824:	4620      	mov	r0, r4
 8005826:	f7ff fe72 	bl	800550e <pb_check_proto3_default_value>
 800582a:	f080 0001 	eor.w	r0, r0, #1
 800582e:	f88d 0003 	strb.w	r0, [sp, #3]
    const void *pSize = &implicit_has;
 8005832:	f10d 0303 	add.w	r3, sp, #3
 8005836:	e7da      	b.n	80057ee <encode_field+0x2e>
        implicit_has = true;
 8005838:	2301      	movs	r3, #1
 800583a:	f88d 3003 	strb.w	r3, [sp, #3]
 800583e:	e7f8      	b.n	8005832 <encode_field+0x72>
    switch (PB_HTYPE(field->type))
 8005840:	2930      	cmp	r1, #48	; 0x30
 8005842:	d1e7      	bne.n	8005814 <encode_field+0x54>
            if (*(const pb_size_t*)pSize == field->tag)
 8005844:	881a      	ldrh	r2, [r3, #0]
 8005846:	8823      	ldrh	r3, [r4, #0]
 8005848:	429a      	cmp	r2, r3
 800584a:	d11a      	bne.n	8005882 <encode_field+0xc2>
                if (!pb_encode_tag_for_field(stream, field))
 800584c:	4621      	mov	r1, r4
 800584e:	4628      	mov	r0, r5
 8005850:	f7ff ff94 	bl	800577c <pb_encode_tag_for_field>
 8005854:	2800      	cmp	r0, #0
 8005856:	f000 8090 	beq.w	800597a <encode_field+0x1ba>
                if (!func(stream, field, pData))
 800585a:	4632      	mov	r2, r6
 800585c:	4621      	mov	r1, r4
 800585e:	4628      	mov	r0, r5
 8005860:	463b      	mov	r3, r7
}
 8005862:	b006      	add	sp, #24
 8005864:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
                if (!func(stream, field, pData))
 8005868:	4718      	bx	r3
            if (!pData)
 800586a:	2e00      	cmp	r6, #0
 800586c:	d1ee      	bne.n	800584c <encode_field+0x8c>
                PB_RETURN_ERROR(stream, "missing required field");
 800586e:	692b      	ldr	r3, [r5, #16]
 8005870:	4a52      	ldr	r2, [pc, #328]	; (80059bc <encode_field+0x1fc>)
            PB_RETURN_ERROR(stream, "invalid field type");
 8005872:	2b00      	cmp	r3, #0
 8005874:	bf08      	it	eq
 8005876:	4613      	moveq	r3, r2
 8005878:	612b      	str	r3, [r5, #16]
 800587a:	e07e      	b.n	800597a <encode_field+0x1ba>
            if (*(const bool*)pSize)
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	2b00      	cmp	r3, #0
 8005880:	d1e4      	bne.n	800584c <encode_field+0x8c>
    return true;
 8005882:	2001      	movs	r0, #1
}
 8005884:	b006      	add	sp, #24
 8005886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            if (field->size_offset != 0) {
 800588a:	f9b4 1005 	ldrsh.w	r1, [r4, #5]
 800588e:	b169      	cbz	r1, 80058ac <encode_field+0xec>
                count = *(const pb_size_t*)pSize;
 8005890:	f8b3 8000 	ldrh.w	r8, [r3]
    if (count == 0)
 8005894:	f1b8 0f00 	cmp.w	r8, #0
 8005898:	d0f3      	beq.n	8005882 <encode_field+0xc2>
    if (PB_ATYPE(field->type) != PB_ATYPE_POINTER && count > field->array_size)
 800589a:	2880      	cmp	r0, #128	; 0x80
 800589c:	d009      	beq.n	80058b2 <encode_field+0xf2>
 800589e:	f8b4 3009 	ldrh.w	r3, [r4, #9]
 80058a2:	4598      	cmp	r8, r3
 80058a4:	d905      	bls.n	80058b2 <encode_field+0xf2>
        PB_RETURN_ERROR(stream, "array max size exceeded");
 80058a6:	692b      	ldr	r3, [r5, #16]
 80058a8:	4a45      	ldr	r2, [pc, #276]	; (80059c0 <encode_field+0x200>)
 80058aa:	e7e2      	b.n	8005872 <encode_field+0xb2>
                count = field->array_size;
 80058ac:	f8b4 8009 	ldrh.w	r8, [r4, #9]
 80058b0:	e7f0      	b.n	8005894 <encode_field+0xd4>
    if (PB_LTYPE(field->type) <= PB_LTYPE_LAST_PACKABLE)
 80058b2:	f002 020f 	and.w	r2, r2, #15
 80058b6:	2a04      	cmp	r2, #4
 80058b8:	d849      	bhi.n	800594e <encode_field+0x18e>
        if (!pb_encode_tag(stream, PB_WT_STRING, field->tag))
 80058ba:	8822      	ldrh	r2, [r4, #0]
 80058bc:	2102      	movs	r1, #2
 80058be:	4628      	mov	r0, r5
 80058c0:	f7ff ff55 	bl	800576e <pb_encode_tag>
 80058c4:	2800      	cmp	r0, #0
 80058c6:	d058      	beq.n	800597a <encode_field+0x1ba>
        if (PB_LTYPE(field->type) == PB_LTYPE_FIXED32)
 80058c8:	78a3      	ldrb	r3, [r4, #2]
 80058ca:	f003 030f 	and.w	r3, r3, #15
 80058ce:	2b03      	cmp	r3, #3
 80058d0:	d111      	bne.n	80058f6 <encode_field+0x136>
            size = 4 * count;
 80058d2:	ea4f 0988 	mov.w	r9, r8, lsl #2
        if (!pb_encode_varint(stream, (pb_uint64_t)size))
 80058d6:	464a      	mov	r2, r9
 80058d8:	2300      	movs	r3, #0
 80058da:	4628      	mov	r0, r5
 80058dc:	f7ff fe88 	bl	80055f0 <pb_encode_varint>
 80058e0:	2800      	cmp	r0, #0
 80058e2:	d04a      	beq.n	800597a <encode_field+0x1ba>
        if (stream->callback == NULL)
 80058e4:	6829      	ldr	r1, [r5, #0]
 80058e6:	bb19      	cbnz	r1, 8005930 <encode_field+0x170>
            return pb_write(stream, NULL, size); /* Just sizing.. */
 80058e8:	464a      	mov	r2, r9
 80058ea:	4628      	mov	r0, r5
}
 80058ec:	b006      	add	sp, #24
 80058ee:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
            return pb_write(stream, NULL, size); /* Just sizing.. */
 80058f2:	f7ff be59 	b.w	80055a8 <pb_write>
        else if (PB_LTYPE(field->type) == PB_LTYPE_FIXED64)
 80058f6:	2b04      	cmp	r3, #4
 80058f8:	d102      	bne.n	8005900 <encode_field+0x140>
            size = 8 * count;
 80058fa:	ea4f 09c8 	mov.w	r9, r8, lsl #3
 80058fe:	e7ea      	b.n	80058d6 <encode_field+0x116>
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8005900:	46b2      	mov	sl, r6
            for (i = 0; i < count; i++)
 8005902:	f04f 0900 	mov.w	r9, #0
            pb_ostream_t sizestream = PB_OSTREAM_SIZING;
 8005906:	2214      	movs	r2, #20
 8005908:	2100      	movs	r1, #0
 800590a:	a801      	add	r0, sp, #4
 800590c:	f004 fe31 	bl	800a572 <memset>
                if (!func(&sizestream, field, p))
 8005910:	4652      	mov	r2, sl
 8005912:	4621      	mov	r1, r4
 8005914:	a801      	add	r0, sp, #4
 8005916:	47b8      	blx	r7
 8005918:	2800      	cmp	r0, #0
 800591a:	d0b3      	beq.n	8005884 <encode_field+0xc4>
            for (i = 0; i < count; i++)
 800591c:	f109 0901 	add.w	r9, r9, #1
                p = (const char*)p + field->data_size;
 8005920:	f8b4 3007 	ldrh.w	r3, [r4, #7]
            for (i = 0; i < count; i++)
 8005924:	45c8      	cmp	r8, r9
                p = (const char*)p + field->data_size;
 8005926:	449a      	add	sl, r3
            for (i = 0; i < count; i++)
 8005928:	d8f2      	bhi.n	8005910 <encode_field+0x150>
            size = sizestream.bytes_written;
 800592a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 800592e:	e7d2      	b.n	80058d6 <encode_field+0x116>
        for (i = 0; i < count; i++)
 8005930:	f04f 0900 	mov.w	r9, #0
            if (!func(stream, field, p))
 8005934:	4632      	mov	r2, r6
 8005936:	4621      	mov	r1, r4
 8005938:	4628      	mov	r0, r5
 800593a:	47b8      	blx	r7
 800593c:	b1e8      	cbz	r0, 800597a <encode_field+0x1ba>
        for (i = 0; i < count; i++)
 800593e:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 8005942:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 8005946:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 8005948:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 800594a:	d8f3      	bhi.n	8005934 <encode_field+0x174>
 800594c:	e799      	b.n	8005882 <encode_field+0xc2>
        for (i = 0; i < count; i++)
 800594e:	f04f 0900 	mov.w	r9, #0
            if (!pb_encode_tag_for_field(stream, field))
 8005952:	4621      	mov	r1, r4
 8005954:	4628      	mov	r0, r5
 8005956:	f7ff ff11 	bl	800577c <pb_encode_tag_for_field>
 800595a:	b170      	cbz	r0, 800597a <encode_field+0x1ba>
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800595c:	78a3      	ldrb	r3, [r4, #2]
 800595e:	f003 02c0 	and.w	r2, r3, #192	; 0xc0
 8005962:	2a80      	cmp	r2, #128	; 0x80
 8005964:	d113      	bne.n	800598e <encode_field+0x1ce>
                (PB_LTYPE(field->type) == PB_LTYPE_STRING ||
 8005966:	f003 030f 	and.w	r3, r3, #15
 800596a:	3b05      	subs	r3, #5
            if (PB_ATYPE(field->type) == PB_ATYPE_POINTER &&
 800596c:	2b01      	cmp	r3, #1
 800596e:	d80e      	bhi.n	800598e <encode_field+0x1ce>
                if (!func(stream, field, *(const void* const*)p))
 8005970:	6832      	ldr	r2, [r6, #0]
                if (!func(stream, field, p))
 8005972:	4621      	mov	r1, r4
 8005974:	4628      	mov	r0, r5
 8005976:	47b8      	blx	r7
 8005978:	b908      	cbnz	r0, 800597e <encode_field+0x1be>
            PB_RETURN_ERROR(stream, "invalid field type");
 800597a:	2000      	movs	r0, #0
 800597c:	e782      	b.n	8005884 <encode_field+0xc4>
        for (i = 0; i < count; i++)
 800597e:	f109 0901 	add.w	r9, r9, #1
            p = (const char*)p + field->data_size;
 8005982:	f8b4 3007 	ldrh.w	r3, [r4, #7]
        for (i = 0; i < count; i++)
 8005986:	45c8      	cmp	r8, r9
            p = (const char*)p + field->data_size;
 8005988:	441e      	add	r6, r3
        for (i = 0; i < count; i++)
 800598a:	d8e2      	bhi.n	8005952 <encode_field+0x192>
 800598c:	e779      	b.n	8005882 <encode_field+0xc2>
                if (!func(stream, field, p))
 800598e:	4632      	mov	r2, r6
 8005990:	e7ef      	b.n	8005972 <encode_field+0x1b2>
    if (callback->funcs.encode != NULL)
 8005992:	6833      	ldr	r3, [r6, #0]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f43f af74 	beq.w	8005882 <encode_field+0xc2>
        if (!callback->funcs.encode(stream, field, arg))
 800599a:	1d32      	adds	r2, r6, #4
 800599c:	4798      	blx	r3
 800599e:	2800      	cmp	r0, #0
 80059a0:	f47f af6f 	bne.w	8005882 <encode_field+0xc2>
            PB_RETURN_ERROR(stream, "callback error");
 80059a4:	692b      	ldr	r3, [r5, #16]
 80059a6:	4a07      	ldr	r2, [pc, #28]	; (80059c4 <encode_field+0x204>)
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	bf08      	it	eq
 80059ac:	4613      	moveq	r3, r2
 80059ae:	612b      	str	r3, [r5, #16]
 80059b0:	e768      	b.n	8005884 <encode_field+0xc4>
 80059b2:	bf00      	nop
 80059b4:	08011108 	.word	0x08011108
 80059b8:	0801100e 	.word	0x0801100e
 80059bc:	08011052 	.word	0x08011052
 80059c0:	080110b8 	.word	0x080110b8
 80059c4:	080110d0 	.word	0x080110d0

080059c8 <pb_encode>:
{
 80059c8:	b530      	push	{r4, r5, lr}
 80059ca:	b087      	sub	sp, #28
 80059cc:	4605      	mov	r5, r0
    if (!pb_field_iter_begin(&iter, fields, pb_const_cast(src_struct)))
 80059ce:	4668      	mov	r0, sp
 80059d0:	f7fe ff82 	bl	80048d8 <pb_field_iter_begin>
 80059d4:	b910      	cbnz	r0, 80059dc <pb_encode+0x14>
        return true; /* Empty message type */
 80059d6:	2001      	movs	r0, #1
}
 80059d8:	b007      	add	sp, #28
 80059da:	bd30      	pop	{r4, r5, pc}
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 80059dc:	9901      	ldr	r1, [sp, #4]
            if (!encode_extension_field(stream, iter.pos, iter.pData))
 80059de:	9a04      	ldr	r2, [sp, #16]
        if (PB_LTYPE(iter.pos->type) == PB_LTYPE_EXTENSION)
 80059e0:	788b      	ldrb	r3, [r1, #2]
 80059e2:	f003 030f 	and.w	r3, r3, #15
 80059e6:	2b08      	cmp	r3, #8
 80059e8:	d11c      	bne.n	8005a24 <pb_encode+0x5c>
    const pb_extension_t *extension = *(const pb_extension_t* const *)pData;
 80059ea:	6814      	ldr	r4, [r2, #0]
    while (extension)
 80059ec:	b91c      	cbnz	r4, 80059f6 <pb_encode+0x2e>
    } while (pb_field_iter_next(&iter));
 80059ee:	4668      	mov	r0, sp
 80059f0:	f7fe ff84 	bl	80048fc <pb_field_iter_next>
 80059f4:	e7ee      	b.n	80059d4 <pb_encode+0xc>
        if (extension->type->encode)
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	685a      	ldr	r2, [r3, #4]
 80059fa:	b12a      	cbz	r2, 8005a08 <pb_encode+0x40>
            status = extension->type->encode(stream, extension);
 80059fc:	4621      	mov	r1, r4
 80059fe:	4628      	mov	r0, r5
 8005a00:	4790      	blx	r2
        if (!status)
 8005a02:	b968      	cbnz	r0, 8005a20 <pb_encode+0x58>
                return false;
 8005a04:	2000      	movs	r0, #0
 8005a06:	e7e7      	b.n	80059d8 <pb_encode+0x10>
    const pb_field_t *field = (const pb_field_t*)extension->type->arg;
 8005a08:	6899      	ldr	r1, [r3, #8]
        return encode_field(stream, field, extension->dest);
 8005a0a:	4628      	mov	r0, r5
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005a0c:	788b      	ldrb	r3, [r1, #2]
 8005a0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005a12:	2b80      	cmp	r3, #128	; 0x80
        return encode_field(stream, field, &extension->dest);
 8005a14:	bf0c      	ite	eq
 8005a16:	1d22      	addeq	r2, r4, #4
        return encode_field(stream, field, extension->dest);
 8005a18:	6862      	ldrne	r2, [r4, #4]
 8005a1a:	f7ff fed1 	bl	80057c0 <encode_field>
 8005a1e:	e7f0      	b.n	8005a02 <pb_encode+0x3a>
        extension = extension->next;
 8005a20:	68a4      	ldr	r4, [r4, #8]
 8005a22:	e7e3      	b.n	80059ec <pb_encode+0x24>
            if (!encode_field(stream, iter.pos, iter.pData))
 8005a24:	4628      	mov	r0, r5
 8005a26:	f7ff fecb 	bl	80057c0 <encode_field>
 8005a2a:	2800      	cmp	r0, #0
 8005a2c:	d1df      	bne.n	80059ee <pb_encode+0x26>
 8005a2e:	e7e9      	b.n	8005a04 <pb_encode+0x3c>

08005a30 <pb_encode_string>:
{
 8005a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005a32:	2300      	movs	r3, #0
{
 8005a34:	4604      	mov	r4, r0
 8005a36:	4615      	mov	r5, r2
 8005a38:	9101      	str	r1, [sp, #4]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005a3a:	f7ff fdd9 	bl	80055f0 <pb_encode_varint>
 8005a3e:	b138      	cbz	r0, 8005a50 <pb_encode_string+0x20>
    return pb_write(stream, buffer, size);
 8005a40:	462a      	mov	r2, r5
 8005a42:	9901      	ldr	r1, [sp, #4]
 8005a44:	4620      	mov	r0, r4
}
 8005a46:	b003      	add	sp, #12
 8005a48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    return pb_write(stream, buffer, size);
 8005a4c:	f7ff bdac 	b.w	80055a8 <pb_write>
}
 8005a50:	b003      	add	sp, #12
 8005a52:	bd30      	pop	{r4, r5, pc}

08005a54 <pb_enc_fixed_length_bytes>:
    
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
}

static bool checkreturn pb_enc_fixed_length_bytes(pb_ostream_t *stream, const pb_field_t *field, const void *src)
{
 8005a54:	4613      	mov	r3, r2
    return pb_encode_string(stream, (const pb_byte_t*)src, field->data_size);
 8005a56:	f8b1 2007 	ldrh.w	r2, [r1, #7]
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	f7ff bfe8 	b.w	8005a30 <pb_encode_string>

08005a60 <pb_enc_string>:
{
 8005a60:	b410      	push	{r4}
    size_t max_size = field->data_size;
 8005a62:	f8b1 3007 	ldrh.w	r3, [r1, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_POINTER)
 8005a66:	7889      	ldrb	r1, [r1, #2]
 8005a68:	f001 01c0 	and.w	r1, r1, #192	; 0xc0
    size_t max_size = field->data_size;
 8005a6c:	2980      	cmp	r1, #128	; 0x80
    if (src == NULL)
 8005a6e:	4611      	mov	r1, r2
    size_t max_size = field->data_size;
 8005a70:	bf08      	it	eq
 8005a72:	f04f 33ff 	moveq.w	r3, #4294967295
    if (src == NULL)
 8005a76:	b122      	cbz	r2, 8005a82 <pb_enc_string+0x22>
    size_t size = 0;
 8005a78:	2200      	movs	r2, #0
        while (size < max_size && *p != '\0')
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d001      	beq.n	8005a82 <pb_enc_string+0x22>
 8005a7e:	5c8c      	ldrb	r4, [r1, r2]
 8005a80:	b91c      	cbnz	r4, 8005a8a <pb_enc_string+0x2a>
}
 8005a82:	f85d 4b04 	ldr.w	r4, [sp], #4
    return pb_encode_string(stream, (const pb_byte_t*)src, size);
 8005a86:	f7ff bfd3 	b.w	8005a30 <pb_encode_string>
            size++;
 8005a8a:	3201      	adds	r2, #1
            p++;
 8005a8c:	e7f5      	b.n	8005a7a <pb_enc_string+0x1a>
	...

08005a90 <pb_enc_bytes>:
{
 8005a90:	b470      	push	{r4, r5, r6}
 8005a92:	4603      	mov	r3, r0
 8005a94:	460c      	mov	r4, r1
    if (src == NULL)
 8005a96:	4611      	mov	r1, r2
 8005a98:	b912      	cbnz	r2, 8005aa0 <pb_enc_bytes+0x10>
}
 8005a9a:	bc70      	pop	{r4, r5, r6}
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8005a9c:	f7ff bfc8 	b.w	8005a30 <pb_encode_string>
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005aa0:	78a0      	ldrb	r0, [r4, #2]
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8005aa2:	8812      	ldrh	r2, [r2, #0]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005aa4:	f010 00c0 	ands.w	r0, r0, #192	; 0xc0
 8005aa8:	d104      	bne.n	8005ab4 <pb_enc_bytes+0x24>
        PB_BYTES_ARRAY_T_ALLOCSIZE(bytes->size) > field->data_size)
 8005aaa:	1c95      	adds	r5, r2, #2
 8005aac:	f8b4 6007 	ldrh.w	r6, [r4, #7]
    if (PB_ATYPE(field->type) == PB_ATYPE_STATIC &&
 8005ab0:	42b5      	cmp	r5, r6
 8005ab2:	d802      	bhi.n	8005aba <pb_enc_bytes+0x2a>
    return pb_encode_string(stream, bytes->bytes, bytes->size);
 8005ab4:	3102      	adds	r1, #2
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	e7ef      	b.n	8005a9a <pb_enc_bytes+0xa>
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8005aba:	691a      	ldr	r2, [r3, #16]
 8005abc:	4903      	ldr	r1, [pc, #12]	; (8005acc <pb_enc_bytes+0x3c>)
 8005abe:	2a00      	cmp	r2, #0
 8005ac0:	bf08      	it	eq
 8005ac2:	460a      	moveq	r2, r1
}
 8005ac4:	bc70      	pop	{r4, r5, r6}
        PB_RETURN_ERROR(stream, "bytes size exceeded");
 8005ac6:	611a      	str	r2, [r3, #16]
}
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	080110df 	.word	0x080110df

08005ad0 <pb_encode_submessage>:
{
 8005ad0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ad4:	b086      	sub	sp, #24
 8005ad6:	460f      	mov	r7, r1
 8005ad8:	4690      	mov	r8, r2
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8005ada:	2100      	movs	r1, #0
 8005adc:	2214      	movs	r2, #20
{
 8005ade:	4604      	mov	r4, r0
    pb_ostream_t substream = PB_OSTREAM_SIZING;
 8005ae0:	a801      	add	r0, sp, #4
 8005ae2:	f004 fd46 	bl	800a572 <memset>
    if (!pb_encode(&substream, fields, src_struct))
 8005ae6:	4642      	mov	r2, r8
 8005ae8:	4639      	mov	r1, r7
 8005aea:	a801      	add	r0, sp, #4
 8005aec:	f7ff ff6c 	bl	80059c8 <pb_encode>
 8005af0:	b910      	cbnz	r0, 8005af8 <pb_encode_submessage+0x28>
        stream->errmsg = substream.errmsg;
 8005af2:	9b05      	ldr	r3, [sp, #20]
    stream->errmsg = substream.errmsg;
 8005af4:	6123      	str	r3, [r4, #16]
 8005af6:	e00d      	b.n	8005b14 <pb_encode_submessage+0x44>
    size = substream.bytes_written;
 8005af8:	9e04      	ldr	r6, [sp, #16]
    if (!pb_encode_varint(stream, (pb_uint64_t)size))
 8005afa:	2500      	movs	r5, #0
 8005afc:	4620      	mov	r0, r4
 8005afe:	4632      	mov	r2, r6
 8005b00:	462b      	mov	r3, r5
 8005b02:	f7ff fd75 	bl	80055f0 <pb_encode_varint>
 8005b06:	b128      	cbz	r0, 8005b14 <pb_encode_submessage+0x44>
    if (stream->callback == NULL)
 8005b08:	6821      	ldr	r1, [r4, #0]
 8005b0a:	b931      	cbnz	r1, 8005b1a <pb_encode_submessage+0x4a>
        return pb_write(stream, NULL, size); /* Just sizing */
 8005b0c:	4632      	mov	r2, r6
 8005b0e:	4620      	mov	r0, r4
 8005b10:	f7ff fd4a 	bl	80055a8 <pb_write>
}
 8005b14:	b006      	add	sp, #24
 8005b16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (stream->bytes_written + size > stream->max_size)
 8005b1a:	68e3      	ldr	r3, [r4, #12]
 8005b1c:	68a2      	ldr	r2, [r4, #8]
 8005b1e:	4433      	add	r3, r6
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d907      	bls.n	8005b34 <pb_encode_submessage+0x64>
        PB_RETURN_ERROR(stream, "stream full");
 8005b24:	6923      	ldr	r3, [r4, #16]
 8005b26:	4a0e      	ldr	r2, [pc, #56]	; (8005b60 <pb_encode_submessage+0x90>)
        PB_RETURN_ERROR(stream, "submsg size changed");
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	bf08      	it	eq
 8005b2c:	4613      	moveq	r3, r2
 8005b2e:	4628      	mov	r0, r5
 8005b30:	6123      	str	r3, [r4, #16]
 8005b32:	e7ef      	b.n	8005b14 <pb_encode_submessage+0x44>
    substream.state = stream->state;
 8005b34:	6863      	ldr	r3, [r4, #4]
    status = pb_encode(&substream, fields, src_struct);
 8005b36:	4642      	mov	r2, r8
    substream.callback = stream->callback;
 8005b38:	9101      	str	r1, [sp, #4]
    status = pb_encode(&substream, fields, src_struct);
 8005b3a:	a801      	add	r0, sp, #4
 8005b3c:	4639      	mov	r1, r7
    substream.max_size = size;
 8005b3e:	e9cd 3602 	strd	r3, r6, [sp, #8]
    substream.errmsg = NULL;
 8005b42:	e9cd 5504 	strd	r5, r5, [sp, #16]
    status = pb_encode(&substream, fields, src_struct);
 8005b46:	f7ff ff3f 	bl	80059c8 <pb_encode>
    stream->bytes_written += substream.bytes_written;
 8005b4a:	9a04      	ldr	r2, [sp, #16]
 8005b4c:	68e3      	ldr	r3, [r4, #12]
    if (substream.bytes_written != size)
 8005b4e:	42b2      	cmp	r2, r6
    stream->bytes_written += substream.bytes_written;
 8005b50:	4413      	add	r3, r2
 8005b52:	60e3      	str	r3, [r4, #12]
    stream->state = substream.state;
 8005b54:	9b02      	ldr	r3, [sp, #8]
 8005b56:	6063      	str	r3, [r4, #4]
    stream->errmsg = substream.errmsg;
 8005b58:	9b05      	ldr	r3, [sp, #20]
    if (substream.bytes_written != size)
 8005b5a:	d0cb      	beq.n	8005af4 <pb_encode_submessage+0x24>
        PB_RETURN_ERROR(stream, "submsg size changed");
 8005b5c:	4a01      	ldr	r2, [pc, #4]	; (8005b64 <pb_encode_submessage+0x94>)
 8005b5e:	e7e3      	b.n	8005b28 <pb_encode_submessage+0x58>
 8005b60:	080110ac 	.word	0x080110ac
 8005b64:	080110f3 	.word	0x080110f3

08005b68 <pb_enc_submessage>:
    if (field->ptr == NULL)
 8005b68:	f8d1 100b 	ldr.w	r1, [r1, #11]
{
 8005b6c:	4603      	mov	r3, r0
    if (field->ptr == NULL)
 8005b6e:	b109      	cbz	r1, 8005b74 <pb_enc_submessage+0xc>
    return pb_encode_submessage(stream, (const pb_field_t*)field->ptr, src);
 8005b70:	f7ff bfae 	b.w	8005ad0 <pb_encode_submessage>
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8005b74:	6902      	ldr	r2, [r0, #16]
 8005b76:	4803      	ldr	r0, [pc, #12]	; (8005b84 <pb_enc_submessage+0x1c>)
 8005b78:	2a00      	cmp	r2, #0
 8005b7a:	bf08      	it	eq
 8005b7c:	4602      	moveq	r2, r0
}
 8005b7e:	4608      	mov	r0, r1
        PB_RETURN_ERROR(stream, "invalid field descriptor");
 8005b80:	611a      	str	r2, [r3, #16]
}
 8005b82:	4770      	bx	lr
 8005b84:	08011069 	.word	0x08011069

08005b88 <ai_version_get>:
 8005b88:	0212      	lsls	r2, r2, #8
 8005b8a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005b8e:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8005b92:	4770      	bx	lr

08005b94 <ai_platform_version_get>:
 8005b94:	0e01      	lsrs	r1, r0, #24
 8005b96:	2300      	movs	r3, #0
 8005b98:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8005b9c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8005ba0:	f361 0307 	bfi	r3, r1, #0, #8
 8005ba4:	b082      	sub	sp, #8
 8005ba6:	f362 230f 	bfi	r3, r2, #8, #8
 8005baa:	f360 4317 	bfi	r3, r0, #16, #8
 8005bae:	f023 407f 	bic.w	r0, r3, #4278190080	; 0xff000000
 8005bb2:	b002      	add	sp, #8
 8005bb4:	4770      	bx	lr
 8005bb6:	bf00      	nop

08005bb8 <get_tensor_size>:
 8005bb8:	b111      	cbz	r1, 8005bc0 <get_tensor_size+0x8>
 8005bba:	6983      	ldr	r3, [r0, #24]
 8005bbc:	6858      	ldr	r0, [r3, #4]
 8005bbe:	4770      	bx	lr
 8005bc0:	6883      	ldr	r3, [r0, #8]
 8005bc2:	0a1b      	lsrs	r3, r3, #8
 8005bc4:	d00a      	beq.n	8005bdc <get_tensor_size+0x24>
 8005bc6:	68c1      	ldr	r1, [r0, #12]
 8005bc8:	2001      	movs	r0, #1
 8005bca:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005bce:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005bd2:	4299      	cmp	r1, r3
 8005bd4:	fb02 f000 	mul.w	r0, r2, r0
 8005bd8:	d1f9      	bne.n	8005bce <get_tensor_size+0x16>
 8005bda:	4770      	bx	lr
 8005bdc:	2001      	movs	r0, #1
 8005bde:	4770      	bx	lr

08005be0 <get_tensor_byte_size>:
 8005be0:	b430      	push	{r4, r5}
 8005be2:	6985      	ldr	r5, [r0, #24]
 8005be4:	68c4      	ldr	r4, [r0, #12]
 8005be6:	6941      	ldr	r1, [r0, #20]
 8005be8:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <get_tensor_byte_size+0x24>)
 8005bea:	6828      	ldr	r0, [r5, #0]
 8005bec:	4a06      	ldr	r2, [pc, #24]	; (8005c08 <get_tensor_byte_size+0x28>)
 8005bee:	4003      	ands	r3, r0
 8005bf0:	68c9      	ldr	r1, [r1, #12]
 8005bf2:	68e0      	ldr	r0, [r4, #12]
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	fb01 f000 	mul.w	r0, r1, r0
 8005bfa:	d101      	bne.n	8005c00 <get_tensor_byte_size+0x20>
 8005bfc:	3007      	adds	r0, #7
 8005bfe:	08c0      	lsrs	r0, r0, #3
 8005c00:	bc30      	pop	{r4, r5}
 8005c02:	4770      	bx	lr
 8005c04:	017fffff 	.word	0x017fffff
 8005c08:	000400c0 	.word	0x000400c0

08005c0c <ai_buffer_get_size>:
 8005c0c:	b368      	cbz	r0, 8005c6a <ai_buffer_get_size+0x5e>
 8005c0e:	4b17      	ldr	r3, [pc, #92]	; (8005c6c <ai_buffer_get_size+0x60>)
 8005c10:	4a17      	ldr	r2, [pc, #92]	; (8005c70 <ai_buffer_get_size+0x64>)
 8005c12:	b410      	push	{r4}
 8005c14:	6804      	ldr	r4, [r0, #0]
 8005c16:	4023      	ands	r3, r4
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d123      	bne.n	8005c64 <ai_buffer_get_size+0x58>
 8005c1c:	b311      	cbz	r1, 8005c64 <ai_buffer_get_size+0x58>
 8005c1e:	6984      	ldr	r4, [r0, #24]
 8005c20:	6862      	ldr	r2, [r4, #4]
 8005c22:	321f      	adds	r2, #31
 8005c24:	f022 021f 	bic.w	r2, r2, #31
 8005c28:	7d03      	ldrb	r3, [r0, #20]
 8005c2a:	6941      	ldr	r1, [r0, #20]
 8005c2c:	f1a3 0301 	sub.w	r3, r3, #1
 8005c30:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8005c34:	fab3 f383 	clz	r3, r3
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005c3e:	da0c      	bge.n	8005c5a <ai_buffer_get_size+0x4e>
 8005c40:	2b01      	cmp	r3, #1
 8005c42:	d103      	bne.n	8005c4c <ai_buffer_get_size+0x40>
 8005c44:	2802      	cmp	r0, #2
 8005c46:	f04f 0302 	mov.w	r3, #2
 8005c4a:	d006      	beq.n	8005c5a <ai_buffer_get_size+0x4e>
 8005c4c:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005c50:	3301      	adds	r3, #1
 8005c52:	4298      	cmp	r0, r3
 8005c54:	fb01 f202 	mul.w	r2, r1, r2
 8005c58:	d1f2      	bne.n	8005c40 <ai_buffer_get_size+0x34>
 8005c5a:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8005c5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c62:	4770      	bx	lr
 8005c64:	6984      	ldr	r4, [r0, #24]
 8005c66:	6862      	ldr	r2, [r4, #4]
 8005c68:	e7de      	b.n	8005c28 <ai_buffer_get_size+0x1c>
 8005c6a:	4770      	bx	lr
 8005c6c:	017fffff 	.word	0x017fffff
 8005c70:	000400c0 	.word	0x000400c0

08005c74 <ai_buffer_get_byte_size>:
 8005c74:	b128      	cbz	r0, 8005c82 <ai_buffer_get_byte_size+0xe>
 8005c76:	f3c1 11c6 	ubfx	r1, r1, #7, #7
 8005c7a:	fb01 f000 	mul.w	r0, r1, r0
 8005c7e:	3007      	adds	r0, #7
 8005c80:	08c0      	lsrs	r0, r0, #3
 8005c82:	4770      	bx	lr

08005c84 <ai_buffer_array_sane>:
 8005c84:	b138      	cbz	r0, 8005c96 <ai_buffer_array_sane+0x12>
 8005c86:	6843      	ldr	r3, [r0, #4]
 8005c88:	b123      	cbz	r3, 8005c94 <ai_buffer_array_sane+0x10>
 8005c8a:	8840      	ldrh	r0, [r0, #2]
 8005c8c:	3800      	subs	r0, #0
 8005c8e:	bf18      	it	ne
 8005c90:	2001      	movne	r0, #1
 8005c92:	4770      	bx	lr
 8005c94:	4618      	mov	r0, r3
 8005c96:	4770      	bx	lr

08005c98 <ai_buffer_array_item_set_address>:
 8005c98:	b150      	cbz	r0, 8005cb0 <ai_buffer_array_item_set_address+0x18>
 8005c9a:	6843      	ldr	r3, [r0, #4]
 8005c9c:	b14b      	cbz	r3, 8005cb2 <ai_buffer_array_item_set_address+0x1a>
 8005c9e:	8840      	ldrh	r0, [r0, #2]
 8005ca0:	b900      	cbnz	r0, 8005ca4 <ai_buffer_array_item_set_address+0xc>
 8005ca2:	4770      	bx	lr
 8005ca4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005ca8:	2001      	movs	r0, #1
 8005caa:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005cae:	604a      	str	r2, [r1, #4]
 8005cb0:	4770      	bx	lr
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	4770      	bx	lr
 8005cb6:	bf00      	nop

08005cb8 <_platform_observer_node_exec_cb>:
 8005cb8:	2a00      	cmp	r2, #0
 8005cba:	d06c      	beq.n	8005d96 <_platform_observer_node_exec_cb+0xde>
 8005cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005cc0:	6815      	ldr	r5, [r2, #0]
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	4614      	mov	r4, r2
 8005cc6:	2d00      	cmp	r5, #0
 8005cc8:	d067      	beq.n	8005d9a <_platform_observer_node_exec_cb+0xe2>
 8005cca:	8993      	ldrh	r3, [r2, #12]
 8005ccc:	f240 2c02 	movw	ip, #514	; 0x202
 8005cd0:	89d2      	ldrh	r2, [r2, #14]
 8005cd2:	460e      	mov	r6, r1
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	f240 3102 	movw	r1, #770	; 0x302
 8005cda:	f102 32ff 	add.w	r2, r2, #4294967295
 8005cde:	f240 3e01 	movw	lr, #769	; 0x301
 8005ce2:	bf18      	it	ne
 8005ce4:	4667      	movne	r7, ip
 8005ce6:	f240 2c01 	movw	ip, #513	; 0x201
 8005cea:	bf0d      	iteet	eq
 8005cec:	460f      	moveq	r7, r1
 8005cee:	f44f 7901 	movne.w	r9, #516	; 0x204
 8005cf2:	46e6      	movne	lr, ip
 8005cf4:	f44f 7941 	moveq.w	r9, #772	; 0x304
 8005cf8:	f240 1c01 	movw	ip, #257	; 0x101
 8005cfc:	bf1b      	ittet	ne
 8005cfe:	f04f 0804 	movne.w	r8, #4
 8005d02:	f04f 0c01 	movne.w	ip, #1
 8005d06:	f44f 7882 	moveq.w	r8, #260	; 0x104
 8005d0a:	2102      	movne	r1, #2
 8005d0c:	bf08      	it	eq
 8005d0e:	f44f 7181 	moveq.w	r1, #258	; 0x102
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d013      	beq.n	8005d3e <_platform_observer_node_exec_cb+0x86>
 8005d16:	b148      	cbz	r0, 8005d2c <_platform_observer_node_exec_cb+0x74>
 8005d18:	2801      	cmp	r0, #1
 8005d1a:	d042      	beq.n	8005da2 <_platform_observer_node_exec_cb+0xea>
 8005d1c:	2802      	cmp	r0, #2
 8005d1e:	d025      	beq.n	8005d6c <_platform_observer_node_exec_cb+0xb4>
 8005d20:	2803      	cmp	r0, #3
 8005d22:	d045      	beq.n	8005db0 <_platform_observer_node_exec_cb+0xf8>
 8005d24:	2000      	movs	r0, #0
 8005d26:	b005      	add	sp, #20
 8005d28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d2c:	68a2      	ldr	r2, [r4, #8]
 8005d2e:	07d7      	lsls	r7, r2, #31
 8005d30:	d40b      	bmi.n	8005d4a <_platform_observer_node_exec_cb+0x92>
 8005d32:	3301      	adds	r3, #1
 8005d34:	2000      	movs	r0, #0
 8005d36:	81a3      	strh	r3, [r4, #12]
 8005d38:	b005      	add	sp, #20
 8005d3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005d3e:	46c8      	mov	r8, r9
 8005d40:	4639      	mov	r1, r7
 8005d42:	46f4      	mov	ip, lr
 8005d44:	2800      	cmp	r0, #0
 8005d46:	d1e7      	bne.n	8005d18 <_platform_observer_node_exec_cb+0x60>
 8005d48:	e7f0      	b.n	8005d2c <_platform_observer_node_exec_cb+0x74>
 8005d4a:	f8ad 3000 	strh.w	r3, [sp]
 8005d4e:	466a      	mov	r2, sp
 8005d50:	8873      	ldrh	r3, [r6, #2]
 8005d52:	4661      	mov	r1, ip
 8005d54:	9002      	str	r0, [sp, #8]
 8005d56:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005d5a:	8833      	ldrh	r3, [r6, #0]
 8005d5c:	6860      	ldr	r0, [r4, #4]
 8005d5e:	f8ad 3002 	strh.w	r3, [sp, #2]
 8005d62:	69b3      	ldr	r3, [r6, #24]
 8005d64:	9303      	str	r3, [sp, #12]
 8005d66:	47a8      	blx	r5
 8005d68:	89a3      	ldrh	r3, [r4, #12]
 8005d6a:	e7e2      	b.n	8005d32 <_platform_observer_node_exec_cb+0x7a>
 8005d6c:	68a2      	ldr	r2, [r4, #8]
 8005d6e:	6126      	str	r6, [r4, #16]
 8005d70:	0790      	lsls	r0, r2, #30
 8005d72:	d5d7      	bpl.n	8005d24 <_platform_observer_node_exec_cb+0x6c>
 8005d74:	f8ad 3000 	strh.w	r3, [sp]
 8005d78:	8873      	ldrh	r3, [r6, #2]
 8005d7a:	8832      	ldrh	r2, [r6, #0]
 8005d7c:	6860      	ldr	r0, [r4, #4]
 8005d7e:	2400      	movs	r4, #0
 8005d80:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005d84:	69b3      	ldr	r3, [r6, #24]
 8005d86:	f8ad 2002 	strh.w	r2, [sp, #2]
 8005d8a:	466a      	mov	r2, sp
 8005d8c:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8005d90:	47a8      	blx	r5
 8005d92:	4620      	mov	r0, r4
 8005d94:	e7d0      	b.n	8005d38 <_platform_observer_node_exec_cb+0x80>
 8005d96:	2001      	movs	r0, #1
 8005d98:	4770      	bx	lr
 8005d9a:	2001      	movs	r0, #1
 8005d9c:	b005      	add	sp, #20
 8005d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005da2:	2300      	movs	r3, #0
 8005da4:	6126      	str	r6, [r4, #16]
 8005da6:	4618      	mov	r0, r3
 8005da8:	81a3      	strh	r3, [r4, #12]
 8005daa:	b005      	add	sp, #20
 8005dac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005db0:	68a2      	ldr	r2, [r4, #8]
 8005db2:	0752      	lsls	r2, r2, #29
 8005db4:	d5bd      	bpl.n	8005d32 <_platform_observer_node_exec_cb+0x7a>
 8005db6:	6922      	ldr	r2, [r4, #16]
 8005db8:	2000      	movs	r0, #0
 8005dba:	f8ad 3000 	strh.w	r3, [sp]
 8005dbe:	4641      	mov	r1, r8
 8005dc0:	8853      	ldrh	r3, [r2, #2]
 8005dc2:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005dc6:	8813      	ldrh	r3, [r2, #0]
 8005dc8:	f8ad 3002 	strh.w	r3, [sp, #2]
 8005dcc:	6993      	ldr	r3, [r2, #24]
 8005dce:	466a      	mov	r2, sp
 8005dd0:	9002      	str	r0, [sp, #8]
 8005dd2:	9303      	str	r3, [sp, #12]
 8005dd4:	6860      	ldr	r0, [r4, #4]
 8005dd6:	47a8      	blx	r5
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	e7aa      	b.n	8005d32 <_platform_observer_node_exec_cb+0x7a>

08005ddc <_ai_platform_acquire_crc>:
 8005ddc:	2001      	movs	r0, #1
 8005dde:	4770      	bx	lr

08005de0 <_ai_platform_release_crc>:
 8005de0:	4770      	bx	lr
 8005de2:	bf00      	nop

08005de4 <ai_platform_get_weights_map>:
 8005de4:	2900      	cmp	r1, #0
 8005de6:	bf18      	it	ne
 8005de8:	2800      	cmpne	r0, #0
 8005dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dec:	bf0c      	ite	eq
 8005dee:	2401      	moveq	r4, #1
 8005df0:	2400      	movne	r4, #0
 8005df2:	2a00      	cmp	r2, #0
 8005df4:	bf08      	it	eq
 8005df6:	f044 0401 	orreq.w	r4, r4, #1
 8005dfa:	b114      	cbz	r4, 8005e02 <ai_platform_get_weights_map+0x1e>
 8005dfc:	2400      	movs	r4, #0
 8005dfe:	4620      	mov	r0, r4
 8005e00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e02:	4616      	mov	r6, r2
 8005e04:	4b22      	ldr	r3, [pc, #136]	; (8005e90 <ai_platform_get_weights_map+0xac>)
 8005e06:	6812      	ldr	r2, [r2, #0]
 8005e08:	4605      	mov	r5, r0
 8005e0a:	460f      	mov	r7, r1
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d022      	beq.n	8005e56 <ai_platform_get_weights_map+0x72>
 8005e10:	6870      	ldr	r0, [r6, #4]
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d0f2      	beq.n	8005dfc <ai_platform_get_weights_map+0x18>
 8005e16:	6806      	ldr	r6, [r0, #0]
 8005e18:	429e      	cmp	r6, r3
 8005e1a:	d006      	beq.n	8005e2a <ai_platform_get_weights_map+0x46>
 8005e1c:	f1a1 0401 	sub.w	r4, r1, #1
 8005e20:	6028      	str	r0, [r5, #0]
 8005e22:	fab4 f484 	clz	r4, r4
 8005e26:	0964      	lsrs	r4, r4, #5
 8005e28:	e7e9      	b.n	8005dfe <ai_platform_get_weights_map+0x1a>
 8005e2a:	3d04      	subs	r5, #4
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	4621      	mov	r1, r4
 8005e30:	e000      	b.n	8005e34 <ai_platform_get_weights_map+0x50>
 8005e32:	4619      	mov	r1, r3
 8005e34:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005e38:	42b3      	cmp	r3, r6
 8005e3a:	d025      	beq.n	8005e88 <ai_platform_get_weights_map+0xa4>
 8005e3c:	f845 3f04 	str.w	r3, [r5, #4]!
 8005e40:	1c4b      	adds	r3, r1, #1
 8005e42:	429f      	cmp	r7, r3
 8005e44:	d8f5      	bhi.n	8005e32 <ai_platform_get_weights_map+0x4e>
 8005e46:	d1da      	bne.n	8005dfe <ai_platform_get_weights_map+0x1a>
 8005e48:	3102      	adds	r1, #2
 8005e4a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8005e4e:	42b3      	cmp	r3, r6
 8005e50:	d1d5      	bne.n	8005dfe <ai_platform_get_weights_map+0x1a>
 8005e52:	2401      	movs	r4, #1
 8005e54:	e7d3      	b.n	8005dfe <ai_platform_get_weights_map+0x1a>
 8005e56:	1d30      	adds	r0, r6, #4
 8005e58:	f7ff ff14 	bl	8005c84 <ai_buffer_array_sane>
 8005e5c:	2800      	cmp	r0, #0
 8005e5e:	d0cd      	beq.n	8005dfc <ai_platform_get_weights_map+0x18>
 8005e60:	88f3      	ldrh	r3, [r6, #6]
 8005e62:	429f      	cmp	r7, r3
 8005e64:	d1ca      	bne.n	8005dfc <ai_platform_get_weights_map+0x18>
 8005e66:	3d04      	subs	r5, #4
 8005e68:	4622      	mov	r2, r4
 8005e6a:	68b3      	ldr	r3, [r6, #8]
 8005e6c:	4423      	add	r3, r4
 8005e6e:	341c      	adds	r4, #28
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	b123      	cbz	r3, 8005e7e <ai_platform_get_weights_map+0x9a>
 8005e74:	3201      	adds	r2, #1
 8005e76:	f845 3f04 	str.w	r3, [r5, #4]!
 8005e7a:	4297      	cmp	r7, r2
 8005e7c:	d8f5      	bhi.n	8005e6a <ai_platform_get_weights_map+0x86>
 8005e7e:	1abc      	subs	r4, r7, r2
 8005e80:	fab4 f484 	clz	r4, r4
 8005e84:	0964      	lsrs	r4, r4, #5
 8005e86:	e7ba      	b.n	8005dfe <ai_platform_get_weights_map+0x1a>
 8005e88:	428f      	cmp	r7, r1
 8005e8a:	d1b8      	bne.n	8005dfe <ai_platform_get_weights_map+0x1a>
 8005e8c:	e7e1      	b.n	8005e52 <ai_platform_get_weights_map+0x6e>
 8005e8e:	bf00      	nop
 8005e90:	a1facade 	.word	0xa1facade

08005e94 <ai_platform_get_activations_map>:
 8005e94:	2900      	cmp	r1, #0
 8005e96:	bf18      	it	ne
 8005e98:	2800      	cmpne	r0, #0
 8005e9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e9c:	bf0c      	ite	eq
 8005e9e:	2401      	moveq	r4, #1
 8005ea0:	2400      	movne	r4, #0
 8005ea2:	2a00      	cmp	r2, #0
 8005ea4:	bf08      	it	eq
 8005ea6:	f044 0401 	orreq.w	r4, r4, #1
 8005eaa:	b114      	cbz	r4, 8005eb2 <ai_platform_get_activations_map+0x1e>
 8005eac:	2400      	movs	r4, #0
 8005eae:	4620      	mov	r0, r4
 8005eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005eb2:	4616      	mov	r6, r2
 8005eb4:	4b22      	ldr	r3, [pc, #136]	; (8005f40 <ai_platform_get_activations_map+0xac>)
 8005eb6:	6812      	ldr	r2, [r2, #0]
 8005eb8:	4605      	mov	r5, r0
 8005eba:	460f      	mov	r7, r1
 8005ebc:	429a      	cmp	r2, r3
 8005ebe:	d022      	beq.n	8005f06 <ai_platform_get_activations_map+0x72>
 8005ec0:	6a30      	ldr	r0, [r6, #32]
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d0f2      	beq.n	8005eac <ai_platform_get_activations_map+0x18>
 8005ec6:	6806      	ldr	r6, [r0, #0]
 8005ec8:	429e      	cmp	r6, r3
 8005eca:	d006      	beq.n	8005eda <ai_platform_get_activations_map+0x46>
 8005ecc:	f1a1 0401 	sub.w	r4, r1, #1
 8005ed0:	6028      	str	r0, [r5, #0]
 8005ed2:	fab4 f484 	clz	r4, r4
 8005ed6:	0964      	lsrs	r4, r4, #5
 8005ed8:	e7e9      	b.n	8005eae <ai_platform_get_activations_map+0x1a>
 8005eda:	3d04      	subs	r5, #4
 8005edc:	4602      	mov	r2, r0
 8005ede:	4621      	mov	r1, r4
 8005ee0:	e000      	b.n	8005ee4 <ai_platform_get_activations_map+0x50>
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005ee8:	42b3      	cmp	r3, r6
 8005eea:	d026      	beq.n	8005f3a <ai_platform_get_activations_map+0xa6>
 8005eec:	f845 3f04 	str.w	r3, [r5, #4]!
 8005ef0:	1c4b      	adds	r3, r1, #1
 8005ef2:	429f      	cmp	r7, r3
 8005ef4:	d8f5      	bhi.n	8005ee2 <ai_platform_get_activations_map+0x4e>
 8005ef6:	d1da      	bne.n	8005eae <ai_platform_get_activations_map+0x1a>
 8005ef8:	3102      	adds	r1, #2
 8005efa:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8005efe:	42b3      	cmp	r3, r6
 8005f00:	d1d5      	bne.n	8005eae <ai_platform_get_activations_map+0x1a>
 8005f02:	2401      	movs	r4, #1
 8005f04:	e7d3      	b.n	8005eae <ai_platform_get_activations_map+0x1a>
 8005f06:	f106 000c 	add.w	r0, r6, #12
 8005f0a:	f7ff febb 	bl	8005c84 <ai_buffer_array_sane>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d0cc      	beq.n	8005eac <ai_platform_get_activations_map+0x18>
 8005f12:	89f3      	ldrh	r3, [r6, #14]
 8005f14:	429f      	cmp	r7, r3
 8005f16:	d1c9      	bne.n	8005eac <ai_platform_get_activations_map+0x18>
 8005f18:	3d04      	subs	r5, #4
 8005f1a:	4622      	mov	r2, r4
 8005f1c:	6933      	ldr	r3, [r6, #16]
 8005f1e:	4423      	add	r3, r4
 8005f20:	341c      	adds	r4, #28
 8005f22:	685b      	ldr	r3, [r3, #4]
 8005f24:	b123      	cbz	r3, 8005f30 <ai_platform_get_activations_map+0x9c>
 8005f26:	3201      	adds	r2, #1
 8005f28:	f845 3f04 	str.w	r3, [r5, #4]!
 8005f2c:	4297      	cmp	r7, r2
 8005f2e:	d8f5      	bhi.n	8005f1c <ai_platform_get_activations_map+0x88>
 8005f30:	1abc      	subs	r4, r7, r2
 8005f32:	fab4 f484 	clz	r4, r4
 8005f36:	0964      	lsrs	r4, r4, #5
 8005f38:	e7b9      	b.n	8005eae <ai_platform_get_activations_map+0x1a>
 8005f3a:	428f      	cmp	r7, r1
 8005f3c:	d1b7      	bne.n	8005eae <ai_platform_get_activations_map+0x1a>
 8005f3e:	e7e0      	b.n	8005f02 <ai_platform_get_activations_map+0x6e>
 8005f40:	a1facade 	.word	0xa1facade

08005f44 <ai_platform_bind_network_params>:
 8005f44:	2a00      	cmp	r2, #0
 8005f46:	bf18      	it	ne
 8005f48:	2900      	cmpne	r1, #0
 8005f4a:	d010      	beq.n	8005f6e <ai_platform_bind_network_params+0x2a>
 8005f4c:	b178      	cbz	r0, 8005f6e <ai_platform_bind_network_params+0x2a>
 8005f4e:	4603      	mov	r3, r0
 8005f50:	4808      	ldr	r0, [pc, #32]	; (8005f74 <ai_platform_bind_network_params+0x30>)
 8005f52:	f103 0c0c 	add.w	ip, r3, #12
 8005f56:	f843 0b04 	str.w	r0, [r3], #4
 8005f5a:	c903      	ldmia	r1, {r0, r1}
 8005f5c:	e883 0003 	stmia.w	r3, {r0, r1}
 8005f60:	2301      	movs	r3, #1
 8005f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f66:	e88c 0003 	stmia.w	ip, {r0, r1}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	4770      	bx	lr
 8005f6e:	2300      	movs	r3, #0
 8005f70:	4618      	mov	r0, r3
 8005f72:	4770      	bx	lr
 8005f74:	a1facade 	.word	0xa1facade

08005f78 <ai_platform_runtime_get_revision>:
 8005f78:	b508      	push	{r3, lr}
 8005f7a:	f7ff ff2f 	bl	8005ddc <_ai_platform_acquire_crc>
 8005f7e:	4b39      	ldr	r3, [pc, #228]	; (8006064 <ai_platform_runtime_get_revision+0xec>)
 8005f80:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005f8a:	189a      	adds	r2, r3, r2
 8005f8c:	2a01      	cmp	r2, #1
 8005f8e:	d929      	bls.n	8005fe4 <ai_platform_runtime_get_revision+0x6c>
 8005f90:	f240 4249 	movw	r2, #1097	; 0x449
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d025      	beq.n	8005fe4 <ai_platform_runtime_get_revision+0x6c>
 8005f98:	4a33      	ldr	r2, [pc, #204]	; (8006068 <ai_platform_runtime_get_revision+0xf0>)
 8005f9a:	6813      	ldr	r3, [r2, #0]
 8005f9c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fa0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005fa4:	d02b      	beq.n	8005ffe <ai_platform_runtime_get_revision+0x86>
 8005fa6:	6813      	ldr	r3, [r2, #0]
 8005fa8:	f240 4183 	movw	r1, #1155	; 0x483
 8005fac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fb0:	428b      	cmp	r3, r1
 8005fb2:	d046      	beq.n	8006042 <ai_platform_runtime_get_revision+0xca>
 8005fb4:	6813      	ldr	r3, [r2, #0]
 8005fb6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fba:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005fbe:	d032      	beq.n	8006026 <ai_platform_runtime_get_revision+0xae>
 8005fc0:	6813      	ldr	r3, [r2, #0]
 8005fc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d129      	bne.n	800601e <ai_platform_runtime_get_revision+0xa6>
 8005fca:	4a28      	ldr	r2, [pc, #160]	; (800606c <ai_platform_runtime_get_revision+0xf4>)
 8005fcc:	2301      	movs	r3, #1
 8005fce:	6093      	str	r3, [r2, #8]
 8005fd0:	6893      	ldr	r3, [r2, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d1fc      	bne.n	8005fd0 <ai_platform_runtime_get_revision+0x58>
 8005fd6:	4926      	ldr	r1, [pc, #152]	; (8006070 <ai_platform_runtime_get_revision+0xf8>)
 8005fd8:	4b26      	ldr	r3, [pc, #152]	; (8006074 <ai_platform_runtime_get_revision+0xfc>)
 8005fda:	6011      	str	r1, [r2, #0]
 8005fdc:	6812      	ldr	r2, [r2, #0]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d01d      	beq.n	800601e <ai_platform_runtime_get_revision+0xa6>
 8005fe2:	e7fe      	b.n	8005fe2 <ai_platform_runtime_get_revision+0x6a>
 8005fe4:	4a21      	ldr	r2, [pc, #132]	; (800606c <ai_platform_runtime_get_revision+0xf4>)
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	6093      	str	r3, [r2, #8]
 8005fea:	6893      	ldr	r3, [r2, #8]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1fc      	bne.n	8005fea <ai_platform_runtime_get_revision+0x72>
 8005ff0:	491f      	ldr	r1, [pc, #124]	; (8006070 <ai_platform_runtime_get_revision+0xf8>)
 8005ff2:	4b20      	ldr	r3, [pc, #128]	; (8006074 <ai_platform_runtime_get_revision+0xfc>)
 8005ff4:	6011      	str	r1, [r2, #0]
 8005ff6:	6812      	ldr	r2, [r2, #0]
 8005ff8:	429a      	cmp	r2, r3
 8005ffa:	d010      	beq.n	800601e <ai_platform_runtime_get_revision+0xa6>
 8005ffc:	e7fe      	b.n	8005ffc <ai_platform_runtime_get_revision+0x84>
 8005ffe:	4a1e      	ldr	r2, [pc, #120]	; (8006078 <ai_platform_runtime_get_revision+0x100>)
 8006000:	2301      	movs	r3, #1
 8006002:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006006:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1fb      	bne.n	8006006 <ai_platform_runtime_get_revision+0x8e>
 800600e:	4918      	ldr	r1, [pc, #96]	; (8006070 <ai_platform_runtime_get_revision+0xf8>)
 8006010:	4b18      	ldr	r3, [pc, #96]	; (8006074 <ai_platform_runtime_get_revision+0xfc>)
 8006012:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006016:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800601a:	429a      	cmp	r2, r3
 800601c:	d110      	bne.n	8006040 <ai_platform_runtime_get_revision+0xc8>
 800601e:	f7ff fedf 	bl	8005de0 <_ai_platform_release_crc>
 8006022:	4816      	ldr	r0, [pc, #88]	; (800607c <ai_platform_runtime_get_revision+0x104>)
 8006024:	bd08      	pop	{r3, pc}
 8006026:	4a11      	ldr	r2, [pc, #68]	; (800606c <ai_platform_runtime_get_revision+0xf4>)
 8006028:	2301      	movs	r3, #1
 800602a:	6093      	str	r3, [r2, #8]
 800602c:	6893      	ldr	r3, [r2, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1fc      	bne.n	800602c <ai_platform_runtime_get_revision+0xb4>
 8006032:	490f      	ldr	r1, [pc, #60]	; (8006070 <ai_platform_runtime_get_revision+0xf8>)
 8006034:	4b0f      	ldr	r3, [pc, #60]	; (8006074 <ai_platform_runtime_get_revision+0xfc>)
 8006036:	6011      	str	r1, [r2, #0]
 8006038:	6812      	ldr	r2, [r2, #0]
 800603a:	429a      	cmp	r2, r3
 800603c:	d0ef      	beq.n	800601e <ai_platform_runtime_get_revision+0xa6>
 800603e:	e7fe      	b.n	800603e <ai_platform_runtime_get_revision+0xc6>
 8006040:	e7fe      	b.n	8006040 <ai_platform_runtime_get_revision+0xc8>
 8006042:	4a0d      	ldr	r2, [pc, #52]	; (8006078 <ai_platform_runtime_get_revision+0x100>)
 8006044:	2301      	movs	r3, #1
 8006046:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800604a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800604e:	2b00      	cmp	r3, #0
 8006050:	d1fb      	bne.n	800604a <ai_platform_runtime_get_revision+0xd2>
 8006052:	4907      	ldr	r1, [pc, #28]	; (8006070 <ai_platform_runtime_get_revision+0xf8>)
 8006054:	4b07      	ldr	r3, [pc, #28]	; (8006074 <ai_platform_runtime_get_revision+0xfc>)
 8006056:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800605a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800605e:	429a      	cmp	r2, r3
 8006060:	d0dd      	beq.n	800601e <ai_platform_runtime_get_revision+0xa6>
 8006062:	e7fe      	b.n	8006062 <ai_platform_runtime_get_revision+0xea>
 8006064:	e0042000 	.word	0xe0042000
 8006068:	5c001000 	.word	0x5c001000
 800606c:	40023000 	.word	0x40023000
 8006070:	f407a5c2 	.word	0xf407a5c2
 8006074:	b5e8b5cd 	.word	0xb5e8b5cd
 8006078:	58024000 	.word	0x58024000
 800607c:	080115b4 	.word	0x080115b4

08006080 <ai_platform_runtime_get_version>:
 8006080:	b500      	push	{lr}
 8006082:	b083      	sub	sp, #12
 8006084:	f7ff feaa 	bl	8005ddc <_ai_platform_acquire_crc>
 8006088:	4b42      	ldr	r3, [pc, #264]	; (8006194 <ai_platform_runtime_get_version+0x114>)
 800608a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006094:	189a      	adds	r2, r3, r2
 8006096:	2a01      	cmp	r2, #1
 8006098:	d929      	bls.n	80060ee <ai_platform_runtime_get_version+0x6e>
 800609a:	f240 4249 	movw	r2, #1097	; 0x449
 800609e:	4293      	cmp	r3, r2
 80060a0:	d025      	beq.n	80060ee <ai_platform_runtime_get_version+0x6e>
 80060a2:	4a3d      	ldr	r2, [pc, #244]	; (8006198 <ai_platform_runtime_get_version+0x118>)
 80060a4:	6813      	ldr	r3, [r2, #0]
 80060a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060aa:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80060ae:	d02b      	beq.n	8006108 <ai_platform_runtime_get_version+0x88>
 80060b0:	6813      	ldr	r3, [r2, #0]
 80060b2:	f240 4183 	movw	r1, #1155	; 0x483
 80060b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060ba:	428b      	cmp	r3, r1
 80060bc:	d059      	beq.n	8006172 <ai_platform_runtime_get_version+0xf2>
 80060be:	6813      	ldr	r3, [r2, #0]
 80060c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060c4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80060c8:	d045      	beq.n	8006156 <ai_platform_runtime_get_version+0xd6>
 80060ca:	6813      	ldr	r3, [r2, #0]
 80060cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d129      	bne.n	8006128 <ai_platform_runtime_get_version+0xa8>
 80060d4:	4a31      	ldr	r2, [pc, #196]	; (800619c <ai_platform_runtime_get_version+0x11c>)
 80060d6:	2301      	movs	r3, #1
 80060d8:	6093      	str	r3, [r2, #8]
 80060da:	6893      	ldr	r3, [r2, #8]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d1fc      	bne.n	80060da <ai_platform_runtime_get_version+0x5a>
 80060e0:	492f      	ldr	r1, [pc, #188]	; (80061a0 <ai_platform_runtime_get_version+0x120>)
 80060e2:	4b30      	ldr	r3, [pc, #192]	; (80061a4 <ai_platform_runtime_get_version+0x124>)
 80060e4:	6011      	str	r1, [r2, #0]
 80060e6:	6812      	ldr	r2, [r2, #0]
 80060e8:	429a      	cmp	r2, r3
 80060ea:	d01d      	beq.n	8006128 <ai_platform_runtime_get_version+0xa8>
 80060ec:	e7fe      	b.n	80060ec <ai_platform_runtime_get_version+0x6c>
 80060ee:	4a2b      	ldr	r2, [pc, #172]	; (800619c <ai_platform_runtime_get_version+0x11c>)
 80060f0:	2301      	movs	r3, #1
 80060f2:	6093      	str	r3, [r2, #8]
 80060f4:	6893      	ldr	r3, [r2, #8]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1fc      	bne.n	80060f4 <ai_platform_runtime_get_version+0x74>
 80060fa:	4929      	ldr	r1, [pc, #164]	; (80061a0 <ai_platform_runtime_get_version+0x120>)
 80060fc:	4b29      	ldr	r3, [pc, #164]	; (80061a4 <ai_platform_runtime_get_version+0x124>)
 80060fe:	6011      	str	r1, [r2, #0]
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d010      	beq.n	8006128 <ai_platform_runtime_get_version+0xa8>
 8006106:	e7fe      	b.n	8006106 <ai_platform_runtime_get_version+0x86>
 8006108:	4a27      	ldr	r2, [pc, #156]	; (80061a8 <ai_platform_runtime_get_version+0x128>)
 800610a:	2301      	movs	r3, #1
 800610c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006110:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1fb      	bne.n	8006110 <ai_platform_runtime_get_version+0x90>
 8006118:	4921      	ldr	r1, [pc, #132]	; (80061a0 <ai_platform_runtime_get_version+0x120>)
 800611a:	4b22      	ldr	r3, [pc, #136]	; (80061a4 <ai_platform_runtime_get_version+0x124>)
 800611c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006120:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006124:	429a      	cmp	r2, r3
 8006126:	d123      	bne.n	8006170 <ai_platform_runtime_get_version+0xf0>
 8006128:	f7ff fe5a 	bl	8005de0 <_ai_platform_release_crc>
 800612c:	4b1f      	ldr	r3, [pc, #124]	; (80061ac <ai_platform_runtime_get_version+0x12c>)
 800612e:	2000      	movs	r0, #0
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	fa5f fc83 	uxtb.w	ip, r3
 8006136:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800613a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800613e:	0e1b      	lsrs	r3, r3, #24
 8006140:	f36c 0007 	bfi	r0, ip, #0, #8
 8006144:	f361 200f 	bfi	r0, r1, #8, #8
 8006148:	f362 4017 	bfi	r0, r2, #16, #8
 800614c:	f363 601f 	bfi	r0, r3, #24, #8
 8006150:	b003      	add	sp, #12
 8006152:	f85d fb04 	ldr.w	pc, [sp], #4
 8006156:	4a11      	ldr	r2, [pc, #68]	; (800619c <ai_platform_runtime_get_version+0x11c>)
 8006158:	2301      	movs	r3, #1
 800615a:	6093      	str	r3, [r2, #8]
 800615c:	6893      	ldr	r3, [r2, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1fc      	bne.n	800615c <ai_platform_runtime_get_version+0xdc>
 8006162:	490f      	ldr	r1, [pc, #60]	; (80061a0 <ai_platform_runtime_get_version+0x120>)
 8006164:	4b0f      	ldr	r3, [pc, #60]	; (80061a4 <ai_platform_runtime_get_version+0x124>)
 8006166:	6011      	str	r1, [r2, #0]
 8006168:	6812      	ldr	r2, [r2, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d0dc      	beq.n	8006128 <ai_platform_runtime_get_version+0xa8>
 800616e:	e7fe      	b.n	800616e <ai_platform_runtime_get_version+0xee>
 8006170:	e7fe      	b.n	8006170 <ai_platform_runtime_get_version+0xf0>
 8006172:	4a0d      	ldr	r2, [pc, #52]	; (80061a8 <ai_platform_runtime_get_version+0x128>)
 8006174:	2301      	movs	r3, #1
 8006176:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800617a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800617e:	2b00      	cmp	r3, #0
 8006180:	d1fb      	bne.n	800617a <ai_platform_runtime_get_version+0xfa>
 8006182:	4907      	ldr	r1, [pc, #28]	; (80061a0 <ai_platform_runtime_get_version+0x120>)
 8006184:	4b07      	ldr	r3, [pc, #28]	; (80061a4 <ai_platform_runtime_get_version+0x124>)
 8006186:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800618a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800618e:	429a      	cmp	r2, r3
 8006190:	d0ca      	beq.n	8006128 <ai_platform_runtime_get_version+0xa8>
 8006192:	e7fe      	b.n	8006192 <ai_platform_runtime_get_version+0x112>
 8006194:	e0042000 	.word	0xe0042000
 8006198:	5c001000 	.word	0x5c001000
 800619c:	40023000 	.word	0x40023000
 80061a0:	f407a5c2 	.word	0xf407a5c2
 80061a4:	b5e8b5cd 	.word	0xb5e8b5cd
 80061a8:	58024000 	.word	0x58024000
 80061ac:	080115b8 	.word	0x080115b8

080061b0 <ai_platform_api_get_version>:
 80061b0:	b500      	push	{lr}
 80061b2:	b083      	sub	sp, #12
 80061b4:	f7ff fe12 	bl	8005ddc <_ai_platform_acquire_crc>
 80061b8:	4b42      	ldr	r3, [pc, #264]	; (80062c4 <ai_platform_api_get_version+0x114>)
 80061ba:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061c4:	189a      	adds	r2, r3, r2
 80061c6:	2a01      	cmp	r2, #1
 80061c8:	d929      	bls.n	800621e <ai_platform_api_get_version+0x6e>
 80061ca:	f240 4249 	movw	r2, #1097	; 0x449
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d025      	beq.n	800621e <ai_platform_api_get_version+0x6e>
 80061d2:	4a3d      	ldr	r2, [pc, #244]	; (80062c8 <ai_platform_api_get_version+0x118>)
 80061d4:	6813      	ldr	r3, [r2, #0]
 80061d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061da:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80061de:	d02b      	beq.n	8006238 <ai_platform_api_get_version+0x88>
 80061e0:	6813      	ldr	r3, [r2, #0]
 80061e2:	f240 4183 	movw	r1, #1155	; 0x483
 80061e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061ea:	428b      	cmp	r3, r1
 80061ec:	d059      	beq.n	80062a2 <ai_platform_api_get_version+0xf2>
 80061ee:	6813      	ldr	r3, [r2, #0]
 80061f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061f4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80061f8:	d045      	beq.n	8006286 <ai_platform_api_get_version+0xd6>
 80061fa:	6813      	ldr	r3, [r2, #0]
 80061fc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006200:	2b00      	cmp	r3, #0
 8006202:	d129      	bne.n	8006258 <ai_platform_api_get_version+0xa8>
 8006204:	4a31      	ldr	r2, [pc, #196]	; (80062cc <ai_platform_api_get_version+0x11c>)
 8006206:	2301      	movs	r3, #1
 8006208:	6093      	str	r3, [r2, #8]
 800620a:	6893      	ldr	r3, [r2, #8]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1fc      	bne.n	800620a <ai_platform_api_get_version+0x5a>
 8006210:	492f      	ldr	r1, [pc, #188]	; (80062d0 <ai_platform_api_get_version+0x120>)
 8006212:	4b30      	ldr	r3, [pc, #192]	; (80062d4 <ai_platform_api_get_version+0x124>)
 8006214:	6011      	str	r1, [r2, #0]
 8006216:	6812      	ldr	r2, [r2, #0]
 8006218:	429a      	cmp	r2, r3
 800621a:	d01d      	beq.n	8006258 <ai_platform_api_get_version+0xa8>
 800621c:	e7fe      	b.n	800621c <ai_platform_api_get_version+0x6c>
 800621e:	4a2b      	ldr	r2, [pc, #172]	; (80062cc <ai_platform_api_get_version+0x11c>)
 8006220:	2301      	movs	r3, #1
 8006222:	6093      	str	r3, [r2, #8]
 8006224:	6893      	ldr	r3, [r2, #8]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1fc      	bne.n	8006224 <ai_platform_api_get_version+0x74>
 800622a:	4929      	ldr	r1, [pc, #164]	; (80062d0 <ai_platform_api_get_version+0x120>)
 800622c:	4b29      	ldr	r3, [pc, #164]	; (80062d4 <ai_platform_api_get_version+0x124>)
 800622e:	6011      	str	r1, [r2, #0]
 8006230:	6812      	ldr	r2, [r2, #0]
 8006232:	429a      	cmp	r2, r3
 8006234:	d010      	beq.n	8006258 <ai_platform_api_get_version+0xa8>
 8006236:	e7fe      	b.n	8006236 <ai_platform_api_get_version+0x86>
 8006238:	4a27      	ldr	r2, [pc, #156]	; (80062d8 <ai_platform_api_get_version+0x128>)
 800623a:	2301      	movs	r3, #1
 800623c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006240:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006244:	2b00      	cmp	r3, #0
 8006246:	d1fb      	bne.n	8006240 <ai_platform_api_get_version+0x90>
 8006248:	4921      	ldr	r1, [pc, #132]	; (80062d0 <ai_platform_api_get_version+0x120>)
 800624a:	4b22      	ldr	r3, [pc, #136]	; (80062d4 <ai_platform_api_get_version+0x124>)
 800624c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006250:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006254:	429a      	cmp	r2, r3
 8006256:	d123      	bne.n	80062a0 <ai_platform_api_get_version+0xf0>
 8006258:	f7ff fdc2 	bl	8005de0 <_ai_platform_release_crc>
 800625c:	4b1f      	ldr	r3, [pc, #124]	; (80062dc <ai_platform_api_get_version+0x12c>)
 800625e:	2000      	movs	r0, #0
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	fa5f fc83 	uxtb.w	ip, r3
 8006266:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800626a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800626e:	0e1b      	lsrs	r3, r3, #24
 8006270:	f36c 0007 	bfi	r0, ip, #0, #8
 8006274:	f361 200f 	bfi	r0, r1, #8, #8
 8006278:	f362 4017 	bfi	r0, r2, #16, #8
 800627c:	f363 601f 	bfi	r0, r3, #24, #8
 8006280:	b003      	add	sp, #12
 8006282:	f85d fb04 	ldr.w	pc, [sp], #4
 8006286:	4a11      	ldr	r2, [pc, #68]	; (80062cc <ai_platform_api_get_version+0x11c>)
 8006288:	2301      	movs	r3, #1
 800628a:	6093      	str	r3, [r2, #8]
 800628c:	6893      	ldr	r3, [r2, #8]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1fc      	bne.n	800628c <ai_platform_api_get_version+0xdc>
 8006292:	490f      	ldr	r1, [pc, #60]	; (80062d0 <ai_platform_api_get_version+0x120>)
 8006294:	4b0f      	ldr	r3, [pc, #60]	; (80062d4 <ai_platform_api_get_version+0x124>)
 8006296:	6011      	str	r1, [r2, #0]
 8006298:	6812      	ldr	r2, [r2, #0]
 800629a:	429a      	cmp	r2, r3
 800629c:	d0dc      	beq.n	8006258 <ai_platform_api_get_version+0xa8>
 800629e:	e7fe      	b.n	800629e <ai_platform_api_get_version+0xee>
 80062a0:	e7fe      	b.n	80062a0 <ai_platform_api_get_version+0xf0>
 80062a2:	4a0d      	ldr	r2, [pc, #52]	; (80062d8 <ai_platform_api_get_version+0x128>)
 80062a4:	2301      	movs	r3, #1
 80062a6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80062aa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d1fb      	bne.n	80062aa <ai_platform_api_get_version+0xfa>
 80062b2:	4907      	ldr	r1, [pc, #28]	; (80062d0 <ai_platform_api_get_version+0x120>)
 80062b4:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <ai_platform_api_get_version+0x124>)
 80062b6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80062ba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80062be:	429a      	cmp	r2, r3
 80062c0:	d0ca      	beq.n	8006258 <ai_platform_api_get_version+0xa8>
 80062c2:	e7fe      	b.n	80062c2 <ai_platform_api_get_version+0x112>
 80062c4:	e0042000 	.word	0xe0042000
 80062c8:	5c001000 	.word	0x5c001000
 80062cc:	40023000 	.word	0x40023000
 80062d0:	f407a5c2 	.word	0xf407a5c2
 80062d4:	b5e8b5cd 	.word	0xb5e8b5cd
 80062d8:	58024000 	.word	0x58024000
 80062dc:	080115bc 	.word	0x080115bc

080062e0 <ai_platform_interface_api_get_version>:
 80062e0:	b500      	push	{lr}
 80062e2:	b083      	sub	sp, #12
 80062e4:	f7ff fd7a 	bl	8005ddc <_ai_platform_acquire_crc>
 80062e8:	4b42      	ldr	r3, [pc, #264]	; (80063f4 <ai_platform_interface_api_get_version+0x114>)
 80062ea:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80062f4:	189a      	adds	r2, r3, r2
 80062f6:	2a01      	cmp	r2, #1
 80062f8:	d929      	bls.n	800634e <ai_platform_interface_api_get_version+0x6e>
 80062fa:	f240 4249 	movw	r2, #1097	; 0x449
 80062fe:	4293      	cmp	r3, r2
 8006300:	d025      	beq.n	800634e <ai_platform_interface_api_get_version+0x6e>
 8006302:	4a3d      	ldr	r2, [pc, #244]	; (80063f8 <ai_platform_interface_api_get_version+0x118>)
 8006304:	6813      	ldr	r3, [r2, #0]
 8006306:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800630a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800630e:	d02b      	beq.n	8006368 <ai_platform_interface_api_get_version+0x88>
 8006310:	6813      	ldr	r3, [r2, #0]
 8006312:	f240 4183 	movw	r1, #1155	; 0x483
 8006316:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800631a:	428b      	cmp	r3, r1
 800631c:	d059      	beq.n	80063d2 <ai_platform_interface_api_get_version+0xf2>
 800631e:	6813      	ldr	r3, [r2, #0]
 8006320:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006324:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006328:	d045      	beq.n	80063b6 <ai_platform_interface_api_get_version+0xd6>
 800632a:	6813      	ldr	r3, [r2, #0]
 800632c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006330:	2b00      	cmp	r3, #0
 8006332:	d129      	bne.n	8006388 <ai_platform_interface_api_get_version+0xa8>
 8006334:	4a31      	ldr	r2, [pc, #196]	; (80063fc <ai_platform_interface_api_get_version+0x11c>)
 8006336:	2301      	movs	r3, #1
 8006338:	6093      	str	r3, [r2, #8]
 800633a:	6893      	ldr	r3, [r2, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d1fc      	bne.n	800633a <ai_platform_interface_api_get_version+0x5a>
 8006340:	492f      	ldr	r1, [pc, #188]	; (8006400 <ai_platform_interface_api_get_version+0x120>)
 8006342:	4b30      	ldr	r3, [pc, #192]	; (8006404 <ai_platform_interface_api_get_version+0x124>)
 8006344:	6011      	str	r1, [r2, #0]
 8006346:	6812      	ldr	r2, [r2, #0]
 8006348:	429a      	cmp	r2, r3
 800634a:	d01d      	beq.n	8006388 <ai_platform_interface_api_get_version+0xa8>
 800634c:	e7fe      	b.n	800634c <ai_platform_interface_api_get_version+0x6c>
 800634e:	4a2b      	ldr	r2, [pc, #172]	; (80063fc <ai_platform_interface_api_get_version+0x11c>)
 8006350:	2301      	movs	r3, #1
 8006352:	6093      	str	r3, [r2, #8]
 8006354:	6893      	ldr	r3, [r2, #8]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d1fc      	bne.n	8006354 <ai_platform_interface_api_get_version+0x74>
 800635a:	4929      	ldr	r1, [pc, #164]	; (8006400 <ai_platform_interface_api_get_version+0x120>)
 800635c:	4b29      	ldr	r3, [pc, #164]	; (8006404 <ai_platform_interface_api_get_version+0x124>)
 800635e:	6011      	str	r1, [r2, #0]
 8006360:	6812      	ldr	r2, [r2, #0]
 8006362:	429a      	cmp	r2, r3
 8006364:	d010      	beq.n	8006388 <ai_platform_interface_api_get_version+0xa8>
 8006366:	e7fe      	b.n	8006366 <ai_platform_interface_api_get_version+0x86>
 8006368:	4a27      	ldr	r2, [pc, #156]	; (8006408 <ai_platform_interface_api_get_version+0x128>)
 800636a:	2301      	movs	r3, #1
 800636c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006370:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006374:	2b00      	cmp	r3, #0
 8006376:	d1fb      	bne.n	8006370 <ai_platform_interface_api_get_version+0x90>
 8006378:	4921      	ldr	r1, [pc, #132]	; (8006400 <ai_platform_interface_api_get_version+0x120>)
 800637a:	4b22      	ldr	r3, [pc, #136]	; (8006404 <ai_platform_interface_api_get_version+0x124>)
 800637c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006380:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006384:	429a      	cmp	r2, r3
 8006386:	d123      	bne.n	80063d0 <ai_platform_interface_api_get_version+0xf0>
 8006388:	f7ff fd2a 	bl	8005de0 <_ai_platform_release_crc>
 800638c:	4b1f      	ldr	r3, [pc, #124]	; (800640c <ai_platform_interface_api_get_version+0x12c>)
 800638e:	2000      	movs	r0, #0
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	fa5f fc83 	uxtb.w	ip, r3
 8006396:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800639a:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800639e:	0e1b      	lsrs	r3, r3, #24
 80063a0:	f36c 0007 	bfi	r0, ip, #0, #8
 80063a4:	f361 200f 	bfi	r0, r1, #8, #8
 80063a8:	f362 4017 	bfi	r0, r2, #16, #8
 80063ac:	f363 601f 	bfi	r0, r3, #24, #8
 80063b0:	b003      	add	sp, #12
 80063b2:	f85d fb04 	ldr.w	pc, [sp], #4
 80063b6:	4a11      	ldr	r2, [pc, #68]	; (80063fc <ai_platform_interface_api_get_version+0x11c>)
 80063b8:	2301      	movs	r3, #1
 80063ba:	6093      	str	r3, [r2, #8]
 80063bc:	6893      	ldr	r3, [r2, #8]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1fc      	bne.n	80063bc <ai_platform_interface_api_get_version+0xdc>
 80063c2:	490f      	ldr	r1, [pc, #60]	; (8006400 <ai_platform_interface_api_get_version+0x120>)
 80063c4:	4b0f      	ldr	r3, [pc, #60]	; (8006404 <ai_platform_interface_api_get_version+0x124>)
 80063c6:	6011      	str	r1, [r2, #0]
 80063c8:	6812      	ldr	r2, [r2, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d0dc      	beq.n	8006388 <ai_platform_interface_api_get_version+0xa8>
 80063ce:	e7fe      	b.n	80063ce <ai_platform_interface_api_get_version+0xee>
 80063d0:	e7fe      	b.n	80063d0 <ai_platform_interface_api_get_version+0xf0>
 80063d2:	4a0d      	ldr	r2, [pc, #52]	; (8006408 <ai_platform_interface_api_get_version+0x128>)
 80063d4:	2301      	movs	r3, #1
 80063d6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80063da:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d1fb      	bne.n	80063da <ai_platform_interface_api_get_version+0xfa>
 80063e2:	4907      	ldr	r1, [pc, #28]	; (8006400 <ai_platform_interface_api_get_version+0x120>)
 80063e4:	4b07      	ldr	r3, [pc, #28]	; (8006404 <ai_platform_interface_api_get_version+0x124>)
 80063e6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80063ea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80063ee:	429a      	cmp	r2, r3
 80063f0:	d0ca      	beq.n	8006388 <ai_platform_interface_api_get_version+0xa8>
 80063f2:	e7fe      	b.n	80063f2 <ai_platform_interface_api_get_version+0x112>
 80063f4:	e0042000 	.word	0xe0042000
 80063f8:	5c001000 	.word	0x5c001000
 80063fc:	40023000 	.word	0x40023000
 8006400:	f407a5c2 	.word	0xf407a5c2
 8006404:	b5e8b5cd 	.word	0xb5e8b5cd
 8006408:	58024000 	.word	0x58024000
 800640c:	080115c0 	.word	0x080115c0

08006410 <ai_platform_context_acquire>:
 8006410:	b510      	push	{r4, lr}
 8006412:	4604      	mov	r4, r0
 8006414:	b120      	cbz	r0, 8006420 <ai_platform_context_acquire+0x10>
 8006416:	4b3d      	ldr	r3, [pc, #244]	; (800650c <ai_platform_context_acquire+0xfc>)
 8006418:	6802      	ldr	r2, [r0, #0]
 800641a:	429a      	cmp	r2, r3
 800641c:	bf18      	it	ne
 800641e:	2400      	movne	r4, #0
 8006420:	f7ff fcdc 	bl	8005ddc <_ai_platform_acquire_crc>
 8006424:	4b3a      	ldr	r3, [pc, #232]	; (8006510 <ai_platform_context_acquire+0x100>)
 8006426:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006430:	189a      	adds	r2, r3, r2
 8006432:	2a01      	cmp	r2, #1
 8006434:	d929      	bls.n	800648a <ai_platform_context_acquire+0x7a>
 8006436:	f240 4249 	movw	r2, #1097	; 0x449
 800643a:	4293      	cmp	r3, r2
 800643c:	d025      	beq.n	800648a <ai_platform_context_acquire+0x7a>
 800643e:	4a35      	ldr	r2, [pc, #212]	; (8006514 <ai_platform_context_acquire+0x104>)
 8006440:	6813      	ldr	r3, [r2, #0]
 8006442:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006446:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800644a:	d02b      	beq.n	80064a4 <ai_platform_context_acquire+0x94>
 800644c:	6813      	ldr	r3, [r2, #0]
 800644e:	f240 4183 	movw	r1, #1155	; 0x483
 8006452:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006456:	428b      	cmp	r3, r1
 8006458:	d046      	beq.n	80064e8 <ai_platform_context_acquire+0xd8>
 800645a:	6813      	ldr	r3, [r2, #0]
 800645c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006460:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006464:	d033      	beq.n	80064ce <ai_platform_context_acquire+0xbe>
 8006466:	6813      	ldr	r3, [r2, #0]
 8006468:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800646c:	2b00      	cmp	r3, #0
 800646e:	d129      	bne.n	80064c4 <ai_platform_context_acquire+0xb4>
 8006470:	4a29      	ldr	r2, [pc, #164]	; (8006518 <ai_platform_context_acquire+0x108>)
 8006472:	2301      	movs	r3, #1
 8006474:	6093      	str	r3, [r2, #8]
 8006476:	6893      	ldr	r3, [r2, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d1fc      	bne.n	8006476 <ai_platform_context_acquire+0x66>
 800647c:	4927      	ldr	r1, [pc, #156]	; (800651c <ai_platform_context_acquire+0x10c>)
 800647e:	4b28      	ldr	r3, [pc, #160]	; (8006520 <ai_platform_context_acquire+0x110>)
 8006480:	6011      	str	r1, [r2, #0]
 8006482:	6812      	ldr	r2, [r2, #0]
 8006484:	429a      	cmp	r2, r3
 8006486:	d01d      	beq.n	80064c4 <ai_platform_context_acquire+0xb4>
 8006488:	e7fe      	b.n	8006488 <ai_platform_context_acquire+0x78>
 800648a:	4a23      	ldr	r2, [pc, #140]	; (8006518 <ai_platform_context_acquire+0x108>)
 800648c:	2301      	movs	r3, #1
 800648e:	6093      	str	r3, [r2, #8]
 8006490:	6893      	ldr	r3, [r2, #8]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1fc      	bne.n	8006490 <ai_platform_context_acquire+0x80>
 8006496:	4921      	ldr	r1, [pc, #132]	; (800651c <ai_platform_context_acquire+0x10c>)
 8006498:	4b21      	ldr	r3, [pc, #132]	; (8006520 <ai_platform_context_acquire+0x110>)
 800649a:	6011      	str	r1, [r2, #0]
 800649c:	6812      	ldr	r2, [r2, #0]
 800649e:	429a      	cmp	r2, r3
 80064a0:	d010      	beq.n	80064c4 <ai_platform_context_acquire+0xb4>
 80064a2:	e7fe      	b.n	80064a2 <ai_platform_context_acquire+0x92>
 80064a4:	4a1f      	ldr	r2, [pc, #124]	; (8006524 <ai_platform_context_acquire+0x114>)
 80064a6:	2301      	movs	r3, #1
 80064a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80064ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d1fb      	bne.n	80064ac <ai_platform_context_acquire+0x9c>
 80064b4:	4919      	ldr	r1, [pc, #100]	; (800651c <ai_platform_context_acquire+0x10c>)
 80064b6:	4b1a      	ldr	r3, [pc, #104]	; (8006520 <ai_platform_context_acquire+0x110>)
 80064b8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80064bc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d103      	bne.n	80064cc <ai_platform_context_acquire+0xbc>
 80064c4:	f7ff fc8c 	bl	8005de0 <_ai_platform_release_crc>
 80064c8:	4620      	mov	r0, r4
 80064ca:	bd10      	pop	{r4, pc}
 80064cc:	e7fe      	b.n	80064cc <ai_platform_context_acquire+0xbc>
 80064ce:	4a12      	ldr	r2, [pc, #72]	; (8006518 <ai_platform_context_acquire+0x108>)
 80064d0:	2301      	movs	r3, #1
 80064d2:	6093      	str	r3, [r2, #8]
 80064d4:	6893      	ldr	r3, [r2, #8]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d1fc      	bne.n	80064d4 <ai_platform_context_acquire+0xc4>
 80064da:	4910      	ldr	r1, [pc, #64]	; (800651c <ai_platform_context_acquire+0x10c>)
 80064dc:	4b10      	ldr	r3, [pc, #64]	; (8006520 <ai_platform_context_acquire+0x110>)
 80064de:	6011      	str	r1, [r2, #0]
 80064e0:	6812      	ldr	r2, [r2, #0]
 80064e2:	429a      	cmp	r2, r3
 80064e4:	d0ee      	beq.n	80064c4 <ai_platform_context_acquire+0xb4>
 80064e6:	e7fe      	b.n	80064e6 <ai_platform_context_acquire+0xd6>
 80064e8:	4a0e      	ldr	r2, [pc, #56]	; (8006524 <ai_platform_context_acquire+0x114>)
 80064ea:	2301      	movs	r3, #1
 80064ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80064f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d1fb      	bne.n	80064f0 <ai_platform_context_acquire+0xe0>
 80064f8:	4908      	ldr	r1, [pc, #32]	; (800651c <ai_platform_context_acquire+0x10c>)
 80064fa:	4b09      	ldr	r3, [pc, #36]	; (8006520 <ai_platform_context_acquire+0x110>)
 80064fc:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006500:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006504:	429a      	cmp	r2, r3
 8006506:	d0dd      	beq.n	80064c4 <ai_platform_context_acquire+0xb4>
 8006508:	e7fe      	b.n	8006508 <ai_platform_context_acquire+0xf8>
 800650a:	bf00      	nop
 800650c:	a1c00100 	.word	0xa1c00100
 8006510:	e0042000 	.word	0xe0042000
 8006514:	5c001000 	.word	0x5c001000
 8006518:	40023000 	.word	0x40023000
 800651c:	f407a5c2 	.word	0xf407a5c2
 8006520:	b5e8b5cd 	.word	0xb5e8b5cd
 8006524:	58024000 	.word	0x58024000

08006528 <ai_platform_network_get_error>:
 8006528:	b510      	push	{r4, lr}
 800652a:	2800      	cmp	r0, #0
 800652c:	d03f      	beq.n	80065ae <ai_platform_network_get_error+0x86>
 800652e:	4b7d      	ldr	r3, [pc, #500]	; (8006724 <ai_platform_network_get_error+0x1fc>)
 8006530:	4604      	mov	r4, r0
 8006532:	6802      	ldr	r2, [r0, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d13a      	bne.n	80065ae <ai_platform_network_get_error+0x86>
 8006538:	f7ff fc50 	bl	8005ddc <_ai_platform_acquire_crc>
 800653c:	4b7a      	ldr	r3, [pc, #488]	; (8006728 <ai_platform_network_get_error+0x200>)
 800653e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006548:	189a      	adds	r2, r3, r2
 800654a:	2a01      	cmp	r2, #1
 800654c:	f240 8086 	bls.w	800665c <ai_platform_network_get_error+0x134>
 8006550:	f240 4249 	movw	r2, #1097	; 0x449
 8006554:	4293      	cmp	r3, r2
 8006556:	f000 8081 	beq.w	800665c <ai_platform_network_get_error+0x134>
 800655a:	4a74      	ldr	r2, [pc, #464]	; (800672c <ai_platform_network_get_error+0x204>)
 800655c:	6813      	ldr	r3, [r2, #0]
 800655e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006562:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006566:	f000 8087 	beq.w	8006678 <ai_platform_network_get_error+0x150>
 800656a:	6813      	ldr	r3, [r2, #0]
 800656c:	f240 4183 	movw	r1, #1155	; 0x483
 8006570:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006574:	428b      	cmp	r3, r1
 8006576:	f000 80a9 	beq.w	80066cc <ai_platform_network_get_error+0x1a4>
 800657a:	6813      	ldr	r3, [r2, #0]
 800657c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006580:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006584:	f000 80c0 	beq.w	8006708 <ai_platform_network_get_error+0x1e0>
 8006588:	6813      	ldr	r3, [r2, #0]
 800658a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800658e:	2b00      	cmp	r3, #0
 8006590:	f040 8082 	bne.w	8006698 <ai_platform_network_get_error+0x170>
 8006594:	4a66      	ldr	r2, [pc, #408]	; (8006730 <ai_platform_network_get_error+0x208>)
 8006596:	2301      	movs	r3, #1
 8006598:	6093      	str	r3, [r2, #8]
 800659a:	6893      	ldr	r3, [r2, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1fc      	bne.n	800659a <ai_platform_network_get_error+0x72>
 80065a0:	4964      	ldr	r1, [pc, #400]	; (8006734 <ai_platform_network_get_error+0x20c>)
 80065a2:	4b65      	ldr	r3, [pc, #404]	; (8006738 <ai_platform_network_get_error+0x210>)
 80065a4:	6011      	str	r1, [r2, #0]
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d075      	beq.n	8006698 <ai_platform_network_get_error+0x170>
 80065ac:	e7fe      	b.n	80065ac <ai_platform_network_get_error+0x84>
 80065ae:	f7ff fc15 	bl	8005ddc <_ai_platform_acquire_crc>
 80065b2:	4b5d      	ldr	r3, [pc, #372]	; (8006728 <ai_platform_network_get_error+0x200>)
 80065b4:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065be:	185a      	adds	r2, r3, r1
 80065c0:	2a01      	cmp	r2, #1
 80065c2:	d929      	bls.n	8006618 <ai_platform_network_get_error+0xf0>
 80065c4:	f240 4249 	movw	r2, #1097	; 0x449
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d025      	beq.n	8006618 <ai_platform_network_get_error+0xf0>
 80065cc:	4a57      	ldr	r2, [pc, #348]	; (800672c <ai_platform_network_get_error+0x204>)
 80065ce:	6813      	ldr	r3, [r2, #0]
 80065d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065d4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80065d8:	d02b      	beq.n	8006632 <ai_platform_network_get_error+0x10a>
 80065da:	6813      	ldr	r3, [r2, #0]
 80065dc:	f240 4183 	movw	r1, #1155	; 0x483
 80065e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065e4:	428b      	cmp	r3, r1
 80065e6:	d060      	beq.n	80066aa <ai_platform_network_get_error+0x182>
 80065e8:	6813      	ldr	r3, [r2, #0]
 80065ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065ee:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80065f2:	d07c      	beq.n	80066ee <ai_platform_network_get_error+0x1c6>
 80065f4:	6813      	ldr	r3, [r2, #0]
 80065f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d129      	bne.n	8006652 <ai_platform_network_get_error+0x12a>
 80065fe:	4a4c      	ldr	r2, [pc, #304]	; (8006730 <ai_platform_network_get_error+0x208>)
 8006600:	2301      	movs	r3, #1
 8006602:	6093      	str	r3, [r2, #8]
 8006604:	6893      	ldr	r3, [r2, #8]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d1fc      	bne.n	8006604 <ai_platform_network_get_error+0xdc>
 800660a:	494a      	ldr	r1, [pc, #296]	; (8006734 <ai_platform_network_get_error+0x20c>)
 800660c:	4b4a      	ldr	r3, [pc, #296]	; (8006738 <ai_platform_network_get_error+0x210>)
 800660e:	6011      	str	r1, [r2, #0]
 8006610:	6812      	ldr	r2, [r2, #0]
 8006612:	429a      	cmp	r2, r3
 8006614:	d01d      	beq.n	8006652 <ai_platform_network_get_error+0x12a>
 8006616:	e7fe      	b.n	8006616 <ai_platform_network_get_error+0xee>
 8006618:	4a45      	ldr	r2, [pc, #276]	; (8006730 <ai_platform_network_get_error+0x208>)
 800661a:	2301      	movs	r3, #1
 800661c:	6093      	str	r3, [r2, #8]
 800661e:	6893      	ldr	r3, [r2, #8]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1fc      	bne.n	800661e <ai_platform_network_get_error+0xf6>
 8006624:	4943      	ldr	r1, [pc, #268]	; (8006734 <ai_platform_network_get_error+0x20c>)
 8006626:	4b44      	ldr	r3, [pc, #272]	; (8006738 <ai_platform_network_get_error+0x210>)
 8006628:	6011      	str	r1, [r2, #0]
 800662a:	6812      	ldr	r2, [r2, #0]
 800662c:	429a      	cmp	r2, r3
 800662e:	d010      	beq.n	8006652 <ai_platform_network_get_error+0x12a>
 8006630:	e7fe      	b.n	8006630 <ai_platform_network_get_error+0x108>
 8006632:	4a42      	ldr	r2, [pc, #264]	; (800673c <ai_platform_network_get_error+0x214>)
 8006634:	2301      	movs	r3, #1
 8006636:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800663a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800663e:	2b00      	cmp	r3, #0
 8006640:	d1fb      	bne.n	800663a <ai_platform_network_get_error+0x112>
 8006642:	493c      	ldr	r1, [pc, #240]	; (8006734 <ai_platform_network_get_error+0x20c>)
 8006644:	4b3c      	ldr	r3, [pc, #240]	; (8006738 <ai_platform_network_get_error+0x210>)
 8006646:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800664a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800664e:	429a      	cmp	r2, r3
 8006650:	d111      	bne.n	8006676 <ai_platform_network_get_error+0x14e>
 8006652:	f7ff fbc5 	bl	8005de0 <_ai_platform_release_crc>
 8006656:	f241 0010 	movw	r0, #4112	; 0x1010
 800665a:	bd10      	pop	{r4, pc}
 800665c:	4a34      	ldr	r2, [pc, #208]	; (8006730 <ai_platform_network_get_error+0x208>)
 800665e:	2301      	movs	r3, #1
 8006660:	6093      	str	r3, [r2, #8]
 8006662:	6893      	ldr	r3, [r2, #8]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1fc      	bne.n	8006662 <ai_platform_network_get_error+0x13a>
 8006668:	4932      	ldr	r1, [pc, #200]	; (8006734 <ai_platform_network_get_error+0x20c>)
 800666a:	4b33      	ldr	r3, [pc, #204]	; (8006738 <ai_platform_network_get_error+0x210>)
 800666c:	6011      	str	r1, [r2, #0]
 800666e:	6812      	ldr	r2, [r2, #0]
 8006670:	429a      	cmp	r2, r3
 8006672:	d011      	beq.n	8006698 <ai_platform_network_get_error+0x170>
 8006674:	e7fe      	b.n	8006674 <ai_platform_network_get_error+0x14c>
 8006676:	e7fe      	b.n	8006676 <ai_platform_network_get_error+0x14e>
 8006678:	4a30      	ldr	r2, [pc, #192]	; (800673c <ai_platform_network_get_error+0x214>)
 800667a:	2301      	movs	r3, #1
 800667c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006680:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006684:	2b00      	cmp	r3, #0
 8006686:	d1fb      	bne.n	8006680 <ai_platform_network_get_error+0x158>
 8006688:	492a      	ldr	r1, [pc, #168]	; (8006734 <ai_platform_network_get_error+0x20c>)
 800668a:	4b2b      	ldr	r3, [pc, #172]	; (8006738 <ai_platform_network_get_error+0x210>)
 800668c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006690:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006694:	429a      	cmp	r2, r3
 8006696:	d107      	bne.n	80066a8 <ai_platform_network_get_error+0x180>
 8006698:	f7ff fba2 	bl	8005de0 <_ai_platform_release_crc>
 800669c:	f104 0010 	add.w	r0, r4, #16
 80066a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066a4:	f001 be64 	b.w	8008370 <core_get_error>
 80066a8:	e7fe      	b.n	80066a8 <ai_platform_network_get_error+0x180>
 80066aa:	4a24      	ldr	r2, [pc, #144]	; (800673c <ai_platform_network_get_error+0x214>)
 80066ac:	2301      	movs	r3, #1
 80066ae:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80066b2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1fb      	bne.n	80066b2 <ai_platform_network_get_error+0x18a>
 80066ba:	491e      	ldr	r1, [pc, #120]	; (8006734 <ai_platform_network_get_error+0x20c>)
 80066bc:	4b1e      	ldr	r3, [pc, #120]	; (8006738 <ai_platform_network_get_error+0x210>)
 80066be:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80066c2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d0c3      	beq.n	8006652 <ai_platform_network_get_error+0x12a>
 80066ca:	e7fe      	b.n	80066ca <ai_platform_network_get_error+0x1a2>
 80066cc:	4a1b      	ldr	r2, [pc, #108]	; (800673c <ai_platform_network_get_error+0x214>)
 80066ce:	2301      	movs	r3, #1
 80066d0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80066d4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d1fb      	bne.n	80066d4 <ai_platform_network_get_error+0x1ac>
 80066dc:	4915      	ldr	r1, [pc, #84]	; (8006734 <ai_platform_network_get_error+0x20c>)
 80066de:	4b16      	ldr	r3, [pc, #88]	; (8006738 <ai_platform_network_get_error+0x210>)
 80066e0:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80066e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d0d5      	beq.n	8006698 <ai_platform_network_get_error+0x170>
 80066ec:	e7fe      	b.n	80066ec <ai_platform_network_get_error+0x1c4>
 80066ee:	4a10      	ldr	r2, [pc, #64]	; (8006730 <ai_platform_network_get_error+0x208>)
 80066f0:	2301      	movs	r3, #1
 80066f2:	6093      	str	r3, [r2, #8]
 80066f4:	6893      	ldr	r3, [r2, #8]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1fc      	bne.n	80066f4 <ai_platform_network_get_error+0x1cc>
 80066fa:	490e      	ldr	r1, [pc, #56]	; (8006734 <ai_platform_network_get_error+0x20c>)
 80066fc:	4b0e      	ldr	r3, [pc, #56]	; (8006738 <ai_platform_network_get_error+0x210>)
 80066fe:	6011      	str	r1, [r2, #0]
 8006700:	6812      	ldr	r2, [r2, #0]
 8006702:	429a      	cmp	r2, r3
 8006704:	d0a5      	beq.n	8006652 <ai_platform_network_get_error+0x12a>
 8006706:	e7fe      	b.n	8006706 <ai_platform_network_get_error+0x1de>
 8006708:	4a09      	ldr	r2, [pc, #36]	; (8006730 <ai_platform_network_get_error+0x208>)
 800670a:	2301      	movs	r3, #1
 800670c:	6093      	str	r3, [r2, #8]
 800670e:	6893      	ldr	r3, [r2, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d1fc      	bne.n	800670e <ai_platform_network_get_error+0x1e6>
 8006714:	4907      	ldr	r1, [pc, #28]	; (8006734 <ai_platform_network_get_error+0x20c>)
 8006716:	4b08      	ldr	r3, [pc, #32]	; (8006738 <ai_platform_network_get_error+0x210>)
 8006718:	6011      	str	r1, [r2, #0]
 800671a:	6812      	ldr	r2, [r2, #0]
 800671c:	429a      	cmp	r2, r3
 800671e:	d0bb      	beq.n	8006698 <ai_platform_network_get_error+0x170>
 8006720:	e7fe      	b.n	8006720 <ai_platform_network_get_error+0x1f8>
 8006722:	bf00      	nop
 8006724:	a1c00100 	.word	0xa1c00100
 8006728:	e0042000 	.word	0xe0042000
 800672c:	5c001000 	.word	0x5c001000
 8006730:	40023000 	.word	0x40023000
 8006734:	f407a5c2 	.word	0xf407a5c2
 8006738:	b5e8b5cd 	.word	0xb5e8b5cd
 800673c:	58024000 	.word	0x58024000

08006740 <ai_platform_network_set_error>:
 8006740:	b110      	cbz	r0, 8006748 <ai_platform_network_set_error+0x8>
 8006742:	3010      	adds	r0, #16
 8006744:	f001 be1a 	b.w	800837c <core_set_error>
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop

0800674c <ai_platform_api_get_network_report>:
 800674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006750:	b089      	sub	sp, #36	; 0x24
 8006752:	4607      	mov	r7, r0
 8006754:	9101      	str	r1, [sp, #4]
 8006756:	b120      	cbz	r0, 8006762 <ai_platform_api_get_network_report+0x16>
 8006758:	4b87      	ldr	r3, [pc, #540]	; (8006978 <ai_platform_api_get_network_report+0x22c>)
 800675a:	6802      	ldr	r2, [r0, #0]
 800675c:	429a      	cmp	r2, r3
 800675e:	bf18      	it	ne
 8006760:	2700      	movne	r7, #0
 8006762:	f7ff fb3b 	bl	8005ddc <_ai_platform_acquire_crc>
 8006766:	4b85      	ldr	r3, [pc, #532]	; (800697c <ai_platform_api_get_network_report+0x230>)
 8006768:	f46f 688a 	mvn.w	r8, #1104	; 0x450
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006772:	eb03 0208 	add.w	r2, r3, r8
 8006776:	2a01      	cmp	r2, #1
 8006778:	d92b      	bls.n	80067d2 <ai_platform_api_get_network_report+0x86>
 800677a:	f240 4249 	movw	r2, #1097	; 0x449
 800677e:	4293      	cmp	r3, r2
 8006780:	d027      	beq.n	80067d2 <ai_platform_api_get_network_report+0x86>
 8006782:	4a7f      	ldr	r2, [pc, #508]	; (8006980 <ai_platform_api_get_network_report+0x234>)
 8006784:	6813      	ldr	r3, [r2, #0]
 8006786:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800678a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800678e:	d02d      	beq.n	80067ec <ai_platform_api_get_network_report+0xa0>
 8006790:	6813      	ldr	r3, [r2, #0]
 8006792:	f240 4183 	movw	r1, #1155	; 0x483
 8006796:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800679a:	428b      	cmp	r3, r1
 800679c:	f000 80c6 	beq.w	800692c <ai_platform_api_get_network_report+0x1e0>
 80067a0:	6813      	ldr	r3, [r2, #0]
 80067a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067a6:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80067aa:	f000 80ab 	beq.w	8006904 <ai_platform_api_get_network_report+0x1b8>
 80067ae:	6813      	ldr	r3, [r2, #0]
 80067b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d129      	bne.n	800680c <ai_platform_api_get_network_report+0xc0>
 80067b8:	4a72      	ldr	r2, [pc, #456]	; (8006984 <ai_platform_api_get_network_report+0x238>)
 80067ba:	2301      	movs	r3, #1
 80067bc:	6093      	str	r3, [r2, #8]
 80067be:	6893      	ldr	r3, [r2, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1fc      	bne.n	80067be <ai_platform_api_get_network_report+0x72>
 80067c4:	4b70      	ldr	r3, [pc, #448]	; (8006988 <ai_platform_api_get_network_report+0x23c>)
 80067c6:	6013      	str	r3, [r2, #0]
 80067c8:	4b70      	ldr	r3, [pc, #448]	; (800698c <ai_platform_api_get_network_report+0x240>)
 80067ca:	6812      	ldr	r2, [r2, #0]
 80067cc:	429a      	cmp	r2, r3
 80067ce:	d01d      	beq.n	800680c <ai_platform_api_get_network_report+0xc0>
 80067d0:	e7fe      	b.n	80067d0 <ai_platform_api_get_network_report+0x84>
 80067d2:	4a6c      	ldr	r2, [pc, #432]	; (8006984 <ai_platform_api_get_network_report+0x238>)
 80067d4:	2301      	movs	r3, #1
 80067d6:	6093      	str	r3, [r2, #8]
 80067d8:	6893      	ldr	r3, [r2, #8]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d1fc      	bne.n	80067d8 <ai_platform_api_get_network_report+0x8c>
 80067de:	4b6a      	ldr	r3, [pc, #424]	; (8006988 <ai_platform_api_get_network_report+0x23c>)
 80067e0:	6013      	str	r3, [r2, #0]
 80067e2:	4b6a      	ldr	r3, [pc, #424]	; (800698c <ai_platform_api_get_network_report+0x240>)
 80067e4:	6812      	ldr	r2, [r2, #0]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d010      	beq.n	800680c <ai_platform_api_get_network_report+0xc0>
 80067ea:	e7fe      	b.n	80067ea <ai_platform_api_get_network_report+0x9e>
 80067ec:	4a68      	ldr	r2, [pc, #416]	; (8006990 <ai_platform_api_get_network_report+0x244>)
 80067ee:	2301      	movs	r3, #1
 80067f0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80067f4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d1fb      	bne.n	80067f4 <ai_platform_api_get_network_report+0xa8>
 80067fc:	4b62      	ldr	r3, [pc, #392]	; (8006988 <ai_platform_api_get_network_report+0x23c>)
 80067fe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006802:	4b62      	ldr	r3, [pc, #392]	; (800698c <ai_platform_api_get_network_report+0x240>)
 8006804:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006808:	429a      	cmp	r2, r3
 800680a:	d16c      	bne.n	80068e6 <ai_platform_api_get_network_report+0x19a>
 800680c:	f7ff fae8 	bl	8005de0 <_ai_platform_release_crc>
 8006810:	9801      	ldr	r0, [sp, #4]
 8006812:	2800      	cmp	r0, #0
 8006814:	bf18      	it	ne
 8006816:	2f00      	cmpne	r7, #0
 8006818:	bf0c      	ite	eq
 800681a:	2301      	moveq	r3, #1
 800681c:	2300      	movne	r3, #0
 800681e:	9302      	str	r3, [sp, #8]
 8006820:	d07e      	beq.n	8006920 <ai_platform_api_get_network_report+0x1d4>
 8006822:	67c3      	str	r3, [r0, #124]	; 0x7c
 8006824:	4619      	mov	r1, r3
 8006826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006828:	b13b      	cbz	r3, 800683a <ai_platform_api_get_network_report+0xee>
 800682a:	3101      	adds	r1, #1
 800682c:	67c1      	str	r1, [r0, #124]	; 0x7c
 800682e:	691a      	ldr	r2, [r3, #16]
 8006830:	b11a      	cbz	r2, 800683a <ai_platform_api_get_network_report+0xee>
 8006832:	429a      	cmp	r2, r3
 8006834:	d001      	beq.n	800683a <ai_platform_api_get_network_report+0xee>
 8006836:	4613      	mov	r3, r2
 8006838:	e7f6      	b.n	8006828 <ai_platform_api_get_network_report+0xdc>
 800683a:	2900      	cmp	r1, #0
 800683c:	f000 8166 	beq.w	8006b0c <ai_platform_api_get_network_report+0x3c0>
 8006840:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006842:	2b00      	cmp	r3, #0
 8006844:	d050      	beq.n	80068e8 <ai_platform_api_get_network_report+0x19c>
 8006846:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 800684a:	f1b9 0f00 	cmp.w	r9, #0
 800684e:	d04b      	beq.n	80068e8 <ai_platform_api_get_network_report+0x19c>
 8006850:	f04f 0a00 	mov.w	sl, #0
 8006854:	9703      	str	r7, [sp, #12]
 8006856:	4655      	mov	r5, sl
 8006858:	e016      	b.n	8006888 <ai_platform_api_get_network_report+0x13c>
 800685a:	2201      	movs	r2, #1
 800685c:	f847 200e 	str.w	r2, [r7, lr]
 8006860:	69b2      	ldr	r2, [r6, #24]
 8006862:	6852      	ldr	r2, [r2, #4]
 8006864:	3501      	adds	r5, #1
 8006866:	60a3      	str	r3, [r4, #8]
 8006868:	f04f 0301 	mov.w	r3, #1
 800686c:	f10a 0a1c 	add.w	sl, sl, #28
 8006870:	6122      	str	r2, [r4, #16]
 8006872:	7523      	strb	r3, [r4, #20]
 8006874:	2300      	movs	r3, #0
 8006876:	f8c4 8018 	str.w	r8, [r4, #24]
 800687a:	60e3      	str	r3, [r4, #12]
 800687c:	6963      	ldr	r3, [r4, #20]
 800687e:	f36b 231f 	bfi	r3, fp, #8, #24
 8006882:	e9c4 0100 	strd	r0, r1, [r4]
 8006886:	6163      	str	r3, [r4, #20]
 8006888:	f8b9 3000 	ldrh.w	r3, [r9]
 800688c:	b2aa      	uxth	r2, r5
 800688e:	42ab      	cmp	r3, r5
 8006890:	d95e      	bls.n	8006950 <ai_platform_api_get_network_report+0x204>
 8006892:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d05a      	beq.n	8006950 <ai_platform_api_get_network_report+0x204>
 800689a:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800689e:	2e00      	cmp	r6, #0
 80068a0:	d056      	beq.n	8006950 <ai_platform_api_get_network_report+0x204>
 80068a2:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80068a6:	69b2      	ldr	r2, [r6, #24]
 80068a8:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80068ac:	6810      	ldr	r0, [r2, #0]
 80068ae:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80068b2:	68b3      	ldr	r3, [r6, #8]
 80068b4:	4454      	add	r4, sl
 80068b6:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80068ba:	f002 ffd3 	bl	8009864 <ai_array_to_buffer_fmt>
 80068be:	69b2      	ldr	r2, [r6, #24]
 80068c0:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80068c4:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 80068c8:	6891      	ldr	r1, [r2, #8]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d0c9      	beq.n	8006862 <ai_platform_api_get_network_report+0x116>
 80068ce:	2200      	movs	r2, #0
 80068d0:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 80068d4:	6832      	ldr	r2, [r6, #0]
 80068d6:	605a      	str	r2, [r3, #4]
 80068d8:	b112      	cbz	r2, 80068e0 <ai_platform_api_get_network_report+0x194>
 80068da:	8852      	ldrh	r2, [r2, #2]
 80068dc:	2a00      	cmp	r2, #0
 80068de:	d1bc      	bne.n	800685a <ai_platform_api_get_network_report+0x10e>
 80068e0:	69b2      	ldr	r2, [r6, #24]
 80068e2:	2300      	movs	r3, #0
 80068e4:	e7bd      	b.n	8006862 <ai_platform_api_get_network_report+0x116>
 80068e6:	e7fe      	b.n	80068e6 <ai_platform_api_get_network_report+0x19a>
 80068e8:	9901      	ldr	r1, [sp, #4]
 80068ea:	2300      	movs	r3, #0
 80068ec:	2218      	movs	r2, #24
 80068ee:	f107 0010 	add.w	r0, r7, #16
 80068f2:	63cb      	str	r3, [r1, #60]	; 0x3c
 80068f4:	870b      	strh	r3, [r1, #56]	; 0x38
 80068f6:	2112      	movs	r1, #18
 80068f8:	f001 fd40 	bl	800837c <core_set_error>
 80068fc:	9802      	ldr	r0, [sp, #8]
 80068fe:	b009      	add	sp, #36	; 0x24
 8006900:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006904:	4a1f      	ldr	r2, [pc, #124]	; (8006984 <ai_platform_api_get_network_report+0x238>)
 8006906:	2301      	movs	r3, #1
 8006908:	6093      	str	r3, [r2, #8]
 800690a:	6893      	ldr	r3, [r2, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d1fc      	bne.n	800690a <ai_platform_api_get_network_report+0x1be>
 8006910:	4b1d      	ldr	r3, [pc, #116]	; (8006988 <ai_platform_api_get_network_report+0x23c>)
 8006912:	6013      	str	r3, [r2, #0]
 8006914:	4b1d      	ldr	r3, [pc, #116]	; (800698c <ai_platform_api_get_network_report+0x240>)
 8006916:	6812      	ldr	r2, [r2, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	f43f af77 	beq.w	800680c <ai_platform_api_get_network_report+0xc0>
 800691e:	e7fe      	b.n	800691e <ai_platform_api_get_network_report+0x1d2>
 8006920:	2300      	movs	r3, #0
 8006922:	9302      	str	r3, [sp, #8]
 8006924:	9802      	ldr	r0, [sp, #8]
 8006926:	b009      	add	sp, #36	; 0x24
 8006928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692c:	4a18      	ldr	r2, [pc, #96]	; (8006990 <ai_platform_api_get_network_report+0x244>)
 800692e:	2301      	movs	r3, #1
 8006930:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006934:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1fb      	bne.n	8006934 <ai_platform_api_get_network_report+0x1e8>
 800693c:	4b12      	ldr	r3, [pc, #72]	; (8006988 <ai_platform_api_get_network_report+0x23c>)
 800693e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006942:	4b12      	ldr	r3, [pc, #72]	; (800698c <ai_platform_api_get_network_report+0x240>)
 8006944:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006948:	429a      	cmp	r2, r3
 800694a:	f43f af5f 	beq.w	800680c <ai_platform_api_get_network_report+0xc0>
 800694e:	e7fe      	b.n	800694e <ai_platform_api_get_network_report+0x202>
 8006950:	9f03      	ldr	r7, [sp, #12]
 8006952:	2a00      	cmp	r2, #0
 8006954:	d0c8      	beq.n	80068e8 <ai_platform_api_get_network_report+0x19c>
 8006956:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800695a:	9901      	ldr	r1, [sp, #4]
 800695c:	685b      	ldr	r3, [r3, #4]
 800695e:	870a      	strh	r2, [r1, #56]	; 0x38
 8006960:	63cb      	str	r3, [r1, #60]	; 0x3c
 8006962:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006964:	2b01      	cmp	r3, #1
 8006966:	f240 80c6 	bls.w	8006af6 <ai_platform_api_get_network_report+0x3aa>
 800696a:	f04f 0a00 	mov.w	sl, #0
 800696e:	f8d7 9030 	ldr.w	r9, [r7, #48]	; 0x30
 8006972:	9703      	str	r7, [sp, #12]
 8006974:	4655      	mov	r5, sl
 8006976:	e024      	b.n	80069c2 <ai_platform_api_get_network_report+0x276>
 8006978:	a1c00100 	.word	0xa1c00100
 800697c:	e0042000 	.word	0xe0042000
 8006980:	5c001000 	.word	0x5c001000
 8006984:	40023000 	.word	0x40023000
 8006988:	f407a5c2 	.word	0xf407a5c2
 800698c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006990:	58024000 	.word	0x58024000
 8006994:	2201      	movs	r2, #1
 8006996:	f847 200e 	str.w	r2, [r7, lr]
 800699a:	69b2      	ldr	r2, [r6, #24]
 800699c:	6852      	ldr	r2, [r2, #4]
 800699e:	3501      	adds	r5, #1
 80069a0:	60a3      	str	r3, [r4, #8]
 80069a2:	f04f 0301 	mov.w	r3, #1
 80069a6:	f10a 0a1c 	add.w	sl, sl, #28
 80069aa:	6122      	str	r2, [r4, #16]
 80069ac:	7523      	strb	r3, [r4, #20]
 80069ae:	2300      	movs	r3, #0
 80069b0:	f8c4 8018 	str.w	r8, [r4, #24]
 80069b4:	60e3      	str	r3, [r4, #12]
 80069b6:	6963      	ldr	r3, [r4, #20]
 80069b8:	f36b 231f 	bfi	r3, fp, #8, #24
 80069bc:	e9c4 0100 	strd	r0, r1, [r4]
 80069c0:	6163      	str	r3, [r4, #20]
 80069c2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 80069c6:	b2aa      	uxth	r2, r5
 80069c8:	42ab      	cmp	r3, r5
 80069ca:	d927      	bls.n	8006a1c <ai_platform_api_get_network_report+0x2d0>
 80069cc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80069d0:	b323      	cbz	r3, 8006a1c <ai_platform_api_get_network_report+0x2d0>
 80069d2:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80069d6:	b30e      	cbz	r6, 8006a1c <ai_platform_api_get_network_report+0x2d0>
 80069d8:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80069dc:	69b2      	ldr	r2, [r6, #24]
 80069de:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80069e2:	6810      	ldr	r0, [r2, #0]
 80069e4:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80069e8:	68b3      	ldr	r3, [r6, #8]
 80069ea:	4454      	add	r4, sl
 80069ec:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 80069f0:	f002 ff38 	bl	8009864 <ai_array_to_buffer_fmt>
 80069f4:	69b2      	ldr	r2, [r6, #24]
 80069f6:	eb07 03c5 	add.w	r3, r7, r5, lsl #3
 80069fa:	ea4f 0ec5 	mov.w	lr, r5, lsl #3
 80069fe:	6891      	ldr	r1, [r2, #8]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d0cb      	beq.n	800699c <ai_platform_api_get_network_report+0x250>
 8006a04:	2200      	movs	r2, #0
 8006a06:	f847 2035 	str.w	r2, [r7, r5, lsl #3]
 8006a0a:	6832      	ldr	r2, [r6, #0]
 8006a0c:	605a      	str	r2, [r3, #4]
 8006a0e:	b112      	cbz	r2, 8006a16 <ai_platform_api_get_network_report+0x2ca>
 8006a10:	8852      	ldrh	r2, [r2, #2]
 8006a12:	2a00      	cmp	r2, #0
 8006a14:	d1be      	bne.n	8006994 <ai_platform_api_get_network_report+0x248>
 8006a16:	69b2      	ldr	r2, [r6, #24]
 8006a18:	2300      	movs	r3, #0
 8006a1a:	e7bf      	b.n	800699c <ai_platform_api_get_network_report+0x250>
 8006a1c:	9f03      	ldr	r7, [sp, #12]
 8006a1e:	2a00      	cmp	r2, #0
 8006a20:	d069      	beq.n	8006af6 <ai_platform_api_get_network_report+0x3aa>
 8006a22:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006a26:	f107 0624 	add.w	r6, r7, #36	; 0x24
 8006a2a:	9901      	ldr	r1, [sp, #4]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	4630      	mov	r0, r6
 8006a30:	874a      	strh	r2, [r1, #58]	; 0x3a
 8006a32:	640b      	str	r3, [r1, #64]	; 0x40
 8006a34:	f7ff f926 	bl	8005c84 <ai_buffer_array_sane>
 8006a38:	9002      	str	r0, [sp, #8]
 8006a3a:	b960      	cbnz	r0, 8006a56 <ai_platform_api_get_network_report+0x30a>
 8006a3c:	4630      	mov	r0, r6
 8006a3e:	f7ff f921 	bl	8005c84 <ai_buffer_array_sane>
 8006a42:	b140      	cbz	r0, 8006a56 <ai_platform_api_get_network_report+0x30a>
 8006a44:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006a46:	b133      	cbz	r3, 8006a56 <ai_platform_api_get_network_report+0x30a>
 8006a48:	2213      	movs	r2, #19
 8006a4a:	2111      	movs	r1, #17
 8006a4c:	f107 0010 	add.w	r0, r7, #16
 8006a50:	f001 fc94 	bl	800837c <core_set_error>
 8006a54:	e752      	b.n	80068fc <ai_platform_api_get_network_report+0x1b0>
 8006a56:	f107 081c 	add.w	r8, r7, #28
 8006a5a:	4640      	mov	r0, r8
 8006a5c:	f7ff f912 	bl	8005c84 <ai_buffer_array_sane>
 8006a60:	9002      	str	r0, [sp, #8]
 8006a62:	b960      	cbnz	r0, 8006a7e <ai_platform_api_get_network_report+0x332>
 8006a64:	4640      	mov	r0, r8
 8006a66:	f7ff f90d 	bl	8005c84 <ai_buffer_array_sane>
 8006a6a:	b140      	cbz	r0, 8006a7e <ai_platform_api_get_network_report+0x332>
 8006a6c:	8bfb      	ldrh	r3, [r7, #30]
 8006a6e:	b133      	cbz	r3, 8006a7e <ai_platform_api_get_network_report+0x332>
 8006a70:	2212      	movs	r2, #18
 8006a72:	2111      	movs	r1, #17
 8006a74:	f107 0010 	add.w	r0, r7, #16
 8006a78:	f001 fc80 	bl	800837c <core_set_error>
 8006a7c:	e73e      	b.n	80068fc <ai_platform_api_get_network_report+0x1b0>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	9a01      	ldr	r2, [sp, #4]
 8006a82:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8006a86:	f7ff f9a9 	bl	8005ddc <_ai_platform_acquire_crc>
 8006a8a:	4b89      	ldr	r3, [pc, #548]	; (8006cb0 <ai_platform_api_get_network_report+0x564>)
 8006a8c:	f46f 6e8a 	mvn.w	lr, #1104	; 0x450
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a96:	eb03 020e 	add.w	r2, r3, lr
 8006a9a:	2a01      	cmp	r2, #1
 8006a9c:	d93d      	bls.n	8006b1a <ai_platform_api_get_network_report+0x3ce>
 8006a9e:	f240 4249 	movw	r2, #1097	; 0x449
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d039      	beq.n	8006b1a <ai_platform_api_get_network_report+0x3ce>
 8006aa6:	4b83      	ldr	r3, [pc, #524]	; (8006cb4 <ai_platform_api_get_network_report+0x568>)
 8006aa8:	681a      	ldr	r2, [r3, #0]
 8006aaa:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006aae:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006ab2:	d03f      	beq.n	8006b34 <ai_platform_api_get_network_report+0x3e8>
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	f240 4183 	movw	r1, #1155	; 0x483
 8006aba:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006abe:	428a      	cmp	r2, r1
 8006ac0:	f000 80e3 	beq.w	8006c8a <ai_platform_api_get_network_report+0x53e>
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006aca:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 8006ace:	f000 8149 	beq.w	8006d64 <ai_platform_api_get_network_report+0x618>
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d13c      	bne.n	8006b56 <ai_platform_api_get_network_report+0x40a>
 8006adc:	4b76      	ldr	r3, [pc, #472]	; (8006cb8 <ai_platform_api_get_network_report+0x56c>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	609a      	str	r2, [r3, #8]
 8006ae2:	689a      	ldr	r2, [r3, #8]
 8006ae4:	2a00      	cmp	r2, #0
 8006ae6:	d1fc      	bne.n	8006ae2 <ai_platform_api_get_network_report+0x396>
 8006ae8:	4a74      	ldr	r2, [pc, #464]	; (8006cbc <ai_platform_api_get_network_report+0x570>)
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	681a      	ldr	r2, [r3, #0]
 8006aee:	4b74      	ldr	r3, [pc, #464]	; (8006cc0 <ai_platform_api_get_network_report+0x574>)
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d030      	beq.n	8006b56 <ai_platform_api_get_network_report+0x40a>
 8006af4:	e7fe      	b.n	8006af4 <ai_platform_api_get_network_report+0x3a8>
 8006af6:	9901      	ldr	r1, [sp, #4]
 8006af8:	2300      	movs	r3, #0
 8006afa:	2218      	movs	r2, #24
 8006afc:	f107 0010 	add.w	r0, r7, #16
 8006b00:	640b      	str	r3, [r1, #64]	; 0x40
 8006b02:	874b      	strh	r3, [r1, #58]	; 0x3a
 8006b04:	2113      	movs	r1, #19
 8006b06:	f001 fc39 	bl	800837c <core_set_error>
 8006b0a:	e6f7      	b.n	80068fc <ai_platform_api_get_network_report+0x1b0>
 8006b0c:	2218      	movs	r2, #24
 8006b0e:	2111      	movs	r1, #17
 8006b10:	f107 0010 	add.w	r0, r7, #16
 8006b14:	f001 fc32 	bl	800837c <core_set_error>
 8006b18:	e6f0      	b.n	80068fc <ai_platform_api_get_network_report+0x1b0>
 8006b1a:	4a67      	ldr	r2, [pc, #412]	; (8006cb8 <ai_platform_api_get_network_report+0x56c>)
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	6093      	str	r3, [r2, #8]
 8006b20:	6893      	ldr	r3, [r2, #8]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1fc      	bne.n	8006b20 <ai_platform_api_get_network_report+0x3d4>
 8006b26:	4b65      	ldr	r3, [pc, #404]	; (8006cbc <ai_platform_api_get_network_report+0x570>)
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	4b65      	ldr	r3, [pc, #404]	; (8006cc0 <ai_platform_api_get_network_report+0x574>)
 8006b2c:	6812      	ldr	r2, [r2, #0]
 8006b2e:	429a      	cmp	r2, r3
 8006b30:	d011      	beq.n	8006b56 <ai_platform_api_get_network_report+0x40a>
 8006b32:	e7fe      	b.n	8006b32 <ai_platform_api_get_network_report+0x3e6>
 8006b34:	4b63      	ldr	r3, [pc, #396]	; (8006cc4 <ai_platform_api_get_network_report+0x578>)
 8006b36:	2201      	movs	r2, #1
 8006b38:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006b3c:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006b40:	2a00      	cmp	r2, #0
 8006b42:	d1fb      	bne.n	8006b3c <ai_platform_api_get_network_report+0x3f0>
 8006b44:	4a5d      	ldr	r2, [pc, #372]	; (8006cbc <ai_platform_api_get_network_report+0x570>)
 8006b46:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006b4a:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006b4e:	4b5c      	ldr	r3, [pc, #368]	; (8006cc0 <ai_platform_api_get_network_report+0x574>)
 8006b50:	429a      	cmp	r2, r3
 8006b52:	f040 8099 	bne.w	8006c88 <ai_platform_api_get_network_report+0x53c>
 8006b56:	f7ff f943 	bl	8005de0 <_ai_platform_release_crc>
 8006b5a:	4b5b      	ldr	r3, [pc, #364]	; (8006cc8 <ai_platform_api_get_network_report+0x57c>)
 8006b5c:	9a01      	ldr	r2, [sp, #4]
 8006b5e:	6113      	str	r3, [r2, #16]
 8006b60:	f7ff f93c 	bl	8005ddc <_ai_platform_acquire_crc>
 8006b64:	4b52      	ldr	r3, [pc, #328]	; (8006cb0 <ai_platform_api_get_network_report+0x564>)
 8006b66:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b70:	eb03 020c 	add.w	r2, r3, ip
 8006b74:	2a01      	cmp	r2, #1
 8006b76:	d92b      	bls.n	8006bd0 <ai_platform_api_get_network_report+0x484>
 8006b78:	f240 4249 	movw	r2, #1097	; 0x449
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d027      	beq.n	8006bd0 <ai_platform_api_get_network_report+0x484>
 8006b80:	4b4c      	ldr	r3, [pc, #304]	; (8006cb4 <ai_platform_api_get_network_report+0x568>)
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006b88:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006b8c:	d02d      	beq.n	8006bea <ai_platform_api_get_network_report+0x49e>
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	f240 4183 	movw	r1, #1155	; 0x483
 8006b94:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006b98:	428a      	cmp	r2, r1
 8006b9a:	f000 8110 	beq.w	8006dbe <ai_platform_api_get_network_report+0x672>
 8006b9e:	681a      	ldr	r2, [r3, #0]
 8006ba0:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006ba4:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 8006ba8:	f000 80fb 	beq.w	8006da2 <ai_platform_api_get_network_report+0x656>
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d12a      	bne.n	8006c0c <ai_platform_api_get_network_report+0x4c0>
 8006bb6:	4b40      	ldr	r3, [pc, #256]	; (8006cb8 <ai_platform_api_get_network_report+0x56c>)
 8006bb8:	2201      	movs	r2, #1
 8006bba:	609a      	str	r2, [r3, #8]
 8006bbc:	689a      	ldr	r2, [r3, #8]
 8006bbe:	2a00      	cmp	r2, #0
 8006bc0:	d1fc      	bne.n	8006bbc <ai_platform_api_get_network_report+0x470>
 8006bc2:	4a3e      	ldr	r2, [pc, #248]	; (8006cbc <ai_platform_api_get_network_report+0x570>)
 8006bc4:	601a      	str	r2, [r3, #0]
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	4b3d      	ldr	r3, [pc, #244]	; (8006cc0 <ai_platform_api_get_network_report+0x574>)
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d01e      	beq.n	8006c0c <ai_platform_api_get_network_report+0x4c0>
 8006bce:	e7fe      	b.n	8006bce <ai_platform_api_get_network_report+0x482>
 8006bd0:	4a39      	ldr	r2, [pc, #228]	; (8006cb8 <ai_platform_api_get_network_report+0x56c>)
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	6093      	str	r3, [r2, #8]
 8006bd6:	6893      	ldr	r3, [r2, #8]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1fc      	bne.n	8006bd6 <ai_platform_api_get_network_report+0x48a>
 8006bdc:	4b37      	ldr	r3, [pc, #220]	; (8006cbc <ai_platform_api_get_network_report+0x570>)
 8006bde:	6013      	str	r3, [r2, #0]
 8006be0:	4b37      	ldr	r3, [pc, #220]	; (8006cc0 <ai_platform_api_get_network_report+0x574>)
 8006be2:	6812      	ldr	r2, [r2, #0]
 8006be4:	429a      	cmp	r2, r3
 8006be6:	d011      	beq.n	8006c0c <ai_platform_api_get_network_report+0x4c0>
 8006be8:	e7fe      	b.n	8006be8 <ai_platform_api_get_network_report+0x49c>
 8006bea:	4b36      	ldr	r3, [pc, #216]	; (8006cc4 <ai_platform_api_get_network_report+0x578>)
 8006bec:	2201      	movs	r2, #1
 8006bee:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006bf2:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006bf6:	2a00      	cmp	r2, #0
 8006bf8:	d1fb      	bne.n	8006bf2 <ai_platform_api_get_network_report+0x4a6>
 8006bfa:	4a30      	ldr	r2, [pc, #192]	; (8006cbc <ai_platform_api_get_network_report+0x570>)
 8006bfc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006c00:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006c04:	4b2e      	ldr	r3, [pc, #184]	; (8006cc0 <ai_platform_api_get_network_report+0x574>)
 8006c06:	429a      	cmp	r2, r3
 8006c08:	f040 80ab 	bne.w	8006d62 <ai_platform_api_get_network_report+0x616>
 8006c0c:	f7ff f8e8 	bl	8005de0 <_ai_platform_release_crc>
 8006c10:	f44f 7384 	mov.w	r3, #264	; 0x108
 8006c14:	9a01      	ldr	r2, [sp, #4]
 8006c16:	f46f 658a 	mvn.w	r5, #1104	; 0x450
 8006c1a:	6153      	str	r3, [r2, #20]
 8006c1c:	f7ff f8de 	bl	8005ddc <_ai_platform_acquire_crc>
 8006c20:	4b23      	ldr	r3, [pc, #140]	; (8006cb0 <ai_platform_api_get_network_report+0x564>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c28:	195a      	adds	r2, r3, r5
 8006c2a:	2a01      	cmp	r2, #1
 8006c2c:	d94e      	bls.n	8006ccc <ai_platform_api_get_network_report+0x580>
 8006c2e:	f240 4249 	movw	r2, #1097	; 0x449
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d04a      	beq.n	8006ccc <ai_platform_api_get_network_report+0x580>
 8006c36:	4b1f      	ldr	r3, [pc, #124]	; (8006cb4 <ai_platform_api_get_network_report+0x568>)
 8006c38:	681a      	ldr	r2, [r3, #0]
 8006c3a:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006c3e:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006c42:	f000 809d 	beq.w	8006d80 <ai_platform_api_get_network_report+0x634>
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	f240 4183 	movw	r1, #1155	; 0x483
 8006c4c:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006c50:	428a      	cmp	r2, r1
 8006c52:	f000 80fe 	beq.w	8006e52 <ai_platform_api_get_network_report+0x706>
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006c5c:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 8006c60:	f000 80e9 	beq.w	8006e36 <ai_platform_api_get_network_report+0x6ea>
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d13a      	bne.n	8006ce4 <ai_platform_api_get_network_report+0x598>
 8006c6e:	4b12      	ldr	r3, [pc, #72]	; (8006cb8 <ai_platform_api_get_network_report+0x56c>)
 8006c70:	2201      	movs	r2, #1
 8006c72:	609a      	str	r2, [r3, #8]
 8006c74:	689a      	ldr	r2, [r3, #8]
 8006c76:	2a00      	cmp	r2, #0
 8006c78:	d1fc      	bne.n	8006c74 <ai_platform_api_get_network_report+0x528>
 8006c7a:	4a10      	ldr	r2, [pc, #64]	; (8006cbc <ai_platform_api_get_network_report+0x570>)
 8006c7c:	601a      	str	r2, [r3, #0]
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	4b0f      	ldr	r3, [pc, #60]	; (8006cc0 <ai_platform_api_get_network_report+0x574>)
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d02e      	beq.n	8006ce4 <ai_platform_api_get_network_report+0x598>
 8006c86:	e7fe      	b.n	8006c86 <ai_platform_api_get_network_report+0x53a>
 8006c88:	e7fe      	b.n	8006c88 <ai_platform_api_get_network_report+0x53c>
 8006c8a:	4b0e      	ldr	r3, [pc, #56]	; (8006cc4 <ai_platform_api_get_network_report+0x578>)
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006c92:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006c96:	2a00      	cmp	r2, #0
 8006c98:	d1fb      	bne.n	8006c92 <ai_platform_api_get_network_report+0x546>
 8006c9a:	4a08      	ldr	r2, [pc, #32]	; (8006cbc <ai_platform_api_get_network_report+0x570>)
 8006c9c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006ca0:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006ca4:	4b06      	ldr	r3, [pc, #24]	; (8006cc0 <ai_platform_api_get_network_report+0x574>)
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	f43f af55 	beq.w	8006b56 <ai_platform_api_get_network_report+0x40a>
 8006cac:	e7fe      	b.n	8006cac <ai_platform_api_get_network_report+0x560>
 8006cae:	bf00      	nop
 8006cb0:	e0042000 	.word	0xe0042000
 8006cb4:	5c001000 	.word	0x5c001000
 8006cb8:	40023000 	.word	0x40023000
 8006cbc:	f407a5c2 	.word	0xf407a5c2
 8006cc0:	b5e8b5cd 	.word	0xb5e8b5cd
 8006cc4:	58024000 	.word	0x58024000
 8006cc8:	080115b4 	.word	0x080115b4
 8006ccc:	4ba4      	ldr	r3, [pc, #656]	; (8006f60 <ai_platform_api_get_network_report+0x814>)
 8006cce:	2201      	movs	r2, #1
 8006cd0:	609a      	str	r2, [r3, #8]
 8006cd2:	689a      	ldr	r2, [r3, #8]
 8006cd4:	2a00      	cmp	r2, #0
 8006cd6:	d1fc      	bne.n	8006cd2 <ai_platform_api_get_network_report+0x586>
 8006cd8:	4aa2      	ldr	r2, [pc, #648]	; (8006f64 <ai_platform_api_get_network_report+0x818>)
 8006cda:	601a      	str	r2, [r3, #0]
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	4ba2      	ldr	r3, [pc, #648]	; (8006f68 <ai_platform_api_get_network_report+0x81c>)
 8006ce0:	429a      	cmp	r2, r3
 8006ce2:	d13d      	bne.n	8006d60 <ai_platform_api_get_network_report+0x614>
 8006ce4:	f7ff f87c 	bl	8005de0 <_ai_platform_release_crc>
 8006ce8:	f240 2301 	movw	r3, #513	; 0x201
 8006cec:	9a01      	ldr	r2, [sp, #4]
 8006cee:	f46f 648a 	mvn.w	r4, #1104	; 0x450
 8006cf2:	6253      	str	r3, [r2, #36]	; 0x24
 8006cf4:	f7ff f872 	bl	8005ddc <_ai_platform_acquire_crc>
 8006cf8:	4b9c      	ldr	r3, [pc, #624]	; (8006f6c <ai_platform_api_get_network_report+0x820>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d00:	191a      	adds	r2, r3, r4
 8006d02:	2a01      	cmp	r2, #1
 8006d04:	d96d      	bls.n	8006de2 <ai_platform_api_get_network_report+0x696>
 8006d06:	f240 4249 	movw	r2, #1097	; 0x449
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d069      	beq.n	8006de2 <ai_platform_api_get_network_report+0x696>
 8006d0e:	4b98      	ldr	r3, [pc, #608]	; (8006f70 <ai_platform_api_get_network_report+0x824>)
 8006d10:	681a      	ldr	r2, [r3, #0]
 8006d12:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006d16:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8006d1a:	f000 80ca 	beq.w	8006eb2 <ai_platform_api_get_network_report+0x766>
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	f240 4183 	movw	r1, #1155	; 0x483
 8006d24:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006d28:	428a      	cmp	r2, r1
 8006d2a:	f000 80b1 	beq.w	8006e90 <ai_platform_api_get_network_report+0x744>
 8006d2e:	681a      	ldr	r2, [r3, #0]
 8006d30:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8006d34:	f5b2 6f90 	cmp.w	r2, #1152	; 0x480
 8006d38:	f000 809d 	beq.w	8006e76 <ai_platform_api_get_network_report+0x72a>
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d159      	bne.n	8006dfa <ai_platform_api_get_network_report+0x6ae>
 8006d46:	4b86      	ldr	r3, [pc, #536]	; (8006f60 <ai_platform_api_get_network_report+0x814>)
 8006d48:	2201      	movs	r2, #1
 8006d4a:	609a      	str	r2, [r3, #8]
 8006d4c:	689a      	ldr	r2, [r3, #8]
 8006d4e:	2a00      	cmp	r2, #0
 8006d50:	d1fc      	bne.n	8006d4c <ai_platform_api_get_network_report+0x600>
 8006d52:	4a84      	ldr	r2, [pc, #528]	; (8006f64 <ai_platform_api_get_network_report+0x818>)
 8006d54:	601a      	str	r2, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	4b83      	ldr	r3, [pc, #524]	; (8006f68 <ai_platform_api_get_network_report+0x81c>)
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d04d      	beq.n	8006dfa <ai_platform_api_get_network_report+0x6ae>
 8006d5e:	e7fe      	b.n	8006d5e <ai_platform_api_get_network_report+0x612>
 8006d60:	e7fe      	b.n	8006d60 <ai_platform_api_get_network_report+0x614>
 8006d62:	e7fe      	b.n	8006d62 <ai_platform_api_get_network_report+0x616>
 8006d64:	4b7e      	ldr	r3, [pc, #504]	; (8006f60 <ai_platform_api_get_network_report+0x814>)
 8006d66:	2201      	movs	r2, #1
 8006d68:	609a      	str	r2, [r3, #8]
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	2a00      	cmp	r2, #0
 8006d6e:	d1fc      	bne.n	8006d6a <ai_platform_api_get_network_report+0x61e>
 8006d70:	4a7c      	ldr	r2, [pc, #496]	; (8006f64 <ai_platform_api_get_network_report+0x818>)
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	4b7c      	ldr	r3, [pc, #496]	; (8006f68 <ai_platform_api_get_network_report+0x81c>)
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	f43f aeec 	beq.w	8006b56 <ai_platform_api_get_network_report+0x40a>
 8006d7e:	e7fe      	b.n	8006d7e <ai_platform_api_get_network_report+0x632>
 8006d80:	4b7c      	ldr	r3, [pc, #496]	; (8006f74 <ai_platform_api_get_network_report+0x828>)
 8006d82:	2201      	movs	r2, #1
 8006d84:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006d88:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006d8c:	2a00      	cmp	r2, #0
 8006d8e:	d1fb      	bne.n	8006d88 <ai_platform_api_get_network_report+0x63c>
 8006d90:	4a74      	ldr	r2, [pc, #464]	; (8006f64 <ai_platform_api_get_network_report+0x818>)
 8006d92:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006d96:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006d9a:	4b73      	ldr	r3, [pc, #460]	; (8006f68 <ai_platform_api_get_network_report+0x81c>)
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d0a1      	beq.n	8006ce4 <ai_platform_api_get_network_report+0x598>
 8006da0:	e7fe      	b.n	8006da0 <ai_platform_api_get_network_report+0x654>
 8006da2:	4b6f      	ldr	r3, [pc, #444]	; (8006f60 <ai_platform_api_get_network_report+0x814>)
 8006da4:	2201      	movs	r2, #1
 8006da6:	609a      	str	r2, [r3, #8]
 8006da8:	689a      	ldr	r2, [r3, #8]
 8006daa:	2a00      	cmp	r2, #0
 8006dac:	d1fc      	bne.n	8006da8 <ai_platform_api_get_network_report+0x65c>
 8006dae:	4a6d      	ldr	r2, [pc, #436]	; (8006f64 <ai_platform_api_get_network_report+0x818>)
 8006db0:	601a      	str	r2, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	4b6c      	ldr	r3, [pc, #432]	; (8006f68 <ai_platform_api_get_network_report+0x81c>)
 8006db6:	429a      	cmp	r2, r3
 8006db8:	f43f af28 	beq.w	8006c0c <ai_platform_api_get_network_report+0x4c0>
 8006dbc:	e7fe      	b.n	8006dbc <ai_platform_api_get_network_report+0x670>
 8006dbe:	4b6d      	ldr	r3, [pc, #436]	; (8006f74 <ai_platform_api_get_network_report+0x828>)
 8006dc0:	2201      	movs	r2, #1
 8006dc2:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006dc6:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006dca:	2a00      	cmp	r2, #0
 8006dcc:	d1fb      	bne.n	8006dc6 <ai_platform_api_get_network_report+0x67a>
 8006dce:	4a65      	ldr	r2, [pc, #404]	; (8006f64 <ai_platform_api_get_network_report+0x818>)
 8006dd0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006dd4:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006dd8:	4b63      	ldr	r3, [pc, #396]	; (8006f68 <ai_platform_api_get_network_report+0x81c>)
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	f43f af16 	beq.w	8006c0c <ai_platform_api_get_network_report+0x4c0>
 8006de0:	e7fe      	b.n	8006de0 <ai_platform_api_get_network_report+0x694>
 8006de2:	4b5f      	ldr	r3, [pc, #380]	; (8006f60 <ai_platform_api_get_network_report+0x814>)
 8006de4:	2201      	movs	r2, #1
 8006de6:	609a      	str	r2, [r3, #8]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	2a00      	cmp	r2, #0
 8006dec:	d1fc      	bne.n	8006de8 <ai_platform_api_get_network_report+0x69c>
 8006dee:	4a5d      	ldr	r2, [pc, #372]	; (8006f64 <ai_platform_api_get_network_report+0x818>)
 8006df0:	601a      	str	r2, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	4b5c      	ldr	r3, [pc, #368]	; (8006f68 <ai_platform_api_get_network_report+0x81c>)
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d11c      	bne.n	8006e34 <ai_platform_api_get_network_report+0x6e8>
 8006dfa:	f7fe fff1 	bl	8005de0 <_ai_platform_release_crc>
 8006dfe:	9c01      	ldr	r4, [sp, #4]
 8006e00:	f240 5301 	movw	r3, #1281	; 0x501
 8006e04:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e06:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8006e08:	f7fe fec4 	bl	8005b94 <ai_platform_version_get>
 8006e0c:	4b5a      	ldr	r3, [pc, #360]	; (8006f78 <ai_platform_api_get_network_report+0x82c>)
 8006e0e:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8006e10:	6220      	str	r0, [r4, #32]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d15e      	bne.n	8006ed4 <ai_platform_api_get_network_report+0x788>
 8006e16:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006e1a:	f104 0348 	add.w	r3, r4, #72	; 0x48
 8006e1e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8006e22:	e882 0003 	stmia.w	r2, {r0, r1}
 8006e26:	2201      	movs	r2, #1
 8006e28:	e898 0003 	ldmia.w	r8, {r0, r1}
 8006e2c:	9202      	str	r2, [sp, #8]
 8006e2e:	e883 0003 	stmia.w	r3, {r0, r1}
 8006e32:	e563      	b.n	80068fc <ai_platform_api_get_network_report+0x1b0>
 8006e34:	e7fe      	b.n	8006e34 <ai_platform_api_get_network_report+0x6e8>
 8006e36:	4b4a      	ldr	r3, [pc, #296]	; (8006f60 <ai_platform_api_get_network_report+0x814>)
 8006e38:	2201      	movs	r2, #1
 8006e3a:	609a      	str	r2, [r3, #8]
 8006e3c:	689a      	ldr	r2, [r3, #8]
 8006e3e:	2a00      	cmp	r2, #0
 8006e40:	d1fc      	bne.n	8006e3c <ai_platform_api_get_network_report+0x6f0>
 8006e42:	4a48      	ldr	r2, [pc, #288]	; (8006f64 <ai_platform_api_get_network_report+0x818>)
 8006e44:	601a      	str	r2, [r3, #0]
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	4b47      	ldr	r3, [pc, #284]	; (8006f68 <ai_platform_api_get_network_report+0x81c>)
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	f43f af4a 	beq.w	8006ce4 <ai_platform_api_get_network_report+0x598>
 8006e50:	e7fe      	b.n	8006e50 <ai_platform_api_get_network_report+0x704>
 8006e52:	4b48      	ldr	r3, [pc, #288]	; (8006f74 <ai_platform_api_get_network_report+0x828>)
 8006e54:	2201      	movs	r2, #1
 8006e56:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006e5a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006e5e:	2a00      	cmp	r2, #0
 8006e60:	d1fb      	bne.n	8006e5a <ai_platform_api_get_network_report+0x70e>
 8006e62:	4a40      	ldr	r2, [pc, #256]	; (8006f64 <ai_platform_api_get_network_report+0x818>)
 8006e64:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006e68:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006e6c:	4b3e      	ldr	r3, [pc, #248]	; (8006f68 <ai_platform_api_get_network_report+0x81c>)
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	f43f af38 	beq.w	8006ce4 <ai_platform_api_get_network_report+0x598>
 8006e74:	e7fe      	b.n	8006e74 <ai_platform_api_get_network_report+0x728>
 8006e76:	4b3a      	ldr	r3, [pc, #232]	; (8006f60 <ai_platform_api_get_network_report+0x814>)
 8006e78:	2201      	movs	r2, #1
 8006e7a:	609a      	str	r2, [r3, #8]
 8006e7c:	689a      	ldr	r2, [r3, #8]
 8006e7e:	2a00      	cmp	r2, #0
 8006e80:	d1fc      	bne.n	8006e7c <ai_platform_api_get_network_report+0x730>
 8006e82:	4a38      	ldr	r2, [pc, #224]	; (8006f64 <ai_platform_api_get_network_report+0x818>)
 8006e84:	601a      	str	r2, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	4b37      	ldr	r3, [pc, #220]	; (8006f68 <ai_platform_api_get_network_report+0x81c>)
 8006e8a:	429a      	cmp	r2, r3
 8006e8c:	d0b5      	beq.n	8006dfa <ai_platform_api_get_network_report+0x6ae>
 8006e8e:	e7fe      	b.n	8006e8e <ai_platform_api_get_network_report+0x742>
 8006e90:	4b38      	ldr	r3, [pc, #224]	; (8006f74 <ai_platform_api_get_network_report+0x828>)
 8006e92:	2201      	movs	r2, #1
 8006e94:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006e98:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006e9c:	2a00      	cmp	r2, #0
 8006e9e:	d1fb      	bne.n	8006e98 <ai_platform_api_get_network_report+0x74c>
 8006ea0:	4a30      	ldr	r2, [pc, #192]	; (8006f64 <ai_platform_api_get_network_report+0x818>)
 8006ea2:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006ea6:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006eaa:	4b2f      	ldr	r3, [pc, #188]	; (8006f68 <ai_platform_api_get_network_report+0x81c>)
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d0a4      	beq.n	8006dfa <ai_platform_api_get_network_report+0x6ae>
 8006eb0:	e7fe      	b.n	8006eb0 <ai_platform_api_get_network_report+0x764>
 8006eb2:	4b30      	ldr	r3, [pc, #192]	; (8006f74 <ai_platform_api_get_network_report+0x828>)
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 8006eba:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 8006ebe:	2a00      	cmp	r2, #0
 8006ec0:	d1fb      	bne.n	8006eba <ai_platform_api_get_network_report+0x76e>
 8006ec2:	4a28      	ldr	r2, [pc, #160]	; (8006f64 <ai_platform_api_get_network_report+0x818>)
 8006ec4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006ec8:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 8006ecc:	4b26      	ldr	r3, [pc, #152]	; (8006f68 <ai_platform_api_get_network_report+0x81c>)
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d093      	beq.n	8006dfa <ai_platform_api_get_network_report+0x6ae>
 8006ed2:	e7fe      	b.n	8006ed2 <ai_platform_api_get_network_report+0x786>
 8006ed4:	9901      	ldr	r1, [sp, #4]
 8006ed6:	f10d 0910 	add.w	r9, sp, #16
 8006eda:	4a28      	ldr	r2, [pc, #160]	; (8006f7c <ai_platform_api_get_network_report+0x830>)
 8006edc:	2000      	movs	r0, #0
 8006ede:	f8c1 905c 	str.w	r9, [r1, #92]	; 0x5c
 8006ee2:	f101 0444 	add.w	r4, r1, #68	; 0x44
 8006ee6:	644a      	str	r2, [r1, #68]	; 0x44
 8006ee8:	f240 4201 	movw	r2, #1025	; 0x401
 8006eec:	f101 0560 	add.w	r5, r1, #96	; 0x60
 8006ef0:	4b23      	ldr	r3, [pc, #140]	; (8006f80 <ai_platform_api_get_network_report+0x834>)
 8006ef2:	658a      	str	r2, [r1, #88]	; 0x58
 8006ef4:	460a      	mov	r2, r1
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	46a6      	mov	lr, r4
 8006efa:	46ac      	mov	ip, r5
 8006efc:	e9c2 0112 	strd	r0, r1, [r2, #72]	; 0x48
 8006f00:	e9c2 0114 	strd	r0, r1, [r2, #80]	; 0x50
 8006f04:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8006f06:	e889 000f 	stmia.w	r9, {r0, r1, r2, r3}
 8006f0a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8006f0e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8006f12:	e89e 0007 	ldmia.w	lr, {r0, r1, r2}
 8006f16:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
 8006f1a:	4630      	mov	r0, r6
 8006f1c:	f7fe feb2 	bl	8005c84 <ai_buffer_array_sane>
 8006f20:	b990      	cbnz	r0, 8006f48 <ai_platform_api_get_network_report+0x7fc>
 8006f22:	4640      	mov	r0, r8
 8006f24:	f7fe feae 	bl	8005c84 <ai_buffer_array_sane>
 8006f28:	b910      	cbnz	r0, 8006f30 <ai_platform_api_get_network_report+0x7e4>
 8006f2a:	2301      	movs	r3, #1
 8006f2c:	9302      	str	r3, [sp, #8]
 8006f2e:	e4e5      	b.n	80068fc <ai_platform_api_get_network_report+0x1b0>
 8006f30:	4640      	mov	r0, r8
 8006f32:	f7fe fea7 	bl	8005c84 <ai_buffer_array_sane>
 8006f36:	b328      	cbz	r0, 8006f84 <ai_platform_api_get_network_report+0x838>
 8006f38:	6a3d      	ldr	r5, [r7, #32]
 8006f3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006f42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006f46:	e7f0      	b.n	8006f2a <ai_platform_api_get_network_report+0x7de>
 8006f48:	4630      	mov	r0, r6
 8006f4a:	f7fe fe9b 	bl	8005c84 <ai_buffer_array_sane>
 8006f4e:	b308      	cbz	r0, 8006f94 <ai_platform_api_get_network_report+0x848>
 8006f50:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8006f52:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8006f54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f56:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8006f5a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006f5e:	e7e0      	b.n	8006f22 <ai_platform_api_get_network_report+0x7d6>
 8006f60:	40023000 	.word	0x40023000
 8006f64:	f407a5c2 	.word	0xf407a5c2
 8006f68:	b5e8b5cd 	.word	0xb5e8b5cd
 8006f6c:	e0042000 	.word	0xe0042000
 8006f70:	5c001000 	.word	0x5c001000
 8006f74:	58024000 	.word	0x58024000
 8006f78:	a1facade 	.word	0xa1facade
 8006f7c:	00040440 	.word	0x00040440
 8006f80:	0800cafc 	.word	0x0800cafc
 8006f84:	4605      	mov	r5, r0
 8006f86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006f88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006f8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8006f92:	deff      	udf	#255	; 0xff
 8006f94:	4604      	mov	r4, r0
 8006f96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006f98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006f9a:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8006f9e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006fa2:	deff      	udf	#255	; 0xff

08006fa4 <ai_platform_network_create>:
 8006fa4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006fa8:	b083      	sub	sp, #12
 8006faa:	4604      	mov	r4, r0
 8006fac:	4615      	mov	r5, r2
 8006fae:	461e      	mov	r6, r3
 8006fb0:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8006fb4:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 8006fb8:	f7fe ff10 	bl	8005ddc <_ai_platform_acquire_crc>
 8006fbc:	2800      	cmp	r0, #0
 8006fbe:	f000 80bd 	beq.w	800713c <ai_platform_network_create+0x198>
 8006fc2:	4ba5      	ldr	r3, [pc, #660]	; (8007258 <ai_platform_network_create+0x2b4>)
 8006fc4:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 8006fc8:	4601      	mov	r1, r0
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fd0:	eb03 020c 	add.w	r2, r3, ip
 8006fd4:	2a01      	cmp	r2, #1
 8006fd6:	f240 80a8 	bls.w	800712a <ai_platform_network_create+0x186>
 8006fda:	f240 4249 	movw	r2, #1097	; 0x449
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	f000 80a3 	beq.w	800712a <ai_platform_network_create+0x186>
 8006fe4:	4a9d      	ldr	r2, [pc, #628]	; (800725c <ai_platform_network_create+0x2b8>)
 8006fe6:	6813      	ldr	r3, [r2, #0]
 8006fe8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006fec:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006ff0:	f000 80b9 	beq.w	8007166 <ai_platform_network_create+0x1c2>
 8006ff4:	6813      	ldr	r3, [r2, #0]
 8006ff6:	f240 4c83 	movw	ip, #1155	; 0x483
 8006ffa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ffe:	4563      	cmp	r3, ip
 8007000:	f000 80a1 	beq.w	8007146 <ai_platform_network_create+0x1a2>
 8007004:	6813      	ldr	r3, [r2, #0]
 8007006:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800700a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800700e:	f000 8153 	beq.w	80072b8 <ai_platform_network_create+0x314>
 8007012:	6813      	ldr	r3, [r2, #0]
 8007014:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007018:	2b00      	cmp	r3, #0
 800701a:	f040 808d 	bne.w	8007138 <ai_platform_network_create+0x194>
 800701e:	4a90      	ldr	r2, [pc, #576]	; (8007260 <ai_platform_network_create+0x2bc>)
 8007020:	2318      	movs	r3, #24
 8007022:	6093      	str	r3, [r2, #8]
 8007024:	6893      	ldr	r3, [r2, #8]
 8007026:	2b18      	cmp	r3, #24
 8007028:	f040 8086 	bne.w	8007138 <ai_platform_network_create+0x194>
 800702c:	2301      	movs	r3, #1
 800702e:	6093      	str	r3, [r2, #8]
 8007030:	6893      	ldr	r3, [r2, #8]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1fc      	bne.n	8007030 <ai_platform_network_create+0x8c>
 8007036:	4608      	mov	r0, r1
 8007038:	f7fe fed2 	bl	8005de0 <_ai_platform_release_crc>
 800703c:	f7fe fece 	bl	8005ddc <_ai_platform_acquire_crc>
 8007040:	4b85      	ldr	r3, [pc, #532]	; (8007258 <ai_platform_network_create+0x2b4>)
 8007042:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800704c:	189a      	adds	r2, r3, r2
 800704e:	2a01      	cmp	r2, #1
 8007050:	f240 809f 	bls.w	8007192 <ai_platform_network_create+0x1ee>
 8007054:	f240 4249 	movw	r2, #1097	; 0x449
 8007058:	4293      	cmp	r3, r2
 800705a:	f000 809a 	beq.w	8007192 <ai_platform_network_create+0x1ee>
 800705e:	4a7f      	ldr	r2, [pc, #508]	; (800725c <ai_platform_network_create+0x2b8>)
 8007060:	6813      	ldr	r3, [r2, #0]
 8007062:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007066:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800706a:	f000 80a0 	beq.w	80071ae <ai_platform_network_create+0x20a>
 800706e:	6813      	ldr	r3, [r2, #0]
 8007070:	f240 4183 	movw	r1, #1155	; 0x483
 8007074:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007078:	428b      	cmp	r3, r1
 800707a:	f000 80bf 	beq.w	80071fc <ai_platform_network_create+0x258>
 800707e:	6813      	ldr	r3, [r2, #0]
 8007080:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007084:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007088:	f000 8123 	beq.w	80072d2 <ai_platform_network_create+0x32e>
 800708c:	6813      	ldr	r3, [r2, #0]
 800708e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007092:	2b00      	cmp	r3, #0
 8007094:	f000 80c4 	beq.w	8007220 <ai_platform_network_create+0x27c>
 8007098:	f7fe fea2 	bl	8005de0 <_ai_platform_release_crc>
 800709c:	2c00      	cmp	r4, #0
 800709e:	f000 80aa 	beq.w	80071f6 <ai_platform_network_create+0x252>
 80070a2:	4b70      	ldr	r3, [pc, #448]	; (8007264 <ai_platform_network_create+0x2c0>)
 80070a4:	602b      	str	r3, [r5, #0]
 80070a6:	6025      	str	r5, [r4, #0]
 80070a8:	f001 f960 	bl	800836c <core_init>
 80070ac:	2800      	cmp	r0, #0
 80070ae:	f000 8090 	beq.w	80071d2 <ai_platform_network_create+0x22e>
 80070b2:	f7fe fe93 	bl	8005ddc <_ai_platform_acquire_crc>
 80070b6:	4b68      	ldr	r3, [pc, #416]	; (8007258 <ai_platform_network_create+0x2b4>)
 80070b8:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070c2:	185a      	adds	r2, r3, r1
 80070c4:	2a01      	cmp	r2, #1
 80070c6:	f240 80b9 	bls.w	800723c <ai_platform_network_create+0x298>
 80070ca:	f240 4249 	movw	r2, #1097	; 0x449
 80070ce:	4293      	cmp	r3, r2
 80070d0:	f000 80b4 	beq.w	800723c <ai_platform_network_create+0x298>
 80070d4:	4a61      	ldr	r2, [pc, #388]	; (800725c <ai_platform_network_create+0x2b8>)
 80070d6:	6813      	ldr	r3, [r2, #0]
 80070d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070dc:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80070e0:	f000 80c8 	beq.w	8007274 <ai_platform_network_create+0x2d0>
 80070e4:	6813      	ldr	r3, [r2, #0]
 80070e6:	f240 4183 	movw	r1, #1155	; 0x483
 80070ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070ee:	428b      	cmp	r3, r1
 80070f0:	f000 8107 	beq.w	8007302 <ai_platform_network_create+0x35e>
 80070f4:	6813      	ldr	r3, [r2, #0]
 80070f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80070fa:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80070fe:	f000 8111 	beq.w	8007324 <ai_platform_network_create+0x380>
 8007102:	6813      	ldr	r3, [r2, #0]
 8007104:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007108:	2b00      	cmp	r3, #0
 800710a:	f040 80c3 	bne.w	8007294 <ai_platform_network_create+0x2f0>
 800710e:	4b54      	ldr	r3, [pc, #336]	; (8007260 <ai_platform_network_create+0x2bc>)
 8007110:	2201      	movs	r2, #1
 8007112:	609a      	str	r2, [r3, #8]
 8007114:	689a      	ldr	r2, [r3, #8]
 8007116:	2a00      	cmp	r2, #0
 8007118:	d1fc      	bne.n	8007114 <ai_platform_network_create+0x170>
 800711a:	4a53      	ldr	r2, [pc, #332]	; (8007268 <ai_platform_network_create+0x2c4>)
 800711c:	601a      	str	r2, [r3, #0]
 800711e:	681a      	ldr	r2, [r3, #0]
 8007120:	4b52      	ldr	r3, [pc, #328]	; (800726c <ai_platform_network_create+0x2c8>)
 8007122:	429a      	cmp	r2, r3
 8007124:	f000 80b6 	beq.w	8007294 <ai_platform_network_create+0x2f0>
 8007128:	e7fe      	b.n	8007128 <ai_platform_network_create+0x184>
 800712a:	4b4d      	ldr	r3, [pc, #308]	; (8007260 <ai_platform_network_create+0x2bc>)
 800712c:	2218      	movs	r2, #24
 800712e:	609a      	str	r2, [r3, #8]
 8007130:	689a      	ldr	r2, [r3, #8]
 8007132:	2a18      	cmp	r2, #24
 8007134:	d027      	beq.n	8007186 <ai_platform_network_create+0x1e2>
 8007136:	4608      	mov	r0, r1
 8007138:	f7fe fe52 	bl	8005de0 <_ai_platform_release_crc>
 800713c:	f244 1033 	movw	r0, #16691	; 0x4133
 8007140:	b003      	add	sp, #12
 8007142:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007146:	4a4a      	ldr	r2, [pc, #296]	; (8007270 <ai_platform_network_create+0x2cc>)
 8007148:	2318      	movs	r3, #24
 800714a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800714e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007152:	2b18      	cmp	r3, #24
 8007154:	d1f0      	bne.n	8007138 <ai_platform_network_create+0x194>
 8007156:	2301      	movs	r3, #1
 8007158:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800715c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007160:	2b00      	cmp	r3, #0
 8007162:	d1fb      	bne.n	800715c <ai_platform_network_create+0x1b8>
 8007164:	e767      	b.n	8007036 <ai_platform_network_create+0x92>
 8007166:	4a42      	ldr	r2, [pc, #264]	; (8007270 <ai_platform_network_create+0x2cc>)
 8007168:	2318      	movs	r3, #24
 800716a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800716e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007172:	2b18      	cmp	r3, #24
 8007174:	d1e0      	bne.n	8007138 <ai_platform_network_create+0x194>
 8007176:	2301      	movs	r3, #1
 8007178:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800717c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1fb      	bne.n	800717c <ai_platform_network_create+0x1d8>
 8007184:	e757      	b.n	8007036 <ai_platform_network_create+0x92>
 8007186:	2201      	movs	r2, #1
 8007188:	609a      	str	r2, [r3, #8]
 800718a:	689a      	ldr	r2, [r3, #8]
 800718c:	2a00      	cmp	r2, #0
 800718e:	d1fc      	bne.n	800718a <ai_platform_network_create+0x1e6>
 8007190:	e751      	b.n	8007036 <ai_platform_network_create+0x92>
 8007192:	4a33      	ldr	r2, [pc, #204]	; (8007260 <ai_platform_network_create+0x2bc>)
 8007194:	2301      	movs	r3, #1
 8007196:	6093      	str	r3, [r2, #8]
 8007198:	6891      	ldr	r1, [r2, #8]
 800719a:	2900      	cmp	r1, #0
 800719c:	d1fc      	bne.n	8007198 <ai_platform_network_create+0x1f4>
 800719e:	4b32      	ldr	r3, [pc, #200]	; (8007268 <ai_platform_network_create+0x2c4>)
 80071a0:	6013      	str	r3, [r2, #0]
 80071a2:	4b32      	ldr	r3, [pc, #200]	; (800726c <ai_platform_network_create+0x2c8>)
 80071a4:	6812      	ldr	r2, [r2, #0]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	f43f af76 	beq.w	8007098 <ai_platform_network_create+0xf4>
 80071ac:	e7fe      	b.n	80071ac <ai_platform_network_create+0x208>
 80071ae:	4a30      	ldr	r2, [pc, #192]	; (8007270 <ai_platform_network_create+0x2cc>)
 80071b0:	2301      	movs	r3, #1
 80071b2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80071b6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1fb      	bne.n	80071b6 <ai_platform_network_create+0x212>
 80071be:	4b2a      	ldr	r3, [pc, #168]	; (8007268 <ai_platform_network_create+0x2c4>)
 80071c0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80071c4:	4b29      	ldr	r3, [pc, #164]	; (800726c <ai_platform_network_create+0x2c8>)
 80071c6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80071ca:	429a      	cmp	r2, r3
 80071cc:	f43f af64 	beq.w	8007098 <ai_platform_network_create+0xf4>
 80071d0:	e7fe      	b.n	80071d0 <ai_platform_network_create+0x22c>
 80071d2:	f04f 0930 	mov.w	r9, #48	; 0x30
 80071d6:	2300      	movs	r3, #0
 80071d8:	6023      	str	r3, [r4, #0]
 80071da:	2410      	movs	r4, #16
 80071dc:	4642      	mov	r2, r8
 80071de:	4639      	mov	r1, r7
 80071e0:	4630      	mov	r0, r6
 80071e2:	f7fe fcd1 	bl	8005b88 <ai_version_get>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2000      	movs	r0, #0
 80071ea:	64ab      	str	r3, [r5, #72]	; 0x48
 80071ec:	f369 0007 	bfi	r0, r9, #0, #8
 80071f0:	f364 201f 	bfi	r0, r4, #8, #24
 80071f4:	e7a4      	b.n	8007140 <ai_platform_network_create+0x19c>
 80071f6:	f241 0010 	movw	r0, #4112	; 0x1010
 80071fa:	e7a1      	b.n	8007140 <ai_platform_network_create+0x19c>
 80071fc:	4a1c      	ldr	r2, [pc, #112]	; (8007270 <ai_platform_network_create+0x2cc>)
 80071fe:	2301      	movs	r3, #1
 8007200:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007204:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1fb      	bne.n	8007204 <ai_platform_network_create+0x260>
 800720c:	4b16      	ldr	r3, [pc, #88]	; (8007268 <ai_platform_network_create+0x2c4>)
 800720e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007212:	4b16      	ldr	r3, [pc, #88]	; (800726c <ai_platform_network_create+0x2c8>)
 8007214:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007218:	429a      	cmp	r2, r3
 800721a:	f43f af3d 	beq.w	8007098 <ai_platform_network_create+0xf4>
 800721e:	e7fe      	b.n	800721e <ai_platform_network_create+0x27a>
 8007220:	4a0f      	ldr	r2, [pc, #60]	; (8007260 <ai_platform_network_create+0x2bc>)
 8007222:	2301      	movs	r3, #1
 8007224:	6093      	str	r3, [r2, #8]
 8007226:	6893      	ldr	r3, [r2, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1fc      	bne.n	8007226 <ai_platform_network_create+0x282>
 800722c:	4b0e      	ldr	r3, [pc, #56]	; (8007268 <ai_platform_network_create+0x2c4>)
 800722e:	6013      	str	r3, [r2, #0]
 8007230:	4b0e      	ldr	r3, [pc, #56]	; (800726c <ai_platform_network_create+0x2c8>)
 8007232:	6812      	ldr	r2, [r2, #0]
 8007234:	429a      	cmp	r2, r3
 8007236:	f43f af2f 	beq.w	8007098 <ai_platform_network_create+0xf4>
 800723a:	e7fe      	b.n	800723a <ai_platform_network_create+0x296>
 800723c:	4a08      	ldr	r2, [pc, #32]	; (8007260 <ai_platform_network_create+0x2bc>)
 800723e:	2301      	movs	r3, #1
 8007240:	6093      	str	r3, [r2, #8]
 8007242:	6893      	ldr	r3, [r2, #8]
 8007244:	2b00      	cmp	r3, #0
 8007246:	d1fc      	bne.n	8007242 <ai_platform_network_create+0x29e>
 8007248:	4b07      	ldr	r3, [pc, #28]	; (8007268 <ai_platform_network_create+0x2c4>)
 800724a:	6013      	str	r3, [r2, #0]
 800724c:	4b07      	ldr	r3, [pc, #28]	; (800726c <ai_platform_network_create+0x2c8>)
 800724e:	6812      	ldr	r2, [r2, #0]
 8007250:	429a      	cmp	r2, r3
 8007252:	d01f      	beq.n	8007294 <ai_platform_network_create+0x2f0>
 8007254:	e7fe      	b.n	8007254 <ai_platform_network_create+0x2b0>
 8007256:	bf00      	nop
 8007258:	e0042000 	.word	0xe0042000
 800725c:	5c001000 	.word	0x5c001000
 8007260:	40023000 	.word	0x40023000
 8007264:	a1c00100 	.word	0xa1c00100
 8007268:	f407a5c2 	.word	0xf407a5c2
 800726c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007270:	58024000 	.word	0x58024000
 8007274:	4a33      	ldr	r2, [pc, #204]	; (8007344 <ai_platform_network_create+0x3a0>)
 8007276:	2301      	movs	r3, #1
 8007278:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800727c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007280:	2b00      	cmp	r3, #0
 8007282:	d1fb      	bne.n	800727c <ai_platform_network_create+0x2d8>
 8007284:	4b30      	ldr	r3, [pc, #192]	; (8007348 <ai_platform_network_create+0x3a4>)
 8007286:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800728a:	4b30      	ldr	r3, [pc, #192]	; (800734c <ai_platform_network_create+0x3a8>)
 800728c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007290:	429a      	cmp	r2, r3
 8007292:	d12c      	bne.n	80072ee <ai_platform_network_create+0x34a>
 8007294:	f7fe fda4 	bl	8005de0 <_ai_platform_release_crc>
 8007298:	2200      	movs	r2, #0
 800729a:	4639      	mov	r1, r7
 800729c:	4630      	mov	r0, r6
 800729e:	f7fe fc73 	bl	8005b88 <ai_version_get>
 80072a2:	4681      	mov	r9, r0
 80072a4:	2200      	movs	r2, #0
 80072a6:	2105      	movs	r1, #5
 80072a8:	2001      	movs	r0, #1
 80072aa:	f7fe fc6d 	bl	8005b88 <ai_version_get>
 80072ae:	4581      	cmp	r9, r0
 80072b0:	d01e      	beq.n	80072f0 <ai_platform_network_create+0x34c>
 80072b2:	f04f 0901 	mov.w	r9, #1
 80072b6:	e78e      	b.n	80071d6 <ai_platform_network_create+0x232>
 80072b8:	4b25      	ldr	r3, [pc, #148]	; (8007350 <ai_platform_network_create+0x3ac>)
 80072ba:	2218      	movs	r2, #24
 80072bc:	609a      	str	r2, [r3, #8]
 80072be:	689a      	ldr	r2, [r3, #8]
 80072c0:	2a18      	cmp	r2, #24
 80072c2:	f47f af39 	bne.w	8007138 <ai_platform_network_create+0x194>
 80072c6:	2201      	movs	r2, #1
 80072c8:	609a      	str	r2, [r3, #8]
 80072ca:	689a      	ldr	r2, [r3, #8]
 80072cc:	2a00      	cmp	r2, #0
 80072ce:	d1fc      	bne.n	80072ca <ai_platform_network_create+0x326>
 80072d0:	e6b1      	b.n	8007036 <ai_platform_network_create+0x92>
 80072d2:	4a1f      	ldr	r2, [pc, #124]	; (8007350 <ai_platform_network_create+0x3ac>)
 80072d4:	2301      	movs	r3, #1
 80072d6:	6093      	str	r3, [r2, #8]
 80072d8:	6893      	ldr	r3, [r2, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d1fc      	bne.n	80072d8 <ai_platform_network_create+0x334>
 80072de:	4b1a      	ldr	r3, [pc, #104]	; (8007348 <ai_platform_network_create+0x3a4>)
 80072e0:	6013      	str	r3, [r2, #0]
 80072e2:	4b1a      	ldr	r3, [pc, #104]	; (800734c <ai_platform_network_create+0x3a8>)
 80072e4:	6812      	ldr	r2, [r2, #0]
 80072e6:	429a      	cmp	r2, r3
 80072e8:	f43f aed6 	beq.w	8007098 <ai_platform_network_create+0xf4>
 80072ec:	e7fe      	b.n	80072ec <ai_platform_network_create+0x348>
 80072ee:	e7fe      	b.n	80072ee <ai_platform_network_create+0x34a>
 80072f0:	4b18      	ldr	r3, [pc, #96]	; (8007354 <ai_platform_network_create+0x3b0>)
 80072f2:	a801      	add	r0, sp, #4
 80072f4:	9301      	str	r3, [sp, #4]
 80072f6:	f001 f84d 	bl	8008394 <ai_check_custom_types>
 80072fa:	b300      	cbz	r0, 800733e <ai_platform_network_create+0x39a>
 80072fc:	2400      	movs	r4, #0
 80072fe:	46a1      	mov	r9, r4
 8007300:	e76c      	b.n	80071dc <ai_platform_network_create+0x238>
 8007302:	4b10      	ldr	r3, [pc, #64]	; (8007344 <ai_platform_network_create+0x3a0>)
 8007304:	2201      	movs	r2, #1
 8007306:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800730a:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 800730e:	2a00      	cmp	r2, #0
 8007310:	d1fb      	bne.n	800730a <ai_platform_network_create+0x366>
 8007312:	4a0d      	ldr	r2, [pc, #52]	; (8007348 <ai_platform_network_create+0x3a4>)
 8007314:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8007318:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800731c:	4b0b      	ldr	r3, [pc, #44]	; (800734c <ai_platform_network_create+0x3a8>)
 800731e:	429a      	cmp	r2, r3
 8007320:	d0b8      	beq.n	8007294 <ai_platform_network_create+0x2f0>
 8007322:	e7fe      	b.n	8007322 <ai_platform_network_create+0x37e>
 8007324:	4b0a      	ldr	r3, [pc, #40]	; (8007350 <ai_platform_network_create+0x3ac>)
 8007326:	2201      	movs	r2, #1
 8007328:	609a      	str	r2, [r3, #8]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	2a00      	cmp	r2, #0
 800732e:	d1fc      	bne.n	800732a <ai_platform_network_create+0x386>
 8007330:	4a05      	ldr	r2, [pc, #20]	; (8007348 <ai_platform_network_create+0x3a4>)
 8007332:	601a      	str	r2, [r3, #0]
 8007334:	681a      	ldr	r2, [r3, #0]
 8007336:	4b05      	ldr	r3, [pc, #20]	; (800734c <ai_platform_network_create+0x3a8>)
 8007338:	429a      	cmp	r2, r3
 800733a:	d0ab      	beq.n	8007294 <ai_platform_network_create+0x2f0>
 800733c:	e7fe      	b.n	800733c <ai_platform_network_create+0x398>
 800733e:	f04f 0902 	mov.w	r9, #2
 8007342:	e748      	b.n	80071d6 <ai_platform_network_create+0x232>
 8007344:	58024000 	.word	0x58024000
 8007348:	f407a5c2 	.word	0xf407a5c2
 800734c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007350:	40023000 	.word	0x40023000
 8007354:	84048403 	.word	0x84048403

08007358 <ai_platform_network_destroy>:
 8007358:	b510      	push	{r4, lr}
 800735a:	4604      	mov	r4, r0
 800735c:	2800      	cmp	r0, #0
 800735e:	d03d      	beq.n	80073dc <ai_platform_network_destroy+0x84>
 8007360:	4b7a      	ldr	r3, [pc, #488]	; (800754c <ai_platform_network_destroy+0x1f4>)
 8007362:	6802      	ldr	r2, [r0, #0]
 8007364:	429a      	cmp	r2, r3
 8007366:	d139      	bne.n	80073dc <ai_platform_network_destroy+0x84>
 8007368:	f7fe fd38 	bl	8005ddc <_ai_platform_acquire_crc>
 800736c:	4b78      	ldr	r3, [pc, #480]	; (8007550 <ai_platform_network_destroy+0x1f8>)
 800736e:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007378:	189a      	adds	r2, r3, r2
 800737a:	2a01      	cmp	r2, #1
 800737c:	f240 8084 	bls.w	8007488 <ai_platform_network_destroy+0x130>
 8007380:	f240 4249 	movw	r2, #1097	; 0x449
 8007384:	4293      	cmp	r3, r2
 8007386:	d07f      	beq.n	8007488 <ai_platform_network_destroy+0x130>
 8007388:	4a72      	ldr	r2, [pc, #456]	; (8007554 <ai_platform_network_destroy+0x1fc>)
 800738a:	6813      	ldr	r3, [r2, #0]
 800738c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007390:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007394:	f000 8086 	beq.w	80074a4 <ai_platform_network_destroy+0x14c>
 8007398:	6813      	ldr	r3, [r2, #0]
 800739a:	f240 4183 	movw	r1, #1155	; 0x483
 800739e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073a2:	428b      	cmp	r3, r1
 80073a4:	f000 80a7 	beq.w	80074f6 <ai_platform_network_destroy+0x19e>
 80073a8:	6813      	ldr	r3, [r2, #0]
 80073aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073ae:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80073b2:	f000 80be 	beq.w	8007532 <ai_platform_network_destroy+0x1da>
 80073b6:	6813      	ldr	r3, [r2, #0]
 80073b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073bc:	2b00      	cmp	r3, #0
 80073be:	f040 8081 	bne.w	80074c4 <ai_platform_network_destroy+0x16c>
 80073c2:	4a65      	ldr	r2, [pc, #404]	; (8007558 <ai_platform_network_destroy+0x200>)
 80073c4:	2301      	movs	r3, #1
 80073c6:	6093      	str	r3, [r2, #8]
 80073c8:	6893      	ldr	r3, [r2, #8]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1fc      	bne.n	80073c8 <ai_platform_network_destroy+0x70>
 80073ce:	4963      	ldr	r1, [pc, #396]	; (800755c <ai_platform_network_destroy+0x204>)
 80073d0:	4b63      	ldr	r3, [pc, #396]	; (8007560 <ai_platform_network_destroy+0x208>)
 80073d2:	6011      	str	r1, [r2, #0]
 80073d4:	6812      	ldr	r2, [r2, #0]
 80073d6:	429a      	cmp	r2, r3
 80073d8:	d074      	beq.n	80074c4 <ai_platform_network_destroy+0x16c>
 80073da:	e7fe      	b.n	80073da <ai_platform_network_destroy+0x82>
 80073dc:	f7fe fcfe 	bl	8005ddc <_ai_platform_acquire_crc>
 80073e0:	4b5b      	ldr	r3, [pc, #364]	; (8007550 <ai_platform_network_destroy+0x1f8>)
 80073e2:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80073ec:	185a      	adds	r2, r3, r1
 80073ee:	2a01      	cmp	r2, #1
 80073f0:	d929      	bls.n	8007446 <ai_platform_network_destroy+0xee>
 80073f2:	f240 4249 	movw	r2, #1097	; 0x449
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d025      	beq.n	8007446 <ai_platform_network_destroy+0xee>
 80073fa:	4a56      	ldr	r2, [pc, #344]	; (8007554 <ai_platform_network_destroy+0x1fc>)
 80073fc:	6813      	ldr	r3, [r2, #0]
 80073fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007402:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007406:	d02b      	beq.n	8007460 <ai_platform_network_destroy+0x108>
 8007408:	6813      	ldr	r3, [r2, #0]
 800740a:	f240 4183 	movw	r1, #1155	; 0x483
 800740e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007412:	428b      	cmp	r3, r1
 8007414:	d05e      	beq.n	80074d4 <ai_platform_network_destroy+0x17c>
 8007416:	6813      	ldr	r3, [r2, #0]
 8007418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800741c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007420:	d07a      	beq.n	8007518 <ai_platform_network_destroy+0x1c0>
 8007422:	6813      	ldr	r3, [r2, #0]
 8007424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007428:	2b00      	cmp	r3, #0
 800742a:	d129      	bne.n	8007480 <ai_platform_network_destroy+0x128>
 800742c:	4a4a      	ldr	r2, [pc, #296]	; (8007558 <ai_platform_network_destroy+0x200>)
 800742e:	2301      	movs	r3, #1
 8007430:	6093      	str	r3, [r2, #8]
 8007432:	6893      	ldr	r3, [r2, #8]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d1fc      	bne.n	8007432 <ai_platform_network_destroy+0xda>
 8007438:	4948      	ldr	r1, [pc, #288]	; (800755c <ai_platform_network_destroy+0x204>)
 800743a:	4b49      	ldr	r3, [pc, #292]	; (8007560 <ai_platform_network_destroy+0x208>)
 800743c:	6011      	str	r1, [r2, #0]
 800743e:	6812      	ldr	r2, [r2, #0]
 8007440:	429a      	cmp	r2, r3
 8007442:	d01d      	beq.n	8007480 <ai_platform_network_destroy+0x128>
 8007444:	e7fe      	b.n	8007444 <ai_platform_network_destroy+0xec>
 8007446:	4a44      	ldr	r2, [pc, #272]	; (8007558 <ai_platform_network_destroy+0x200>)
 8007448:	2301      	movs	r3, #1
 800744a:	6093      	str	r3, [r2, #8]
 800744c:	6893      	ldr	r3, [r2, #8]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d1fc      	bne.n	800744c <ai_platform_network_destroy+0xf4>
 8007452:	4942      	ldr	r1, [pc, #264]	; (800755c <ai_platform_network_destroy+0x204>)
 8007454:	4b42      	ldr	r3, [pc, #264]	; (8007560 <ai_platform_network_destroy+0x208>)
 8007456:	6011      	str	r1, [r2, #0]
 8007458:	6812      	ldr	r2, [r2, #0]
 800745a:	429a      	cmp	r2, r3
 800745c:	d010      	beq.n	8007480 <ai_platform_network_destroy+0x128>
 800745e:	e7fe      	b.n	800745e <ai_platform_network_destroy+0x106>
 8007460:	4a40      	ldr	r2, [pc, #256]	; (8007564 <ai_platform_network_destroy+0x20c>)
 8007462:	2301      	movs	r3, #1
 8007464:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007468:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1fb      	bne.n	8007468 <ai_platform_network_destroy+0x110>
 8007470:	493a      	ldr	r1, [pc, #232]	; (800755c <ai_platform_network_destroy+0x204>)
 8007472:	4b3b      	ldr	r3, [pc, #236]	; (8007560 <ai_platform_network_destroy+0x208>)
 8007474:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007478:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800747c:	429a      	cmp	r2, r3
 800747e:	d110      	bne.n	80074a2 <ai_platform_network_destroy+0x14a>
 8007480:	f7fe fcae 	bl	8005de0 <_ai_platform_release_crc>
 8007484:	4620      	mov	r0, r4
 8007486:	bd10      	pop	{r4, pc}
 8007488:	4a33      	ldr	r2, [pc, #204]	; (8007558 <ai_platform_network_destroy+0x200>)
 800748a:	2301      	movs	r3, #1
 800748c:	6093      	str	r3, [r2, #8]
 800748e:	6893      	ldr	r3, [r2, #8]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d1fc      	bne.n	800748e <ai_platform_network_destroy+0x136>
 8007494:	4931      	ldr	r1, [pc, #196]	; (800755c <ai_platform_network_destroy+0x204>)
 8007496:	4b32      	ldr	r3, [pc, #200]	; (8007560 <ai_platform_network_destroy+0x208>)
 8007498:	6011      	str	r1, [r2, #0]
 800749a:	6812      	ldr	r2, [r2, #0]
 800749c:	429a      	cmp	r2, r3
 800749e:	d011      	beq.n	80074c4 <ai_platform_network_destroy+0x16c>
 80074a0:	e7fe      	b.n	80074a0 <ai_platform_network_destroy+0x148>
 80074a2:	e7fe      	b.n	80074a2 <ai_platform_network_destroy+0x14a>
 80074a4:	4a2f      	ldr	r2, [pc, #188]	; (8007564 <ai_platform_network_destroy+0x20c>)
 80074a6:	2301      	movs	r3, #1
 80074a8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80074ac:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1fb      	bne.n	80074ac <ai_platform_network_destroy+0x154>
 80074b4:	4929      	ldr	r1, [pc, #164]	; (800755c <ai_platform_network_destroy+0x204>)
 80074b6:	4b2a      	ldr	r3, [pc, #168]	; (8007560 <ai_platform_network_destroy+0x208>)
 80074b8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80074bc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d106      	bne.n	80074d2 <ai_platform_network_destroy+0x17a>
 80074c4:	f7fe fc8c 	bl	8005de0 <_ai_platform_release_crc>
 80074c8:	4620      	mov	r0, r4
 80074ca:	f000 fff5 	bl	80084b8 <ai_layers_destroy_all>
 80074ce:	2000      	movs	r0, #0
 80074d0:	bd10      	pop	{r4, pc}
 80074d2:	e7fe      	b.n	80074d2 <ai_platform_network_destroy+0x17a>
 80074d4:	4a23      	ldr	r2, [pc, #140]	; (8007564 <ai_platform_network_destroy+0x20c>)
 80074d6:	2301      	movs	r3, #1
 80074d8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80074dc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d1fb      	bne.n	80074dc <ai_platform_network_destroy+0x184>
 80074e4:	491d      	ldr	r1, [pc, #116]	; (800755c <ai_platform_network_destroy+0x204>)
 80074e6:	4b1e      	ldr	r3, [pc, #120]	; (8007560 <ai_platform_network_destroy+0x208>)
 80074e8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80074ec:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80074f0:	429a      	cmp	r2, r3
 80074f2:	d0c5      	beq.n	8007480 <ai_platform_network_destroy+0x128>
 80074f4:	e7fe      	b.n	80074f4 <ai_platform_network_destroy+0x19c>
 80074f6:	4a1b      	ldr	r2, [pc, #108]	; (8007564 <ai_platform_network_destroy+0x20c>)
 80074f8:	2301      	movs	r3, #1
 80074fa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80074fe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007502:	2b00      	cmp	r3, #0
 8007504:	d1fb      	bne.n	80074fe <ai_platform_network_destroy+0x1a6>
 8007506:	4915      	ldr	r1, [pc, #84]	; (800755c <ai_platform_network_destroy+0x204>)
 8007508:	4b15      	ldr	r3, [pc, #84]	; (8007560 <ai_platform_network_destroy+0x208>)
 800750a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800750e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007512:	429a      	cmp	r2, r3
 8007514:	d0d6      	beq.n	80074c4 <ai_platform_network_destroy+0x16c>
 8007516:	e7fe      	b.n	8007516 <ai_platform_network_destroy+0x1be>
 8007518:	4a0f      	ldr	r2, [pc, #60]	; (8007558 <ai_platform_network_destroy+0x200>)
 800751a:	2301      	movs	r3, #1
 800751c:	6093      	str	r3, [r2, #8]
 800751e:	6893      	ldr	r3, [r2, #8]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1fc      	bne.n	800751e <ai_platform_network_destroy+0x1c6>
 8007524:	490d      	ldr	r1, [pc, #52]	; (800755c <ai_platform_network_destroy+0x204>)
 8007526:	4b0e      	ldr	r3, [pc, #56]	; (8007560 <ai_platform_network_destroy+0x208>)
 8007528:	6011      	str	r1, [r2, #0]
 800752a:	6812      	ldr	r2, [r2, #0]
 800752c:	429a      	cmp	r2, r3
 800752e:	d0a7      	beq.n	8007480 <ai_platform_network_destroy+0x128>
 8007530:	e7fe      	b.n	8007530 <ai_platform_network_destroy+0x1d8>
 8007532:	4a09      	ldr	r2, [pc, #36]	; (8007558 <ai_platform_network_destroy+0x200>)
 8007534:	2301      	movs	r3, #1
 8007536:	6093      	str	r3, [r2, #8]
 8007538:	6893      	ldr	r3, [r2, #8]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d1fc      	bne.n	8007538 <ai_platform_network_destroy+0x1e0>
 800753e:	4907      	ldr	r1, [pc, #28]	; (800755c <ai_platform_network_destroy+0x204>)
 8007540:	4b07      	ldr	r3, [pc, #28]	; (8007560 <ai_platform_network_destroy+0x208>)
 8007542:	6011      	str	r1, [r2, #0]
 8007544:	6812      	ldr	r2, [r2, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d0bc      	beq.n	80074c4 <ai_platform_network_destroy+0x16c>
 800754a:	e7fe      	b.n	800754a <ai_platform_network_destroy+0x1f2>
 800754c:	a1c00100 	.word	0xa1c00100
 8007550:	e0042000 	.word	0xe0042000
 8007554:	5c001000 	.word	0x5c001000
 8007558:	40023000 	.word	0x40023000
 800755c:	f407a5c2 	.word	0xf407a5c2
 8007560:	b5e8b5cd 	.word	0xb5e8b5cd
 8007564:	58024000 	.word	0x58024000

08007568 <ai_platform_network_init>:
 8007568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800756c:	2800      	cmp	r0, #0
 800756e:	d052      	beq.n	8007616 <ai_platform_network_init+0xae>
 8007570:	4bab      	ldr	r3, [pc, #684]	; (8007820 <ai_platform_network_init+0x2b8>)
 8007572:	4604      	mov	r4, r0
 8007574:	6802      	ldr	r2, [r0, #0]
 8007576:	429a      	cmp	r2, r3
 8007578:	d14d      	bne.n	8007616 <ai_platform_network_init+0xae>
 800757a:	460d      	mov	r5, r1
 800757c:	f7fe fc2e 	bl	8005ddc <_ai_platform_acquire_crc>
 8007580:	4ba8      	ldr	r3, [pc, #672]	; (8007824 <ai_platform_network_init+0x2bc>)
 8007582:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800758c:	189a      	adds	r2, r3, r2
 800758e:	2a01      	cmp	r2, #1
 8007590:	f240 809b 	bls.w	80076ca <ai_platform_network_init+0x162>
 8007594:	f240 4249 	movw	r2, #1097	; 0x449
 8007598:	4293      	cmp	r3, r2
 800759a:	f000 8096 	beq.w	80076ca <ai_platform_network_init+0x162>
 800759e:	4aa2      	ldr	r2, [pc, #648]	; (8007828 <ai_platform_network_init+0x2c0>)
 80075a0:	6813      	ldr	r3, [r2, #0]
 80075a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075a6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80075aa:	f000 809d 	beq.w	80076e8 <ai_platform_network_init+0x180>
 80075ae:	6813      	ldr	r3, [r2, #0]
 80075b0:	f240 4183 	movw	r1, #1155	; 0x483
 80075b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075b8:	428b      	cmp	r3, r1
 80075ba:	f000 80e4 	beq.w	8007786 <ai_platform_network_init+0x21e>
 80075be:	6813      	ldr	r3, [r2, #0]
 80075c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075c4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80075c8:	f000 811b 	beq.w	8007802 <ai_platform_network_init+0x29a>
 80075cc:	6813      	ldr	r3, [r2, #0]
 80075ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f000 80f9 	beq.w	80077ca <ai_platform_network_init+0x262>
 80075d8:	f7fe fc02 	bl	8005de0 <_ai_platform_release_crc>
 80075dc:	2d00      	cmp	r5, #0
 80075de:	f000 8147 	beq.w	8007870 <ai_platform_network_init+0x308>
 80075e2:	4b92      	ldr	r3, [pc, #584]	; (800782c <ai_platform_network_init+0x2c4>)
 80075e4:	682a      	ldr	r2, [r5, #0]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	f040 8090 	bne.w	800770c <ai_platform_network_init+0x1a4>
 80075ec:	692b      	ldr	r3, [r5, #16]
 80075ee:	89ae      	ldrh	r6, [r5, #12]
 80075f0:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 80075f4:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 80075f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80075fa:	e9c4 1207 	strd	r1, r2, [r4, #28]
 80075fe:	2303      	movs	r3, #3
 8007600:	84a6      	strh	r6, [r4, #36]	; 0x24
 8007602:	4626      	mov	r6, r4
 8007604:	4620      	mov	r0, r4
 8007606:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800760a:	60e3      	str	r3, [r4, #12]
 800760c:	f000 feea 	bl	80083e4 <ai_layers_init_all>
 8007610:	4630      	mov	r0, r6
 8007612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007616:	f7fe fbe1 	bl	8005ddc <_ai_platform_acquire_crc>
 800761a:	4b82      	ldr	r3, [pc, #520]	; (8007824 <ai_platform_network_init+0x2bc>)
 800761c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007626:	185a      	adds	r2, r3, r1
 8007628:	2a01      	cmp	r2, #1
 800762a:	d92b      	bls.n	8007684 <ai_platform_network_init+0x11c>
 800762c:	f240 4249 	movw	r2, #1097	; 0x449
 8007630:	4293      	cmp	r3, r2
 8007632:	d027      	beq.n	8007684 <ai_platform_network_init+0x11c>
 8007634:	4a7c      	ldr	r2, [pc, #496]	; (8007828 <ai_platform_network_init+0x2c0>)
 8007636:	6813      	ldr	r3, [r2, #0]
 8007638:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800763c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007640:	d02d      	beq.n	800769e <ai_platform_network_init+0x136>
 8007642:	6813      	ldr	r3, [r2, #0]
 8007644:	f240 4183 	movw	r1, #1155	; 0x483
 8007648:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800764c:	428b      	cmp	r3, r1
 800764e:	f000 8089 	beq.w	8007764 <ai_platform_network_init+0x1fc>
 8007652:	6813      	ldr	r3, [r2, #0]
 8007654:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007658:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800765c:	f000 80c3 	beq.w	80077e6 <ai_platform_network_init+0x27e>
 8007660:	6813      	ldr	r3, [r2, #0]
 8007662:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007666:	2b00      	cmp	r3, #0
 8007668:	d129      	bne.n	80076be <ai_platform_network_init+0x156>
 800766a:	4a71      	ldr	r2, [pc, #452]	; (8007830 <ai_platform_network_init+0x2c8>)
 800766c:	2301      	movs	r3, #1
 800766e:	6093      	str	r3, [r2, #8]
 8007670:	6893      	ldr	r3, [r2, #8]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1fc      	bne.n	8007670 <ai_platform_network_init+0x108>
 8007676:	496f      	ldr	r1, [pc, #444]	; (8007834 <ai_platform_network_init+0x2cc>)
 8007678:	4b6f      	ldr	r3, [pc, #444]	; (8007838 <ai_platform_network_init+0x2d0>)
 800767a:	6011      	str	r1, [r2, #0]
 800767c:	6812      	ldr	r2, [r2, #0]
 800767e:	429a      	cmp	r2, r3
 8007680:	d01d      	beq.n	80076be <ai_platform_network_init+0x156>
 8007682:	e7fe      	b.n	8007682 <ai_platform_network_init+0x11a>
 8007684:	4a6a      	ldr	r2, [pc, #424]	; (8007830 <ai_platform_network_init+0x2c8>)
 8007686:	2301      	movs	r3, #1
 8007688:	6093      	str	r3, [r2, #8]
 800768a:	6893      	ldr	r3, [r2, #8]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1fc      	bne.n	800768a <ai_platform_network_init+0x122>
 8007690:	4968      	ldr	r1, [pc, #416]	; (8007834 <ai_platform_network_init+0x2cc>)
 8007692:	4b69      	ldr	r3, [pc, #420]	; (8007838 <ai_platform_network_init+0x2d0>)
 8007694:	6011      	str	r1, [r2, #0]
 8007696:	6812      	ldr	r2, [r2, #0]
 8007698:	429a      	cmp	r2, r3
 800769a:	d010      	beq.n	80076be <ai_platform_network_init+0x156>
 800769c:	e7fe      	b.n	800769c <ai_platform_network_init+0x134>
 800769e:	4a67      	ldr	r2, [pc, #412]	; (800783c <ai_platform_network_init+0x2d4>)
 80076a0:	2301      	movs	r3, #1
 80076a2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80076a6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d1fb      	bne.n	80076a6 <ai_platform_network_init+0x13e>
 80076ae:	4961      	ldr	r1, [pc, #388]	; (8007834 <ai_platform_network_init+0x2cc>)
 80076b0:	4b61      	ldr	r3, [pc, #388]	; (8007838 <ai_platform_network_init+0x2d0>)
 80076b2:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80076b6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d113      	bne.n	80076e6 <ai_platform_network_init+0x17e>
 80076be:	2600      	movs	r6, #0
 80076c0:	f7fe fb8e 	bl	8005de0 <_ai_platform_release_crc>
 80076c4:	4630      	mov	r0, r6
 80076c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ca:	4a59      	ldr	r2, [pc, #356]	; (8007830 <ai_platform_network_init+0x2c8>)
 80076cc:	2301      	movs	r3, #1
 80076ce:	6093      	str	r3, [r2, #8]
 80076d0:	6893      	ldr	r3, [r2, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d1fc      	bne.n	80076d0 <ai_platform_network_init+0x168>
 80076d6:	4b57      	ldr	r3, [pc, #348]	; (8007834 <ai_platform_network_init+0x2cc>)
 80076d8:	6013      	str	r3, [r2, #0]
 80076da:	4b57      	ldr	r3, [pc, #348]	; (8007838 <ai_platform_network_init+0x2d0>)
 80076dc:	6812      	ldr	r2, [r2, #0]
 80076de:	429a      	cmp	r2, r3
 80076e0:	f43f af7a 	beq.w	80075d8 <ai_platform_network_init+0x70>
 80076e4:	e7fe      	b.n	80076e4 <ai_platform_network_init+0x17c>
 80076e6:	e7fe      	b.n	80076e6 <ai_platform_network_init+0x17e>
 80076e8:	4a54      	ldr	r2, [pc, #336]	; (800783c <ai_platform_network_init+0x2d4>)
 80076ea:	2301      	movs	r3, #1
 80076ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80076f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d1fb      	bne.n	80076f0 <ai_platform_network_init+0x188>
 80076f8:	4b4e      	ldr	r3, [pc, #312]	; (8007834 <ai_platform_network_init+0x2cc>)
 80076fa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80076fe:	4b4e      	ldr	r3, [pc, #312]	; (8007838 <ai_platform_network_init+0x2d0>)
 8007700:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007704:	429a      	cmp	r2, r3
 8007706:	f43f af67 	beq.w	80075d8 <ai_platform_network_init+0x70>
 800770a:	e7fe      	b.n	800770a <ai_platform_network_init+0x1a2>
 800770c:	2101      	movs	r1, #1
 800770e:	4628      	mov	r0, r5
 8007710:	f105 081c 	add.w	r8, r5, #28
 8007714:	686e      	ldr	r6, [r5, #4]
 8007716:	f7fe fa79 	bl	8005c0c <ai_buffer_get_size>
 800771a:	4607      	mov	r7, r0
 800771c:	2101      	movs	r1, #1
 800771e:	4640      	mov	r0, r8
 8007720:	f8d5 9020 	ldr.w	r9, [r5, #32]
 8007724:	f7fe fa72 	bl	8005c0c <ai_buffer_get_size>
 8007728:	2f00      	cmp	r7, #0
 800772a:	d13e      	bne.n	80077aa <ai_platform_network_init+0x242>
 800772c:	2800      	cmp	r0, #0
 800772e:	f000 808e 	beq.w	800784e <ai_platform_network_init+0x2e6>
 8007732:	f1b9 0f00 	cmp.w	r9, #0
 8007736:	f000 8094 	beq.w	8007862 <ai_platform_network_init+0x2fa>
 800773a:	f04f 0c01 	mov.w	ip, #1
 800773e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007740:	2600      	movs	r6, #0
 8007742:	83e7      	strh	r7, [r4, #30]
 8007744:	4563      	cmp	r3, ip
 8007746:	83a6      	strh	r6, [r4, #28]
 8007748:	d37a      	bcc.n	8007840 <ai_platform_network_init+0x2d8>
 800774a:	f1bc 0f00 	cmp.w	ip, #0
 800774e:	f000 809c 	beq.w	800788a <ai_platform_network_init+0x322>
 8007752:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8007754:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 8007758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800775a:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 800775e:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8007762:	e74c      	b.n	80075fe <ai_platform_network_init+0x96>
 8007764:	4a35      	ldr	r2, [pc, #212]	; (800783c <ai_platform_network_init+0x2d4>)
 8007766:	2301      	movs	r3, #1
 8007768:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800776c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007770:	2b00      	cmp	r3, #0
 8007772:	d1fb      	bne.n	800776c <ai_platform_network_init+0x204>
 8007774:	492f      	ldr	r1, [pc, #188]	; (8007834 <ai_platform_network_init+0x2cc>)
 8007776:	4b30      	ldr	r3, [pc, #192]	; (8007838 <ai_platform_network_init+0x2d0>)
 8007778:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800777c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007780:	429a      	cmp	r2, r3
 8007782:	d09c      	beq.n	80076be <ai_platform_network_init+0x156>
 8007784:	e7fe      	b.n	8007784 <ai_platform_network_init+0x21c>
 8007786:	4a2d      	ldr	r2, [pc, #180]	; (800783c <ai_platform_network_init+0x2d4>)
 8007788:	2301      	movs	r3, #1
 800778a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800778e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007792:	2b00      	cmp	r3, #0
 8007794:	d1fb      	bne.n	800778e <ai_platform_network_init+0x226>
 8007796:	4b27      	ldr	r3, [pc, #156]	; (8007834 <ai_platform_network_init+0x2cc>)
 8007798:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800779c:	4b26      	ldr	r3, [pc, #152]	; (8007838 <ai_platform_network_init+0x2d0>)
 800779e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80077a2:	429a      	cmp	r2, r3
 80077a4:	f43f af18 	beq.w	80075d8 <ai_platform_network_init+0x70>
 80077a8:	e7fe      	b.n	80077a8 <ai_platform_network_init+0x240>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	d153      	bne.n	8007856 <ai_platform_network_init+0x2ee>
 80077ae:	4680      	mov	r8, r0
 80077b0:	4684      	mov	ip, r0
 80077b2:	2e00      	cmp	r6, #0
 80077b4:	d063      	beq.n	800787e <ai_platform_network_init+0x316>
 80077b6:	8be6      	ldrh	r6, [r4, #30]
 80077b8:	2e00      	cmp	r6, #0
 80077ba:	d168      	bne.n	800788e <ai_platform_network_init+0x326>
 80077bc:	2212      	movs	r2, #18
 80077be:	2116      	movs	r1, #22
 80077c0:	f104 0010 	add.w	r0, r4, #16
 80077c4:	f000 fdda 	bl	800837c <core_set_error>
 80077c8:	e77c      	b.n	80076c4 <ai_platform_network_init+0x15c>
 80077ca:	4a19      	ldr	r2, [pc, #100]	; (8007830 <ai_platform_network_init+0x2c8>)
 80077cc:	2301      	movs	r3, #1
 80077ce:	6093      	str	r3, [r2, #8]
 80077d0:	6893      	ldr	r3, [r2, #8]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d1fc      	bne.n	80077d0 <ai_platform_network_init+0x268>
 80077d6:	4b17      	ldr	r3, [pc, #92]	; (8007834 <ai_platform_network_init+0x2cc>)
 80077d8:	6013      	str	r3, [r2, #0]
 80077da:	4b17      	ldr	r3, [pc, #92]	; (8007838 <ai_platform_network_init+0x2d0>)
 80077dc:	6812      	ldr	r2, [r2, #0]
 80077de:	429a      	cmp	r2, r3
 80077e0:	f43f aefa 	beq.w	80075d8 <ai_platform_network_init+0x70>
 80077e4:	e7fe      	b.n	80077e4 <ai_platform_network_init+0x27c>
 80077e6:	4a12      	ldr	r2, [pc, #72]	; (8007830 <ai_platform_network_init+0x2c8>)
 80077e8:	2301      	movs	r3, #1
 80077ea:	6093      	str	r3, [r2, #8]
 80077ec:	6893      	ldr	r3, [r2, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d1fc      	bne.n	80077ec <ai_platform_network_init+0x284>
 80077f2:	4910      	ldr	r1, [pc, #64]	; (8007834 <ai_platform_network_init+0x2cc>)
 80077f4:	4b10      	ldr	r3, [pc, #64]	; (8007838 <ai_platform_network_init+0x2d0>)
 80077f6:	6011      	str	r1, [r2, #0]
 80077f8:	6812      	ldr	r2, [r2, #0]
 80077fa:	429a      	cmp	r2, r3
 80077fc:	f43f af5f 	beq.w	80076be <ai_platform_network_init+0x156>
 8007800:	e7fe      	b.n	8007800 <ai_platform_network_init+0x298>
 8007802:	4a0b      	ldr	r2, [pc, #44]	; (8007830 <ai_platform_network_init+0x2c8>)
 8007804:	2301      	movs	r3, #1
 8007806:	6093      	str	r3, [r2, #8]
 8007808:	6893      	ldr	r3, [r2, #8]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d1fc      	bne.n	8007808 <ai_platform_network_init+0x2a0>
 800780e:	4b09      	ldr	r3, [pc, #36]	; (8007834 <ai_platform_network_init+0x2cc>)
 8007810:	6013      	str	r3, [r2, #0]
 8007812:	4b09      	ldr	r3, [pc, #36]	; (8007838 <ai_platform_network_init+0x2d0>)
 8007814:	6812      	ldr	r2, [r2, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	f43f aede 	beq.w	80075d8 <ai_platform_network_init+0x70>
 800781c:	e7fe      	b.n	800781c <ai_platform_network_init+0x2b4>
 800781e:	bf00      	nop
 8007820:	a1c00100 	.word	0xa1c00100
 8007824:	e0042000 	.word	0xe0042000
 8007828:	5c001000 	.word	0x5c001000
 800782c:	a1facade 	.word	0xa1facade
 8007830:	40023000 	.word	0x40023000
 8007834:	f407a5c2 	.word	0xf407a5c2
 8007838:	b5e8b5cd 	.word	0xb5e8b5cd
 800783c:	58024000 	.word	0x58024000
 8007840:	2213      	movs	r2, #19
 8007842:	2116      	movs	r1, #22
 8007844:	f104 0010 	add.w	r0, r4, #16
 8007848:	f000 fd98 	bl	800837c <core_set_error>
 800784c:	e73a      	b.n	80076c4 <ai_platform_network_init+0x15c>
 800784e:	4607      	mov	r7, r0
 8007850:	4680      	mov	r8, r0
 8007852:	4684      	mov	ip, r0
 8007854:	e773      	b.n	800773e <ai_platform_network_init+0x1d6>
 8007856:	f1b9 0f00 	cmp.w	r9, #0
 800785a:	d002      	beq.n	8007862 <ai_platform_network_init+0x2fa>
 800785c:	f04f 0c01 	mov.w	ip, #1
 8007860:	e7a7      	b.n	80077b2 <ai_platform_network_init+0x24a>
 8007862:	2110      	movs	r1, #16
 8007864:	2213      	movs	r2, #19
 8007866:	2600      	movs	r6, #0
 8007868:	1860      	adds	r0, r4, r1
 800786a:	f000 fd87 	bl	800837c <core_set_error>
 800786e:	e729      	b.n	80076c4 <ai_platform_network_init+0x15c>
 8007870:	2110      	movs	r1, #16
 8007872:	2211      	movs	r2, #17
 8007874:	462e      	mov	r6, r5
 8007876:	1860      	adds	r0, r4, r1
 8007878:	f000 fd80 	bl	800837c <core_set_error>
 800787c:	e722      	b.n	80076c4 <ai_platform_network_init+0x15c>
 800787e:	2110      	movs	r1, #16
 8007880:	2212      	movs	r2, #18
 8007882:	1860      	adds	r0, r4, r1
 8007884:	f000 fd7a 	bl	800837c <core_set_error>
 8007888:	e71c      	b.n	80076c4 <ai_platform_network_init+0x15c>
 800788a:	4666      	mov	r6, ip
 800788c:	e6b7      	b.n	80075fe <ai_platform_network_init+0x96>
 800788e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007890:	6a26      	ldr	r6, [r4, #32]
 8007892:	2701      	movs	r7, #1
 8007894:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8007896:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800789a:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 800789e:	e74e      	b.n	800773e <ai_platform_network_init+0x1d6>

080078a0 <ai_platform_network_post_init>:
 80078a0:	b538      	push	{r3, r4, r5, lr}
 80078a2:	2800      	cmp	r0, #0
 80078a4:	d04e      	beq.n	8007944 <ai_platform_network_post_init+0xa4>
 80078a6:	4b8c      	ldr	r3, [pc, #560]	; (8007ad8 <ai_platform_network_post_init+0x238>)
 80078a8:	4604      	mov	r4, r0
 80078aa:	6802      	ldr	r2, [r0, #0]
 80078ac:	429a      	cmp	r2, r3
 80078ae:	d149      	bne.n	8007944 <ai_platform_network_post_init+0xa4>
 80078b0:	f7fe fa94 	bl	8005ddc <_ai_platform_acquire_crc>
 80078b4:	4b89      	ldr	r3, [pc, #548]	; (8007adc <ai_platform_network_post_init+0x23c>)
 80078b6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078c0:	189a      	adds	r2, r3, r2
 80078c2:	2a01      	cmp	r2, #1
 80078c4:	f240 8095 	bls.w	80079f2 <ai_platform_network_post_init+0x152>
 80078c8:	f240 4249 	movw	r2, #1097	; 0x449
 80078cc:	4293      	cmp	r3, r2
 80078ce:	f000 8090 	beq.w	80079f2 <ai_platform_network_post_init+0x152>
 80078d2:	4a83      	ldr	r2, [pc, #524]	; (8007ae0 <ai_platform_network_post_init+0x240>)
 80078d4:	6813      	ldr	r3, [r2, #0]
 80078d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078da:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80078de:	f000 8096 	beq.w	8007a0e <ai_platform_network_post_init+0x16e>
 80078e2:	6813      	ldr	r3, [r2, #0]
 80078e4:	f240 4183 	movw	r1, #1155	; 0x483
 80078e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078ec:	428b      	cmp	r3, r1
 80078ee:	f000 80b8 	beq.w	8007a62 <ai_platform_network_post_init+0x1c2>
 80078f2:	6813      	ldr	r3, [r2, #0]
 80078f4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80078f8:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80078fc:	f000 80de 	beq.w	8007abc <ai_platform_network_post_init+0x21c>
 8007900:	6813      	ldr	r3, [r2, #0]
 8007902:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007906:	2b00      	cmp	r3, #0
 8007908:	f000 80bd 	beq.w	8007a86 <ai_platform_network_post_init+0x1e6>
 800790c:	f7fe fa68 	bl	8005de0 <_ai_platform_release_crc>
 8007910:	68e3      	ldr	r3, [r4, #12]
 8007912:	f013 0502 	ands.w	r5, r3, #2
 8007916:	f000 808c 	beq.w	8007a32 <ai_platform_network_post_init+0x192>
 800791a:	4620      	mov	r0, r4
 800791c:	f000 fd70 	bl	8008400 <ai_layers_post_init_all>
 8007920:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8007922:	b16b      	cbz	r3, 8007940 <ai_platform_network_post_init+0xa0>
 8007924:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8007926:	e007      	b.n	8007938 <ai_platform_network_post_init+0x98>
 8007928:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 800792c:	4798      	blx	r3
 800792e:	692b      	ldr	r3, [r5, #16]
 8007930:	b133      	cbz	r3, 8007940 <ai_platform_network_post_init+0xa0>
 8007932:	42ab      	cmp	r3, r5
 8007934:	461d      	mov	r5, r3
 8007936:	d003      	beq.n	8007940 <ai_platform_network_post_init+0xa0>
 8007938:	4629      	mov	r1, r5
 800793a:	2000      	movs	r0, #0
 800793c:	2d00      	cmp	r5, #0
 800793e:	d1f3      	bne.n	8007928 <ai_platform_network_post_init+0x88>
 8007940:	2001      	movs	r0, #1
 8007942:	bd38      	pop	{r3, r4, r5, pc}
 8007944:	f7fe fa4a 	bl	8005ddc <_ai_platform_acquire_crc>
 8007948:	4b64      	ldr	r3, [pc, #400]	; (8007adc <ai_platform_network_post_init+0x23c>)
 800794a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007954:	185a      	adds	r2, r3, r1
 8007956:	2a01      	cmp	r2, #1
 8007958:	d92a      	bls.n	80079b0 <ai_platform_network_post_init+0x110>
 800795a:	f240 4249 	movw	r2, #1097	; 0x449
 800795e:	4293      	cmp	r3, r2
 8007960:	d026      	beq.n	80079b0 <ai_platform_network_post_init+0x110>
 8007962:	4a5f      	ldr	r2, [pc, #380]	; (8007ae0 <ai_platform_network_post_init+0x240>)
 8007964:	6813      	ldr	r3, [r2, #0]
 8007966:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800796a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800796e:	d02c      	beq.n	80079ca <ai_platform_network_post_init+0x12a>
 8007970:	6813      	ldr	r3, [r2, #0]
 8007972:	f240 4183 	movw	r1, #1155	; 0x483
 8007976:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800797a:	428b      	cmp	r3, r1
 800797c:	d060      	beq.n	8007a40 <ai_platform_network_post_init+0x1a0>
 800797e:	6813      	ldr	r3, [r2, #0]
 8007980:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007984:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007988:	f000 808b 	beq.w	8007aa2 <ai_platform_network_post_init+0x202>
 800798c:	6813      	ldr	r3, [r2, #0]
 800798e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007992:	2b00      	cmp	r3, #0
 8007994:	d129      	bne.n	80079ea <ai_platform_network_post_init+0x14a>
 8007996:	4a53      	ldr	r2, [pc, #332]	; (8007ae4 <ai_platform_network_post_init+0x244>)
 8007998:	2301      	movs	r3, #1
 800799a:	6093      	str	r3, [r2, #8]
 800799c:	6893      	ldr	r3, [r2, #8]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d1fc      	bne.n	800799c <ai_platform_network_post_init+0xfc>
 80079a2:	4951      	ldr	r1, [pc, #324]	; (8007ae8 <ai_platform_network_post_init+0x248>)
 80079a4:	4b51      	ldr	r3, [pc, #324]	; (8007aec <ai_platform_network_post_init+0x24c>)
 80079a6:	6011      	str	r1, [r2, #0]
 80079a8:	6812      	ldr	r2, [r2, #0]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d01d      	beq.n	80079ea <ai_platform_network_post_init+0x14a>
 80079ae:	e7fe      	b.n	80079ae <ai_platform_network_post_init+0x10e>
 80079b0:	4a4c      	ldr	r2, [pc, #304]	; (8007ae4 <ai_platform_network_post_init+0x244>)
 80079b2:	2301      	movs	r3, #1
 80079b4:	6093      	str	r3, [r2, #8]
 80079b6:	6893      	ldr	r3, [r2, #8]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d1fc      	bne.n	80079b6 <ai_platform_network_post_init+0x116>
 80079bc:	494a      	ldr	r1, [pc, #296]	; (8007ae8 <ai_platform_network_post_init+0x248>)
 80079be:	4b4b      	ldr	r3, [pc, #300]	; (8007aec <ai_platform_network_post_init+0x24c>)
 80079c0:	6011      	str	r1, [r2, #0]
 80079c2:	6812      	ldr	r2, [r2, #0]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d010      	beq.n	80079ea <ai_platform_network_post_init+0x14a>
 80079c8:	e7fe      	b.n	80079c8 <ai_platform_network_post_init+0x128>
 80079ca:	4a49      	ldr	r2, [pc, #292]	; (8007af0 <ai_platform_network_post_init+0x250>)
 80079cc:	2301      	movs	r3, #1
 80079ce:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80079d2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d1fb      	bne.n	80079d2 <ai_platform_network_post_init+0x132>
 80079da:	4943      	ldr	r1, [pc, #268]	; (8007ae8 <ai_platform_network_post_init+0x248>)
 80079dc:	4b43      	ldr	r3, [pc, #268]	; (8007aec <ai_platform_network_post_init+0x24c>)
 80079de:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80079e2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d110      	bne.n	8007a0c <ai_platform_network_post_init+0x16c>
 80079ea:	f7fe f9f9 	bl	8005de0 <_ai_platform_release_crc>
 80079ee:	2000      	movs	r0, #0
 80079f0:	bd38      	pop	{r3, r4, r5, pc}
 80079f2:	4a3c      	ldr	r2, [pc, #240]	; (8007ae4 <ai_platform_network_post_init+0x244>)
 80079f4:	2301      	movs	r3, #1
 80079f6:	6093      	str	r3, [r2, #8]
 80079f8:	6893      	ldr	r3, [r2, #8]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d1fc      	bne.n	80079f8 <ai_platform_network_post_init+0x158>
 80079fe:	493a      	ldr	r1, [pc, #232]	; (8007ae8 <ai_platform_network_post_init+0x248>)
 8007a00:	4b3a      	ldr	r3, [pc, #232]	; (8007aec <ai_platform_network_post_init+0x24c>)
 8007a02:	6011      	str	r1, [r2, #0]
 8007a04:	6812      	ldr	r2, [r2, #0]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d080      	beq.n	800790c <ai_platform_network_post_init+0x6c>
 8007a0a:	e7fe      	b.n	8007a0a <ai_platform_network_post_init+0x16a>
 8007a0c:	e7fe      	b.n	8007a0c <ai_platform_network_post_init+0x16c>
 8007a0e:	4a38      	ldr	r2, [pc, #224]	; (8007af0 <ai_platform_network_post_init+0x250>)
 8007a10:	2301      	movs	r3, #1
 8007a12:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007a16:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1fb      	bne.n	8007a16 <ai_platform_network_post_init+0x176>
 8007a1e:	4932      	ldr	r1, [pc, #200]	; (8007ae8 <ai_platform_network_post_init+0x248>)
 8007a20:	4b32      	ldr	r3, [pc, #200]	; (8007aec <ai_platform_network_post_init+0x24c>)
 8007a22:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007a26:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007a2a:	429a      	cmp	r2, r3
 8007a2c:	f43f af6e 	beq.w	800790c <ai_platform_network_post_init+0x6c>
 8007a30:	e7fe      	b.n	8007a30 <ai_platform_network_post_init+0x190>
 8007a32:	2210      	movs	r2, #16
 8007a34:	2111      	movs	r1, #17
 8007a36:	18a0      	adds	r0, r4, r2
 8007a38:	f000 fca0 	bl	800837c <core_set_error>
 8007a3c:	4628      	mov	r0, r5
 8007a3e:	bd38      	pop	{r3, r4, r5, pc}
 8007a40:	4a2b      	ldr	r2, [pc, #172]	; (8007af0 <ai_platform_network_post_init+0x250>)
 8007a42:	2301      	movs	r3, #1
 8007a44:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007a48:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d1fb      	bne.n	8007a48 <ai_platform_network_post_init+0x1a8>
 8007a50:	4925      	ldr	r1, [pc, #148]	; (8007ae8 <ai_platform_network_post_init+0x248>)
 8007a52:	4b26      	ldr	r3, [pc, #152]	; (8007aec <ai_platform_network_post_init+0x24c>)
 8007a54:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007a58:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d0c4      	beq.n	80079ea <ai_platform_network_post_init+0x14a>
 8007a60:	e7fe      	b.n	8007a60 <ai_platform_network_post_init+0x1c0>
 8007a62:	4a23      	ldr	r2, [pc, #140]	; (8007af0 <ai_platform_network_post_init+0x250>)
 8007a64:	2301      	movs	r3, #1
 8007a66:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007a6a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1fb      	bne.n	8007a6a <ai_platform_network_post_init+0x1ca>
 8007a72:	491d      	ldr	r1, [pc, #116]	; (8007ae8 <ai_platform_network_post_init+0x248>)
 8007a74:	4b1d      	ldr	r3, [pc, #116]	; (8007aec <ai_platform_network_post_init+0x24c>)
 8007a76:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8007a7a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007a7e:	429a      	cmp	r2, r3
 8007a80:	f43f af44 	beq.w	800790c <ai_platform_network_post_init+0x6c>
 8007a84:	e7fe      	b.n	8007a84 <ai_platform_network_post_init+0x1e4>
 8007a86:	4a17      	ldr	r2, [pc, #92]	; (8007ae4 <ai_platform_network_post_init+0x244>)
 8007a88:	2301      	movs	r3, #1
 8007a8a:	6093      	str	r3, [r2, #8]
 8007a8c:	6893      	ldr	r3, [r2, #8]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d1fc      	bne.n	8007a8c <ai_platform_network_post_init+0x1ec>
 8007a92:	4915      	ldr	r1, [pc, #84]	; (8007ae8 <ai_platform_network_post_init+0x248>)
 8007a94:	4b15      	ldr	r3, [pc, #84]	; (8007aec <ai_platform_network_post_init+0x24c>)
 8007a96:	6011      	str	r1, [r2, #0]
 8007a98:	6812      	ldr	r2, [r2, #0]
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	f43f af36 	beq.w	800790c <ai_platform_network_post_init+0x6c>
 8007aa0:	e7fe      	b.n	8007aa0 <ai_platform_network_post_init+0x200>
 8007aa2:	4a10      	ldr	r2, [pc, #64]	; (8007ae4 <ai_platform_network_post_init+0x244>)
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	6093      	str	r3, [r2, #8]
 8007aa8:	6893      	ldr	r3, [r2, #8]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1fc      	bne.n	8007aa8 <ai_platform_network_post_init+0x208>
 8007aae:	490e      	ldr	r1, [pc, #56]	; (8007ae8 <ai_platform_network_post_init+0x248>)
 8007ab0:	4b0e      	ldr	r3, [pc, #56]	; (8007aec <ai_platform_network_post_init+0x24c>)
 8007ab2:	6011      	str	r1, [r2, #0]
 8007ab4:	6812      	ldr	r2, [r2, #0]
 8007ab6:	429a      	cmp	r2, r3
 8007ab8:	d097      	beq.n	80079ea <ai_platform_network_post_init+0x14a>
 8007aba:	e7fe      	b.n	8007aba <ai_platform_network_post_init+0x21a>
 8007abc:	4a09      	ldr	r2, [pc, #36]	; (8007ae4 <ai_platform_network_post_init+0x244>)
 8007abe:	2301      	movs	r3, #1
 8007ac0:	6093      	str	r3, [r2, #8]
 8007ac2:	6893      	ldr	r3, [r2, #8]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1fc      	bne.n	8007ac2 <ai_platform_network_post_init+0x222>
 8007ac8:	4907      	ldr	r1, [pc, #28]	; (8007ae8 <ai_platform_network_post_init+0x248>)
 8007aca:	4b08      	ldr	r3, [pc, #32]	; (8007aec <ai_platform_network_post_init+0x24c>)
 8007acc:	6011      	str	r1, [r2, #0]
 8007ace:	6812      	ldr	r2, [r2, #0]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	f43f af1b 	beq.w	800790c <ai_platform_network_post_init+0x6c>
 8007ad6:	e7fe      	b.n	8007ad6 <ai_platform_network_post_init+0x236>
 8007ad8:	a1c00100 	.word	0xa1c00100
 8007adc:	e0042000 	.word	0xe0042000
 8007ae0:	5c001000 	.word	0x5c001000
 8007ae4:	40023000 	.word	0x40023000
 8007ae8:	f407a5c2 	.word	0xf407a5c2
 8007aec:	b5e8b5cd 	.word	0xb5e8b5cd
 8007af0:	58024000 	.word	0x58024000

08007af4 <ai_platform_network_process>:
 8007af4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af8:	b085      	sub	sp, #20
 8007afa:	460e      	mov	r6, r1
 8007afc:	4605      	mov	r5, r0
 8007afe:	9201      	str	r2, [sp, #4]
 8007b00:	b120      	cbz	r0, 8007b0c <ai_platform_network_process+0x18>
 8007b02:	4b24      	ldr	r3, [pc, #144]	; (8007b94 <ai_platform_network_process+0xa0>)
 8007b04:	6802      	ldr	r2, [r0, #0]
 8007b06:	429a      	cmp	r2, r3
 8007b08:	bf18      	it	ne
 8007b0a:	2500      	movne	r5, #0
 8007b0c:	f7fe f966 	bl	8005ddc <_ai_platform_acquire_crc>
 8007b10:	4b21      	ldr	r3, [pc, #132]	; (8007b98 <ai_platform_network_process+0xa4>)
 8007b12:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b1c:	185a      	adds	r2, r3, r1
 8007b1e:	2a01      	cmp	r2, #1
 8007b20:	d92b      	bls.n	8007b7a <ai_platform_network_process+0x86>
 8007b22:	f240 4249 	movw	r2, #1097	; 0x449
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d027      	beq.n	8007b7a <ai_platform_network_process+0x86>
 8007b2a:	4a1c      	ldr	r2, [pc, #112]	; (8007b9c <ai_platform_network_process+0xa8>)
 8007b2c:	6813      	ldr	r3, [r2, #0]
 8007b2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b32:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007b36:	d039      	beq.n	8007bac <ai_platform_network_process+0xb8>
 8007b38:	6813      	ldr	r3, [r2, #0]
 8007b3a:	f240 4183 	movw	r1, #1155	; 0x483
 8007b3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b42:	428b      	cmp	r3, r1
 8007b44:	f000 819c 	beq.w	8007e80 <ai_platform_network_process+0x38c>
 8007b48:	6813      	ldr	r3, [r2, #0]
 8007b4a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b4e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007b52:	f000 8179 	beq.w	8007e48 <ai_platform_network_process+0x354>
 8007b56:	6813      	ldr	r3, [r2, #0]
 8007b58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d136      	bne.n	8007bce <ai_platform_network_process+0xda>
 8007b60:	4a0f      	ldr	r2, [pc, #60]	; (8007ba0 <ai_platform_network_process+0xac>)
 8007b62:	2301      	movs	r3, #1
 8007b64:	6093      	str	r3, [r2, #8]
 8007b66:	6893      	ldr	r3, [r2, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1fc      	bne.n	8007b66 <ai_platform_network_process+0x72>
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <ai_platform_network_process+0xb0>)
 8007b6e:	6013      	str	r3, [r2, #0]
 8007b70:	4b0d      	ldr	r3, [pc, #52]	; (8007ba8 <ai_platform_network_process+0xb4>)
 8007b72:	6812      	ldr	r2, [r2, #0]
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d02a      	beq.n	8007bce <ai_platform_network_process+0xda>
 8007b78:	e7fe      	b.n	8007b78 <ai_platform_network_process+0x84>
 8007b7a:	4a09      	ldr	r2, [pc, #36]	; (8007ba0 <ai_platform_network_process+0xac>)
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	6093      	str	r3, [r2, #8]
 8007b80:	6893      	ldr	r3, [r2, #8]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d1fc      	bne.n	8007b80 <ai_platform_network_process+0x8c>
 8007b86:	4b07      	ldr	r3, [pc, #28]	; (8007ba4 <ai_platform_network_process+0xb0>)
 8007b88:	6013      	str	r3, [r2, #0]
 8007b8a:	4b07      	ldr	r3, [pc, #28]	; (8007ba8 <ai_platform_network_process+0xb4>)
 8007b8c:	6812      	ldr	r2, [r2, #0]
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d01d      	beq.n	8007bce <ai_platform_network_process+0xda>
 8007b92:	e7fe      	b.n	8007b92 <ai_platform_network_process+0x9e>
 8007b94:	a1c00100 	.word	0xa1c00100
 8007b98:	e0042000 	.word	0xe0042000
 8007b9c:	5c001000 	.word	0x5c001000
 8007ba0:	40023000 	.word	0x40023000
 8007ba4:	f407a5c2 	.word	0xf407a5c2
 8007ba8:	b5e8b5cd 	.word	0xb5e8b5cd
 8007bac:	4ab0      	ldr	r2, [pc, #704]	; (8007e70 <ai_platform_network_process+0x37c>)
 8007bae:	2301      	movs	r3, #1
 8007bb0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007bb4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1fb      	bne.n	8007bb4 <ai_platform_network_process+0xc0>
 8007bbc:	4bad      	ldr	r3, [pc, #692]	; (8007e74 <ai_platform_network_process+0x380>)
 8007bbe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007bc2:	4bad      	ldr	r3, [pc, #692]	; (8007e78 <ai_platform_network_process+0x384>)
 8007bc4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007bc8:	429a      	cmp	r2, r3
 8007bca:	f040 812b 	bne.w	8007e24 <ai_platform_network_process+0x330>
 8007bce:	f7fe f907 	bl	8005de0 <_ai_platform_release_crc>
 8007bd2:	2d00      	cmp	r5, #0
 8007bd4:	f000 8172 	beq.w	8007ebc <ai_platform_network_process+0x3c8>
 8007bd8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	f000 8123 	beq.w	8007e26 <ai_platform_network_process+0x332>
 8007be0:	68eb      	ldr	r3, [r5, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8007be8:	f003 0303 	and.w	r3, r3, #3
 8007bec:	616a      	str	r2, [r5, #20]
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	f040 811f 	bne.w	8007e32 <ai_platform_network_process+0x33e>
 8007bf4:	2e00      	cmp	r6, #0
 8007bf6:	f000 8156 	beq.w	8007ea6 <ai_platform_network_process+0x3b2>
 8007bfa:	fab8 f788 	clz	r7, r8
 8007bfe:	097f      	lsrs	r7, r7, #5
 8007c00:	f1b8 0f00 	cmp.w	r8, #0
 8007c04:	f000 814f 	beq.w	8007ea6 <ai_platform_network_process+0x3b2>
 8007c08:	f8b8 3000 	ldrh.w	r3, [r8]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f000 814a 	beq.w	8007ea6 <ai_platform_network_process+0x3b2>
 8007c12:	69b3      	ldr	r3, [r6, #24]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8007c1a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d072      	beq.n	8007d08 <ai_platform_network_process+0x214>
 8007c22:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007c26:	2c00      	cmp	r4, #0
 8007c28:	d06e      	beq.n	8007d08 <ai_platform_network_process+0x214>
 8007c2a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007c2e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007c32:	f8d3 a000 	ldr.w	sl, [r3]
 8007c36:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8007c3a:	f000 8133 	beq.w	8007ea4 <ai_platform_network_process+0x3b0>
 8007c3e:	69a3      	ldr	r3, [r4, #24]
 8007c40:	2101      	movs	r1, #1
 8007c42:	4630      	mov	r0, r6
 8007c44:	685d      	ldr	r5, [r3, #4]
 8007c46:	f7fd ffe1 	bl	8005c0c <ai_buffer_get_size>
 8007c4a:	4285      	cmp	r5, r0
 8007c4c:	f0c0 8138 	bcc.w	8007ec0 <ai_platform_network_process+0x3cc>
 8007c50:	68e0      	ldr	r0, [r4, #12]
 8007c52:	69b1      	ldr	r1, [r6, #24]
 8007c54:	68c2      	ldr	r2, [r0, #12]
 8007c56:	68cb      	ldr	r3, [r1, #12]
 8007c58:	429a      	cmp	r2, r3
 8007c5a:	f040 8131 	bne.w	8007ec0 <ai_platform_network_process+0x3cc>
 8007c5e:	6882      	ldr	r2, [r0, #8]
 8007c60:	688b      	ldr	r3, [r1, #8]
 8007c62:	429a      	cmp	r2, r3
 8007c64:	f040 812c 	bne.w	8007ec0 <ai_platform_network_process+0x3cc>
 8007c68:	6842      	ldr	r2, [r0, #4]
 8007c6a:	684b      	ldr	r3, [r1, #4]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	f040 8127 	bne.w	8007ec0 <ai_platform_network_process+0x3cc>
 8007c72:	69a3      	ldr	r3, [r4, #24]
 8007c74:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007c78:	f001 fe88 	bl	800998c <ai_array_get_data_byte_size>
 8007c7c:	4605      	mov	r5, r0
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f7fd ffae 	bl	8005be0 <get_tensor_byte_size>
 8007c84:	4285      	cmp	r5, r0
 8007c86:	f0c0 811b 	bcc.w	8007ec0 <ai_platform_network_process+0x3cc>
 8007c8a:	69a3      	ldr	r3, [r4, #24]
 8007c8c:	6818      	ldr	r0, [r3, #0]
 8007c8e:	f001 fde9 	bl	8009864 <ai_array_to_buffer_fmt>
 8007c92:	6833      	ldr	r3, [r6, #0]
 8007c94:	4058      	eors	r0, r3
 8007c96:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007c9a:	f040 81c8 	bne.w	800802e <ai_platform_network_process+0x53a>
 8007c9e:	6873      	ldr	r3, [r6, #4]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 81bb 	beq.w	800801c <ai_platform_network_process+0x528>
 8007ca6:	69b3      	ldr	r3, [r6, #24]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f000 81c8 	beq.w	8008040 <ai_platform_network_process+0x54c>
 8007cb0:	9a02      	ldr	r2, [sp, #8]
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	3701      	adds	r7, #1
 8007cb6:	361c      	adds	r6, #28
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	bf38      	it	cc
 8007cbc:	461a      	movcc	r2, r3
 8007cbe:	9202      	str	r2, [sp, #8]
 8007cc0:	f7fd ff8e 	bl	8005be0 <get_tensor_byte_size>
 8007cc4:	f8c9 0008 	str.w	r0, [r9, #8]
 8007cc8:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	fb00 f303 	mul.w	r3, r0, r3
 8007cd2:	f8c9 300c 	str.w	r3, [r9, #12]
 8007cd6:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8007cda:	440b      	add	r3, r1
 8007cdc:	f8c9 1004 	str.w	r1, [r9, #4]
 8007ce0:	f84a 300b 	str.w	r3, [sl, fp]
 8007ce4:	69a0      	ldr	r0, [r4, #24]
 8007ce6:	6803      	ldr	r3, [r0, #0]
 8007ce8:	009a      	lsls	r2, r3, #2
 8007cea:	f100 80bb 	bmi.w	8007e64 <ai_platform_network_process+0x370>
 8007cee:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007cf2:	1a9b      	subs	r3, r3, r2
 8007cf4:	4419      	add	r1, r3
 8007cf6:	6081      	str	r1, [r0, #8]
 8007cf8:	69a3      	ldr	r3, [r4, #24]
 8007cfa:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8007cfe:	60da      	str	r2, [r3, #12]
 8007d00:	f8b8 3000 	ldrh.w	r3, [r8]
 8007d04:	42bb      	cmp	r3, r7
 8007d06:	d888      	bhi.n	8007c1a <ai_platform_network_process+0x126>
 8007d08:	9d03      	ldr	r5, [sp, #12]
 8007d0a:	9b01      	ldr	r3, [sp, #4]
 8007d0c:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 819f 	beq.w	8008052 <ai_platform_network_process+0x55e>
 8007d14:	2a01      	cmp	r2, #1
 8007d16:	f240 8179 	bls.w	800800c <ai_platform_network_process+0x518>
 8007d1a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8007d1e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 8172 	beq.w	800800c <ai_platform_network_process+0x518>
 8007d28:	9e01      	ldr	r6, [sp, #4]
 8007d2a:	2700      	movs	r7, #0
 8007d2c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	f000 80d3 	beq.w	8007edc <ai_platform_network_process+0x3e8>
 8007d36:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8007d3a:	2c00      	cmp	r4, #0
 8007d3c:	f000 80ce 	beq.w	8007edc <ai_platform_network_process+0x3e8>
 8007d40:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8007d44:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8007d48:	f8d3 8000 	ldr.w	r8, [r3]
 8007d4c:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8007d50:	f000 819d 	beq.w	800808e <ai_platform_network_process+0x59a>
 8007d54:	69a3      	ldr	r3, [r4, #24]
 8007d56:	2101      	movs	r1, #1
 8007d58:	4630      	mov	r0, r6
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	9301      	str	r3, [sp, #4]
 8007d5e:	f7fd ff55 	bl	8005c0c <ai_buffer_get_size>
 8007d62:	9b01      	ldr	r3, [sp, #4]
 8007d64:	4283      	cmp	r3, r0
 8007d66:	f0c0 8151 	bcc.w	800800c <ai_platform_network_process+0x518>
 8007d6a:	68e0      	ldr	r0, [r4, #12]
 8007d6c:	69b1      	ldr	r1, [r6, #24]
 8007d6e:	68c2      	ldr	r2, [r0, #12]
 8007d70:	68cb      	ldr	r3, [r1, #12]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	f040 814a 	bne.w	800800c <ai_platform_network_process+0x518>
 8007d78:	6882      	ldr	r2, [r0, #8]
 8007d7a:	688b      	ldr	r3, [r1, #8]
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	f040 8145 	bne.w	800800c <ai_platform_network_process+0x518>
 8007d82:	6842      	ldr	r2, [r0, #4]
 8007d84:	684b      	ldr	r3, [r1, #4]
 8007d86:	429a      	cmp	r2, r3
 8007d88:	f040 8140 	bne.w	800800c <ai_platform_network_process+0x518>
 8007d8c:	69a3      	ldr	r3, [r4, #24]
 8007d8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007d92:	f001 fdfb 	bl	800998c <ai_array_get_data_byte_size>
 8007d96:	9001      	str	r0, [sp, #4]
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f7fd ff21 	bl	8005be0 <get_tensor_byte_size>
 8007d9e:	9b01      	ldr	r3, [sp, #4]
 8007da0:	4283      	cmp	r3, r0
 8007da2:	f0c0 8133 	bcc.w	800800c <ai_platform_network_process+0x518>
 8007da6:	69a3      	ldr	r3, [r4, #24]
 8007da8:	6818      	ldr	r0, [r3, #0]
 8007daa:	f001 fd5b 	bl	8009864 <ai_array_to_buffer_fmt>
 8007dae:	6833      	ldr	r3, [r6, #0]
 8007db0:	4058      	eors	r0, r3
 8007db2:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8007db6:	f040 815a 	bne.w	800806e <ai_platform_network_process+0x57a>
 8007dba:	6873      	ldr	r3, [r6, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	f000 814e 	beq.w	800805e <ai_platform_network_process+0x56a>
 8007dc2:	69b3      	ldr	r3, [r6, #24]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	f000 8159 	beq.w	800807e <ai_platform_network_process+0x58a>
 8007dcc:	9a02      	ldr	r2, [sp, #8]
 8007dce:	4620      	mov	r0, r4
 8007dd0:	3701      	adds	r7, #1
 8007dd2:	361c      	adds	r6, #28
 8007dd4:	429a      	cmp	r2, r3
 8007dd6:	bf38      	it	cc
 8007dd8:	461a      	movcc	r2, r3
 8007dda:	9202      	str	r2, [sp, #8]
 8007ddc:	f7fd ff00 	bl	8005be0 <get_tensor_byte_size>
 8007de0:	f8ca 0008 	str.w	r0, [sl, #8]
 8007de4:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	fb00 f303 	mul.w	r3, r0, r3
 8007dee:	f8ca 300c 	str.w	r3, [sl, #12]
 8007df2:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8007df6:	440b      	add	r3, r1
 8007df8:	f8ca 1004 	str.w	r1, [sl, #4]
 8007dfc:	f848 300b 	str.w	r3, [r8, fp]
 8007e00:	69a0      	ldr	r0, [r4, #24]
 8007e02:	6803      	ldr	r3, [r0, #0]
 8007e04:	009b      	lsls	r3, r3, #2
 8007e06:	d464      	bmi.n	8007ed2 <ai_platform_network_process+0x3de>
 8007e08:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8007e0c:	1a9b      	subs	r3, r3, r2
 8007e0e:	4419      	add	r1, r3
 8007e10:	6081      	str	r1, [r0, #8]
 8007e12:	69a3      	ldr	r3, [r4, #24]
 8007e14:	f8da 2004 	ldr.w	r2, [sl, #4]
 8007e18:	60da      	str	r2, [r3, #12]
 8007e1a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007e1e:	429f      	cmp	r7, r3
 8007e20:	d384      	bcc.n	8007d2c <ai_platform_network_process+0x238>
 8007e22:	e05b      	b.n	8007edc <ai_platform_network_process+0x3e8>
 8007e24:	e7fe      	b.n	8007e24 <ai_platform_network_process+0x330>
 8007e26:	68ea      	ldr	r2, [r5, #12]
 8007e28:	616b      	str	r3, [r5, #20]
 8007e2a:	f002 0203 	and.w	r2, r2, #3
 8007e2e:	2a03      	cmp	r2, #3
 8007e30:	d039      	beq.n	8007ea6 <ai_platform_network_process+0x3b2>
 8007e32:	2230      	movs	r2, #48	; 0x30
 8007e34:	2111      	movs	r1, #17
 8007e36:	f105 0010 	add.w	r0, r5, #16
 8007e3a:	2400      	movs	r4, #0
 8007e3c:	f000 fa9e 	bl	800837c <core_set_error>
 8007e40:	4620      	mov	r0, r4
 8007e42:	b005      	add	sp, #20
 8007e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e48:	4a0c      	ldr	r2, [pc, #48]	; (8007e7c <ai_platform_network_process+0x388>)
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	6093      	str	r3, [r2, #8]
 8007e4e:	6893      	ldr	r3, [r2, #8]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d1fc      	bne.n	8007e4e <ai_platform_network_process+0x35a>
 8007e54:	4b07      	ldr	r3, [pc, #28]	; (8007e74 <ai_platform_network_process+0x380>)
 8007e56:	6013      	str	r3, [r2, #0]
 8007e58:	4b07      	ldr	r3, [pc, #28]	; (8007e78 <ai_platform_network_process+0x384>)
 8007e5a:	6812      	ldr	r2, [r2, #0]
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	f43f aeb6 	beq.w	8007bce <ai_platform_network_process+0xda>
 8007e62:	e7fe      	b.n	8007e62 <ai_platform_network_process+0x36e>
 8007e64:	f8b8 3000 	ldrh.w	r3, [r8]
 8007e68:	429f      	cmp	r7, r3
 8007e6a:	f4ff aed6 	bcc.w	8007c1a <ai_platform_network_process+0x126>
 8007e6e:	e74b      	b.n	8007d08 <ai_platform_network_process+0x214>
 8007e70:	58024000 	.word	0x58024000
 8007e74:	f407a5c2 	.word	0xf407a5c2
 8007e78:	b5e8b5cd 	.word	0xb5e8b5cd
 8007e7c:	40023000 	.word	0x40023000
 8007e80:	4a87      	ldr	r2, [pc, #540]	; (80080a0 <ai_platform_network_process+0x5ac>)
 8007e82:	2301      	movs	r3, #1
 8007e84:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007e88:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d1fb      	bne.n	8007e88 <ai_platform_network_process+0x394>
 8007e90:	4b84      	ldr	r3, [pc, #528]	; (80080a4 <ai_platform_network_process+0x5b0>)
 8007e92:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007e96:	4b84      	ldr	r3, [pc, #528]	; (80080a8 <ai_platform_network_process+0x5b4>)
 8007e98:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	f43f ae96 	beq.w	8007bce <ai_platform_network_process+0xda>
 8007ea2:	e7fe      	b.n	8007ea2 <ai_platform_network_process+0x3ae>
 8007ea4:	9d03      	ldr	r5, [sp, #12]
 8007ea6:	2400      	movs	r4, #0
 8007ea8:	2217      	movs	r2, #23
 8007eaa:	2112      	movs	r1, #18
 8007eac:	f105 0010 	add.w	r0, r5, #16
 8007eb0:	f000 fa64 	bl	800837c <core_set_error>
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	b005      	add	sp, #20
 8007eb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ebc:	462c      	mov	r4, r5
 8007ebe:	e7bf      	b.n	8007e40 <ai_platform_network_process+0x34c>
 8007ec0:	9d03      	ldr	r5, [sp, #12]
 8007ec2:	2218      	movs	r2, #24
 8007ec4:	2112      	movs	r1, #18
 8007ec6:	2400      	movs	r4, #0
 8007ec8:	f105 0010 	add.w	r0, r5, #16
 8007ecc:	f000 fa56 	bl	800837c <core_set_error>
 8007ed0:	e7b6      	b.n	8007e40 <ai_platform_network_process+0x34c>
 8007ed2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8007ed6:	429f      	cmp	r7, r3
 8007ed8:	f4ff af28 	bcc.w	8007d2c <ai_platform_network_process+0x238>
 8007edc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007ee0:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007ee2:	82ab      	strh	r3, [r5, #20]
 8007ee4:	2a00      	cmp	r2, #0
 8007ee6:	f040 808b 	bne.w	8008000 <ai_platform_network_process+0x50c>
 8007eea:	4616      	mov	r6, r2
 8007eec:	4617      	mov	r7, r2
 8007eee:	8aec      	ldrh	r4, [r5, #22]
 8007ef0:	429c      	cmp	r4, r3
 8007ef2:	d2a5      	bcs.n	8007e40 <ai_platform_network_process+0x34c>
 8007ef4:	46ab      	mov	fp, r5
 8007ef6:	2e00      	cmp	r6, #0
 8007ef8:	d030      	beq.n	8007f5c <ai_platform_network_process+0x468>
 8007efa:	f04f 0800 	mov.w	r8, #0
 8007efe:	e014      	b.n	8007f2a <ai_platform_network_process+0x436>
 8007f00:	6882      	ldr	r2, [r0, #8]
 8007f02:	68c5      	ldr	r5, [r0, #12]
 8007f04:	6863      	ldr	r3, [r4, #4]
 8007f06:	1b52      	subs	r2, r2, r5
 8007f08:	4413      	add	r3, r2
 8007f0a:	6083      	str	r3, [r0, #8]
 8007f0c:	698b      	ldr	r3, [r1, #24]
 8007f0e:	6862      	ldr	r2, [r4, #4]
 8007f10:	60da      	str	r2, [r3, #12]
 8007f12:	f859 200a 	ldr.w	r2, [r9, sl]
 8007f16:	f108 0801 	add.w	r8, r8, #1
 8007f1a:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8007f1e:	440b      	add	r3, r1
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d301      	bcc.n	8007f28 <ai_platform_network_process+0x434>
 8007f24:	68e3      	ldr	r3, [r4, #12]
 8007f26:	1ad3      	subs	r3, r2, r3
 8007f28:	6063      	str	r3, [r4, #4]
 8007f2a:	8833      	ldrh	r3, [r6, #0]
 8007f2c:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8007f30:	4543      	cmp	r3, r8
 8007f32:	d913      	bls.n	8007f5c <ai_platform_network_process+0x468>
 8007f34:	6873      	ldr	r3, [r6, #4]
 8007f36:	b18b      	cbz	r3, 8007f5c <ai_platform_network_process+0x468>
 8007f38:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8007f3c:	b171      	cbz	r1, 8007f5c <ai_platform_network_process+0x468>
 8007f3e:	6988      	ldr	r0, [r1, #24]
 8007f40:	68b2      	ldr	r2, [r6, #8]
 8007f42:	6803      	ldr	r3, [r0, #0]
 8007f44:	f8d2 9000 	ldr.w	r9, [r2]
 8007f48:	009d      	lsls	r5, r3, #2
 8007f4a:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8007f4e:	d5d7      	bpl.n	8007f00 <ai_platform_network_process+0x40c>
 8007f50:	6881      	ldr	r1, [r0, #8]
 8007f52:	68a2      	ldr	r2, [r4, #8]
 8007f54:	6860      	ldr	r0, [r4, #4]
 8007f56:	f001 fbfd 	bl	8009754 <st_int8_copy>
 8007f5a:	e7da      	b.n	8007f12 <ai_platform_network_process+0x41e>
 8007f5c:	4658      	mov	r0, fp
 8007f5e:	f000 fa63 	bl	8008428 <ai_layers_forward_all>
 8007f62:	2f00      	cmp	r7, #0
 8007f64:	d03d      	beq.n	8007fe2 <ai_platform_network_process+0x4ee>
 8007f66:	2400      	movs	r4, #0
 8007f68:	e016      	b.n	8007f98 <ai_platform_network_process+0x4a4>
 8007f6a:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007f6e:	f859 100a 	ldr.w	r1, [r9, sl]
 8007f72:	4413      	add	r3, r2
 8007f74:	428b      	cmp	r3, r1
 8007f76:	d302      	bcc.n	8007f7e <ai_platform_network_process+0x48a>
 8007f78:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007f7c:	1acb      	subs	r3, r1, r3
 8007f7e:	f8c8 3004 	str.w	r3, [r8, #4]
 8007f82:	6981      	ldr	r1, [r0, #24]
 8007f84:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8007f88:	1b52      	subs	r2, r2, r5
 8007f8a:	4413      	add	r3, r2
 8007f8c:	608b      	str	r3, [r1, #8]
 8007f8e:	6983      	ldr	r3, [r0, #24]
 8007f90:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007f94:	60da      	str	r2, [r3, #12]
 8007f96:	3401      	adds	r4, #1
 8007f98:	883b      	ldrh	r3, [r7, #0]
 8007f9a:	42a3      	cmp	r3, r4
 8007f9c:	d921      	bls.n	8007fe2 <ai_platform_network_process+0x4ee>
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	b1fb      	cbz	r3, 8007fe2 <ai_platform_network_process+0x4ee>
 8007fa2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8007fa6:	b1e0      	cbz	r0, 8007fe2 <ai_platform_network_process+0x4ee>
 8007fa8:	68ba      	ldr	r2, [r7, #8]
 8007faa:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007fae:	6983      	ldr	r3, [r0, #24]
 8007fb0:	f8d2 9000 	ldr.w	r9, [r2]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8007fba:	0092      	lsls	r2, r2, #2
 8007fbc:	d5d5      	bpl.n	8007f6a <ai_platform_network_process+0x476>
 8007fbe:	6898      	ldr	r0, [r3, #8]
 8007fc0:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007fc4:	f001 fbc6 	bl	8009754 <st_int8_copy>
 8007fc8:	f859 200a 	ldr.w	r2, [r9, sl]
 8007fcc:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007fd0:	440b      	add	r3, r1
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d302      	bcc.n	8007fdc <ai_platform_network_process+0x4e8>
 8007fd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007fda:	1ad3      	subs	r3, r2, r3
 8007fdc:	f8c8 3004 	str.w	r3, [r8, #4]
 8007fe0:	e7d9      	b.n	8007f96 <ai_platform_network_process+0x4a2>
 8007fe2:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8007fe6:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8007fea:	3401      	adds	r4, #1
 8007fec:	b2a4      	uxth	r4, r4
 8007fee:	42a3      	cmp	r3, r4
 8007ff0:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007ff4:	f63f af7f 	bhi.w	8007ef6 <ai_platform_network_process+0x402>
 8007ff8:	4620      	mov	r0, r4
 8007ffa:	b005      	add	sp, #20
 8007ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008000:	2a01      	cmp	r2, #1
 8008002:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8008004:	d029      	beq.n	800805a <ai_platform_network_process+0x566>
 8008006:	f106 070c 	add.w	r7, r6, #12
 800800a:	e770      	b.n	8007eee <ai_platform_network_process+0x3fa>
 800800c:	2218      	movs	r2, #24
 800800e:	2113      	movs	r1, #19
 8008010:	f105 0010 	add.w	r0, r5, #16
 8008014:	2400      	movs	r4, #0
 8008016:	f000 f9b1 	bl	800837c <core_set_error>
 800801a:	e711      	b.n	8007e40 <ai_platform_network_process+0x34c>
 800801c:	9d03      	ldr	r5, [sp, #12]
 800801e:	4604      	mov	r4, r0
 8008020:	2217      	movs	r2, #23
 8008022:	2112      	movs	r1, #18
 8008024:	f105 0010 	add.w	r0, r5, #16
 8008028:	f000 f9a8 	bl	800837c <core_set_error>
 800802c:	e708      	b.n	8007e40 <ai_platform_network_process+0x34c>
 800802e:	9d03      	ldr	r5, [sp, #12]
 8008030:	2219      	movs	r2, #25
 8008032:	2112      	movs	r1, #18
 8008034:	2400      	movs	r4, #0
 8008036:	f105 0010 	add.w	r0, r5, #16
 800803a:	f000 f99f 	bl	800837c <core_set_error>
 800803e:	e6ff      	b.n	8007e40 <ai_platform_network_process+0x34c>
 8008040:	9d03      	ldr	r5, [sp, #12]
 8008042:	4604      	mov	r4, r0
 8008044:	2221      	movs	r2, #33	; 0x21
 8008046:	2112      	movs	r1, #18
 8008048:	f105 0010 	add.w	r0, r5, #16
 800804c:	f000 f996 	bl	800837c <core_set_error>
 8008050:	e6f6      	b.n	8007e40 <ai_platform_network_process+0x34c>
 8008052:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8008056:	82ab      	strh	r3, [r5, #20]
 8008058:	e744      	b.n	8007ee4 <ai_platform_network_process+0x3f0>
 800805a:	2700      	movs	r7, #0
 800805c:	e747      	b.n	8007eee <ai_platform_network_process+0x3fa>
 800805e:	4604      	mov	r4, r0
 8008060:	2217      	movs	r2, #23
 8008062:	2113      	movs	r1, #19
 8008064:	f105 0010 	add.w	r0, r5, #16
 8008068:	f000 f988 	bl	800837c <core_set_error>
 800806c:	e6e8      	b.n	8007e40 <ai_platform_network_process+0x34c>
 800806e:	2219      	movs	r2, #25
 8008070:	2113      	movs	r1, #19
 8008072:	f105 0010 	add.w	r0, r5, #16
 8008076:	2400      	movs	r4, #0
 8008078:	f000 f980 	bl	800837c <core_set_error>
 800807c:	e6e0      	b.n	8007e40 <ai_platform_network_process+0x34c>
 800807e:	4604      	mov	r4, r0
 8008080:	2221      	movs	r2, #33	; 0x21
 8008082:	2113      	movs	r1, #19
 8008084:	f105 0010 	add.w	r0, r5, #16
 8008088:	f000 f978 	bl	800837c <core_set_error>
 800808c:	e6d8      	b.n	8007e40 <ai_platform_network_process+0x34c>
 800808e:	2217      	movs	r2, #23
 8008090:	2113      	movs	r1, #19
 8008092:	f105 0010 	add.w	r0, r5, #16
 8008096:	4654      	mov	r4, sl
 8008098:	f000 f970 	bl	800837c <core_set_error>
 800809c:	e6d0      	b.n	8007e40 <ai_platform_network_process+0x34c>
 800809e:	bf00      	nop
 80080a0:	58024000 	.word	0x58024000
 80080a4:	f407a5c2 	.word	0xf407a5c2
 80080a8:	b5e8b5cd 	.word	0xb5e8b5cd

080080ac <ai_platform_observer_register_s>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	4604      	mov	r4, r0
 80080b0:	460d      	mov	r5, r1
 80080b2:	b120      	cbz	r0, 80080be <ai_platform_observer_register_s+0x12>
 80080b4:	4b56      	ldr	r3, [pc, #344]	; (8008210 <ai_platform_observer_register_s+0x164>)
 80080b6:	6802      	ldr	r2, [r0, #0]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	bf18      	it	ne
 80080bc:	2400      	movne	r4, #0
 80080be:	f7fd fe8d 	bl	8005ddc <_ai_platform_acquire_crc>
 80080c2:	4b54      	ldr	r3, [pc, #336]	; (8008214 <ai_platform_observer_register_s+0x168>)
 80080c4:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080ce:	189a      	adds	r2, r3, r2
 80080d0:	2a01      	cmp	r2, #1
 80080d2:	d929      	bls.n	8008128 <ai_platform_observer_register_s+0x7c>
 80080d4:	f240 4249 	movw	r2, #1097	; 0x449
 80080d8:	4293      	cmp	r3, r2
 80080da:	d025      	beq.n	8008128 <ai_platform_observer_register_s+0x7c>
 80080dc:	4a4e      	ldr	r2, [pc, #312]	; (8008218 <ai_platform_observer_register_s+0x16c>)
 80080de:	6813      	ldr	r3, [r2, #0]
 80080e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080e4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80080e8:	d02b      	beq.n	8008142 <ai_platform_observer_register_s+0x96>
 80080ea:	6813      	ldr	r3, [r2, #0]
 80080ec:	f240 4183 	movw	r1, #1155	; 0x483
 80080f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080f4:	428b      	cmp	r3, r1
 80080f6:	d077      	beq.n	80081e8 <ai_platform_observer_register_s+0x13c>
 80080f8:	6813      	ldr	r3, [r2, #0]
 80080fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80080fe:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008102:	d05c      	beq.n	80081be <ai_platform_observer_register_s+0x112>
 8008104:	6813      	ldr	r3, [r2, #0]
 8008106:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800810a:	2b00      	cmp	r3, #0
 800810c:	d129      	bne.n	8008162 <ai_platform_observer_register_s+0xb6>
 800810e:	4a43      	ldr	r2, [pc, #268]	; (800821c <ai_platform_observer_register_s+0x170>)
 8008110:	2301      	movs	r3, #1
 8008112:	6093      	str	r3, [r2, #8]
 8008114:	6893      	ldr	r3, [r2, #8]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d1fc      	bne.n	8008114 <ai_platform_observer_register_s+0x68>
 800811a:	4b41      	ldr	r3, [pc, #260]	; (8008220 <ai_platform_observer_register_s+0x174>)
 800811c:	6013      	str	r3, [r2, #0]
 800811e:	4b41      	ldr	r3, [pc, #260]	; (8008224 <ai_platform_observer_register_s+0x178>)
 8008120:	6812      	ldr	r2, [r2, #0]
 8008122:	429a      	cmp	r2, r3
 8008124:	d01d      	beq.n	8008162 <ai_platform_observer_register_s+0xb6>
 8008126:	e7fe      	b.n	8008126 <ai_platform_observer_register_s+0x7a>
 8008128:	4a3c      	ldr	r2, [pc, #240]	; (800821c <ai_platform_observer_register_s+0x170>)
 800812a:	2301      	movs	r3, #1
 800812c:	6093      	str	r3, [r2, #8]
 800812e:	6893      	ldr	r3, [r2, #8]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d1fc      	bne.n	800812e <ai_platform_observer_register_s+0x82>
 8008134:	4b3a      	ldr	r3, [pc, #232]	; (8008220 <ai_platform_observer_register_s+0x174>)
 8008136:	6013      	str	r3, [r2, #0]
 8008138:	4b3a      	ldr	r3, [pc, #232]	; (8008224 <ai_platform_observer_register_s+0x178>)
 800813a:	6812      	ldr	r2, [r2, #0]
 800813c:	429a      	cmp	r2, r3
 800813e:	d010      	beq.n	8008162 <ai_platform_observer_register_s+0xb6>
 8008140:	e7fe      	b.n	8008140 <ai_platform_observer_register_s+0x94>
 8008142:	4a39      	ldr	r2, [pc, #228]	; (8008228 <ai_platform_observer_register_s+0x17c>)
 8008144:	2301      	movs	r3, #1
 8008146:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800814a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1fb      	bne.n	800814a <ai_platform_observer_register_s+0x9e>
 8008152:	4b33      	ldr	r3, [pc, #204]	; (8008220 <ai_platform_observer_register_s+0x174>)
 8008154:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8008158:	4b32      	ldr	r3, [pc, #200]	; (8008224 <ai_platform_observer_register_s+0x178>)
 800815a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800815e:	429a      	cmp	r2, r3
 8008160:	d124      	bne.n	80081ac <ai_platform_observer_register_s+0x100>
 8008162:	f7fd fe3d 	bl	8005de0 <_ai_platform_release_crc>
 8008166:	2d00      	cmp	r5, #0
 8008168:	bf18      	it	ne
 800816a:	2c00      	cmpne	r4, #0
 800816c:	bf0c      	ite	eq
 800816e:	2601      	moveq	r6, #1
 8008170:	2600      	movne	r6, #0
 8008172:	d031      	beq.n	80081d8 <ai_platform_observer_register_s+0x12c>
 8008174:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008176:	b9d3      	cbnz	r3, 80081ae <ai_platform_observer_register_s+0x102>
 8008178:	81eb      	strh	r3, [r5, #14]
 800817a:	2101      	movs	r1, #1
 800817c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800817e:	e006      	b.n	800818e <ai_platform_observer_register_s+0xe2>
 8008180:	81e9      	strh	r1, [r5, #14]
 8008182:	b281      	uxth	r1, r0
 8008184:	691a      	ldr	r2, [r3, #16]
 8008186:	429a      	cmp	r2, r3
 8008188:	4613      	mov	r3, r2
 800818a:	d003      	beq.n	8008194 <ai_platform_observer_register_s+0xe8>
 800818c:	b112      	cbz	r2, 8008194 <ai_platform_observer_register_s+0xe8>
 800818e:	1c48      	adds	r0, r1, #1
 8008190:	2b00      	cmp	r3, #0
 8008192:	d1f5      	bne.n	8008180 <ai_platform_observer_register_s+0xd4>
 8008194:	7a2b      	ldrb	r3, [r5, #8]
 8008196:	2100      	movs	r1, #0
 8008198:	4a24      	ldr	r2, [pc, #144]	; (800822c <ai_platform_observer_register_s+0x180>)
 800819a:	2601      	movs	r6, #1
 800819c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80081a0:	81a9      	strh	r1, [r5, #12]
 80081a2:	4630      	mov	r0, r6
 80081a4:	60ab      	str	r3, [r5, #8]
 80081a6:	e9c4 250f 	strd	r2, r5, [r4, #60]	; 0x3c
 80081aa:	bd70      	pop	{r4, r5, r6, pc}
 80081ac:	e7fe      	b.n	80081ac <ai_platform_observer_register_s+0x100>
 80081ae:	2240      	movs	r2, #64	; 0x40
 80081b0:	2111      	movs	r1, #17
 80081b2:	f104 0010 	add.w	r0, r4, #16
 80081b6:	f000 f8e1 	bl	800837c <core_set_error>
 80081ba:	4630      	mov	r0, r6
 80081bc:	bd70      	pop	{r4, r5, r6, pc}
 80081be:	4a17      	ldr	r2, [pc, #92]	; (800821c <ai_platform_observer_register_s+0x170>)
 80081c0:	2301      	movs	r3, #1
 80081c2:	6093      	str	r3, [r2, #8]
 80081c4:	6893      	ldr	r3, [r2, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1fc      	bne.n	80081c4 <ai_platform_observer_register_s+0x118>
 80081ca:	4b15      	ldr	r3, [pc, #84]	; (8008220 <ai_platform_observer_register_s+0x174>)
 80081cc:	6013      	str	r3, [r2, #0]
 80081ce:	4b15      	ldr	r3, [pc, #84]	; (8008224 <ai_platform_observer_register_s+0x178>)
 80081d0:	6812      	ldr	r2, [r2, #0]
 80081d2:	429a      	cmp	r2, r3
 80081d4:	d0c5      	beq.n	8008162 <ai_platform_observer_register_s+0xb6>
 80081d6:	e7fe      	b.n	80081d6 <ai_platform_observer_register_s+0x12a>
 80081d8:	b1bc      	cbz	r4, 800820a <ai_platform_observer_register_s+0x15e>
 80081da:	2110      	movs	r1, #16
 80081dc:	2211      	movs	r2, #17
 80081de:	2600      	movs	r6, #0
 80081e0:	1860      	adds	r0, r4, r1
 80081e2:	f000 f8cb 	bl	800837c <core_set_error>
 80081e6:	e7e8      	b.n	80081ba <ai_platform_observer_register_s+0x10e>
 80081e8:	4a0f      	ldr	r2, [pc, #60]	; (8008228 <ai_platform_observer_register_s+0x17c>)
 80081ea:	2301      	movs	r3, #1
 80081ec:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80081f0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1fb      	bne.n	80081f0 <ai_platform_observer_register_s+0x144>
 80081f8:	4b09      	ldr	r3, [pc, #36]	; (8008220 <ai_platform_observer_register_s+0x174>)
 80081fa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80081fe:	4b09      	ldr	r3, [pc, #36]	; (8008224 <ai_platform_observer_register_s+0x178>)
 8008200:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008204:	429a      	cmp	r2, r3
 8008206:	d0ac      	beq.n	8008162 <ai_platform_observer_register_s+0xb6>
 8008208:	e7fe      	b.n	8008208 <ai_platform_observer_register_s+0x15c>
 800820a:	4626      	mov	r6, r4
 800820c:	e7d5      	b.n	80081ba <ai_platform_observer_register_s+0x10e>
 800820e:	bf00      	nop
 8008210:	a1c00100 	.word	0xa1c00100
 8008214:	e0042000 	.word	0xe0042000
 8008218:	5c001000 	.word	0x5c001000
 800821c:	40023000 	.word	0x40023000
 8008220:	f407a5c2 	.word	0xf407a5c2
 8008224:	b5e8b5cd 	.word	0xb5e8b5cd
 8008228:	58024000 	.word	0x58024000
 800822c:	08005cb9 	.word	0x08005cb9

08008230 <ai_platform_observer_unregister_s>:
 8008230:	b538      	push	{r3, r4, r5, lr}
 8008232:	4604      	mov	r4, r0
 8008234:	460d      	mov	r5, r1
 8008236:	b120      	cbz	r0, 8008242 <ai_platform_observer_unregister_s+0x12>
 8008238:	4b45      	ldr	r3, [pc, #276]	; (8008350 <ai_platform_observer_unregister_s+0x120>)
 800823a:	6802      	ldr	r2, [r0, #0]
 800823c:	429a      	cmp	r2, r3
 800823e:	bf18      	it	ne
 8008240:	2400      	movne	r4, #0
 8008242:	f7fd fdcb 	bl	8005ddc <_ai_platform_acquire_crc>
 8008246:	4b43      	ldr	r3, [pc, #268]	; (8008354 <ai_platform_observer_unregister_s+0x124>)
 8008248:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008252:	189a      	adds	r2, r3, r2
 8008254:	2a01      	cmp	r2, #1
 8008256:	d929      	bls.n	80082ac <ai_platform_observer_unregister_s+0x7c>
 8008258:	f240 4249 	movw	r2, #1097	; 0x449
 800825c:	4293      	cmp	r3, r2
 800825e:	d025      	beq.n	80082ac <ai_platform_observer_unregister_s+0x7c>
 8008260:	4a3d      	ldr	r2, [pc, #244]	; (8008358 <ai_platform_observer_unregister_s+0x128>)
 8008262:	6813      	ldr	r3, [r2, #0]
 8008264:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008268:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800826c:	d02b      	beq.n	80082c6 <ai_platform_observer_unregister_s+0x96>
 800826e:	6813      	ldr	r3, [r2, #0]
 8008270:	f240 4183 	movw	r1, #1155	; 0x483
 8008274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008278:	428b      	cmp	r3, r1
 800827a:	d04d      	beq.n	8008318 <ai_platform_observer_unregister_s+0xe8>
 800827c:	6813      	ldr	r3, [r2, #0]
 800827e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008282:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8008286:	d03a      	beq.n	80082fe <ai_platform_observer_unregister_s+0xce>
 8008288:	6813      	ldr	r3, [r2, #0]
 800828a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800828e:	2b00      	cmp	r3, #0
 8008290:	d129      	bne.n	80082e6 <ai_platform_observer_unregister_s+0xb6>
 8008292:	4a32      	ldr	r2, [pc, #200]	; (800835c <ai_platform_observer_unregister_s+0x12c>)
 8008294:	2301      	movs	r3, #1
 8008296:	6093      	str	r3, [r2, #8]
 8008298:	6893      	ldr	r3, [r2, #8]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1fc      	bne.n	8008298 <ai_platform_observer_unregister_s+0x68>
 800829e:	4b30      	ldr	r3, [pc, #192]	; (8008360 <ai_platform_observer_unregister_s+0x130>)
 80082a0:	6013      	str	r3, [r2, #0]
 80082a2:	4b30      	ldr	r3, [pc, #192]	; (8008364 <ai_platform_observer_unregister_s+0x134>)
 80082a4:	6812      	ldr	r2, [r2, #0]
 80082a6:	429a      	cmp	r2, r3
 80082a8:	d01d      	beq.n	80082e6 <ai_platform_observer_unregister_s+0xb6>
 80082aa:	e7fe      	b.n	80082aa <ai_platform_observer_unregister_s+0x7a>
 80082ac:	4a2b      	ldr	r2, [pc, #172]	; (800835c <ai_platform_observer_unregister_s+0x12c>)
 80082ae:	2301      	movs	r3, #1
 80082b0:	6093      	str	r3, [r2, #8]
 80082b2:	6893      	ldr	r3, [r2, #8]
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d1fc      	bne.n	80082b2 <ai_platform_observer_unregister_s+0x82>
 80082b8:	4b29      	ldr	r3, [pc, #164]	; (8008360 <ai_platform_observer_unregister_s+0x130>)
 80082ba:	6013      	str	r3, [r2, #0]
 80082bc:	4b29      	ldr	r3, [pc, #164]	; (8008364 <ai_platform_observer_unregister_s+0x134>)
 80082be:	6812      	ldr	r2, [r2, #0]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d010      	beq.n	80082e6 <ai_platform_observer_unregister_s+0xb6>
 80082c4:	e7fe      	b.n	80082c4 <ai_platform_observer_unregister_s+0x94>
 80082c6:	4a28      	ldr	r2, [pc, #160]	; (8008368 <ai_platform_observer_unregister_s+0x138>)
 80082c8:	2301      	movs	r3, #1
 80082ca:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80082ce:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1fb      	bne.n	80082ce <ai_platform_observer_unregister_s+0x9e>
 80082d6:	4b22      	ldr	r3, [pc, #136]	; (8008360 <ai_platform_observer_unregister_s+0x130>)
 80082d8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80082dc:	4b21      	ldr	r3, [pc, #132]	; (8008364 <ai_platform_observer_unregister_s+0x134>)
 80082de:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80082e2:	429a      	cmp	r2, r3
 80082e4:	d10a      	bne.n	80082fc <ai_platform_observer_unregister_s+0xcc>
 80082e6:	f7fd fd7b 	bl	8005de0 <_ai_platform_release_crc>
 80082ea:	b374      	cbz	r4, 800834a <ai_platform_observer_unregister_s+0x11a>
 80082ec:	fab5 f385 	clz	r3, r5
 80082f0:	095b      	lsrs	r3, r3, #5
 80082f2:	b315      	cbz	r5, 800833a <ai_platform_observer_unregister_s+0x10a>
 80082f4:	2001      	movs	r0, #1
 80082f6:	e9c4 330f 	strd	r3, r3, [r4, #60]	; 0x3c
 80082fa:	bd38      	pop	{r3, r4, r5, pc}
 80082fc:	e7fe      	b.n	80082fc <ai_platform_observer_unregister_s+0xcc>
 80082fe:	4a17      	ldr	r2, [pc, #92]	; (800835c <ai_platform_observer_unregister_s+0x12c>)
 8008300:	2301      	movs	r3, #1
 8008302:	6093      	str	r3, [r2, #8]
 8008304:	6893      	ldr	r3, [r2, #8]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1fc      	bne.n	8008304 <ai_platform_observer_unregister_s+0xd4>
 800830a:	4b15      	ldr	r3, [pc, #84]	; (8008360 <ai_platform_observer_unregister_s+0x130>)
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	4b15      	ldr	r3, [pc, #84]	; (8008364 <ai_platform_observer_unregister_s+0x134>)
 8008310:	6812      	ldr	r2, [r2, #0]
 8008312:	429a      	cmp	r2, r3
 8008314:	d0e7      	beq.n	80082e6 <ai_platform_observer_unregister_s+0xb6>
 8008316:	e7fe      	b.n	8008316 <ai_platform_observer_unregister_s+0xe6>
 8008318:	4a13      	ldr	r2, [pc, #76]	; (8008368 <ai_platform_observer_unregister_s+0x138>)
 800831a:	2301      	movs	r3, #1
 800831c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8008320:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8008324:	2b00      	cmp	r3, #0
 8008326:	d1fb      	bne.n	8008320 <ai_platform_observer_unregister_s+0xf0>
 8008328:	4b0d      	ldr	r3, [pc, #52]	; (8008360 <ai_platform_observer_unregister_s+0x130>)
 800832a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800832e:	4b0d      	ldr	r3, [pc, #52]	; (8008364 <ai_platform_observer_unregister_s+0x134>)
 8008330:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8008334:	429a      	cmp	r2, r3
 8008336:	d0d6      	beq.n	80082e6 <ai_platform_observer_unregister_s+0xb6>
 8008338:	e7fe      	b.n	8008338 <ai_platform_observer_unregister_s+0x108>
 800833a:	b134      	cbz	r4, 800834a <ai_platform_observer_unregister_s+0x11a>
 800833c:	2110      	movs	r1, #16
 800833e:	2211      	movs	r2, #17
 8008340:	1860      	adds	r0, r4, r1
 8008342:	f000 f81b 	bl	800837c <core_set_error>
 8008346:	2000      	movs	r0, #0
 8008348:	bd38      	pop	{r3, r4, r5, pc}
 800834a:	4620      	mov	r0, r4
 800834c:	bd38      	pop	{r3, r4, r5, pc}
 800834e:	bf00      	nop
 8008350:	a1c00100 	.word	0xa1c00100
 8008354:	e0042000 	.word	0xe0042000
 8008358:	5c001000 	.word	0x5c001000
 800835c:	40023000 	.word	0x40023000
 8008360:	f407a5c2 	.word	0xf407a5c2
 8008364:	b5e8b5cd 	.word	0xb5e8b5cd
 8008368:	58024000 	.word	0x58024000

0800836c <core_init>:
 800836c:	2001      	movs	r0, #1
 800836e:	4770      	bx	lr

08008370 <core_get_error>:
 8008370:	4603      	mov	r3, r0
 8008372:	2200      	movs	r2, #0
 8008374:	6800      	ldr	r0, [r0, #0]
 8008376:	601a      	str	r2, [r3, #0]
 8008378:	4770      	bx	lr
 800837a:	bf00      	nop

0800837c <core_set_error>:
 800837c:	4603      	mov	r3, r0
 800837e:	7800      	ldrb	r0, [r0, #0]
 8008380:	b108      	cbz	r0, 8008386 <core_set_error+0xa>
 8008382:	2000      	movs	r0, #0
 8008384:	4770      	bx	lr
 8008386:	7019      	strb	r1, [r3, #0]
 8008388:	2001      	movs	r0, #1
 800838a:	6819      	ldr	r1, [r3, #0]
 800838c:	f362 211f 	bfi	r1, r2, #8, #24
 8008390:	6019      	str	r1, [r3, #0]
 8008392:	4770      	bx	lr

08008394 <ai_check_custom_types>:
 8008394:	b082      	sub	sp, #8
 8008396:	4b12      	ldr	r3, [pc, #72]	; (80083e0 <ai_check_custom_types+0x4c>)
 8008398:	9301      	str	r3, [sp, #4]
 800839a:	b118      	cbz	r0, 80083a4 <ai_check_custom_types+0x10>
 800839c:	7803      	ldrb	r3, [r0, #0]
 800839e:	2b03      	cmp	r3, #3
 80083a0:	d002      	beq.n	80083a8 <ai_check_custom_types+0x14>
 80083a2:	2000      	movs	r0, #0
 80083a4:	b002      	add	sp, #8
 80083a6:	4770      	bx	lr
 80083a8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d004      	beq.n	80083ba <ai_check_custom_types+0x26>
 80083b0:	2001      	movs	r0, #1
 80083b2:	f080 0001 	eor.w	r0, r0, #1
 80083b6:	b002      	add	sp, #8
 80083b8:	4770      	bx	lr
 80083ba:	7842      	ldrb	r2, [r0, #1]
 80083bc:	3001      	adds	r0, #1
 80083be:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d1f4      	bne.n	80083b0 <ai_check_custom_types+0x1c>
 80083c6:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80083ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80083ce:	429a      	cmp	r2, r3
 80083d0:	d1ee      	bne.n	80083b0 <ai_check_custom_types+0x1c>
 80083d2:	7842      	ldrb	r2, [r0, #1]
 80083d4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80083d8:	429a      	cmp	r2, r3
 80083da:	d1e9      	bne.n	80083b0 <ai_check_custom_types+0x1c>
 80083dc:	2000      	movs	r0, #0
 80083de:	e7e8      	b.n	80083b2 <ai_check_custom_types+0x1e>
 80083e0:	84048403 	.word	0x84048403

080083e4 <ai_layers_init_all>:
 80083e4:	2100      	movs	r1, #0
 80083e6:	6b43      	ldr	r3, [r0, #52]	; 0x34
 80083e8:	b13b      	cbz	r3, 80083fa <ai_layers_init_all+0x16>
 80083ea:	691a      	ldr	r2, [r3, #16]
 80083ec:	3101      	adds	r1, #1
 80083ee:	60d8      	str	r0, [r3, #12]
 80083f0:	429a      	cmp	r2, r3
 80083f2:	4613      	mov	r3, r2
 80083f4:	d001      	beq.n	80083fa <ai_layers_init_all+0x16>
 80083f6:	2a00      	cmp	r2, #0
 80083f8:	d1f6      	bne.n	80083e8 <ai_layers_init_all+0x4>
 80083fa:	4608      	mov	r0, r1
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop

08008400 <ai_layers_post_init_all>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	2500      	movs	r5, #0
 8008404:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8008406:	b16c      	cbz	r4, 8008424 <ai_layers_post_init_all+0x24>
 8008408:	6863      	ldr	r3, [r4, #4]
 800840a:	07db      	lsls	r3, r3, #31
 800840c:	d504      	bpl.n	8008418 <ai_layers_post_init_all+0x18>
 800840e:	6a23      	ldr	r3, [r4, #32]
 8008410:	4620      	mov	r0, r4
 8008412:	b10b      	cbz	r3, 8008418 <ai_layers_post_init_all+0x18>
 8008414:	3501      	adds	r5, #1
 8008416:	4798      	blx	r3
 8008418:	6923      	ldr	r3, [r4, #16]
 800841a:	42a3      	cmp	r3, r4
 800841c:	461c      	mov	r4, r3
 800841e:	d001      	beq.n	8008424 <ai_layers_post_init_all+0x24>
 8008420:	2b00      	cmp	r3, #0
 8008422:	d1f0      	bne.n	8008406 <ai_layers_post_init_all+0x6>
 8008424:	4628      	mov	r0, r5
 8008426:	bd38      	pop	{r3, r4, r5, pc}

08008428 <ai_layers_forward_all>:
 8008428:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800842c:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8008430:	4604      	mov	r4, r0
 8008432:	f1b8 0f00 	cmp.w	r8, #0
 8008436:	d02a      	beq.n	800848e <ai_layers_forward_all+0x66>
 8008438:	6b41      	ldr	r1, [r0, #52]	; 0x34
 800843a:	6381      	str	r1, [r0, #56]	; 0x38
 800843c:	b319      	cbz	r1, 8008486 <ai_layers_forward_all+0x5e>
 800843e:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8008440:	2001      	movs	r0, #1
 8008442:	47c0      	blx	r8
 8008444:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008446:	b1f6      	cbz	r6, 8008486 <ai_layers_forward_all+0x5e>
 8008448:	2700      	movs	r7, #0
 800844a:	4631      	mov	r1, r6
 800844c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800844e:	2002      	movs	r0, #2
 8008450:	47c0      	blx	r8
 8008452:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8008454:	4628      	mov	r0, r5
 8008456:	696b      	ldr	r3, [r5, #20]
 8008458:	4798      	blx	r3
 800845a:	692e      	ldr	r6, [r5, #16]
 800845c:	2003      	movs	r0, #3
 800845e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8008460:	42b5      	cmp	r5, r6
 8008462:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008464:	d007      	beq.n	8008476 <ai_layers_forward_all+0x4e>
 8008466:	47c0      	blx	r8
 8008468:	3701      	adds	r7, #1
 800846a:	63a6      	str	r6, [r4, #56]	; 0x38
 800846c:	2e00      	cmp	r6, #0
 800846e:	d1ec      	bne.n	800844a <ai_layers_forward_all+0x22>
 8008470:	4638      	mov	r0, r7
 8008472:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008476:	2003      	movs	r0, #3
 8008478:	3701      	adds	r7, #1
 800847a:	47c0      	blx	r8
 800847c:	2300      	movs	r3, #0
 800847e:	4638      	mov	r0, r7
 8008480:	63a3      	str	r3, [r4, #56]	; 0x38
 8008482:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008486:	2700      	movs	r7, #0
 8008488:	4638      	mov	r0, r7
 800848a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800848e:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8008490:	6385      	str	r5, [r0, #56]	; 0x38
 8008492:	2d00      	cmp	r5, #0
 8008494:	d0f7      	beq.n	8008486 <ai_layers_forward_all+0x5e>
 8008496:	4647      	mov	r7, r8
 8008498:	696b      	ldr	r3, [r5, #20]
 800849a:	4628      	mov	r0, r5
 800849c:	4798      	blx	r3
 800849e:	462b      	mov	r3, r5
 80084a0:	692d      	ldr	r5, [r5, #16]
 80084a2:	429d      	cmp	r5, r3
 80084a4:	d004      	beq.n	80084b0 <ai_layers_forward_all+0x88>
 80084a6:	3701      	adds	r7, #1
 80084a8:	63a5      	str	r5, [r4, #56]	; 0x38
 80084aa:	2d00      	cmp	r5, #0
 80084ac:	d1f4      	bne.n	8008498 <ai_layers_forward_all+0x70>
 80084ae:	e7df      	b.n	8008470 <ai_layers_forward_all+0x48>
 80084b0:	2300      	movs	r3, #0
 80084b2:	3701      	adds	r7, #1
 80084b4:	63a3      	str	r3, [r4, #56]	; 0x38
 80084b6:	e7db      	b.n	8008470 <ai_layers_forward_all+0x48>

080084b8 <ai_layers_destroy_all>:
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	2500      	movs	r5, #0
 80084bc:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80084be:	b16c      	cbz	r4, 80084dc <ai_layers_destroy_all+0x24>
 80084c0:	6863      	ldr	r3, [r4, #4]
 80084c2:	075b      	lsls	r3, r3, #29
 80084c4:	d504      	bpl.n	80084d0 <ai_layers_destroy_all+0x18>
 80084c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80084c8:	4620      	mov	r0, r4
 80084ca:	b10b      	cbz	r3, 80084d0 <ai_layers_destroy_all+0x18>
 80084cc:	3501      	adds	r5, #1
 80084ce:	4798      	blx	r3
 80084d0:	6923      	ldr	r3, [r4, #16]
 80084d2:	42a3      	cmp	r3, r4
 80084d4:	461c      	mov	r4, r3
 80084d6:	d001      	beq.n	80084dc <ai_layers_destroy_all+0x24>
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d1f0      	bne.n	80084be <ai_layers_destroy_all+0x6>
 80084dc:	4628      	mov	r0, r5
 80084de:	bd38      	pop	{r3, r4, r5, pc}

080084e0 <forward_dense>:
 80084e0:	6983      	ldr	r3, [r0, #24]
 80084e2:	881a      	ldrh	r2, [r3, #0]
 80084e4:	2a00      	cmp	r2, #0
 80084e6:	f000 80f0 	beq.w	80086ca <forward_dense+0x1ea>
 80084ea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ee:	ed2d 8b02 	vpush	{d8}
 80084f2:	6858      	ldr	r0, [r3, #4]
 80084f4:	b09b      	sub	sp, #108	; 0x6c
 80084f6:	6845      	ldr	r5, [r0, #4]
 80084f8:	b105      	cbz	r5, 80084fc <forward_dense+0x1c>
 80084fa:	682d      	ldr	r5, [r5, #0]
 80084fc:	2a01      	cmp	r2, #1
 80084fe:	f000 840a 	beq.w	8008d16 <forward_dense+0x836>
 8008502:	6906      	ldr	r6, [r0, #16]
 8008504:	b106      	cbz	r6, 8008508 <forward_dense+0x28>
 8008506:	6836      	ldr	r6, [r6, #0]
 8008508:	2a02      	cmp	r2, #2
 800850a:	f000 80e0 	beq.w	80086ce <forward_dense+0x1ee>
 800850e:	69c3      	ldr	r3, [r0, #28]
 8008510:	930d      	str	r3, [sp, #52]	; 0x34
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 83f1 	beq.w	8008cfa <forward_dense+0x81a>
 8008518:	4619      	mov	r1, r3
 800851a:	8b03      	ldrh	r3, [r0, #24]
 800851c:	6809      	ldr	r1, [r1, #0]
 800851e:	2b01      	cmp	r3, #1
 8008520:	910f      	str	r1, [sp, #60]	; 0x3c
 8008522:	f240 83ec 	bls.w	8008cfe <forward_dense+0x81e>
 8008526:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	930d      	str	r3, [sp, #52]	; 0x34
 800852c:	460b      	mov	r3, r1
 800852e:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8008532:	2a03      	cmp	r2, #3
 8008534:	68eb      	ldr	r3, [r5, #12]
 8008536:	68f7      	ldr	r7, [r6, #12]
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	687c      	ldr	r4, [r7, #4]
 800853c:	9317      	str	r3, [sp, #92]	; 0x5c
 800853e:	f8d8 3000 	ldr.w	r3, [r8]
 8008542:	4621      	mov	r1, r4
 8008544:	9419      	str	r4, [sp, #100]	; 0x64
 8008546:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 800854a:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 800854e:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8008552:	fb01 f404 	mul.w	r4, r1, r4
 8008556:	fa4e f10c 	asr.w	r1, lr, ip
 800855a:	9116      	str	r1, [sp, #88]	; 0x58
 800855c:	f000 83d8 	beq.w	8008d10 <forward_dense+0x830>
 8008560:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8008562:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8008566:	2a00      	cmp	r2, #0
 8008568:	f000 83c2 	beq.w	8008cf0 <forward_dense+0x810>
 800856c:	6812      	ldr	r2, [r2, #0]
 800856e:	2a00      	cmp	r2, #0
 8008570:	f000 83be 	beq.w	8008cf0 <forward_dense+0x810>
 8008574:	2b04      	cmp	r3, #4
 8008576:	f8d2 9018 	ldr.w	r9, [r2, #24]
 800857a:	f000 83a8 	beq.w	8008cce <forward_dense+0x7ee>
 800857e:	2b08      	cmp	r3, #8
 8008580:	f000 83a5 	beq.w	8008cce <forward_dense+0x7ee>
 8008584:	f04f 0a00 	mov.w	sl, #0
 8008588:	69ab      	ldr	r3, [r5, #24]
 800858a:	fb07 f404 	mul.w	r4, r7, r4
 800858e:	69b2      	ldr	r2, [r6, #24]
 8008590:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8008594:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008596:	6892      	ldr	r2, [r2, #8]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 800859e:	9206      	str	r2, [sp, #24]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	428a      	cmp	r2, r1
 80085a4:	9110      	str	r1, [sp, #64]	; 0x40
 80085a6:	9304      	str	r3, [sp, #16]
 80085a8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80085aa:	ea4f 0083 	mov.w	r0, r3, lsl #2
 80085ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085b2:	900e      	str	r0, [sp, #56]	; 0x38
 80085b4:	9303      	str	r3, [sp, #12]
 80085b6:	f080 8380 	bcs.w	8008cba <forward_dense+0x7da>
 80085ba:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80085bc:	4654      	mov	r4, sl
 80085be:	4bb9      	ldr	r3, [pc, #740]	; (80088a4 <forward_dense+0x3c4>)
 80085c0:	46ca      	mov	sl, r9
 80085c2:	08d0      	lsrs	r0, r2, #3
 80085c4:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 80088a8 <forward_dense+0x3c8>
 80085c8:	4413      	add	r3, r2
 80085ca:	9009      	str	r0, [sp, #36]	; 0x24
 80085cc:	0099      	lsls	r1, r3, #2
 80085ce:	f022 0301 	bic.w	r3, r2, #1
 80085d2:	f002 0201 	and.w	r2, r2, #1
 80085d6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80085da:	9118      	str	r1, [sp, #96]	; 0x60
 80085dc:	920a      	str	r2, [sp, #40]	; 0x28
 80085de:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 80085e2:	9305      	str	r3, [sp, #20]
 80085e4:	f101 0320 	add.w	r3, r1, #32
 80085e8:	9207      	str	r2, [sp, #28]
 80085ea:	9311      	str	r3, [sp, #68]	; 0x44
 80085ec:	444b      	add	r3, r9
 80085ee:	469b      	mov	fp, r3
 80085f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80085f2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80085f4:	699b      	ldr	r3, [r3, #24]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80085fa:	b10b      	cbz	r3, 8008600 <forward_dense+0x120>
 80085fc:	699b      	ldr	r3, [r3, #24]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	2c00      	cmp	r4, #0
 8008602:	f000 834b 	beq.w	8008c9c <forward_dense+0x7bc>
 8008606:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008608:	2904      	cmp	r1, #4
 800860a:	f000 826a 	beq.w	8008ae2 <forward_dense+0x602>
 800860e:	9903      	ldr	r1, [sp, #12]
 8008610:	9806      	ldr	r0, [sp, #24]
 8008612:	4281      	cmp	r1, r0
 8008614:	f240 8356 	bls.w	8008cc4 <forward_dense+0x7e4>
 8008618:	4686      	mov	lr, r0
 800861a:	9818      	ldr	r0, [sp, #96]	; 0x60
 800861c:	eb00 090a 	add.w	r9, r0, sl
 8008620:	0941      	lsrs	r1, r0, #5
 8008622:	f10a 0004 	add.w	r0, sl, #4
 8008626:	f8cd 9020 	str.w	r9, [sp, #32]
 800862a:	9012      	str	r0, [sp, #72]	; 0x48
 800862c:	1c48      	adds	r0, r1, #1
 800862e:	00c9      	lsls	r1, r1, #3
 8008630:	3110      	adds	r1, #16
 8008632:	9115      	str	r1, [sp, #84]	; 0x54
 8008634:	00c1      	lsls	r1, r0, #3
 8008636:	9113      	str	r1, [sp, #76]	; 0x4c
 8008638:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 800863c:	9114      	str	r1, [sp, #80]	; 0x50
 800863e:	f1a9 0104 	sub.w	r1, r9, #4
 8008642:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 8008646:	910c      	str	r1, [sp, #48]	; 0x30
 8008648:	2b00      	cmp	r3, #0
 800864a:	f000 8128 	beq.w	800889e <forward_dense+0x3be>
 800864e:	ecb3 5a01 	vldmia	r3!, {s10}
 8008652:	f1b9 0f07 	cmp.w	r9, #7
 8008656:	d83d      	bhi.n	80086d4 <forward_dense+0x1f4>
 8008658:	45da      	cmp	sl, fp
 800865a:	d211      	bcs.n	8008680 <forward_dense+0x1a0>
 800865c:	eddf 7a92 	vldr	s15, [pc, #584]	; 80088a8 <forward_dense+0x3c8>
 8008660:	4650      	mov	r0, sl
 8008662:	4615      	mov	r5, r2
 8008664:	f815 1b01 	ldrb.w	r1, [r5], #1
 8008668:	ecb0 7a01 	vldmia	r0!, {s14}
 800866c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008670:	4558      	cmp	r0, fp
 8008672:	edd1 6a00 	vldr	s13, [r1]
 8008676:	eee6 7a87 	vfma.f32	s15, s13, s14
 800867a:	d3f3      	bcc.n	8008664 <forward_dense+0x184>
 800867c:	ee35 5a27 	vadd.f32	s10, s10, s15
 8008680:	9904      	ldr	r1, [sp, #16]
 8008682:	ecae 5a01 	vstmia	lr!, {s10}
 8008686:	440a      	add	r2, r1
 8008688:	9903      	ldr	r1, [sp, #12]
 800868a:	458e      	cmp	lr, r1
 800868c:	d3dc      	bcc.n	8008648 <forward_dense+0x168>
 800868e:	9a06      	ldr	r2, [sp, #24]
 8008690:	1a8b      	subs	r3, r1, r2
 8008692:	3b01      	subs	r3, #1
 8008694:	f023 0303 	bic.w	r3, r3, #3
 8008698:	3304      	adds	r3, #4
 800869a:	18d3      	adds	r3, r2, r3
 800869c:	4619      	mov	r1, r3
 800869e:	9306      	str	r3, [sp, #24]
 80086a0:	9b03      	ldr	r3, [sp, #12]
 80086a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80086a4:	9810      	ldr	r0, [sp, #64]	; 0x40
 80086a6:	4413      	add	r3, r2
 80086a8:	9a07      	ldr	r2, [sp, #28]
 80086aa:	4281      	cmp	r1, r0
 80086ac:	9303      	str	r3, [sp, #12]
 80086ae:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086b0:	441a      	add	r2, r3
 80086b2:	449b      	add	fp, r3
 80086b4:	9207      	str	r2, [sp, #28]
 80086b6:	9a05      	ldr	r2, [sp, #20]
 80086b8:	441a      	add	r2, r3
 80086ba:	9205      	str	r2, [sp, #20]
 80086bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80086be:	4692      	mov	sl, r2
 80086c0:	f080 82fb 	bcs.w	8008cba <forward_dense+0x7da>
 80086c4:	441a      	add	r2, r3
 80086c6:	920b      	str	r2, [sp, #44]	; 0x2c
 80086c8:	e793      	b.n	80085f2 <forward_dense+0x112>
 80086ca:	6853      	ldr	r3, [r2, #4]
 80086cc:	deff      	udf	#255	; 0xff
 80086ce:	2300      	movs	r3, #0
 80086d0:	685b      	ldr	r3, [r3, #4]
 80086d2:	deff      	udf	#255	; 0xff
 80086d4:	f002 0103 	and.w	r1, r2, #3
 80086d8:	2902      	cmp	r1, #2
 80086da:	f000 81e6 	beq.w	8008aaa <forward_dense+0x5ca>
 80086de:	2903      	cmp	r1, #3
 80086e0:	f000 80e4 	beq.w	80088ac <forward_dense+0x3cc>
 80086e4:	2901      	cmp	r1, #1
 80086e6:	f000 81ef 	beq.w	8008ac8 <forward_dense+0x5e8>
 80086ea:	9908      	ldr	r1, [sp, #32]
 80086ec:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80088a8 <forward_dense+0x3c8>
 80086f0:	458a      	cmp	sl, r1
 80086f2:	f200 82e9 	bhi.w	8008cc8 <forward_dense+0x7e8>
 80086f6:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80086f8:	f102 0108 	add.w	r1, r2, #8
 80086fc:	f10a 0020 	add.w	r0, sl, #32
 8008700:	18ae      	adds	r6, r5, r2
 8008702:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8008706:	3108      	adds	r1, #8
 8008708:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 800870c:	3020      	adds	r0, #32
 800870e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008712:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8008716:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 800871a:	edd5 7a00 	vldr	s15, [r5]
 800871e:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8008722:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8008726:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 800872a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800872e:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 8008732:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8008736:	edd5 2a00 	vldr	s5, [r5]
 800873a:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 800873e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008742:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8008746:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800874a:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 800874e:	ed95 3a00 	vldr	s6, [r5]
 8008752:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8008756:	eee3 7a23 	vfma.f32	s15, s6, s7
 800875a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800875e:	edd5 3a00 	vldr	s7, [r5]
 8008762:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8008766:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800876a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800876e:	ed95 4a00 	vldr	s8, [r5]
 8008772:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8008776:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800877a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800877e:	edd5 4a00 	vldr	s9, [r5]
 8008782:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8008786:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800878a:	eee4 7aa5 	vfma.f32	s15, s9, s11
 800878e:	edd5 5a00 	vldr	s11, [r5]
 8008792:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8008796:	428e      	cmp	r6, r1
 8008798:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800879c:	eee5 7a86 	vfma.f32	s15, s11, s12
 80087a0:	ed95 6a00 	vldr	s12, [r5]
 80087a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80087a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087ac:	d1a9      	bne.n	8008702 <forward_dense+0x222>
 80087ae:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80087b0:	1850      	adds	r0, r2, r1
 80087b2:	9914      	ldr	r1, [sp, #80]	; 0x50
 80087b4:	4559      	cmp	r1, fp
 80087b6:	d26f      	bcs.n	8008898 <forward_dense+0x3b8>
 80087b8:	7805      	ldrb	r5, [r0, #0]
 80087ba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80087be:	edd5 7a00 	vldr	s15, [r5]
 80087c2:	460d      	mov	r5, r1
 80087c4:	ecf5 6a01 	vldmia	r5!, {s13}
 80087c8:	45ab      	cmp	fp, r5
 80087ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087ce:	d963      	bls.n	8008898 <forward_dense+0x3b8>
 80087d0:	7845      	ldrb	r5, [r0, #1]
 80087d2:	edd1 6a01 	vldr	s13, [r1, #4]
 80087d6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80087da:	edd5 7a00 	vldr	s15, [r5]
 80087de:	f101 0508 	add.w	r5, r1, #8
 80087e2:	45ab      	cmp	fp, r5
 80087e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80087e8:	d956      	bls.n	8008898 <forward_dense+0x3b8>
 80087ea:	7885      	ldrb	r5, [r0, #2]
 80087ec:	edd1 6a02 	vldr	s13, [r1, #8]
 80087f0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80087f4:	edd5 7a00 	vldr	s15, [r5]
 80087f8:	f101 050c 	add.w	r5, r1, #12
 80087fc:	45ab      	cmp	fp, r5
 80087fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008802:	d949      	bls.n	8008898 <forward_dense+0x3b8>
 8008804:	78c5      	ldrb	r5, [r0, #3]
 8008806:	edd1 6a03 	vldr	s13, [r1, #12]
 800880a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800880e:	edd5 7a00 	vldr	s15, [r5]
 8008812:	f101 0510 	add.w	r5, r1, #16
 8008816:	45ab      	cmp	fp, r5
 8008818:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800881c:	d93c      	bls.n	8008898 <forward_dense+0x3b8>
 800881e:	7905      	ldrb	r5, [r0, #4]
 8008820:	edd1 6a04 	vldr	s13, [r1, #16]
 8008824:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008828:	edd5 7a00 	vldr	s15, [r5]
 800882c:	f101 0514 	add.w	r5, r1, #20
 8008830:	45ab      	cmp	fp, r5
 8008832:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008836:	d92f      	bls.n	8008898 <forward_dense+0x3b8>
 8008838:	7945      	ldrb	r5, [r0, #5]
 800883a:	edd1 6a05 	vldr	s13, [r1, #20]
 800883e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008842:	edd5 7a00 	vldr	s15, [r5]
 8008846:	f101 0518 	add.w	r5, r1, #24
 800884a:	45ab      	cmp	fp, r5
 800884c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008850:	d922      	bls.n	8008898 <forward_dense+0x3b8>
 8008852:	7985      	ldrb	r5, [r0, #6]
 8008854:	edd1 6a06 	vldr	s13, [r1, #24]
 8008858:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800885c:	edd5 7a00 	vldr	s15, [r5]
 8008860:	f101 051c 	add.w	r5, r1, #28
 8008864:	45ab      	cmp	fp, r5
 8008866:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800886a:	d915      	bls.n	8008898 <forward_dense+0x3b8>
 800886c:	79c5      	ldrb	r5, [r0, #7]
 800886e:	edd1 6a07 	vldr	s13, [r1, #28]
 8008872:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008876:	edd5 7a00 	vldr	s15, [r5]
 800887a:	f101 0520 	add.w	r5, r1, #32
 800887e:	45ab      	cmp	fp, r5
 8008880:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008884:	d908      	bls.n	8008898 <forward_dense+0x3b8>
 8008886:	edd1 7a08 	vldr	s15, [r1, #32]
 800888a:	7a01      	ldrb	r1, [r0, #8]
 800888c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008890:	edd1 6a00 	vldr	s13, [r1]
 8008894:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008898:	ee35 5a07 	vadd.f32	s10, s10, s14
 800889c:	e6f0      	b.n	8008680 <forward_dense+0x1a0>
 800889e:	ed9f 5a02 	vldr	s10, [pc, #8]	; 80088a8 <forward_dense+0x3c8>
 80088a2:	e6d6      	b.n	8008652 <forward_dense+0x172>
 80088a4:	3ffffff8 	.word	0x3ffffff8
 80088a8:	00000000 	.word	0x00000000
 80088ac:	eeb0 7a48 	vmov.f32	s14, s16
 80088b0:	4650      	mov	r0, sl
 80088b2:	4611      	mov	r1, r2
 80088b4:	468c      	mov	ip, r1
 80088b6:	4606      	mov	r6, r0
 80088b8:	f81c 5b01 	ldrb.w	r5, [ip], #1
 80088bc:	ecf6 7a01 	vldmia	r6!, {s15}
 80088c0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80088c4:	edd5 6a00 	vldr	s13, [r5]
 80088c8:	9d08      	ldr	r5, [sp, #32]
 80088ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80088ce:	42ae      	cmp	r6, r5
 80088d0:	d866      	bhi.n	80089a0 <forward_dense+0x4c0>
 80088d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088d4:	f101 0711 	add.w	r7, r1, #17
 80088d8:	3109      	adds	r1, #9
 80088da:	eba5 0800 	sub.w	r8, r5, r0
 80088de:	3024      	adds	r0, #36	; 0x24
 80088e0:	ea4f 1858 	mov.w	r8, r8, lsr #5
 80088e4:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 80088e8:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 80088ec:	3108      	adds	r1, #8
 80088ee:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 80088f2:	3020      	adds	r0, #32
 80088f4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80088f8:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 80088fc:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8008900:	edd5 7a00 	vldr	s15, [r5]
 8008904:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8008908:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800890c:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8008910:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008914:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 8008918:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 800891c:	edd5 2a00 	vldr	s5, [r5]
 8008920:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8008924:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008928:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 800892c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008930:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 8008934:	ed95 3a00 	vldr	s6, [r5]
 8008938:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 800893c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008940:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008944:	edd5 3a00 	vldr	s7, [r5]
 8008948:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 800894c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008950:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008954:	ed95 4a00 	vldr	s8, [r5]
 8008958:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 800895c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008960:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008964:	edd5 4a00 	vldr	s9, [r5]
 8008968:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 800896c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008970:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8008974:	edd5 5a00 	vldr	s11, [r5]
 8008978:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 800897c:	428f      	cmp	r7, r1
 800897e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008982:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008986:	ed95 6a00 	vldr	s12, [r5]
 800898a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800898e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008992:	d1a9      	bne.n	80088e8 <forward_dense+0x408>
 8008994:	f108 0801 	add.w	r8, r8, #1
 8008998:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 800899c:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 80089a0:	455e      	cmp	r6, fp
 80089a2:	f4bf af79 	bcs.w	8008898 <forward_dense+0x3b8>
 80089a6:	f89c 1000 	ldrb.w	r1, [ip]
 80089aa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80089ae:	edd1 7a00 	vldr	s15, [r1]
 80089b2:	4631      	mov	r1, r6
 80089b4:	ecf1 6a01 	vldmia	r1!, {s13}
 80089b8:	458b      	cmp	fp, r1
 80089ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089be:	f67f af6b 	bls.w	8008898 <forward_dense+0x3b8>
 80089c2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80089c6:	edd6 6a01 	vldr	s13, [r6, #4]
 80089ca:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80089ce:	edd1 7a00 	vldr	s15, [r1]
 80089d2:	f106 0108 	add.w	r1, r6, #8
 80089d6:	458b      	cmp	fp, r1
 80089d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089dc:	f67f af5c 	bls.w	8008898 <forward_dense+0x3b8>
 80089e0:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80089e4:	edd6 6a02 	vldr	s13, [r6, #8]
 80089e8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80089ec:	edd1 7a00 	vldr	s15, [r1]
 80089f0:	f106 010c 	add.w	r1, r6, #12
 80089f4:	458b      	cmp	fp, r1
 80089f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089fa:	f67f af4d 	bls.w	8008898 <forward_dense+0x3b8>
 80089fe:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8008a02:	edd6 6a03 	vldr	s13, [r6, #12]
 8008a06:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008a0a:	edd1 7a00 	vldr	s15, [r1]
 8008a0e:	f106 0110 	add.w	r1, r6, #16
 8008a12:	458b      	cmp	fp, r1
 8008a14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a18:	f67f af3e 	bls.w	8008898 <forward_dense+0x3b8>
 8008a1c:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8008a20:	edd6 6a04 	vldr	s13, [r6, #16]
 8008a24:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008a28:	edd1 7a00 	vldr	s15, [r1]
 8008a2c:	f106 0114 	add.w	r1, r6, #20
 8008a30:	458b      	cmp	fp, r1
 8008a32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a36:	f67f af2f 	bls.w	8008898 <forward_dense+0x3b8>
 8008a3a:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8008a3e:	edd6 6a05 	vldr	s13, [r6, #20]
 8008a42:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008a46:	edd1 7a00 	vldr	s15, [r1]
 8008a4a:	f106 0118 	add.w	r1, r6, #24
 8008a4e:	458b      	cmp	fp, r1
 8008a50:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a54:	f67f af20 	bls.w	8008898 <forward_dense+0x3b8>
 8008a58:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8008a5c:	edd6 6a06 	vldr	s13, [r6, #24]
 8008a60:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008a64:	edd1 7a00 	vldr	s15, [r1]
 8008a68:	f106 011c 	add.w	r1, r6, #28
 8008a6c:	458b      	cmp	fp, r1
 8008a6e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a72:	f67f af11 	bls.w	8008898 <forward_dense+0x3b8>
 8008a76:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8008a7a:	edd6 6a07 	vldr	s13, [r6, #28]
 8008a7e:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008a82:	edd1 7a00 	vldr	s15, [r1]
 8008a86:	f106 0120 	add.w	r1, r6, #32
 8008a8a:	458b      	cmp	fp, r1
 8008a8c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a90:	f67f af02 	bls.w	8008898 <forward_dense+0x3b8>
 8008a94:	f89c 1008 	ldrb.w	r1, [ip, #8]
 8008a98:	edd6 7a08 	vldr	s15, [r6, #32]
 8008a9c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008aa0:	edd1 6a00 	vldr	s13, [r1]
 8008aa4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008aa8:	e6f6      	b.n	8008898 <forward_dense+0x3b8>
 8008aaa:	eeb0 7a48 	vmov.f32	s14, s16
 8008aae:	4650      	mov	r0, sl
 8008ab0:	4611      	mov	r1, r2
 8008ab2:	f811 5b01 	ldrb.w	r5, [r1], #1
 8008ab6:	ecf0 7a01 	vldmia	r0!, {s15}
 8008aba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008abe:	edd5 6a00 	vldr	s13, [r5]
 8008ac2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ac6:	e6f5      	b.n	80088b4 <forward_dense+0x3d4>
 8008ac8:	4611      	mov	r1, r2
 8008aca:	edda 7a00 	vldr	s15, [sl]
 8008ace:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008ad0:	f811 5b01 	ldrb.w	r5, [r1], #1
 8008ad4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008ad8:	ed95 7a00 	vldr	s14, [r5]
 8008adc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008ae0:	e7e7      	b.n	8008ab2 <forward_dense+0x5d2>
 8008ae2:	9803      	ldr	r0, [sp, #12]
 8008ae4:	9906      	ldr	r1, [sp, #24]
 8008ae6:	4288      	cmp	r0, r1
 8008ae8:	f67f adda 	bls.w	80086a0 <forward_dense+0x1c0>
 8008aec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008aee:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8008af2:	468b      	mov	fp, r1
 8008af4:	f100 0c01 	add.w	ip, r0, #1
 8008af8:	9805      	ldr	r0, [sp, #20]
 8008afa:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8008afe:	3801      	subs	r0, #1
 8008b00:	9008      	str	r0, [sp, #32]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	f000 80bf 	beq.w	8008c86 <forward_dense+0x7a6>
 8008b08:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b0a:	ecf3 2a01 	vldmia	r3!, {s5}
 8008b0e:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 80088a8 <forward_dense+0x3c8>
 8008b12:	2900      	cmp	r1, #0
 8008b14:	f000 80bf 	beq.w	8008c96 <forward_dense+0x7b6>
 8008b18:	1d10      	adds	r0, r2, #4
 8008b1a:	f10a 0120 	add.w	r1, sl, #32
 8008b1e:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 8008b22:	3004      	adds	r0, #4
 8008b24:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8008b28:	3120      	adds	r1, #32
 8008b2a:	f007 0e0f 	and.w	lr, r7, #15
 8008b2e:	093f      	lsrs	r7, r7, #4
 8008b30:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 8008b34:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8008b38:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 8008b3c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8008b40:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 8008b44:	edde 7a00 	vldr	s15, [lr]
 8008b48:	ed97 3a00 	vldr	s6, [r7]
 8008b4c:	0937      	lsrs	r7, r6, #4
 8008b4e:	ee67 7a82 	vmul.f32	s15, s15, s4
 8008b52:	f006 060f 	and.w	r6, r6, #15
 8008b56:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8008b5a:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 8008b5e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008b62:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 8008b66:	eee3 7a04 	vfma.f32	s15, s6, s8
 8008b6a:	ed97 3a00 	vldr	s6, [r7]
 8008b6e:	ed96 4a00 	vldr	s8, [r6]
 8008b72:	092e      	lsrs	r6, r5, #4
 8008b74:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 8008b78:	f005 050f 	and.w	r5, r5, #15
 8008b7c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008b80:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 8008b84:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008b88:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 8008b8c:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 8008b90:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008b94:	eee4 7a05 	vfma.f32	s15, s8, s10
 8008b98:	ed96 4a00 	vldr	s8, [r6]
 8008b9c:	ed95 5a00 	vldr	s10, [r5]
 8008ba0:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 8008ba4:	4560      	cmp	r0, ip
 8008ba6:	ea4f 1615 	mov.w	r6, r5, lsr #4
 8008baa:	f005 050f 	and.w	r5, r5, #15
 8008bae:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008bb2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008bb6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008bba:	eee5 7a06 	vfma.f32	s15, s10, s12
 8008bbe:	ed96 5a00 	vldr	s10, [r6]
 8008bc2:	ed95 6a00 	vldr	s12, [r5]
 8008bc6:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008bca:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008bce:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008bd2:	d1a4      	bne.n	8008b1e <forward_dense+0x63e>
 8008bd4:	f1ac 0804 	sub.w	r8, ip, #4
 8008bd8:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8008bdc:	9905      	ldr	r1, [sp, #20]
 8008bde:	458e      	cmp	lr, r1
 8008be0:	d229      	bcs.n	8008c36 <forward_dense+0x756>
 8008be2:	9908      	ldr	r1, [sp, #32]
 8008be4:	f10e 0008 	add.w	r0, lr, #8
 8008be8:	f108 36ff 	add.w	r6, r8, #4294967295
 8008bec:	eba1 070e 	sub.w	r7, r1, lr
 8008bf0:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 8008bf4:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8008bf8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bfc:	3008      	adds	r0, #8
 8008bfe:	ed50 5a03 	vldr	s11, [r0, #-12]
 8008c02:	f001 050f 	and.w	r5, r1, #15
 8008c06:	0909      	lsrs	r1, r1, #4
 8008c08:	ed50 6a04 	vldr	s13, [r0, #-16]
 8008c0c:	42b7      	cmp	r7, r6
 8008c0e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008c12:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008c16:	edd5 7a00 	vldr	s15, [r5]
 8008c1a:	ed91 6a00 	vldr	s12, [r1]
 8008c1e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008c22:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008c26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008c2a:	d1e5      	bne.n	8008bf8 <forward_dense+0x718>
 8008c2c:	f109 0901 	add.w	r9, r9, #1
 8008c30:	44c8      	add	r8, r9
 8008c32:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 8008c36:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008c38:	b1c1      	cbz	r1, 8008c6c <forward_dense+0x78c>
 8008c3a:	f898 1000 	ldrb.w	r1, [r8]
 8008c3e:	edde 7a00 	vldr	s15, [lr]
 8008c42:	0909      	lsrs	r1, r1, #4
 8008c44:	9804      	ldr	r0, [sp, #16]
 8008c46:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008c4a:	4402      	add	r2, r0
 8008c4c:	4484      	add	ip, r0
 8008c4e:	edd1 6a00 	vldr	s13, [r1]
 8008c52:	9903      	ldr	r1, [sp, #12]
 8008c54:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008c58:	ee72 2a87 	vadd.f32	s5, s5, s14
 8008c5c:	eceb 2a01 	vstmia	fp!, {s5}
 8008c60:	4559      	cmp	r1, fp
 8008c62:	f63f af4e 	bhi.w	8008b02 <forward_dense+0x622>
 8008c66:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 8008c6a:	e510      	b.n	800868e <forward_dense+0x1ae>
 8008c6c:	9904      	ldr	r1, [sp, #16]
 8008c6e:	ee32 7a87 	vadd.f32	s14, s5, s14
 8008c72:	440a      	add	r2, r1
 8008c74:	448c      	add	ip, r1
 8008c76:	9903      	ldr	r1, [sp, #12]
 8008c78:	ecab 7a01 	vstmia	fp!, {s14}
 8008c7c:	458b      	cmp	fp, r1
 8008c7e:	d2f2      	bcs.n	8008c66 <forward_dense+0x786>
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	f47f af41 	bne.w	8008b08 <forward_dense+0x628>
 8008c86:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c88:	eef0 2a48 	vmov.f32	s5, s16
 8008c8c:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8008d1c <forward_dense+0x83c>
 8008c90:	2900      	cmp	r1, #0
 8008c92:	f47f af41 	bne.w	8008b18 <forward_dense+0x638>
 8008c96:	46d6      	mov	lr, sl
 8008c98:	4690      	mov	r8, r2
 8008c9a:	e79f      	b.n	8008bdc <forward_dense+0x6fc>
 8008c9c:	9819      	ldr	r0, [sp, #100]	; 0x64
 8008c9e:	4651      	mov	r1, sl
 8008ca0:	9d06      	ldr	r5, [sp, #24]
 8008ca2:	9001      	str	r0, [sp, #4]
 8008ca4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008ca6:	9000      	str	r0, [sp, #0]
 8008ca8:	4628      	mov	r0, r5
 8008caa:	f000 fbcd 	bl	8009448 <forward_lite_dense_if32of32wf32>
 8008cae:	462b      	mov	r3, r5
 8008cb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008cb2:	4413      	add	r3, r2
 8008cb4:	4619      	mov	r1, r3
 8008cb6:	9306      	str	r3, [sp, #24]
 8008cb8:	e4f2      	b.n	80086a0 <forward_dense+0x1c0>
 8008cba:	b01b      	add	sp, #108	; 0x6c
 8008cbc:	ecbd 8b02 	vpop	{d8}
 8008cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc4:	4601      	mov	r1, r0
 8008cc6:	e4eb      	b.n	80086a0 <forward_dense+0x1c0>
 8008cc8:	4651      	mov	r1, sl
 8008cca:	4610      	mov	r0, r2
 8008ccc:	e572      	b.n	80087b4 <forward_dense+0x2d4>
 8008cce:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8008cd2:	f1b9 0f00 	cmp.w	r9, #0
 8008cd6:	d016      	beq.n	8008d06 <forward_dense+0x826>
 8008cd8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008cdc:	f000 fe2e 	bl	800993c <ai_array_get_byte_size>
 8008ce0:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	4651      	mov	r1, sl
 8008cea:	f000 fd33 	bl	8009754 <st_int8_copy>
 8008cee:	e44b      	b.n	8008588 <forward_dense+0xa8>
 8008cf0:	2b04      	cmp	r3, #4
 8008cf2:	d00a      	beq.n	8008d0a <forward_dense+0x82a>
 8008cf4:	f04f 0900 	mov.w	r9, #0
 8008cf8:	e441      	b.n	800857e <forward_dense+0x9e>
 8008cfa:	930f      	str	r3, [sp, #60]	; 0x3c
 8008cfc:	e417      	b.n	800852e <forward_dense+0x4e>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	930d      	str	r3, [sp, #52]	; 0x34
 8008d02:	460b      	mov	r3, r1
 8008d04:	e413      	b.n	800852e <forward_dense+0x4e>
 8008d06:	46c2      	mov	sl, r8
 8008d08:	e43e      	b.n	8008588 <forward_dense+0xa8>
 8008d0a:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 8008d0e:	e43b      	b.n	8008588 <forward_dense+0xa8>
 8008d10:	2300      	movs	r3, #0
 8008d12:	685b      	ldr	r3, [r3, #4]
 8008d14:	deff      	udf	#255	; 0xff
 8008d16:	2300      	movs	r3, #0
 8008d18:	685b      	ldr	r3, [r3, #4]
 8008d1a:	deff      	udf	#255	; 0xff
 8008d1c:	00000000 	.word	0x00000000

08008d20 <forward_sigmoid>:
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d22:	ed2d 8b02 	vpush	{d8}
 8008d26:	6982      	ldr	r2, [r0, #24]
 8008d28:	8813      	ldrh	r3, [r2, #0]
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d03b      	beq.n	8008da6 <forward_sigmoid+0x86>
 8008d2e:	6852      	ldr	r2, [r2, #4]
 8008d30:	6854      	ldr	r4, [r2, #4]
 8008d32:	b104      	cbz	r4, 8008d36 <forward_sigmoid+0x16>
 8008d34:	6824      	ldr	r4, [r4, #0]
 8008d36:	2b01      	cmp	r3, #1
 8008d38:	d034      	beq.n	8008da4 <forward_sigmoid+0x84>
 8008d3a:	6915      	ldr	r5, [r2, #16]
 8008d3c:	b105      	cbz	r5, 8008d40 <forward_sigmoid+0x20>
 8008d3e:	682d      	ldr	r5, [r5, #0]
 8008d40:	68a3      	ldr	r3, [r4, #8]
 8008d42:	0a1b      	lsrs	r3, r3, #8
 8008d44:	d031      	beq.n	8008daa <forward_sigmoid+0x8a>
 8008d46:	68e0      	ldr	r0, [r4, #12]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008d4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008d52:	4298      	cmp	r0, r3
 8008d54:	fb01 f202 	mul.w	r2, r1, r2
 8008d58:	d1f9      	bne.n	8008d4e <forward_sigmoid+0x2e>
 8008d5a:	69a7      	ldr	r7, [r4, #24]
 8008d5c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008d60:	69a9      	ldr	r1, [r5, #24]
 8008d62:	4413      	add	r3, r2
 8008d64:	68ba      	ldr	r2, [r7, #8]
 8008d66:	688e      	ldr	r6, [r1, #8]
 8008d68:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8008d6c:	eb06 0683 	add.w	r6, r6, r3, lsl #2
 8008d70:	42aa      	cmp	r2, r5
 8008d72:	d814      	bhi.n	8008d9e <forward_sigmoid+0x7e>
 8008d74:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8008d78:	3504      	adds	r5, #4
 8008d7a:	3604      	adds	r6, #4
 8008d7c:	462c      	mov	r4, r5
 8008d7e:	ed35 0a01 	vldmdb	r5!, {s0}
 8008d82:	eeb1 0a40 	vneg.f32	s0, s0
 8008d86:	3c08      	subs	r4, #8
 8008d88:	f003 fa1a 	bl	800c1c0 <expf>
 8008d8c:	ee30 0a08 	vadd.f32	s0, s0, s16
 8008d90:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8008d94:	ed66 7a01 	vstmdb	r6!, {s15}
 8008d98:	68bb      	ldr	r3, [r7, #8]
 8008d9a:	42a3      	cmp	r3, r4
 8008d9c:	d9ee      	bls.n	8008d7c <forward_sigmoid+0x5c>
 8008d9e:	ecbd 8b02 	vpop	{d8}
 8008da2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008da4:	2300      	movs	r3, #0
 8008da6:	685b      	ldr	r3, [r3, #4]
 8008da8:	deff      	udf	#255	; 0xff
 8008daa:	69ab      	ldr	r3, [r5, #24]
 8008dac:	69a7      	ldr	r7, [r4, #24]
 8008dae:	689e      	ldr	r6, [r3, #8]
 8008db0:	68bd      	ldr	r5, [r7, #8]
 8008db2:	e7df      	b.n	8008d74 <forward_sigmoid+0x54>

08008db4 <nl_func_relu_array_f32>:
 8008db4:	b410      	push	{r4}
 8008db6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008dba:	698c      	ldr	r4, [r1, #24]
 8008dbc:	6981      	ldr	r1, [r0, #24]
 8008dbe:	4413      	add	r3, r2
 8008dc0:	68a0      	ldr	r0, [r4, #8]
 8008dc2:	6889      	ldr	r1, [r1, #8]
 8008dc4:	009a      	lsls	r2, r3, #2
 8008dc6:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008dca:	4298      	cmp	r0, r3
 8008dcc:	d80f      	bhi.n	8008dee <nl_func_relu_array_f32+0x3a>
 8008dce:	3204      	adds	r2, #4
 8008dd0:	3304      	adds	r3, #4
 8008dd2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8008df4 <nl_func_relu_array_f32+0x40>
 8008dd6:	4411      	add	r1, r2
 8008dd8:	461a      	mov	r2, r3
 8008dda:	ed73 7a01 	vldmdb	r3!, {s15}
 8008dde:	3a08      	subs	r2, #8
 8008de0:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8008de4:	ed61 7a01 	vstmdb	r1!, {s15}
 8008de8:	68a0      	ldr	r0, [r4, #8]
 8008dea:	4290      	cmp	r0, r2
 8008dec:	d9f4      	bls.n	8008dd8 <nl_func_relu_array_f32+0x24>
 8008dee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	00000000 	.word	0x00000000

08008df8 <array_f32_identity>:
 8008df8:	6980      	ldr	r0, [r0, #24]
 8008dfa:	698b      	ldr	r3, [r1, #24]
 8008dfc:	4298      	cmp	r0, r3
 8008dfe:	d004      	beq.n	8008e0a <array_f32_identity+0x12>
 8008e00:	68c1      	ldr	r1, [r0, #12]
 8008e02:	0092      	lsls	r2, r2, #2
 8008e04:	68d8      	ldr	r0, [r3, #12]
 8008e06:	f000 bca5 	b.w	8009754 <st_int8_copy>
 8008e0a:	4770      	bx	lr

08008e0c <forward_rnn>:
 8008e0c:	6983      	ldr	r3, [r0, #24]
 8008e0e:	881a      	ldrh	r2, [r3, #0]
 8008e10:	2a00      	cmp	r2, #0
 8008e12:	f000 82e8 	beq.w	80093e6 <forward_rnn+0x5da>
 8008e16:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e1a:	ed2d 8b0c 	vpush	{d8-d13}
 8008e1e:	6859      	ldr	r1, [r3, #4]
 8008e20:	b0a3      	sub	sp, #140	; 0x8c
 8008e22:	4606      	mov	r6, r0
 8008e24:	684b      	ldr	r3, [r1, #4]
 8008e26:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e28:	b10b      	cbz	r3, 8008e2e <forward_rnn+0x22>
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	930b      	str	r3, [sp, #44]	; 0x2c
 8008e2e:	2a01      	cmp	r2, #1
 8008e30:	f000 8303 	beq.w	800943a <forward_rnn+0x62e>
 8008e34:	690b      	ldr	r3, [r1, #16]
 8008e36:	b103      	cbz	r3, 8008e3a <forward_rnn+0x2e>
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	2a02      	cmp	r2, #2
 8008e3c:	f000 82fa 	beq.w	8009434 <forward_rnn+0x628>
 8008e40:	69cc      	ldr	r4, [r1, #28]
 8008e42:	940a      	str	r4, [sp, #40]	; 0x28
 8008e44:	2c00      	cmp	r4, #0
 8008e46:	f000 82d0 	beq.w	80093ea <forward_rnn+0x5de>
 8008e4a:	8b08      	ldrh	r0, [r1, #24]
 8008e4c:	6825      	ldr	r5, [r4, #0]
 8008e4e:	2801      	cmp	r0, #1
 8008e50:	9510      	str	r5, [sp, #64]	; 0x40
 8008e52:	bf8c      	ite	hi
 8008e54:	6860      	ldrhi	r0, [r4, #4]
 8008e56:	2000      	movls	r0, #0
 8008e58:	900f      	str	r0, [sp, #60]	; 0x3c
 8008e5a:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008e5c:	68c5      	ldr	r5, [r0, #12]
 8008e5e:	e9d4 0402 	ldrd	r0, r4, [r4, #8]
 8008e62:	940a      	str	r4, [sp, #40]	; 0x28
 8008e64:	68dc      	ldr	r4, [r3, #12]
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	68e7      	ldr	r7, [r4, #12]
 8008e6a:	689c      	ldr	r4, [r3, #8]
 8008e6c:	68eb      	ldr	r3, [r5, #12]
 8008e6e:	9414      	str	r4, [sp, #80]	; 0x50
 8008e70:	930d      	str	r3, [sp, #52]	; 0x34
 8008e72:	69f4      	ldr	r4, [r6, #28]
 8008e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e76:	686d      	ldr	r5, [r5, #4]
 8008e78:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8008e7c:	b113      	cbz	r3, 8008e84 <forward_rnn+0x78>
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	930a      	str	r3, [sp, #40]	; 0x28
 8008e84:	2a03      	cmp	r2, #3
 8008e86:	f000 82d2 	beq.w	800942e <forward_rnn+0x622>
 8008e8a:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8008e8c:	b103      	cbz	r3, 8008e90 <forward_rnn+0x84>
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	6a32      	ldr	r2, [r6, #32]
 8008e92:	9211      	str	r2, [sp, #68]	; 0x44
 8008e94:	2a00      	cmp	r2, #0
 8008e96:	f000 82c7 	beq.w	8009428 <forward_rnn+0x61c>
 8008e9a:	699a      	ldr	r2, [r3, #24]
 8008e9c:	6983      	ldr	r3, [r0, #24]
 8008e9e:	2000      	movs	r0, #0
 8008ea0:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8008ea4:	00e2      	lsls	r2, r4, #3
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	4649      	mov	r1, r9
 8008eaa:	9312      	str	r3, [sp, #72]	; 0x48
 8008eac:	eb09 030a 	add.w	r3, r9, sl
 8008eb0:	9307      	str	r3, [sp, #28]
 8008eb2:	f000 fbf1 	bl	8009698 <st_int8_fill>
 8008eb6:	2f01      	cmp	r7, #1
 8008eb8:	f240 82a8 	bls.w	800940c <forward_rnn+0x600>
 8008ebc:	940c      	str	r4, [sp, #48]	; 0x30
 8008ebe:	f8cd a054 	str.w	sl, [sp, #84]	; 0x54
 8008ec2:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	f000 8289 	beq.w	80093de <forward_rnn+0x5d2>
 8008ecc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ece:	3b01      	subs	r3, #1
 8008ed0:	9308      	str	r3, [sp, #32]
 8008ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ed6:	930e      	str	r3, [sp, #56]	; 0x38
 8008ed8:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
 8008edc:	b173      	cbz	r3, 8008efc <forward_rnn+0xf0>
 8008ede:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ee0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	9914      	ldr	r1, [sp, #80]	; 0x50
 8008ee6:	fb02 f303 	mul.w	r3, r2, r3
 8008eea:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8008eee:	9314      	str	r3, [sp, #80]	; 0x50
 8008ef0:	ebc2 7382 	rsb	r3, r2, r2, lsl #30
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	9315      	str	r3, [sp, #84]	; 0x54
 8008ef8:	4253      	negs	r3, r2
 8008efa:	930c      	str	r3, [sp, #48]	; 0x30
 8008efc:	f1a5 0310 	sub.w	r3, r5, #16
 8008f00:	ea4f 0885 	mov.w	r8, r5, lsl #2
 8008f04:	f004 060f 	and.w	r6, r4, #15
 8008f08:	091b      	lsrs	r3, r3, #4
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	019b      	lsls	r3, r3, #6
 8008f0e:	9302      	str	r3, [sp, #8]
 8008f10:	f1a4 0310 	sub.w	r3, r4, #16
 8008f14:	091b      	lsrs	r3, r3, #4
 8008f16:	3301      	adds	r3, #1
 8008f18:	019b      	lsls	r3, r3, #6
 8008f1a:	9303      	str	r3, [sp, #12]
 8008f1c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008f1e:	4453      	add	r3, sl
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008f24:	fb08 f303 	mul.w	r3, r8, r3
 8008f28:	9313      	str	r3, [sp, #76]	; 0x4c
 8008f2a:	9b08      	ldr	r3, [sp, #32]
 8008f2c:	fb08 f303 	mul.w	r3, r8, r3
 8008f30:	9309      	str	r3, [sp, #36]	; 0x24
 8008f32:	9b08      	ldr	r3, [sp, #32]
 8008f34:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f36:	4413      	add	r3, r2
 8008f38:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f3a:	9308      	str	r3, [sp, #32]
 8008f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f3e:	699b      	ldr	r3, [r3, #24]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	eb03 0e02 	add.w	lr, r3, r2
 8008f46:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008f48:	699b      	ldr	r3, [r3, #24]
 8008f4a:	689f      	ldr	r7, [r3, #8]
 8008f4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f4e:	699b      	ldr	r3, [r3, #24]
 8008f50:	6898      	ldr	r0, [r3, #8]
 8008f52:	2c00      	cmp	r4, #0
 8008f54:	f000 8204 	beq.w	8009360 <forward_rnn+0x554>
 8008f58:	9b02      	ldr	r3, [sp, #8]
 8008f5a:	9907      	ldr	r1, [sp, #28]
 8008f5c:	4473      	add	r3, lr
 8008f5e:	f8dd c048 	ldr.w	ip, [sp, #72]	; 0x48
 8008f62:	9304      	str	r3, [sp, #16]
 8008f64:	9b03      	ldr	r3, [sp, #12]
 8008f66:	444b      	add	r3, r9
 8008f68:	9306      	str	r3, [sp, #24]
 8008f6a:	f005 030f 	and.w	r3, r5, #15
 8008f6e:	9305      	str	r3, [sp, #20]
 8008f70:	ecbc 0a01 	vldmia	ip!, {s0}
 8008f74:	2d0f      	cmp	r5, #15
 8008f76:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 800925c <forward_rnn+0x450>
 8008f7a:	eca1 0a01 	vstmia	r1!, {s0}
 8008f7e:	f240 8212 	bls.w	80093a6 <forward_rnn+0x59a>
 8008f82:	f10e 0240 	add.w	r2, lr, #64	; 0x40
 8008f86:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008f8a:	46ab      	mov	fp, r5
 8008f8c:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 8008f90:	f1ab 0b10 	sub.w	fp, fp, #16
 8008f94:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008f98:	3340      	adds	r3, #64	; 0x40
 8008f9a:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8008f9e:	f1bb 0f0f 	cmp.w	fp, #15
 8008fa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008fa6:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8008faa:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8008fae:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8008fb2:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 8008fb6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008fba:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 8008fbe:	ed52 da1d 	vldr	s27, [r2, #-116]	; 0xffffff8c
 8008fc2:	ed12 da1c 	vldr	s26, [r2, #-112]	; 0xffffff90
 8008fc6:	ed53 ca1c 	vldr	s25, [r3, #-112]	; 0xffffff90
 8008fca:	ed12 ca1b 	vldr	s24, [r2, #-108]	; 0xffffff94
 8008fce:	ed53 ba1b 	vldr	s23, [r3, #-108]	; 0xffffff94
 8008fd2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008fd6:	ed12 ba1a 	vldr	s22, [r2, #-104]	; 0xffffff98
 8008fda:	ed53 aa1a 	vldr	s21, [r3, #-104]	; 0xffffff98
 8008fde:	ed12 aa19 	vldr	s20, [r2, #-100]	; 0xffffff9c
 8008fe2:	ed53 9a19 	vldr	s19, [r3, #-100]	; 0xffffff9c
 8008fe6:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8008fea:	ed53 8a18 	vldr	s17, [r3, #-96]	; 0xffffffa0
 8008fee:	eeed 7aa6 	vfma.f32	s15, s27, s13
 8008ff2:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 8008ff6:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 8008ffa:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 8008ffe:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 8009002:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 8009006:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 800900a:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800900e:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8009012:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8009016:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800901a:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 800901e:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8009022:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8009026:	eeec 7a2b 	vfma.f32	s15, s24, s23
 800902a:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800902e:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8009032:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8009036:	eeea 7a29 	vfma.f32	s15, s20, s19
 800903a:	eee9 7a28 	vfma.f32	s15, s18, s17
 800903e:	eee8 7a20 	vfma.f32	s15, s16, s1
 8009042:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009046:	eee2 7a22 	vfma.f32	s15, s4, s5
 800904a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800904e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009052:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009056:	eee6 7a26 	vfma.f32	s15, s12, s13
 800905a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800905e:	d895      	bhi.n	8008f8c <forward_rnn+0x180>
 8009060:	9b02      	ldr	r3, [sp, #8]
 8009062:	eb07 0b03 	add.w	fp, r7, r3
 8009066:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d075      	beq.n	800915a <forward_rnn+0x34e>
 800906e:	edd2 6a00 	vldr	s13, [r2]
 8009072:	2b01      	cmp	r3, #1
 8009074:	eddb 7a00 	vldr	s15, [fp]
 8009078:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800907c:	d06d      	beq.n	800915a <forward_rnn+0x34e>
 800907e:	edd2 6a01 	vldr	s13, [r2, #4]
 8009082:	2b02      	cmp	r3, #2
 8009084:	eddb 7a01 	vldr	s15, [fp, #4]
 8009088:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800908c:	d065      	beq.n	800915a <forward_rnn+0x34e>
 800908e:	edd2 6a02 	vldr	s13, [r2, #8]
 8009092:	2b03      	cmp	r3, #3
 8009094:	eddb 7a02 	vldr	s15, [fp, #8]
 8009098:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800909c:	d05d      	beq.n	800915a <forward_rnn+0x34e>
 800909e:	edd2 6a03 	vldr	s13, [r2, #12]
 80090a2:	2b04      	cmp	r3, #4
 80090a4:	eddb 7a03 	vldr	s15, [fp, #12]
 80090a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80090ac:	d055      	beq.n	800915a <forward_rnn+0x34e>
 80090ae:	edd2 6a04 	vldr	s13, [r2, #16]
 80090b2:	2b05      	cmp	r3, #5
 80090b4:	eddb 7a04 	vldr	s15, [fp, #16]
 80090b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80090bc:	d04d      	beq.n	800915a <forward_rnn+0x34e>
 80090be:	edd2 6a05 	vldr	s13, [r2, #20]
 80090c2:	2b06      	cmp	r3, #6
 80090c4:	eddb 7a05 	vldr	s15, [fp, #20]
 80090c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80090cc:	d045      	beq.n	800915a <forward_rnn+0x34e>
 80090ce:	edd2 6a06 	vldr	s13, [r2, #24]
 80090d2:	2b07      	cmp	r3, #7
 80090d4:	eddb 7a06 	vldr	s15, [fp, #24]
 80090d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80090dc:	d03d      	beq.n	800915a <forward_rnn+0x34e>
 80090de:	edd2 6a07 	vldr	s13, [r2, #28]
 80090e2:	2b08      	cmp	r3, #8
 80090e4:	eddb 7a07 	vldr	s15, [fp, #28]
 80090e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80090ec:	d035      	beq.n	800915a <forward_rnn+0x34e>
 80090ee:	edd2 6a08 	vldr	s13, [r2, #32]
 80090f2:	2b09      	cmp	r3, #9
 80090f4:	eddb 7a08 	vldr	s15, [fp, #32]
 80090f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80090fc:	d02d      	beq.n	800915a <forward_rnn+0x34e>
 80090fe:	edd2 6a09 	vldr	s13, [r2, #36]	; 0x24
 8009102:	2b0a      	cmp	r3, #10
 8009104:	eddb 7a09 	vldr	s15, [fp, #36]	; 0x24
 8009108:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800910c:	d025      	beq.n	800915a <forward_rnn+0x34e>
 800910e:	edd2 6a0a 	vldr	s13, [r2, #40]	; 0x28
 8009112:	2b0b      	cmp	r3, #11
 8009114:	eddb 7a0a 	vldr	s15, [fp, #40]	; 0x28
 8009118:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800911c:	d01d      	beq.n	800915a <forward_rnn+0x34e>
 800911e:	edd2 6a0b 	vldr	s13, [r2, #44]	; 0x2c
 8009122:	2b0c      	cmp	r3, #12
 8009124:	eddb 7a0b 	vldr	s15, [fp, #44]	; 0x2c
 8009128:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800912c:	d015      	beq.n	800915a <forward_rnn+0x34e>
 800912e:	edd2 6a0c 	vldr	s13, [r2, #48]	; 0x30
 8009132:	3b0d      	subs	r3, #13
 8009134:	eddb 7a0c 	vldr	s15, [fp, #48]	; 0x30
 8009138:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800913c:	d00d      	beq.n	800915a <forward_rnn+0x34e>
 800913e:	edd2 6a0d 	vldr	s13, [r2, #52]	; 0x34
 8009142:	2b01      	cmp	r3, #1
 8009144:	eddb 7a0d 	vldr	s15, [fp, #52]	; 0x34
 8009148:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800914c:	d005      	beq.n	800915a <forward_rnn+0x34e>
 800914e:	eddb 6a0e 	vldr	s13, [fp, #56]	; 0x38
 8009152:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8009156:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800915a:	ee30 0a07 	vadd.f32	s0, s0, s14
 800915e:	2c0f      	cmp	r4, #15
 8009160:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800925c <forward_rnn+0x450>
 8009164:	ed01 0a01 	vstr	s0, [r1, #-4]
 8009168:	f240 8119 	bls.w	800939e <forward_rnn+0x592>
 800916c:	f109 0240 	add.w	r2, r9, #64	; 0x40
 8009170:	f100 0340 	add.w	r3, r0, #64	; 0x40
 8009174:	46a3      	mov	fp, r4
 8009176:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 800917a:	f1ab 0b10 	sub.w	fp, fp, #16
 800917e:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8009182:	3340      	adds	r3, #64	; 0x40
 8009184:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8009188:	f1bb 0f0f 	cmp.w	fp, #15
 800918c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009190:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8009194:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8009198:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800919c:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 80091a0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80091a4:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 80091a8:	ed52 da1d 	vldr	s27, [r2, #-116]	; 0xffffff8c
 80091ac:	ed12 da1c 	vldr	s26, [r2, #-112]	; 0xffffff90
 80091b0:	ed53 ca1c 	vldr	s25, [r3, #-112]	; 0xffffff90
 80091b4:	ed12 ca1b 	vldr	s24, [r2, #-108]	; 0xffffff94
 80091b8:	ed53 ba1b 	vldr	s23, [r3, #-108]	; 0xffffff94
 80091bc:	eee5 7a86 	vfma.f32	s15, s11, s12
 80091c0:	ed12 ba1a 	vldr	s22, [r2, #-104]	; 0xffffff98
 80091c4:	ed53 aa1a 	vldr	s21, [r3, #-104]	; 0xffffff98
 80091c8:	ed12 aa19 	vldr	s20, [r2, #-100]	; 0xffffff9c
 80091cc:	ed53 9a19 	vldr	s19, [r3, #-100]	; 0xffffff9c
 80091d0:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 80091d4:	ed53 8a18 	vldr	s17, [r3, #-96]	; 0xffffffa0
 80091d8:	eeed 7aa6 	vfma.f32	s15, s27, s13
 80091dc:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 80091e0:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 80091e4:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 80091e8:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 80091ec:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 80091f0:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 80091f4:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80091f8:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80091fc:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8009200:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8009204:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8009208:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800920c:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8009210:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8009214:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8009218:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 800921c:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8009220:	eeea 7a29 	vfma.f32	s15, s20, s19
 8009224:	eee9 7a28 	vfma.f32	s15, s18, s17
 8009228:	eee8 7a20 	vfma.f32	s15, s16, s1
 800922c:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009230:	eee2 7a22 	vfma.f32	s15, s4, s5
 8009234:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009238:	eee4 7a24 	vfma.f32	s15, s8, s9
 800923c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009240:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009244:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009248:	d895      	bhi.n	8009176 <forward_rnn+0x36a>
 800924a:	9b03      	ldr	r3, [sp, #12]
 800924c:	18c2      	adds	r2, r0, r3
 800924e:	2e00      	cmp	r6, #0
 8009250:	d07c      	beq.n	800934c <forward_rnn+0x540>
 8009252:	4633      	mov	r3, r6
 8009254:	f8dd b018 	ldr.w	fp, [sp, #24]
 8009258:	e002      	b.n	8009260 <forward_rnn+0x454>
 800925a:	bf00      	nop
 800925c:	00000000 	.word	0x00000000
 8009260:	edd2 6a00 	vldr	s13, [r2]
 8009264:	2b01      	cmp	r3, #1
 8009266:	eddb 7a00 	vldr	s15, [fp]
 800926a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800926e:	d06d      	beq.n	800934c <forward_rnn+0x540>
 8009270:	eddb 6a01 	vldr	s13, [fp, #4]
 8009274:	2b02      	cmp	r3, #2
 8009276:	edd2 7a01 	vldr	s15, [r2, #4]
 800927a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800927e:	d065      	beq.n	800934c <forward_rnn+0x540>
 8009280:	eddb 6a02 	vldr	s13, [fp, #8]
 8009284:	2b03      	cmp	r3, #3
 8009286:	edd2 7a02 	vldr	s15, [r2, #8]
 800928a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800928e:	d05d      	beq.n	800934c <forward_rnn+0x540>
 8009290:	eddb 6a03 	vldr	s13, [fp, #12]
 8009294:	2b04      	cmp	r3, #4
 8009296:	edd2 7a03 	vldr	s15, [r2, #12]
 800929a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800929e:	d055      	beq.n	800934c <forward_rnn+0x540>
 80092a0:	eddb 6a04 	vldr	s13, [fp, #16]
 80092a4:	2b05      	cmp	r3, #5
 80092a6:	edd2 7a04 	vldr	s15, [r2, #16]
 80092aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80092ae:	d04d      	beq.n	800934c <forward_rnn+0x540>
 80092b0:	eddb 6a05 	vldr	s13, [fp, #20]
 80092b4:	2b06      	cmp	r3, #6
 80092b6:	edd2 7a05 	vldr	s15, [r2, #20]
 80092ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80092be:	d045      	beq.n	800934c <forward_rnn+0x540>
 80092c0:	eddb 6a06 	vldr	s13, [fp, #24]
 80092c4:	2b07      	cmp	r3, #7
 80092c6:	edd2 7a06 	vldr	s15, [r2, #24]
 80092ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80092ce:	d03d      	beq.n	800934c <forward_rnn+0x540>
 80092d0:	eddb 6a07 	vldr	s13, [fp, #28]
 80092d4:	2b08      	cmp	r3, #8
 80092d6:	edd2 7a07 	vldr	s15, [r2, #28]
 80092da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80092de:	d035      	beq.n	800934c <forward_rnn+0x540>
 80092e0:	eddb 6a08 	vldr	s13, [fp, #32]
 80092e4:	2b09      	cmp	r3, #9
 80092e6:	edd2 7a08 	vldr	s15, [r2, #32]
 80092ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80092ee:	d02d      	beq.n	800934c <forward_rnn+0x540>
 80092f0:	eddb 6a09 	vldr	s13, [fp, #36]	; 0x24
 80092f4:	2b0a      	cmp	r3, #10
 80092f6:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80092fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80092fe:	d025      	beq.n	800934c <forward_rnn+0x540>
 8009300:	eddb 6a0a 	vldr	s13, [fp, #40]	; 0x28
 8009304:	2b0b      	cmp	r3, #11
 8009306:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 800930a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800930e:	d01d      	beq.n	800934c <forward_rnn+0x540>
 8009310:	eddb 6a0b 	vldr	s13, [fp, #44]	; 0x2c
 8009314:	2b0c      	cmp	r3, #12
 8009316:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 800931a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800931e:	d015      	beq.n	800934c <forward_rnn+0x540>
 8009320:	eddb 6a0c 	vldr	s13, [fp, #48]	; 0x30
 8009324:	3b0d      	subs	r3, #13
 8009326:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 800932a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800932e:	d00d      	beq.n	800934c <forward_rnn+0x540>
 8009330:	eddb 6a0d 	vldr	s13, [fp, #52]	; 0x34
 8009334:	2b01      	cmp	r3, #1
 8009336:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 800933a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800933e:	d005      	beq.n	800934c <forward_rnn+0x540>
 8009340:	eddb 6a0e 	vldr	s13, [fp, #56]	; 0x38
 8009344:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8009348:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800934c:	9b01      	ldr	r3, [sp, #4]
 800934e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8009352:	4447      	add	r7, r8
 8009354:	4450      	add	r0, sl
 8009356:	4563      	cmp	r3, ip
 8009358:	ed01 7a01 	vstr	s14, [r1, #-4]
 800935c:	f47f ae08 	bne.w	8008f70 <forward_rnn+0x164>
 8009360:	4b37      	ldr	r3, [pc, #220]	; (8009440 <forward_rnn+0x634>)
 8009362:	a91b      	add	r1, sp, #108	; 0x6c
 8009364:	4622      	mov	r2, r4
 8009366:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8009368:	4608      	mov	r0, r1
 800936a:	e9cd 3416 	strd	r3, r4, [sp, #88]	; 0x58
 800936e:	9b07      	ldr	r3, [sp, #28]
 8009370:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
 8009374:	ab16      	add	r3, sp, #88	; 0x58
 8009376:	9321      	str	r3, [sp, #132]	; 0x84
 8009378:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800937a:	47b8      	blx	r7
 800937c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800937e:	b9b3      	cbnz	r3, 80093ae <forward_rnn+0x5a2>
 8009380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009382:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8009384:	4413      	add	r3, r2
 8009386:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009388:	9309      	str	r3, [sp, #36]	; 0x24
 800938a:	9b08      	ldr	r3, [sp, #32]
 800938c:	4293      	cmp	r3, r2
 800938e:	da41      	bge.n	8009414 <forward_rnn+0x608>
 8009390:	2b00      	cmp	r3, #0
 8009392:	db3f      	blt.n	8009414 <forward_rnn+0x608>
 8009394:	464b      	mov	r3, r9
 8009396:	f8dd 901c 	ldr.w	r9, [sp, #28]
 800939a:	9307      	str	r3, [sp, #28]
 800939c:	e5c9      	b.n	8008f32 <forward_rnn+0x126>
 800939e:	4623      	mov	r3, r4
 80093a0:	46cb      	mov	fp, r9
 80093a2:	4602      	mov	r2, r0
 80093a4:	e75c      	b.n	8009260 <forward_rnn+0x454>
 80093a6:	462b      	mov	r3, r5
 80093a8:	46bb      	mov	fp, r7
 80093aa:	4672      	mov	r2, lr
 80093ac:	e65d      	b.n	800906a <forward_rnn+0x25e>
 80093ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80093b2:	9807      	ldr	r0, [sp, #28]
 80093b4:	4413      	add	r3, r2
 80093b6:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80093b8:	9309      	str	r3, [sp, #36]	; 0x24
 80093ba:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80093bc:	4619      	mov	r1, r3
 80093be:	4413      	add	r3, r2
 80093c0:	4652      	mov	r2, sl
 80093c2:	9314      	str	r3, [sp, #80]	; 0x50
 80093c4:	f000 f9c6 	bl	8009754 <st_int8_copy>
 80093c8:	9b08      	ldr	r3, [sp, #32]
 80093ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80093cc:	4293      	cmp	r3, r2
 80093ce:	da01      	bge.n	80093d4 <forward_rnn+0x5c8>
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	dadf      	bge.n	8009394 <forward_rnn+0x588>
 80093d4:	b023      	add	sp, #140	; 0x8c
 80093d6:	ecbd 8b0c 	vpop	{d8-d13}
 80093da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093de:	9308      	str	r3, [sp, #32]
 80093e0:	2301      	movs	r3, #1
 80093e2:	930e      	str	r3, [sp, #56]	; 0x38
 80093e4:	e578      	b.n	8008ed8 <forward_rnn+0xcc>
 80093e6:	6853      	ldr	r3, [r2, #4]
 80093e8:	deff      	udf	#255	; 0xff
 80093ea:	68dc      	ldr	r4, [r3, #12]
 80093ec:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80093ee:	699b      	ldr	r3, [r3, #24]
 80093f0:	68c0      	ldr	r0, [r0, #12]
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	68e7      	ldr	r7, [r4, #12]
 80093f6:	6845      	ldr	r5, [r0, #4]
 80093f8:	69f4      	ldr	r4, [r6, #28]
 80093fa:	9314      	str	r3, [sp, #80]	; 0x50
 80093fc:	68c3      	ldr	r3, [r0, #12]
 80093fe:	ea4f 0a84 	mov.w	sl, r4, lsl #2
 8009402:	980a      	ldr	r0, [sp, #40]	; 0x28
 8009404:	930d      	str	r3, [sp, #52]	; 0x34
 8009406:	e9cd 000f 	strd	r0, r0, [sp, #60]	; 0x3c
 800940a:	e53b      	b.n	8008e84 <forward_rnn+0x78>
 800940c:	2300      	movs	r3, #0
 800940e:	9315      	str	r3, [sp, #84]	; 0x54
 8009410:	930c      	str	r3, [sp, #48]	; 0x30
 8009412:	e556      	b.n	8008ec2 <forward_rnn+0xb6>
 8009414:	4652      	mov	r2, sl
 8009416:	9914      	ldr	r1, [sp, #80]	; 0x50
 8009418:	9807      	ldr	r0, [sp, #28]
 800941a:	b023      	add	sp, #140	; 0x8c
 800941c:	ecbd 8b0c 	vpop	{d8-d13}
 8009420:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009424:	f000 b996 	b.w	8009754 <st_int8_copy>
 8009428:	4a06      	ldr	r2, [pc, #24]	; (8009444 <forward_rnn+0x638>)
 800942a:	9211      	str	r2, [sp, #68]	; 0x44
 800942c:	e535      	b.n	8008e9a <forward_rnn+0x8e>
 800942e:	2300      	movs	r3, #0
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	deff      	udf	#255	; 0xff
 8009434:	2300      	movs	r3, #0
 8009436:	685b      	ldr	r3, [r3, #4]
 8009438:	deff      	udf	#255	; 0xff
 800943a:	2300      	movs	r3, #0
 800943c:	685b      	ldr	r3, [r3, #4]
 800943e:	deff      	udf	#255	; 0xff
 8009440:	01821040 	.word	0x01821040
 8009444:	08008df9 	.word	0x08008df9

08009448 <forward_lite_dense_if32of32wf32>:
 8009448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800944c:	ed2d 8b0c 	vpush	{d8-d13}
 8009450:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 8009454:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8009458:	4287      	cmp	r7, r0
 800945a:	f240 8105 	bls.w	8009668 <forward_lite_dense_if32of32wf32+0x220>
 800945e:	f1a6 0810 	sub.w	r8, r6, #16
 8009462:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8009466:	4605      	mov	r5, r0
 8009468:	f006 0b0f 	and.w	fp, r6, #15
 800946c:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8009470:	f108 0801 	add.w	r8, r8, #1
 8009474:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8009478:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800947c:	2e0f      	cmp	r6, #15
 800947e:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8009694 <forward_lite_dense_if32of32wf32+0x24c>
 8009482:	f240 8102 	bls.w	800968a <forward_lite_dense_if32of32wf32+0x242>
 8009486:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 800948a:	f102 0440 	add.w	r4, r2, #64	; 0x40
 800948e:	46b6      	mov	lr, r6
 8009490:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 8009494:	f1ae 0e10 	sub.w	lr, lr, #16
 8009498:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 800949c:	3440      	adds	r4, #64	; 0x40
 800949e:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 80094a2:	f1be 0f0f 	cmp.w	lr, #15
 80094a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80094aa:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 80094ae:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 80094b2:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 80094b6:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 80094ba:	eee4 7a85 	vfma.f32	s15, s9, s10
 80094be:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 80094c2:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 80094c6:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 80094ca:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 80094ce:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 80094d2:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 80094d6:	eee5 7a86 	vfma.f32	s15, s11, s12
 80094da:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 80094de:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 80094e2:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 80094e6:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 80094ea:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 80094ee:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 80094f2:	eeed 7a26 	vfma.f32	s15, s26, s13
 80094f6:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 80094fa:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 80094fe:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 8009502:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 8009506:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 800950a:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 800950e:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8009512:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8009516:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 800951a:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 800951e:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8009522:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8009526:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 800952a:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800952e:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8009532:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8009536:	eeea 7a8a 	vfma.f32	s15, s21, s20
 800953a:	eee9 7a89 	vfma.f32	s15, s19, s18
 800953e:	eee8 7a88 	vfma.f32	s15, s17, s16
 8009542:	eee0 7a20 	vfma.f32	s15, s0, s1
 8009546:	eee1 7a21 	vfma.f32	s15, s2, s3
 800954a:	eee2 7a22 	vfma.f32	s15, s4, s5
 800954e:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009552:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009556:	eee5 7a25 	vfma.f32	s15, s10, s11
 800955a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800955e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009562:	d895      	bhi.n	8009490 <forward_lite_dense_if32of32wf32+0x48>
 8009564:	eb02 0e0a 	add.w	lr, r2, sl
 8009568:	465c      	mov	r4, fp
 800956a:	46c4      	mov	ip, r8
 800956c:	2c00      	cmp	r4, #0
 800956e:	d075      	beq.n	800965c <forward_lite_dense_if32of32wf32+0x214>
 8009570:	eddc 6a00 	vldr	s13, [ip]
 8009574:	2c01      	cmp	r4, #1
 8009576:	edde 7a00 	vldr	s15, [lr]
 800957a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800957e:	d06d      	beq.n	800965c <forward_lite_dense_if32of32wf32+0x214>
 8009580:	eddc 6a01 	vldr	s13, [ip, #4]
 8009584:	2c02      	cmp	r4, #2
 8009586:	edde 7a01 	vldr	s15, [lr, #4]
 800958a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800958e:	d065      	beq.n	800965c <forward_lite_dense_if32of32wf32+0x214>
 8009590:	eddc 6a02 	vldr	s13, [ip, #8]
 8009594:	2c03      	cmp	r4, #3
 8009596:	edde 7a02 	vldr	s15, [lr, #8]
 800959a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800959e:	d05d      	beq.n	800965c <forward_lite_dense_if32of32wf32+0x214>
 80095a0:	eddc 6a03 	vldr	s13, [ip, #12]
 80095a4:	2c04      	cmp	r4, #4
 80095a6:	edde 7a03 	vldr	s15, [lr, #12]
 80095aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80095ae:	d055      	beq.n	800965c <forward_lite_dense_if32of32wf32+0x214>
 80095b0:	eddc 6a04 	vldr	s13, [ip, #16]
 80095b4:	2c05      	cmp	r4, #5
 80095b6:	edde 7a04 	vldr	s15, [lr, #16]
 80095ba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80095be:	d04d      	beq.n	800965c <forward_lite_dense_if32of32wf32+0x214>
 80095c0:	eddc 6a05 	vldr	s13, [ip, #20]
 80095c4:	2c06      	cmp	r4, #6
 80095c6:	edde 7a05 	vldr	s15, [lr, #20]
 80095ca:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80095ce:	d045      	beq.n	800965c <forward_lite_dense_if32of32wf32+0x214>
 80095d0:	eddc 6a06 	vldr	s13, [ip, #24]
 80095d4:	2c07      	cmp	r4, #7
 80095d6:	edde 7a06 	vldr	s15, [lr, #24]
 80095da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80095de:	d03d      	beq.n	800965c <forward_lite_dense_if32of32wf32+0x214>
 80095e0:	eddc 6a07 	vldr	s13, [ip, #28]
 80095e4:	2c08      	cmp	r4, #8
 80095e6:	edde 7a07 	vldr	s15, [lr, #28]
 80095ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80095ee:	d035      	beq.n	800965c <forward_lite_dense_if32of32wf32+0x214>
 80095f0:	eddc 6a08 	vldr	s13, [ip, #32]
 80095f4:	2c09      	cmp	r4, #9
 80095f6:	edde 7a08 	vldr	s15, [lr, #32]
 80095fa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80095fe:	d02d      	beq.n	800965c <forward_lite_dense_if32of32wf32+0x214>
 8009600:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8009604:	2c0a      	cmp	r4, #10
 8009606:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 800960a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800960e:	d025      	beq.n	800965c <forward_lite_dense_if32of32wf32+0x214>
 8009610:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8009614:	2c0b      	cmp	r4, #11
 8009616:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 800961a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800961e:	d01d      	beq.n	800965c <forward_lite_dense_if32of32wf32+0x214>
 8009620:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8009624:	2c0c      	cmp	r4, #12
 8009626:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 800962a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800962e:	d015      	beq.n	800965c <forward_lite_dense_if32of32wf32+0x214>
 8009630:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8009634:	3c0d      	subs	r4, #13
 8009636:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 800963a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800963e:	d00d      	beq.n	800965c <forward_lite_dense_if32of32wf32+0x214>
 8009640:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8009644:	2c01      	cmp	r4, #1
 8009646:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 800964a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800964e:	d005      	beq.n	800965c <forward_lite_dense_if32of32wf32+0x214>
 8009650:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8009654:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8009658:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800965c:	eca5 7a01 	vstmia	r5!, {s14}
 8009660:	42af      	cmp	r7, r5
 8009662:	444a      	add	r2, r9
 8009664:	f63f af0a 	bhi.w	800947c <forward_lite_dense_if32of32wf32+0x34>
 8009668:	b15b      	cbz	r3, 8009682 <forward_lite_dense_if32of32wf32+0x23a>
 800966a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800966c:	b14a      	cbz	r2, 8009682 <forward_lite_dense_if32of32wf32+0x23a>
 800966e:	edd0 7a00 	vldr	s15, [r0]
 8009672:	ecb3 7a01 	vldmia	r3!, {s14}
 8009676:	ee77 7a87 	vadd.f32	s15, s15, s14
 800967a:	ece0 7a01 	vstmia	r0!, {s15}
 800967e:	4287      	cmp	r7, r0
 8009680:	d1f5      	bne.n	800966e <forward_lite_dense_if32of32wf32+0x226>
 8009682:	ecbd 8b0c 	vpop	{d8-d13}
 8009686:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800968a:	4634      	mov	r4, r6
 800968c:	4696      	mov	lr, r2
 800968e:	468c      	mov	ip, r1
 8009690:	e76c      	b.n	800956c <forward_lite_dense_if32of32wf32+0x124>
 8009692:	bf00      	nop
 8009694:	00000000 	.word	0x00000000

08009698 <st_int8_fill>:
 8009698:	0203      	lsls	r3, r0, #8
 800969a:	468c      	mov	ip, r1
 800969c:	b510      	push	{r4, lr}
 800969e:	b2c4      	uxtb	r4, r0
 80096a0:	b29b      	uxth	r3, r3
 80096a2:	ea44 6400 	orr.w	r4, r4, r0, lsl #24
 80096a6:	431c      	orrs	r4, r3
 80096a8:	0403      	lsls	r3, r0, #16
 80096aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80096ae:	431c      	orrs	r4, r3
 80096b0:	078b      	lsls	r3, r1, #30
 80096b2:	d007      	beq.n	80096c4 <st_int8_fill+0x2c>
 80096b4:	b3a2      	cbz	r2, 8009720 <st_int8_fill+0x88>
 80096b6:	f80c 0b01 	strb.w	r0, [ip], #1
 80096ba:	f01c 0f03 	tst.w	ip, #3
 80096be:	f102 32ff 	add.w	r2, r2, #4294967295
 80096c2:	d1f7      	bne.n	80096b4 <st_int8_fill+0x1c>
 80096c4:	0911      	lsrs	r1, r2, #4
 80096c6:	d041      	beq.n	800974c <st_int8_fill+0xb4>
 80096c8:	1e4b      	subs	r3, r1, #1
 80096ca:	2b04      	cmp	r3, #4
 80096cc:	d929      	bls.n	8009722 <st_int8_fill+0x8a>
 80096ce:	f01c 0f07 	tst.w	ip, #7
 80096d2:	d126      	bne.n	8009722 <st_int8_fill+0x8a>
 80096d4:	f10c 0310 	add.w	r3, ip, #16
 80096d8:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 80096dc:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 80096e0:	e943 4404 	strd	r4, r4, [r3, #-16]
 80096e4:	e943 4402 	strd	r4, r4, [r3, #-8]
 80096e8:	3310      	adds	r3, #16
 80096ea:	428b      	cmp	r3, r1
 80096ec:	d1f8      	bne.n	80096e0 <st_int8_fill+0x48>
 80096ee:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80096f2:	44f4      	add	ip, lr
 80096f4:	f002 0203 	and.w	r2, r2, #3
 80096f8:	b15b      	cbz	r3, 8009712 <st_int8_fill+0x7a>
 80096fa:	1e59      	subs	r1, r3, #1
 80096fc:	f8cc 4000 	str.w	r4, [ip]
 8009700:	d005      	beq.n	800970e <st_int8_fill+0x76>
 8009702:	2901      	cmp	r1, #1
 8009704:	f8cc 4004 	str.w	r4, [ip, #4]
 8009708:	bf18      	it	ne
 800970a:	f8cc 4008 	strne.w	r4, [ip, #8]
 800970e:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 8009712:	b12a      	cbz	r2, 8009720 <st_int8_fill+0x88>
 8009714:	4601      	mov	r1, r0
 8009716:	4660      	mov	r0, ip
 8009718:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800971c:	f000 bf29 	b.w	800a572 <memset>
 8009720:	bd10      	pop	{r4, pc}
 8009722:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8009726:	4663      	mov	r3, ip
 8009728:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 800972c:	601c      	str	r4, [r3, #0]
 800972e:	3310      	adds	r3, #16
 8009730:	f843 4c0c 	str.w	r4, [r3, #-12]
 8009734:	f843 4c08 	str.w	r4, [r3, #-8]
 8009738:	f843 4c04 	str.w	r4, [r3, #-4]
 800973c:	4299      	cmp	r1, r3
 800973e:	d1f5      	bne.n	800972c <st_int8_fill+0x94>
 8009740:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8009744:	44f4      	add	ip, lr
 8009746:	f002 0203 	and.w	r2, r2, #3
 800974a:	e7d5      	b.n	80096f8 <st_int8_fill+0x60>
 800974c:	0893      	lsrs	r3, r2, #2
 800974e:	f002 0203 	and.w	r2, r2, #3
 8009752:	e7d1      	b.n	80096f8 <st_int8_fill+0x60>

08009754 <st_int8_copy>:
 8009754:	4288      	cmp	r0, r1
 8009756:	d010      	beq.n	800977a <st_int8_copy+0x26>
 8009758:	b17a      	cbz	r2, 800977a <st_int8_copy+0x26>
 800975a:	4288      	cmp	r0, r1
 800975c:	eb00 0302 	add.w	r3, r0, r2
 8009760:	d20c      	bcs.n	800977c <st_int8_copy+0x28>
 8009762:	428b      	cmp	r3, r1
 8009764:	d90a      	bls.n	800977c <st_int8_copy+0x28>
 8009766:	4283      	cmp	r3, r0
 8009768:	440a      	add	r2, r1
 800976a:	d906      	bls.n	800977a <st_int8_copy+0x26>
 800976c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8009770:	4283      	cmp	r3, r0
 8009772:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8009776:	d1f9      	bne.n	800976c <st_int8_copy+0x18>
 8009778:	4770      	bx	lr
 800977a:	4770      	bx	lr
 800977c:	078b      	lsls	r3, r1, #30
 800977e:	d102      	bne.n	8009786 <st_int8_copy+0x32>
 8009780:	e008      	b.n	8009794 <st_int8_copy+0x40>
 8009782:	2a00      	cmp	r2, #0
 8009784:	d04d      	beq.n	8009822 <st_int8_copy+0xce>
 8009786:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800978a:	3a01      	subs	r2, #1
 800978c:	f801 3b01 	strb.w	r3, [r1], #1
 8009790:	078b      	lsls	r3, r1, #30
 8009792:	d1f6      	bne.n	8009782 <st_int8_copy+0x2e>
 8009794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009798:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 800979c:	d05e      	beq.n	800985c <st_int8_copy+0x108>
 800979e:	ea40 0301 	orr.w	r3, r0, r1
 80097a2:	075b      	lsls	r3, r3, #29
 80097a4:	d13e      	bne.n	8009824 <st_int8_copy+0xd0>
 80097a6:	f10e 33ff 	add.w	r3, lr, #4294967295
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d93a      	bls.n	8009824 <st_int8_copy+0xd0>
 80097ae:	f100 0310 	add.w	r3, r0, #16
 80097b2:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80097b6:	f101 0c10 	add.w	ip, r1, #16
 80097ba:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80097be:	3310      	adds	r3, #16
 80097c0:	f10c 0c10 	add.w	ip, ip, #16
 80097c4:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 80097c8:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 80097cc:	4573      	cmp	r3, lr
 80097ce:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 80097d2:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 80097d6:	d1f2      	bne.n	80097be <st_int8_copy+0x6a>
 80097d8:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80097dc:	4421      	add	r1, r4
 80097de:	4420      	add	r0, r4
 80097e0:	f002 0203 	and.w	r2, r2, #3
 80097e4:	b16b      	cbz	r3, 8009802 <st_int8_copy+0xae>
 80097e6:	6804      	ldr	r4, [r0, #0]
 80097e8:	600c      	str	r4, [r1, #0]
 80097ea:	1e5c      	subs	r4, r3, #1
 80097ec:	d005      	beq.n	80097fa <st_int8_copy+0xa6>
 80097ee:	6845      	ldr	r5, [r0, #4]
 80097f0:	2c01      	cmp	r4, #1
 80097f2:	604d      	str	r5, [r1, #4]
 80097f4:	d001      	beq.n	80097fa <st_int8_copy+0xa6>
 80097f6:	6884      	ldr	r4, [r0, #8]
 80097f8:	608c      	str	r4, [r1, #8]
 80097fa:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80097fe:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8009802:	b162      	cbz	r2, 800981e <st_int8_copy+0xca>
 8009804:	f990 3000 	ldrsb.w	r3, [r0]
 8009808:	3a01      	subs	r2, #1
 800980a:	700b      	strb	r3, [r1, #0]
 800980c:	d007      	beq.n	800981e <st_int8_copy+0xca>
 800980e:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8009812:	2a01      	cmp	r2, #1
 8009814:	704b      	strb	r3, [r1, #1]
 8009816:	d002      	beq.n	800981e <st_int8_copy+0xca>
 8009818:	f990 3002 	ldrsb.w	r3, [r0, #2]
 800981c:	708b      	strb	r3, [r1, #2]
 800981e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009822:	4770      	bx	lr
 8009824:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009828:	460b      	mov	r3, r1
 800982a:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800982e:	4684      	mov	ip, r0
 8009830:	f8dc 8000 	ldr.w	r8, [ip]
 8009834:	3310      	adds	r3, #16
 8009836:	f8dc 7004 	ldr.w	r7, [ip, #4]
 800983a:	f10c 0c10 	add.w	ip, ip, #16
 800983e:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 8009842:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8009846:	f843 8c10 	str.w	r8, [r3, #-16]
 800984a:	f843 7c0c 	str.w	r7, [r3, #-12]
 800984e:	f843 6c08 	str.w	r6, [r3, #-8]
 8009852:	f843 5c04 	str.w	r5, [r3, #-4]
 8009856:	459e      	cmp	lr, r3
 8009858:	d1ea      	bne.n	8009830 <st_int8_copy+0xdc>
 800985a:	e7bd      	b.n	80097d8 <st_int8_copy+0x84>
 800985c:	0893      	lsrs	r3, r2, #2
 800985e:	f002 0203 	and.w	r2, r2, #3
 8009862:	e7bf      	b.n	80097e4 <st_int8_copy+0x90>

08009864 <ai_array_to_buffer_fmt>:
 8009864:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8009868:	2b02      	cmp	r3, #2
 800986a:	d050      	beq.n	800990e <ai_array_to_buffer_fmt+0xaa>
 800986c:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8009870:	4b29      	ldr	r3, [pc, #164]	; (8009918 <ai_array_to_buffer_fmt+0xb4>)
 8009872:	429a      	cmp	r2, r3
 8009874:	d00b      	beq.n	800988e <ai_array_to_buffer_fmt+0x2a>
 8009876:	dc1c      	bgt.n	80098b2 <ai_array_to_buffer_fmt+0x4e>
 8009878:	4b28      	ldr	r3, [pc, #160]	; (800991c <ai_array_to_buffer_fmt+0xb8>)
 800987a:	429a      	cmp	r2, r3
 800987c:	d007      	beq.n	800988e <ai_array_to_buffer_fmt+0x2a>
 800987e:	dd0b      	ble.n	8009898 <ai_array_to_buffer_fmt+0x34>
 8009880:	4b27      	ldr	r3, [pc, #156]	; (8009920 <ai_array_to_buffer_fmt+0xbc>)
 8009882:	429a      	cmp	r2, r3
 8009884:	d003      	beq.n	800988e <ai_array_to_buffer_fmt+0x2a>
 8009886:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800988a:	429a      	cmp	r2, r3
 800988c:	d131      	bne.n	80098f2 <ai_array_to_buffer_fmt+0x8e>
 800988e:	4613      	mov	r3, r2
 8009890:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009894:	4318      	orrs	r0, r3
 8009896:	4770      	bx	lr
 8009898:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800989c:	429a      	cmp	r2, r3
 800989e:	d0f6      	beq.n	800988e <ai_array_to_buffer_fmt+0x2a>
 80098a0:	dd2c      	ble.n	80098fc <ai_array_to_buffer_fmt+0x98>
 80098a2:	4b20      	ldr	r3, [pc, #128]	; (8009924 <ai_array_to_buffer_fmt+0xc0>)
 80098a4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80098a8:	429a      	cmp	r2, r3
 80098aa:	bf18      	it	ne
 80098ac:	2340      	movne	r3, #64	; 0x40
 80098ae:	4318      	orrs	r0, r3
 80098b0:	4770      	bx	lr
 80098b2:	4b1d      	ldr	r3, [pc, #116]	; (8009928 <ai_array_to_buffer_fmt+0xc4>)
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d0ea      	beq.n	800988e <ai_array_to_buffer_fmt+0x2a>
 80098b8:	dd0e      	ble.n	80098d8 <ai_array_to_buffer_fmt+0x74>
 80098ba:	4b1c      	ldr	r3, [pc, #112]	; (800992c <ai_array_to_buffer_fmt+0xc8>)
 80098bc:	429a      	cmp	r2, r3
 80098be:	d0e6      	beq.n	800988e <ai_array_to_buffer_fmt+0x2a>
 80098c0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80098c4:	429a      	cmp	r2, r3
 80098c6:	d0e2      	beq.n	800988e <ai_array_to_buffer_fmt+0x2a>
 80098c8:	4b19      	ldr	r3, [pc, #100]	; (8009930 <ai_array_to_buffer_fmt+0xcc>)
 80098ca:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80098ce:	429a      	cmp	r2, r3
 80098d0:	bf18      	it	ne
 80098d2:	2340      	movne	r3, #64	; 0x40
 80098d4:	4318      	orrs	r0, r3
 80098d6:	4770      	bx	lr
 80098d8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80098dc:	429a      	cmp	r2, r3
 80098de:	d0d6      	beq.n	800988e <ai_array_to_buffer_fmt+0x2a>
 80098e0:	3307      	adds	r3, #7
 80098e2:	429a      	cmp	r2, r3
 80098e4:	d0d3      	beq.n	800988e <ai_array_to_buffer_fmt+0x2a>
 80098e6:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80098ea:	429a      	cmp	r2, r3
 80098ec:	bf18      	it	ne
 80098ee:	2340      	movne	r3, #64	; 0x40
 80098f0:	e7ce      	b.n	8009890 <ai_array_to_buffer_fmt+0x2c>
 80098f2:	4b10      	ldr	r3, [pc, #64]	; (8009934 <ai_array_to_buffer_fmt+0xd0>)
 80098f4:	429a      	cmp	r2, r3
 80098f6:	bf18      	it	ne
 80098f8:	2340      	movne	r3, #64	; 0x40
 80098fa:	e7c9      	b.n	8009890 <ai_array_to_buffer_fmt+0x2c>
 80098fc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009900:	429a      	cmp	r2, r3
 8009902:	d0c4      	beq.n	800988e <ai_array_to_buffer_fmt+0x2a>
 8009904:	3380      	adds	r3, #128	; 0x80
 8009906:	429a      	cmp	r2, r3
 8009908:	bf18      	it	ne
 800990a:	2340      	movne	r3, #64	; 0x40
 800990c:	e7c0      	b.n	8009890 <ai_array_to_buffer_fmt+0x2c>
 800990e:	4b0a      	ldr	r3, [pc, #40]	; (8009938 <ai_array_to_buffer_fmt+0xd4>)
 8009910:	4003      	ands	r3, r0
 8009912:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009916:	e7bb      	b.n	8009890 <ai_array_to_buffer_fmt+0x2c>
 8009918:	00840040 	.word	0x00840040
 800991c:	00040840 	.word	0x00040840
 8009920:	00041040 	.word	0x00041040
 8009924:	00040447 	.word	0x00040447
 8009928:	00840840 	.word	0x00840840
 800992c:	00841040 	.word	0x00841040
 8009930:	0084084f 	.word	0x0084084f
 8009934:	0004084f 	.word	0x0004084f
 8009938:	00803fff 	.word	0x00803fff

0800993c <ai_array_get_byte_size>:
 800993c:	b319      	cbz	r1, 8009986 <ai_array_get_byte_size+0x4a>
 800993e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009942:	f3c0 4243 	ubfx	r2, r0, #17, #4
 8009946:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800994a:	11c0      	asrs	r0, r0, #7
 800994c:	fb03 f101 	mul.w	r1, r3, r1
 8009950:	2a04      	cmp	r2, #4
 8009952:	f101 0107 	add.w	r1, r1, #7
 8009956:	f021 0107 	bic.w	r1, r1, #7
 800995a:	fa21 f10c 	lsr.w	r1, r1, ip
 800995e:	d00b      	beq.n	8009978 <ai_array_get_byte_size+0x3c>
 8009960:	2a08      	cmp	r2, #8
 8009962:	d002      	beq.n	800996a <ai_array_get_byte_size+0x2e>
 8009964:	3107      	adds	r1, #7
 8009966:	08c8      	lsrs	r0, r1, #3
 8009968:	4770      	bx	lr
 800996a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800996e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8009972:	3107      	adds	r1, #7
 8009974:	08c8      	lsrs	r0, r1, #3
 8009976:	4770      	bx	lr
 8009978:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800997c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8009980:	3107      	adds	r1, #7
 8009982:	08c8      	lsrs	r0, r1, #3
 8009984:	4770      	bx	lr
 8009986:	4608      	mov	r0, r1
 8009988:	4770      	bx	lr
 800998a:	bf00      	nop

0800998c <ai_array_get_data_byte_size>:
 800998c:	b161      	cbz	r1, 80099a8 <ai_array_get_data_byte_size+0x1c>
 800998e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009992:	f3c0 5241 	ubfx	r2, r0, #21, #2
 8009996:	fb03 f101 	mul.w	r1, r3, r1
 800999a:	1dc8      	adds	r0, r1, #7
 800999c:	f020 0007 	bic.w	r0, r0, #7
 80099a0:	40d0      	lsrs	r0, r2
 80099a2:	3007      	adds	r0, #7
 80099a4:	08c0      	lsrs	r0, r0, #3
 80099a6:	4770      	bx	lr
 80099a8:	4608      	mov	r0, r1
 80099aa:	4770      	bx	lr

080099ac <malloc>:
 80099ac:	4b02      	ldr	r3, [pc, #8]	; (80099b8 <malloc+0xc>)
 80099ae:	4601      	mov	r1, r0
 80099b0:	6818      	ldr	r0, [r3, #0]
 80099b2:	f000 b823 	b.w	80099fc <_malloc_r>
 80099b6:	bf00      	nop
 80099b8:	20000604 	.word	0x20000604

080099bc <sbrk_aligned>:
 80099bc:	b570      	push	{r4, r5, r6, lr}
 80099be:	4e0e      	ldr	r6, [pc, #56]	; (80099f8 <sbrk_aligned+0x3c>)
 80099c0:	460c      	mov	r4, r1
 80099c2:	6831      	ldr	r1, [r6, #0]
 80099c4:	4605      	mov	r5, r0
 80099c6:	b911      	cbnz	r1, 80099ce <sbrk_aligned+0x12>
 80099c8:	f000 fe26 	bl	800a618 <_sbrk_r>
 80099cc:	6030      	str	r0, [r6, #0]
 80099ce:	4621      	mov	r1, r4
 80099d0:	4628      	mov	r0, r5
 80099d2:	f000 fe21 	bl	800a618 <_sbrk_r>
 80099d6:	1c43      	adds	r3, r0, #1
 80099d8:	d00a      	beq.n	80099f0 <sbrk_aligned+0x34>
 80099da:	1cc4      	adds	r4, r0, #3
 80099dc:	f024 0403 	bic.w	r4, r4, #3
 80099e0:	42a0      	cmp	r0, r4
 80099e2:	d007      	beq.n	80099f4 <sbrk_aligned+0x38>
 80099e4:	1a21      	subs	r1, r4, r0
 80099e6:	4628      	mov	r0, r5
 80099e8:	f000 fe16 	bl	800a618 <_sbrk_r>
 80099ec:	3001      	adds	r0, #1
 80099ee:	d101      	bne.n	80099f4 <sbrk_aligned+0x38>
 80099f0:	f04f 34ff 	mov.w	r4, #4294967295
 80099f4:	4620      	mov	r0, r4
 80099f6:	bd70      	pop	{r4, r5, r6, pc}
 80099f8:	20001028 	.word	0x20001028

080099fc <_malloc_r>:
 80099fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009a00:	1ccd      	adds	r5, r1, #3
 8009a02:	f025 0503 	bic.w	r5, r5, #3
 8009a06:	3508      	adds	r5, #8
 8009a08:	2d0c      	cmp	r5, #12
 8009a0a:	bf38      	it	cc
 8009a0c:	250c      	movcc	r5, #12
 8009a0e:	2d00      	cmp	r5, #0
 8009a10:	4607      	mov	r7, r0
 8009a12:	db01      	blt.n	8009a18 <_malloc_r+0x1c>
 8009a14:	42a9      	cmp	r1, r5
 8009a16:	d905      	bls.n	8009a24 <_malloc_r+0x28>
 8009a18:	230c      	movs	r3, #12
 8009a1a:	603b      	str	r3, [r7, #0]
 8009a1c:	2600      	movs	r6, #0
 8009a1e:	4630      	mov	r0, r6
 8009a20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009a24:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009af8 <_malloc_r+0xfc>
 8009a28:	f000 f868 	bl	8009afc <__malloc_lock>
 8009a2c:	f8d8 3000 	ldr.w	r3, [r8]
 8009a30:	461c      	mov	r4, r3
 8009a32:	bb5c      	cbnz	r4, 8009a8c <_malloc_r+0x90>
 8009a34:	4629      	mov	r1, r5
 8009a36:	4638      	mov	r0, r7
 8009a38:	f7ff ffc0 	bl	80099bc <sbrk_aligned>
 8009a3c:	1c43      	adds	r3, r0, #1
 8009a3e:	4604      	mov	r4, r0
 8009a40:	d155      	bne.n	8009aee <_malloc_r+0xf2>
 8009a42:	f8d8 4000 	ldr.w	r4, [r8]
 8009a46:	4626      	mov	r6, r4
 8009a48:	2e00      	cmp	r6, #0
 8009a4a:	d145      	bne.n	8009ad8 <_malloc_r+0xdc>
 8009a4c:	2c00      	cmp	r4, #0
 8009a4e:	d048      	beq.n	8009ae2 <_malloc_r+0xe6>
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	4631      	mov	r1, r6
 8009a54:	4638      	mov	r0, r7
 8009a56:	eb04 0903 	add.w	r9, r4, r3
 8009a5a:	f000 fddd 	bl	800a618 <_sbrk_r>
 8009a5e:	4581      	cmp	r9, r0
 8009a60:	d13f      	bne.n	8009ae2 <_malloc_r+0xe6>
 8009a62:	6821      	ldr	r1, [r4, #0]
 8009a64:	1a6d      	subs	r5, r5, r1
 8009a66:	4629      	mov	r1, r5
 8009a68:	4638      	mov	r0, r7
 8009a6a:	f7ff ffa7 	bl	80099bc <sbrk_aligned>
 8009a6e:	3001      	adds	r0, #1
 8009a70:	d037      	beq.n	8009ae2 <_malloc_r+0xe6>
 8009a72:	6823      	ldr	r3, [r4, #0]
 8009a74:	442b      	add	r3, r5
 8009a76:	6023      	str	r3, [r4, #0]
 8009a78:	f8d8 3000 	ldr.w	r3, [r8]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d038      	beq.n	8009af2 <_malloc_r+0xf6>
 8009a80:	685a      	ldr	r2, [r3, #4]
 8009a82:	42a2      	cmp	r2, r4
 8009a84:	d12b      	bne.n	8009ade <_malloc_r+0xe2>
 8009a86:	2200      	movs	r2, #0
 8009a88:	605a      	str	r2, [r3, #4]
 8009a8a:	e00f      	b.n	8009aac <_malloc_r+0xb0>
 8009a8c:	6822      	ldr	r2, [r4, #0]
 8009a8e:	1b52      	subs	r2, r2, r5
 8009a90:	d41f      	bmi.n	8009ad2 <_malloc_r+0xd6>
 8009a92:	2a0b      	cmp	r2, #11
 8009a94:	d917      	bls.n	8009ac6 <_malloc_r+0xca>
 8009a96:	1961      	adds	r1, r4, r5
 8009a98:	42a3      	cmp	r3, r4
 8009a9a:	6025      	str	r5, [r4, #0]
 8009a9c:	bf18      	it	ne
 8009a9e:	6059      	strne	r1, [r3, #4]
 8009aa0:	6863      	ldr	r3, [r4, #4]
 8009aa2:	bf08      	it	eq
 8009aa4:	f8c8 1000 	streq.w	r1, [r8]
 8009aa8:	5162      	str	r2, [r4, r5]
 8009aaa:	604b      	str	r3, [r1, #4]
 8009aac:	4638      	mov	r0, r7
 8009aae:	f104 060b 	add.w	r6, r4, #11
 8009ab2:	f000 f829 	bl	8009b08 <__malloc_unlock>
 8009ab6:	f026 0607 	bic.w	r6, r6, #7
 8009aba:	1d23      	adds	r3, r4, #4
 8009abc:	1af2      	subs	r2, r6, r3
 8009abe:	d0ae      	beq.n	8009a1e <_malloc_r+0x22>
 8009ac0:	1b9b      	subs	r3, r3, r6
 8009ac2:	50a3      	str	r3, [r4, r2]
 8009ac4:	e7ab      	b.n	8009a1e <_malloc_r+0x22>
 8009ac6:	42a3      	cmp	r3, r4
 8009ac8:	6862      	ldr	r2, [r4, #4]
 8009aca:	d1dd      	bne.n	8009a88 <_malloc_r+0x8c>
 8009acc:	f8c8 2000 	str.w	r2, [r8]
 8009ad0:	e7ec      	b.n	8009aac <_malloc_r+0xb0>
 8009ad2:	4623      	mov	r3, r4
 8009ad4:	6864      	ldr	r4, [r4, #4]
 8009ad6:	e7ac      	b.n	8009a32 <_malloc_r+0x36>
 8009ad8:	4634      	mov	r4, r6
 8009ada:	6876      	ldr	r6, [r6, #4]
 8009adc:	e7b4      	b.n	8009a48 <_malloc_r+0x4c>
 8009ade:	4613      	mov	r3, r2
 8009ae0:	e7cc      	b.n	8009a7c <_malloc_r+0x80>
 8009ae2:	230c      	movs	r3, #12
 8009ae4:	603b      	str	r3, [r7, #0]
 8009ae6:	4638      	mov	r0, r7
 8009ae8:	f000 f80e 	bl	8009b08 <__malloc_unlock>
 8009aec:	e797      	b.n	8009a1e <_malloc_r+0x22>
 8009aee:	6025      	str	r5, [r4, #0]
 8009af0:	e7dc      	b.n	8009aac <_malloc_r+0xb0>
 8009af2:	605b      	str	r3, [r3, #4]
 8009af4:	deff      	udf	#255	; 0xff
 8009af6:	bf00      	nop
 8009af8:	20001024 	.word	0x20001024

08009afc <__malloc_lock>:
 8009afc:	4801      	ldr	r0, [pc, #4]	; (8009b04 <__malloc_lock+0x8>)
 8009afe:	f000 bdd7 	b.w	800a6b0 <__retarget_lock_acquire_recursive>
 8009b02:	bf00      	nop
 8009b04:	2000116c 	.word	0x2000116c

08009b08 <__malloc_unlock>:
 8009b08:	4801      	ldr	r0, [pc, #4]	; (8009b10 <__malloc_unlock+0x8>)
 8009b0a:	f000 bdd2 	b.w	800a6b2 <__retarget_lock_release_recursive>
 8009b0e:	bf00      	nop
 8009b10:	2000116c 	.word	0x2000116c

08009b14 <__cvt>:
 8009b14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009b16:	ed2d 8b02 	vpush	{d8}
 8009b1a:	eeb0 8b40 	vmov.f64	d8, d0
 8009b1e:	b085      	sub	sp, #20
 8009b20:	4617      	mov	r7, r2
 8009b22:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8009b24:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8009b26:	ee18 2a90 	vmov	r2, s17
 8009b2a:	f025 0520 	bic.w	r5, r5, #32
 8009b2e:	2a00      	cmp	r2, #0
 8009b30:	bfb6      	itet	lt
 8009b32:	222d      	movlt	r2, #45	; 0x2d
 8009b34:	2200      	movge	r2, #0
 8009b36:	eeb1 8b40 	vneglt.f64	d8, d0
 8009b3a:	2d46      	cmp	r5, #70	; 0x46
 8009b3c:	460c      	mov	r4, r1
 8009b3e:	701a      	strb	r2, [r3, #0]
 8009b40:	d004      	beq.n	8009b4c <__cvt+0x38>
 8009b42:	2d45      	cmp	r5, #69	; 0x45
 8009b44:	d100      	bne.n	8009b48 <__cvt+0x34>
 8009b46:	3401      	adds	r4, #1
 8009b48:	2102      	movs	r1, #2
 8009b4a:	e000      	b.n	8009b4e <__cvt+0x3a>
 8009b4c:	2103      	movs	r1, #3
 8009b4e:	ab03      	add	r3, sp, #12
 8009b50:	9301      	str	r3, [sp, #4]
 8009b52:	ab02      	add	r3, sp, #8
 8009b54:	9300      	str	r3, [sp, #0]
 8009b56:	4622      	mov	r2, r4
 8009b58:	4633      	mov	r3, r6
 8009b5a:	eeb0 0b48 	vmov.f64	d0, d8
 8009b5e:	f000 fe3f 	bl	800a7e0 <_dtoa_r>
 8009b62:	2d47      	cmp	r5, #71	; 0x47
 8009b64:	d101      	bne.n	8009b6a <__cvt+0x56>
 8009b66:	07fb      	lsls	r3, r7, #31
 8009b68:	d51a      	bpl.n	8009ba0 <__cvt+0x8c>
 8009b6a:	2d46      	cmp	r5, #70	; 0x46
 8009b6c:	eb00 0204 	add.w	r2, r0, r4
 8009b70:	d10c      	bne.n	8009b8c <__cvt+0x78>
 8009b72:	7803      	ldrb	r3, [r0, #0]
 8009b74:	2b30      	cmp	r3, #48	; 0x30
 8009b76:	d107      	bne.n	8009b88 <__cvt+0x74>
 8009b78:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009b7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b80:	bf1c      	itt	ne
 8009b82:	f1c4 0401 	rsbne	r4, r4, #1
 8009b86:	6034      	strne	r4, [r6, #0]
 8009b88:	6833      	ldr	r3, [r6, #0]
 8009b8a:	441a      	add	r2, r3
 8009b8c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8009b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b94:	bf08      	it	eq
 8009b96:	9203      	streq	r2, [sp, #12]
 8009b98:	2130      	movs	r1, #48	; 0x30
 8009b9a:	9b03      	ldr	r3, [sp, #12]
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d307      	bcc.n	8009bb0 <__cvt+0x9c>
 8009ba0:	9b03      	ldr	r3, [sp, #12]
 8009ba2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009ba4:	1a1b      	subs	r3, r3, r0
 8009ba6:	6013      	str	r3, [r2, #0]
 8009ba8:	b005      	add	sp, #20
 8009baa:	ecbd 8b02 	vpop	{d8}
 8009bae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bb0:	1c5c      	adds	r4, r3, #1
 8009bb2:	9403      	str	r4, [sp, #12]
 8009bb4:	7019      	strb	r1, [r3, #0]
 8009bb6:	e7f0      	b.n	8009b9a <__cvt+0x86>

08009bb8 <__exponent>:
 8009bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009bba:	4603      	mov	r3, r0
 8009bbc:	2900      	cmp	r1, #0
 8009bbe:	bfb8      	it	lt
 8009bc0:	4249      	neglt	r1, r1
 8009bc2:	f803 2b02 	strb.w	r2, [r3], #2
 8009bc6:	bfb4      	ite	lt
 8009bc8:	222d      	movlt	r2, #45	; 0x2d
 8009bca:	222b      	movge	r2, #43	; 0x2b
 8009bcc:	2909      	cmp	r1, #9
 8009bce:	7042      	strb	r2, [r0, #1]
 8009bd0:	dd2a      	ble.n	8009c28 <__exponent+0x70>
 8009bd2:	f10d 0207 	add.w	r2, sp, #7
 8009bd6:	4617      	mov	r7, r2
 8009bd8:	260a      	movs	r6, #10
 8009bda:	4694      	mov	ip, r2
 8009bdc:	fb91 f5f6 	sdiv	r5, r1, r6
 8009be0:	fb06 1415 	mls	r4, r6, r5, r1
 8009be4:	3430      	adds	r4, #48	; 0x30
 8009be6:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009bea:	460c      	mov	r4, r1
 8009bec:	2c63      	cmp	r4, #99	; 0x63
 8009bee:	f102 32ff 	add.w	r2, r2, #4294967295
 8009bf2:	4629      	mov	r1, r5
 8009bf4:	dcf1      	bgt.n	8009bda <__exponent+0x22>
 8009bf6:	3130      	adds	r1, #48	; 0x30
 8009bf8:	f1ac 0402 	sub.w	r4, ip, #2
 8009bfc:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009c00:	1c41      	adds	r1, r0, #1
 8009c02:	4622      	mov	r2, r4
 8009c04:	42ba      	cmp	r2, r7
 8009c06:	d30a      	bcc.n	8009c1e <__exponent+0x66>
 8009c08:	f10d 0209 	add.w	r2, sp, #9
 8009c0c:	eba2 020c 	sub.w	r2, r2, ip
 8009c10:	42bc      	cmp	r4, r7
 8009c12:	bf88      	it	hi
 8009c14:	2200      	movhi	r2, #0
 8009c16:	4413      	add	r3, r2
 8009c18:	1a18      	subs	r0, r3, r0
 8009c1a:	b003      	add	sp, #12
 8009c1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c1e:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009c22:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009c26:	e7ed      	b.n	8009c04 <__exponent+0x4c>
 8009c28:	2330      	movs	r3, #48	; 0x30
 8009c2a:	3130      	adds	r1, #48	; 0x30
 8009c2c:	7083      	strb	r3, [r0, #2]
 8009c2e:	70c1      	strb	r1, [r0, #3]
 8009c30:	1d03      	adds	r3, r0, #4
 8009c32:	e7f1      	b.n	8009c18 <__exponent+0x60>
 8009c34:	0000      	movs	r0, r0
	...

08009c38 <_printf_float>:
 8009c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c3c:	b08b      	sub	sp, #44	; 0x2c
 8009c3e:	460c      	mov	r4, r1
 8009c40:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8009c44:	4616      	mov	r6, r2
 8009c46:	461f      	mov	r7, r3
 8009c48:	4605      	mov	r5, r0
 8009c4a:	f000 fcad 	bl	800a5a8 <_localeconv_r>
 8009c4e:	f8d0 b000 	ldr.w	fp, [r0]
 8009c52:	4658      	mov	r0, fp
 8009c54:	f7f6 fb44 	bl	80002e0 <strlen>
 8009c58:	2300      	movs	r3, #0
 8009c5a:	9308      	str	r3, [sp, #32]
 8009c5c:	f8d8 3000 	ldr.w	r3, [r8]
 8009c60:	f894 9018 	ldrb.w	r9, [r4, #24]
 8009c64:	6822      	ldr	r2, [r4, #0]
 8009c66:	3307      	adds	r3, #7
 8009c68:	f023 0307 	bic.w	r3, r3, #7
 8009c6c:	f103 0108 	add.w	r1, r3, #8
 8009c70:	f8c8 1000 	str.w	r1, [r8]
 8009c74:	ed93 0b00 	vldr	d0, [r3]
 8009c78:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8009ed8 <_printf_float+0x2a0>
 8009c7c:	eeb0 7bc0 	vabs.f64	d7, d0
 8009c80:	eeb4 7b46 	vcmp.f64	d7, d6
 8009c84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c88:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8009c8c:	4682      	mov	sl, r0
 8009c8e:	dd24      	ble.n	8009cda <_printf_float+0xa2>
 8009c90:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8009c94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c98:	d502      	bpl.n	8009ca0 <_printf_float+0x68>
 8009c9a:	232d      	movs	r3, #45	; 0x2d
 8009c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ca0:	498f      	ldr	r1, [pc, #572]	; (8009ee0 <_printf_float+0x2a8>)
 8009ca2:	4b90      	ldr	r3, [pc, #576]	; (8009ee4 <_printf_float+0x2ac>)
 8009ca4:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8009ca8:	bf94      	ite	ls
 8009caa:	4688      	movls	r8, r1
 8009cac:	4698      	movhi	r8, r3
 8009cae:	2303      	movs	r3, #3
 8009cb0:	6123      	str	r3, [r4, #16]
 8009cb2:	f022 0204 	bic.w	r2, r2, #4
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	6022      	str	r2, [r4, #0]
 8009cba:	9304      	str	r3, [sp, #16]
 8009cbc:	9700      	str	r7, [sp, #0]
 8009cbe:	4633      	mov	r3, r6
 8009cc0:	aa09      	add	r2, sp, #36	; 0x24
 8009cc2:	4621      	mov	r1, r4
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	f000 f9d1 	bl	800a06c <_printf_common>
 8009cca:	3001      	adds	r0, #1
 8009ccc:	f040 808a 	bne.w	8009de4 <_printf_float+0x1ac>
 8009cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8009cd4:	b00b      	add	sp, #44	; 0x2c
 8009cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cda:	eeb4 0b40 	vcmp.f64	d0, d0
 8009cde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ce2:	d709      	bvc.n	8009cf8 <_printf_float+0xc0>
 8009ce4:	ee10 3a90 	vmov	r3, s1
 8009ce8:	2b00      	cmp	r3, #0
 8009cea:	bfbc      	itt	lt
 8009cec:	232d      	movlt	r3, #45	; 0x2d
 8009cee:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009cf2:	497d      	ldr	r1, [pc, #500]	; (8009ee8 <_printf_float+0x2b0>)
 8009cf4:	4b7d      	ldr	r3, [pc, #500]	; (8009eec <_printf_float+0x2b4>)
 8009cf6:	e7d5      	b.n	8009ca4 <_printf_float+0x6c>
 8009cf8:	6863      	ldr	r3, [r4, #4]
 8009cfa:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009cfe:	9104      	str	r1, [sp, #16]
 8009d00:	1c59      	adds	r1, r3, #1
 8009d02:	d13c      	bne.n	8009d7e <_printf_float+0x146>
 8009d04:	2306      	movs	r3, #6
 8009d06:	6063      	str	r3, [r4, #4]
 8009d08:	2300      	movs	r3, #0
 8009d0a:	9303      	str	r3, [sp, #12]
 8009d0c:	ab08      	add	r3, sp, #32
 8009d0e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8009d12:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009d16:	ab07      	add	r3, sp, #28
 8009d18:	6861      	ldr	r1, [r4, #4]
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	6022      	str	r2, [r4, #0]
 8009d1e:	f10d 031b 	add.w	r3, sp, #27
 8009d22:	4628      	mov	r0, r5
 8009d24:	f7ff fef6 	bl	8009b14 <__cvt>
 8009d28:	9b04      	ldr	r3, [sp, #16]
 8009d2a:	9907      	ldr	r1, [sp, #28]
 8009d2c:	2b47      	cmp	r3, #71	; 0x47
 8009d2e:	4680      	mov	r8, r0
 8009d30:	d108      	bne.n	8009d44 <_printf_float+0x10c>
 8009d32:	1cc8      	adds	r0, r1, #3
 8009d34:	db02      	blt.n	8009d3c <_printf_float+0x104>
 8009d36:	6863      	ldr	r3, [r4, #4]
 8009d38:	4299      	cmp	r1, r3
 8009d3a:	dd41      	ble.n	8009dc0 <_printf_float+0x188>
 8009d3c:	f1a9 0902 	sub.w	r9, r9, #2
 8009d40:	fa5f f989 	uxtb.w	r9, r9
 8009d44:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009d48:	d820      	bhi.n	8009d8c <_printf_float+0x154>
 8009d4a:	3901      	subs	r1, #1
 8009d4c:	464a      	mov	r2, r9
 8009d4e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009d52:	9107      	str	r1, [sp, #28]
 8009d54:	f7ff ff30 	bl	8009bb8 <__exponent>
 8009d58:	9a08      	ldr	r2, [sp, #32]
 8009d5a:	9004      	str	r0, [sp, #16]
 8009d5c:	1813      	adds	r3, r2, r0
 8009d5e:	2a01      	cmp	r2, #1
 8009d60:	6123      	str	r3, [r4, #16]
 8009d62:	dc02      	bgt.n	8009d6a <_printf_float+0x132>
 8009d64:	6822      	ldr	r2, [r4, #0]
 8009d66:	07d2      	lsls	r2, r2, #31
 8009d68:	d501      	bpl.n	8009d6e <_printf_float+0x136>
 8009d6a:	3301      	adds	r3, #1
 8009d6c:	6123      	str	r3, [r4, #16]
 8009d6e:	f89d 301b 	ldrb.w	r3, [sp, #27]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d0a2      	beq.n	8009cbc <_printf_float+0x84>
 8009d76:	232d      	movs	r3, #45	; 0x2d
 8009d78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009d7c:	e79e      	b.n	8009cbc <_printf_float+0x84>
 8009d7e:	9904      	ldr	r1, [sp, #16]
 8009d80:	2947      	cmp	r1, #71	; 0x47
 8009d82:	d1c1      	bne.n	8009d08 <_printf_float+0xd0>
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d1bf      	bne.n	8009d08 <_printf_float+0xd0>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	e7bc      	b.n	8009d06 <_printf_float+0xce>
 8009d8c:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009d90:	d118      	bne.n	8009dc4 <_printf_float+0x18c>
 8009d92:	2900      	cmp	r1, #0
 8009d94:	6863      	ldr	r3, [r4, #4]
 8009d96:	dd0b      	ble.n	8009db0 <_printf_float+0x178>
 8009d98:	6121      	str	r1, [r4, #16]
 8009d9a:	b913      	cbnz	r3, 8009da2 <_printf_float+0x16a>
 8009d9c:	6822      	ldr	r2, [r4, #0]
 8009d9e:	07d0      	lsls	r0, r2, #31
 8009da0:	d502      	bpl.n	8009da8 <_printf_float+0x170>
 8009da2:	3301      	adds	r3, #1
 8009da4:	440b      	add	r3, r1
 8009da6:	6123      	str	r3, [r4, #16]
 8009da8:	2300      	movs	r3, #0
 8009daa:	65a1      	str	r1, [r4, #88]	; 0x58
 8009dac:	9304      	str	r3, [sp, #16]
 8009dae:	e7de      	b.n	8009d6e <_printf_float+0x136>
 8009db0:	b913      	cbnz	r3, 8009db8 <_printf_float+0x180>
 8009db2:	6822      	ldr	r2, [r4, #0]
 8009db4:	07d2      	lsls	r2, r2, #31
 8009db6:	d501      	bpl.n	8009dbc <_printf_float+0x184>
 8009db8:	3302      	adds	r3, #2
 8009dba:	e7f4      	b.n	8009da6 <_printf_float+0x16e>
 8009dbc:	2301      	movs	r3, #1
 8009dbe:	e7f2      	b.n	8009da6 <_printf_float+0x16e>
 8009dc0:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009dc4:	9b08      	ldr	r3, [sp, #32]
 8009dc6:	4299      	cmp	r1, r3
 8009dc8:	db05      	blt.n	8009dd6 <_printf_float+0x19e>
 8009dca:	6823      	ldr	r3, [r4, #0]
 8009dcc:	6121      	str	r1, [r4, #16]
 8009dce:	07d8      	lsls	r0, r3, #31
 8009dd0:	d5ea      	bpl.n	8009da8 <_printf_float+0x170>
 8009dd2:	1c4b      	adds	r3, r1, #1
 8009dd4:	e7e7      	b.n	8009da6 <_printf_float+0x16e>
 8009dd6:	2900      	cmp	r1, #0
 8009dd8:	bfd4      	ite	le
 8009dda:	f1c1 0202 	rsble	r2, r1, #2
 8009dde:	2201      	movgt	r2, #1
 8009de0:	4413      	add	r3, r2
 8009de2:	e7e0      	b.n	8009da6 <_printf_float+0x16e>
 8009de4:	6823      	ldr	r3, [r4, #0]
 8009de6:	055a      	lsls	r2, r3, #21
 8009de8:	d407      	bmi.n	8009dfa <_printf_float+0x1c2>
 8009dea:	6923      	ldr	r3, [r4, #16]
 8009dec:	4642      	mov	r2, r8
 8009dee:	4631      	mov	r1, r6
 8009df0:	4628      	mov	r0, r5
 8009df2:	47b8      	blx	r7
 8009df4:	3001      	adds	r0, #1
 8009df6:	d12a      	bne.n	8009e4e <_printf_float+0x216>
 8009df8:	e76a      	b.n	8009cd0 <_printf_float+0x98>
 8009dfa:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009dfe:	f240 80e0 	bls.w	8009fc2 <_printf_float+0x38a>
 8009e02:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009e06:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009e0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009e0e:	d133      	bne.n	8009e78 <_printf_float+0x240>
 8009e10:	4a37      	ldr	r2, [pc, #220]	; (8009ef0 <_printf_float+0x2b8>)
 8009e12:	2301      	movs	r3, #1
 8009e14:	4631      	mov	r1, r6
 8009e16:	4628      	mov	r0, r5
 8009e18:	47b8      	blx	r7
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	f43f af58 	beq.w	8009cd0 <_printf_float+0x98>
 8009e20:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009e24:	429a      	cmp	r2, r3
 8009e26:	db02      	blt.n	8009e2e <_printf_float+0x1f6>
 8009e28:	6823      	ldr	r3, [r4, #0]
 8009e2a:	07d8      	lsls	r0, r3, #31
 8009e2c:	d50f      	bpl.n	8009e4e <_printf_float+0x216>
 8009e2e:	4653      	mov	r3, sl
 8009e30:	465a      	mov	r2, fp
 8009e32:	4631      	mov	r1, r6
 8009e34:	4628      	mov	r0, r5
 8009e36:	47b8      	blx	r7
 8009e38:	3001      	adds	r0, #1
 8009e3a:	f43f af49 	beq.w	8009cd0 <_printf_float+0x98>
 8009e3e:	f04f 0800 	mov.w	r8, #0
 8009e42:	f104 091a 	add.w	r9, r4, #26
 8009e46:	9b08      	ldr	r3, [sp, #32]
 8009e48:	3b01      	subs	r3, #1
 8009e4a:	4543      	cmp	r3, r8
 8009e4c:	dc09      	bgt.n	8009e62 <_printf_float+0x22a>
 8009e4e:	6823      	ldr	r3, [r4, #0]
 8009e50:	079b      	lsls	r3, r3, #30
 8009e52:	f100 8106 	bmi.w	800a062 <_printf_float+0x42a>
 8009e56:	68e0      	ldr	r0, [r4, #12]
 8009e58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e5a:	4298      	cmp	r0, r3
 8009e5c:	bfb8      	it	lt
 8009e5e:	4618      	movlt	r0, r3
 8009e60:	e738      	b.n	8009cd4 <_printf_float+0x9c>
 8009e62:	2301      	movs	r3, #1
 8009e64:	464a      	mov	r2, r9
 8009e66:	4631      	mov	r1, r6
 8009e68:	4628      	mov	r0, r5
 8009e6a:	47b8      	blx	r7
 8009e6c:	3001      	adds	r0, #1
 8009e6e:	f43f af2f 	beq.w	8009cd0 <_printf_float+0x98>
 8009e72:	f108 0801 	add.w	r8, r8, #1
 8009e76:	e7e6      	b.n	8009e46 <_printf_float+0x20e>
 8009e78:	9b07      	ldr	r3, [sp, #28]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	dc3a      	bgt.n	8009ef4 <_printf_float+0x2bc>
 8009e7e:	4a1c      	ldr	r2, [pc, #112]	; (8009ef0 <_printf_float+0x2b8>)
 8009e80:	2301      	movs	r3, #1
 8009e82:	4631      	mov	r1, r6
 8009e84:	4628      	mov	r0, r5
 8009e86:	47b8      	blx	r7
 8009e88:	3001      	adds	r0, #1
 8009e8a:	f43f af21 	beq.w	8009cd0 <_printf_float+0x98>
 8009e8e:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009e92:	4313      	orrs	r3, r2
 8009e94:	d102      	bne.n	8009e9c <_printf_float+0x264>
 8009e96:	6823      	ldr	r3, [r4, #0]
 8009e98:	07d9      	lsls	r1, r3, #31
 8009e9a:	d5d8      	bpl.n	8009e4e <_printf_float+0x216>
 8009e9c:	4653      	mov	r3, sl
 8009e9e:	465a      	mov	r2, fp
 8009ea0:	4631      	mov	r1, r6
 8009ea2:	4628      	mov	r0, r5
 8009ea4:	47b8      	blx	r7
 8009ea6:	3001      	adds	r0, #1
 8009ea8:	f43f af12 	beq.w	8009cd0 <_printf_float+0x98>
 8009eac:	f04f 0900 	mov.w	r9, #0
 8009eb0:	f104 0a1a 	add.w	sl, r4, #26
 8009eb4:	9b07      	ldr	r3, [sp, #28]
 8009eb6:	425b      	negs	r3, r3
 8009eb8:	454b      	cmp	r3, r9
 8009eba:	dc01      	bgt.n	8009ec0 <_printf_float+0x288>
 8009ebc:	9b08      	ldr	r3, [sp, #32]
 8009ebe:	e795      	b.n	8009dec <_printf_float+0x1b4>
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	4652      	mov	r2, sl
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	4628      	mov	r0, r5
 8009ec8:	47b8      	blx	r7
 8009eca:	3001      	adds	r0, #1
 8009ecc:	f43f af00 	beq.w	8009cd0 <_printf_float+0x98>
 8009ed0:	f109 0901 	add.w	r9, r9, #1
 8009ed4:	e7ee      	b.n	8009eb4 <_printf_float+0x27c>
 8009ed6:	bf00      	nop
 8009ed8:	ffffffff 	.word	0xffffffff
 8009edc:	7fefffff 	.word	0x7fefffff
 8009ee0:	080115c4 	.word	0x080115c4
 8009ee4:	080115c8 	.word	0x080115c8
 8009ee8:	080115cc 	.word	0x080115cc
 8009eec:	080115d0 	.word	0x080115d0
 8009ef0:	080115d4 	.word	0x080115d4
 8009ef4:	9a08      	ldr	r2, [sp, #32]
 8009ef6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	bfa8      	it	ge
 8009efc:	461a      	movge	r2, r3
 8009efe:	2a00      	cmp	r2, #0
 8009f00:	4691      	mov	r9, r2
 8009f02:	dc38      	bgt.n	8009f76 <_printf_float+0x33e>
 8009f04:	2300      	movs	r3, #0
 8009f06:	9305      	str	r3, [sp, #20]
 8009f08:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f0c:	f104 021a 	add.w	r2, r4, #26
 8009f10:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009f12:	9905      	ldr	r1, [sp, #20]
 8009f14:	9304      	str	r3, [sp, #16]
 8009f16:	eba3 0309 	sub.w	r3, r3, r9
 8009f1a:	428b      	cmp	r3, r1
 8009f1c:	dc33      	bgt.n	8009f86 <_printf_float+0x34e>
 8009f1e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009f22:	429a      	cmp	r2, r3
 8009f24:	db3c      	blt.n	8009fa0 <_printf_float+0x368>
 8009f26:	6823      	ldr	r3, [r4, #0]
 8009f28:	07da      	lsls	r2, r3, #31
 8009f2a:	d439      	bmi.n	8009fa0 <_printf_float+0x368>
 8009f2c:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8009f30:	eba2 0903 	sub.w	r9, r2, r3
 8009f34:	9b04      	ldr	r3, [sp, #16]
 8009f36:	1ad2      	subs	r2, r2, r3
 8009f38:	4591      	cmp	r9, r2
 8009f3a:	bfa8      	it	ge
 8009f3c:	4691      	movge	r9, r2
 8009f3e:	f1b9 0f00 	cmp.w	r9, #0
 8009f42:	dc35      	bgt.n	8009fb0 <_printf_float+0x378>
 8009f44:	f04f 0800 	mov.w	r8, #0
 8009f48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009f4c:	f104 0a1a 	add.w	sl, r4, #26
 8009f50:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8009f54:	1a9b      	subs	r3, r3, r2
 8009f56:	eba3 0309 	sub.w	r3, r3, r9
 8009f5a:	4543      	cmp	r3, r8
 8009f5c:	f77f af77 	ble.w	8009e4e <_printf_float+0x216>
 8009f60:	2301      	movs	r3, #1
 8009f62:	4652      	mov	r2, sl
 8009f64:	4631      	mov	r1, r6
 8009f66:	4628      	mov	r0, r5
 8009f68:	47b8      	blx	r7
 8009f6a:	3001      	adds	r0, #1
 8009f6c:	f43f aeb0 	beq.w	8009cd0 <_printf_float+0x98>
 8009f70:	f108 0801 	add.w	r8, r8, #1
 8009f74:	e7ec      	b.n	8009f50 <_printf_float+0x318>
 8009f76:	4613      	mov	r3, r2
 8009f78:	4631      	mov	r1, r6
 8009f7a:	4642      	mov	r2, r8
 8009f7c:	4628      	mov	r0, r5
 8009f7e:	47b8      	blx	r7
 8009f80:	3001      	adds	r0, #1
 8009f82:	d1bf      	bne.n	8009f04 <_printf_float+0x2cc>
 8009f84:	e6a4      	b.n	8009cd0 <_printf_float+0x98>
 8009f86:	2301      	movs	r3, #1
 8009f88:	4631      	mov	r1, r6
 8009f8a:	4628      	mov	r0, r5
 8009f8c:	9204      	str	r2, [sp, #16]
 8009f8e:	47b8      	blx	r7
 8009f90:	3001      	adds	r0, #1
 8009f92:	f43f ae9d 	beq.w	8009cd0 <_printf_float+0x98>
 8009f96:	9b05      	ldr	r3, [sp, #20]
 8009f98:	9a04      	ldr	r2, [sp, #16]
 8009f9a:	3301      	adds	r3, #1
 8009f9c:	9305      	str	r3, [sp, #20]
 8009f9e:	e7b7      	b.n	8009f10 <_printf_float+0x2d8>
 8009fa0:	4653      	mov	r3, sl
 8009fa2:	465a      	mov	r2, fp
 8009fa4:	4631      	mov	r1, r6
 8009fa6:	4628      	mov	r0, r5
 8009fa8:	47b8      	blx	r7
 8009faa:	3001      	adds	r0, #1
 8009fac:	d1be      	bne.n	8009f2c <_printf_float+0x2f4>
 8009fae:	e68f      	b.n	8009cd0 <_printf_float+0x98>
 8009fb0:	9a04      	ldr	r2, [sp, #16]
 8009fb2:	464b      	mov	r3, r9
 8009fb4:	4442      	add	r2, r8
 8009fb6:	4631      	mov	r1, r6
 8009fb8:	4628      	mov	r0, r5
 8009fba:	47b8      	blx	r7
 8009fbc:	3001      	adds	r0, #1
 8009fbe:	d1c1      	bne.n	8009f44 <_printf_float+0x30c>
 8009fc0:	e686      	b.n	8009cd0 <_printf_float+0x98>
 8009fc2:	9a08      	ldr	r2, [sp, #32]
 8009fc4:	2a01      	cmp	r2, #1
 8009fc6:	dc01      	bgt.n	8009fcc <_printf_float+0x394>
 8009fc8:	07db      	lsls	r3, r3, #31
 8009fca:	d537      	bpl.n	800a03c <_printf_float+0x404>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	4642      	mov	r2, r8
 8009fd0:	4631      	mov	r1, r6
 8009fd2:	4628      	mov	r0, r5
 8009fd4:	47b8      	blx	r7
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	f43f ae7a 	beq.w	8009cd0 <_printf_float+0x98>
 8009fdc:	4653      	mov	r3, sl
 8009fde:	465a      	mov	r2, fp
 8009fe0:	4631      	mov	r1, r6
 8009fe2:	4628      	mov	r0, r5
 8009fe4:	47b8      	blx	r7
 8009fe6:	3001      	adds	r0, #1
 8009fe8:	f43f ae72 	beq.w	8009cd0 <_printf_float+0x98>
 8009fec:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8009ff0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8009ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ff8:	9b08      	ldr	r3, [sp, #32]
 8009ffa:	d01a      	beq.n	800a032 <_printf_float+0x3fa>
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	f108 0201 	add.w	r2, r8, #1
 800a002:	4631      	mov	r1, r6
 800a004:	4628      	mov	r0, r5
 800a006:	47b8      	blx	r7
 800a008:	3001      	adds	r0, #1
 800a00a:	d10e      	bne.n	800a02a <_printf_float+0x3f2>
 800a00c:	e660      	b.n	8009cd0 <_printf_float+0x98>
 800a00e:	2301      	movs	r3, #1
 800a010:	464a      	mov	r2, r9
 800a012:	4631      	mov	r1, r6
 800a014:	4628      	mov	r0, r5
 800a016:	47b8      	blx	r7
 800a018:	3001      	adds	r0, #1
 800a01a:	f43f ae59 	beq.w	8009cd0 <_printf_float+0x98>
 800a01e:	f108 0801 	add.w	r8, r8, #1
 800a022:	9b08      	ldr	r3, [sp, #32]
 800a024:	3b01      	subs	r3, #1
 800a026:	4543      	cmp	r3, r8
 800a028:	dcf1      	bgt.n	800a00e <_printf_float+0x3d6>
 800a02a:	9b04      	ldr	r3, [sp, #16]
 800a02c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a030:	e6dd      	b.n	8009dee <_printf_float+0x1b6>
 800a032:	f04f 0800 	mov.w	r8, #0
 800a036:	f104 091a 	add.w	r9, r4, #26
 800a03a:	e7f2      	b.n	800a022 <_printf_float+0x3ea>
 800a03c:	2301      	movs	r3, #1
 800a03e:	4642      	mov	r2, r8
 800a040:	e7df      	b.n	800a002 <_printf_float+0x3ca>
 800a042:	2301      	movs	r3, #1
 800a044:	464a      	mov	r2, r9
 800a046:	4631      	mov	r1, r6
 800a048:	4628      	mov	r0, r5
 800a04a:	47b8      	blx	r7
 800a04c:	3001      	adds	r0, #1
 800a04e:	f43f ae3f 	beq.w	8009cd0 <_printf_float+0x98>
 800a052:	f108 0801 	add.w	r8, r8, #1
 800a056:	68e3      	ldr	r3, [r4, #12]
 800a058:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a05a:	1a5b      	subs	r3, r3, r1
 800a05c:	4543      	cmp	r3, r8
 800a05e:	dcf0      	bgt.n	800a042 <_printf_float+0x40a>
 800a060:	e6f9      	b.n	8009e56 <_printf_float+0x21e>
 800a062:	f04f 0800 	mov.w	r8, #0
 800a066:	f104 0919 	add.w	r9, r4, #25
 800a06a:	e7f4      	b.n	800a056 <_printf_float+0x41e>

0800a06c <_printf_common>:
 800a06c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a070:	4616      	mov	r6, r2
 800a072:	4699      	mov	r9, r3
 800a074:	688a      	ldr	r2, [r1, #8]
 800a076:	690b      	ldr	r3, [r1, #16]
 800a078:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a07c:	4293      	cmp	r3, r2
 800a07e:	bfb8      	it	lt
 800a080:	4613      	movlt	r3, r2
 800a082:	6033      	str	r3, [r6, #0]
 800a084:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a088:	4607      	mov	r7, r0
 800a08a:	460c      	mov	r4, r1
 800a08c:	b10a      	cbz	r2, 800a092 <_printf_common+0x26>
 800a08e:	3301      	adds	r3, #1
 800a090:	6033      	str	r3, [r6, #0]
 800a092:	6823      	ldr	r3, [r4, #0]
 800a094:	0699      	lsls	r1, r3, #26
 800a096:	bf42      	ittt	mi
 800a098:	6833      	ldrmi	r3, [r6, #0]
 800a09a:	3302      	addmi	r3, #2
 800a09c:	6033      	strmi	r3, [r6, #0]
 800a09e:	6825      	ldr	r5, [r4, #0]
 800a0a0:	f015 0506 	ands.w	r5, r5, #6
 800a0a4:	d106      	bne.n	800a0b4 <_printf_common+0x48>
 800a0a6:	f104 0a19 	add.w	sl, r4, #25
 800a0aa:	68e3      	ldr	r3, [r4, #12]
 800a0ac:	6832      	ldr	r2, [r6, #0]
 800a0ae:	1a9b      	subs	r3, r3, r2
 800a0b0:	42ab      	cmp	r3, r5
 800a0b2:	dc26      	bgt.n	800a102 <_printf_common+0x96>
 800a0b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a0b8:	1e13      	subs	r3, r2, #0
 800a0ba:	6822      	ldr	r2, [r4, #0]
 800a0bc:	bf18      	it	ne
 800a0be:	2301      	movne	r3, #1
 800a0c0:	0692      	lsls	r2, r2, #26
 800a0c2:	d42b      	bmi.n	800a11c <_printf_common+0xb0>
 800a0c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a0c8:	4649      	mov	r1, r9
 800a0ca:	4638      	mov	r0, r7
 800a0cc:	47c0      	blx	r8
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	d01e      	beq.n	800a110 <_printf_common+0xa4>
 800a0d2:	6823      	ldr	r3, [r4, #0]
 800a0d4:	6922      	ldr	r2, [r4, #16]
 800a0d6:	f003 0306 	and.w	r3, r3, #6
 800a0da:	2b04      	cmp	r3, #4
 800a0dc:	bf02      	ittt	eq
 800a0de:	68e5      	ldreq	r5, [r4, #12]
 800a0e0:	6833      	ldreq	r3, [r6, #0]
 800a0e2:	1aed      	subeq	r5, r5, r3
 800a0e4:	68a3      	ldr	r3, [r4, #8]
 800a0e6:	bf0c      	ite	eq
 800a0e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0ec:	2500      	movne	r5, #0
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	bfc4      	itt	gt
 800a0f2:	1a9b      	subgt	r3, r3, r2
 800a0f4:	18ed      	addgt	r5, r5, r3
 800a0f6:	2600      	movs	r6, #0
 800a0f8:	341a      	adds	r4, #26
 800a0fa:	42b5      	cmp	r5, r6
 800a0fc:	d11a      	bne.n	800a134 <_printf_common+0xc8>
 800a0fe:	2000      	movs	r0, #0
 800a100:	e008      	b.n	800a114 <_printf_common+0xa8>
 800a102:	2301      	movs	r3, #1
 800a104:	4652      	mov	r2, sl
 800a106:	4649      	mov	r1, r9
 800a108:	4638      	mov	r0, r7
 800a10a:	47c0      	blx	r8
 800a10c:	3001      	adds	r0, #1
 800a10e:	d103      	bne.n	800a118 <_printf_common+0xac>
 800a110:	f04f 30ff 	mov.w	r0, #4294967295
 800a114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a118:	3501      	adds	r5, #1
 800a11a:	e7c6      	b.n	800a0aa <_printf_common+0x3e>
 800a11c:	18e1      	adds	r1, r4, r3
 800a11e:	1c5a      	adds	r2, r3, #1
 800a120:	2030      	movs	r0, #48	; 0x30
 800a122:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a126:	4422      	add	r2, r4
 800a128:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a12c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a130:	3302      	adds	r3, #2
 800a132:	e7c7      	b.n	800a0c4 <_printf_common+0x58>
 800a134:	2301      	movs	r3, #1
 800a136:	4622      	mov	r2, r4
 800a138:	4649      	mov	r1, r9
 800a13a:	4638      	mov	r0, r7
 800a13c:	47c0      	blx	r8
 800a13e:	3001      	adds	r0, #1
 800a140:	d0e6      	beq.n	800a110 <_printf_common+0xa4>
 800a142:	3601      	adds	r6, #1
 800a144:	e7d9      	b.n	800a0fa <_printf_common+0x8e>
	...

0800a148 <_printf_i>:
 800a148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a14c:	7e0f      	ldrb	r7, [r1, #24]
 800a14e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a150:	2f78      	cmp	r7, #120	; 0x78
 800a152:	4691      	mov	r9, r2
 800a154:	4680      	mov	r8, r0
 800a156:	460c      	mov	r4, r1
 800a158:	469a      	mov	sl, r3
 800a15a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a15e:	d807      	bhi.n	800a170 <_printf_i+0x28>
 800a160:	2f62      	cmp	r7, #98	; 0x62
 800a162:	d80a      	bhi.n	800a17a <_printf_i+0x32>
 800a164:	2f00      	cmp	r7, #0
 800a166:	f000 80d4 	beq.w	800a312 <_printf_i+0x1ca>
 800a16a:	2f58      	cmp	r7, #88	; 0x58
 800a16c:	f000 80c0 	beq.w	800a2f0 <_printf_i+0x1a8>
 800a170:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a174:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a178:	e03a      	b.n	800a1f0 <_printf_i+0xa8>
 800a17a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a17e:	2b15      	cmp	r3, #21
 800a180:	d8f6      	bhi.n	800a170 <_printf_i+0x28>
 800a182:	a101      	add	r1, pc, #4	; (adr r1, 800a188 <_printf_i+0x40>)
 800a184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a188:	0800a1e1 	.word	0x0800a1e1
 800a18c:	0800a1f5 	.word	0x0800a1f5
 800a190:	0800a171 	.word	0x0800a171
 800a194:	0800a171 	.word	0x0800a171
 800a198:	0800a171 	.word	0x0800a171
 800a19c:	0800a171 	.word	0x0800a171
 800a1a0:	0800a1f5 	.word	0x0800a1f5
 800a1a4:	0800a171 	.word	0x0800a171
 800a1a8:	0800a171 	.word	0x0800a171
 800a1ac:	0800a171 	.word	0x0800a171
 800a1b0:	0800a171 	.word	0x0800a171
 800a1b4:	0800a2f9 	.word	0x0800a2f9
 800a1b8:	0800a221 	.word	0x0800a221
 800a1bc:	0800a2b3 	.word	0x0800a2b3
 800a1c0:	0800a171 	.word	0x0800a171
 800a1c4:	0800a171 	.word	0x0800a171
 800a1c8:	0800a31b 	.word	0x0800a31b
 800a1cc:	0800a171 	.word	0x0800a171
 800a1d0:	0800a221 	.word	0x0800a221
 800a1d4:	0800a171 	.word	0x0800a171
 800a1d8:	0800a171 	.word	0x0800a171
 800a1dc:	0800a2bb 	.word	0x0800a2bb
 800a1e0:	682b      	ldr	r3, [r5, #0]
 800a1e2:	1d1a      	adds	r2, r3, #4
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	602a      	str	r2, [r5, #0]
 800a1e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a1ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a1f0:	2301      	movs	r3, #1
 800a1f2:	e09f      	b.n	800a334 <_printf_i+0x1ec>
 800a1f4:	6820      	ldr	r0, [r4, #0]
 800a1f6:	682b      	ldr	r3, [r5, #0]
 800a1f8:	0607      	lsls	r7, r0, #24
 800a1fa:	f103 0104 	add.w	r1, r3, #4
 800a1fe:	6029      	str	r1, [r5, #0]
 800a200:	d501      	bpl.n	800a206 <_printf_i+0xbe>
 800a202:	681e      	ldr	r6, [r3, #0]
 800a204:	e003      	b.n	800a20e <_printf_i+0xc6>
 800a206:	0646      	lsls	r6, r0, #25
 800a208:	d5fb      	bpl.n	800a202 <_printf_i+0xba>
 800a20a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a20e:	2e00      	cmp	r6, #0
 800a210:	da03      	bge.n	800a21a <_printf_i+0xd2>
 800a212:	232d      	movs	r3, #45	; 0x2d
 800a214:	4276      	negs	r6, r6
 800a216:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a21a:	485a      	ldr	r0, [pc, #360]	; (800a384 <_printf_i+0x23c>)
 800a21c:	230a      	movs	r3, #10
 800a21e:	e012      	b.n	800a246 <_printf_i+0xfe>
 800a220:	682b      	ldr	r3, [r5, #0]
 800a222:	6820      	ldr	r0, [r4, #0]
 800a224:	1d19      	adds	r1, r3, #4
 800a226:	6029      	str	r1, [r5, #0]
 800a228:	0605      	lsls	r5, r0, #24
 800a22a:	d501      	bpl.n	800a230 <_printf_i+0xe8>
 800a22c:	681e      	ldr	r6, [r3, #0]
 800a22e:	e002      	b.n	800a236 <_printf_i+0xee>
 800a230:	0641      	lsls	r1, r0, #25
 800a232:	d5fb      	bpl.n	800a22c <_printf_i+0xe4>
 800a234:	881e      	ldrh	r6, [r3, #0]
 800a236:	4853      	ldr	r0, [pc, #332]	; (800a384 <_printf_i+0x23c>)
 800a238:	2f6f      	cmp	r7, #111	; 0x6f
 800a23a:	bf0c      	ite	eq
 800a23c:	2308      	moveq	r3, #8
 800a23e:	230a      	movne	r3, #10
 800a240:	2100      	movs	r1, #0
 800a242:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a246:	6865      	ldr	r5, [r4, #4]
 800a248:	60a5      	str	r5, [r4, #8]
 800a24a:	2d00      	cmp	r5, #0
 800a24c:	bfa2      	ittt	ge
 800a24e:	6821      	ldrge	r1, [r4, #0]
 800a250:	f021 0104 	bicge.w	r1, r1, #4
 800a254:	6021      	strge	r1, [r4, #0]
 800a256:	b90e      	cbnz	r6, 800a25c <_printf_i+0x114>
 800a258:	2d00      	cmp	r5, #0
 800a25a:	d04b      	beq.n	800a2f4 <_printf_i+0x1ac>
 800a25c:	4615      	mov	r5, r2
 800a25e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a262:	fb03 6711 	mls	r7, r3, r1, r6
 800a266:	5dc7      	ldrb	r7, [r0, r7]
 800a268:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a26c:	4637      	mov	r7, r6
 800a26e:	42bb      	cmp	r3, r7
 800a270:	460e      	mov	r6, r1
 800a272:	d9f4      	bls.n	800a25e <_printf_i+0x116>
 800a274:	2b08      	cmp	r3, #8
 800a276:	d10b      	bne.n	800a290 <_printf_i+0x148>
 800a278:	6823      	ldr	r3, [r4, #0]
 800a27a:	07de      	lsls	r6, r3, #31
 800a27c:	d508      	bpl.n	800a290 <_printf_i+0x148>
 800a27e:	6923      	ldr	r3, [r4, #16]
 800a280:	6861      	ldr	r1, [r4, #4]
 800a282:	4299      	cmp	r1, r3
 800a284:	bfde      	ittt	le
 800a286:	2330      	movle	r3, #48	; 0x30
 800a288:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a28c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a290:	1b52      	subs	r2, r2, r5
 800a292:	6122      	str	r2, [r4, #16]
 800a294:	f8cd a000 	str.w	sl, [sp]
 800a298:	464b      	mov	r3, r9
 800a29a:	aa03      	add	r2, sp, #12
 800a29c:	4621      	mov	r1, r4
 800a29e:	4640      	mov	r0, r8
 800a2a0:	f7ff fee4 	bl	800a06c <_printf_common>
 800a2a4:	3001      	adds	r0, #1
 800a2a6:	d14a      	bne.n	800a33e <_printf_i+0x1f6>
 800a2a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2ac:	b004      	add	sp, #16
 800a2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2b2:	6823      	ldr	r3, [r4, #0]
 800a2b4:	f043 0320 	orr.w	r3, r3, #32
 800a2b8:	6023      	str	r3, [r4, #0]
 800a2ba:	4833      	ldr	r0, [pc, #204]	; (800a388 <_printf_i+0x240>)
 800a2bc:	2778      	movs	r7, #120	; 0x78
 800a2be:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a2c2:	6823      	ldr	r3, [r4, #0]
 800a2c4:	6829      	ldr	r1, [r5, #0]
 800a2c6:	061f      	lsls	r7, r3, #24
 800a2c8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a2cc:	d402      	bmi.n	800a2d4 <_printf_i+0x18c>
 800a2ce:	065f      	lsls	r7, r3, #25
 800a2d0:	bf48      	it	mi
 800a2d2:	b2b6      	uxthmi	r6, r6
 800a2d4:	07df      	lsls	r7, r3, #31
 800a2d6:	bf48      	it	mi
 800a2d8:	f043 0320 	orrmi.w	r3, r3, #32
 800a2dc:	6029      	str	r1, [r5, #0]
 800a2de:	bf48      	it	mi
 800a2e0:	6023      	strmi	r3, [r4, #0]
 800a2e2:	b91e      	cbnz	r6, 800a2ec <_printf_i+0x1a4>
 800a2e4:	6823      	ldr	r3, [r4, #0]
 800a2e6:	f023 0320 	bic.w	r3, r3, #32
 800a2ea:	6023      	str	r3, [r4, #0]
 800a2ec:	2310      	movs	r3, #16
 800a2ee:	e7a7      	b.n	800a240 <_printf_i+0xf8>
 800a2f0:	4824      	ldr	r0, [pc, #144]	; (800a384 <_printf_i+0x23c>)
 800a2f2:	e7e4      	b.n	800a2be <_printf_i+0x176>
 800a2f4:	4615      	mov	r5, r2
 800a2f6:	e7bd      	b.n	800a274 <_printf_i+0x12c>
 800a2f8:	682b      	ldr	r3, [r5, #0]
 800a2fa:	6826      	ldr	r6, [r4, #0]
 800a2fc:	6961      	ldr	r1, [r4, #20]
 800a2fe:	1d18      	adds	r0, r3, #4
 800a300:	6028      	str	r0, [r5, #0]
 800a302:	0635      	lsls	r5, r6, #24
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	d501      	bpl.n	800a30c <_printf_i+0x1c4>
 800a308:	6019      	str	r1, [r3, #0]
 800a30a:	e002      	b.n	800a312 <_printf_i+0x1ca>
 800a30c:	0670      	lsls	r0, r6, #25
 800a30e:	d5fb      	bpl.n	800a308 <_printf_i+0x1c0>
 800a310:	8019      	strh	r1, [r3, #0]
 800a312:	2300      	movs	r3, #0
 800a314:	6123      	str	r3, [r4, #16]
 800a316:	4615      	mov	r5, r2
 800a318:	e7bc      	b.n	800a294 <_printf_i+0x14c>
 800a31a:	682b      	ldr	r3, [r5, #0]
 800a31c:	1d1a      	adds	r2, r3, #4
 800a31e:	602a      	str	r2, [r5, #0]
 800a320:	681d      	ldr	r5, [r3, #0]
 800a322:	6862      	ldr	r2, [r4, #4]
 800a324:	2100      	movs	r1, #0
 800a326:	4628      	mov	r0, r5
 800a328:	f7f5 ff8a 	bl	8000240 <memchr>
 800a32c:	b108      	cbz	r0, 800a332 <_printf_i+0x1ea>
 800a32e:	1b40      	subs	r0, r0, r5
 800a330:	6060      	str	r0, [r4, #4]
 800a332:	6863      	ldr	r3, [r4, #4]
 800a334:	6123      	str	r3, [r4, #16]
 800a336:	2300      	movs	r3, #0
 800a338:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a33c:	e7aa      	b.n	800a294 <_printf_i+0x14c>
 800a33e:	6923      	ldr	r3, [r4, #16]
 800a340:	462a      	mov	r2, r5
 800a342:	4649      	mov	r1, r9
 800a344:	4640      	mov	r0, r8
 800a346:	47d0      	blx	sl
 800a348:	3001      	adds	r0, #1
 800a34a:	d0ad      	beq.n	800a2a8 <_printf_i+0x160>
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	079b      	lsls	r3, r3, #30
 800a350:	d413      	bmi.n	800a37a <_printf_i+0x232>
 800a352:	68e0      	ldr	r0, [r4, #12]
 800a354:	9b03      	ldr	r3, [sp, #12]
 800a356:	4298      	cmp	r0, r3
 800a358:	bfb8      	it	lt
 800a35a:	4618      	movlt	r0, r3
 800a35c:	e7a6      	b.n	800a2ac <_printf_i+0x164>
 800a35e:	2301      	movs	r3, #1
 800a360:	4632      	mov	r2, r6
 800a362:	4649      	mov	r1, r9
 800a364:	4640      	mov	r0, r8
 800a366:	47d0      	blx	sl
 800a368:	3001      	adds	r0, #1
 800a36a:	d09d      	beq.n	800a2a8 <_printf_i+0x160>
 800a36c:	3501      	adds	r5, #1
 800a36e:	68e3      	ldr	r3, [r4, #12]
 800a370:	9903      	ldr	r1, [sp, #12]
 800a372:	1a5b      	subs	r3, r3, r1
 800a374:	42ab      	cmp	r3, r5
 800a376:	dcf2      	bgt.n	800a35e <_printf_i+0x216>
 800a378:	e7eb      	b.n	800a352 <_printf_i+0x20a>
 800a37a:	2500      	movs	r5, #0
 800a37c:	f104 0619 	add.w	r6, r4, #25
 800a380:	e7f5      	b.n	800a36e <_printf_i+0x226>
 800a382:	bf00      	nop
 800a384:	080115d6 	.word	0x080115d6
 800a388:	080115e7 	.word	0x080115e7

0800a38c <std>:
 800a38c:	2300      	movs	r3, #0
 800a38e:	b510      	push	{r4, lr}
 800a390:	4604      	mov	r4, r0
 800a392:	e9c0 3300 	strd	r3, r3, [r0]
 800a396:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a39a:	6083      	str	r3, [r0, #8]
 800a39c:	8181      	strh	r1, [r0, #12]
 800a39e:	6643      	str	r3, [r0, #100]	; 0x64
 800a3a0:	81c2      	strh	r2, [r0, #14]
 800a3a2:	6183      	str	r3, [r0, #24]
 800a3a4:	4619      	mov	r1, r3
 800a3a6:	2208      	movs	r2, #8
 800a3a8:	305c      	adds	r0, #92	; 0x5c
 800a3aa:	f000 f8e2 	bl	800a572 <memset>
 800a3ae:	4b05      	ldr	r3, [pc, #20]	; (800a3c4 <std+0x38>)
 800a3b0:	6263      	str	r3, [r4, #36]	; 0x24
 800a3b2:	4b05      	ldr	r3, [pc, #20]	; (800a3c8 <std+0x3c>)
 800a3b4:	62a3      	str	r3, [r4, #40]	; 0x28
 800a3b6:	4b05      	ldr	r3, [pc, #20]	; (800a3cc <std+0x40>)
 800a3b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a3ba:	4b05      	ldr	r3, [pc, #20]	; (800a3d0 <std+0x44>)
 800a3bc:	6224      	str	r4, [r4, #32]
 800a3be:	6323      	str	r3, [r4, #48]	; 0x30
 800a3c0:	bd10      	pop	{r4, pc}
 800a3c2:	bf00      	nop
 800a3c4:	0800a4ed 	.word	0x0800a4ed
 800a3c8:	0800a50f 	.word	0x0800a50f
 800a3cc:	0800a547 	.word	0x0800a547
 800a3d0:	0800a56b 	.word	0x0800a56b

0800a3d4 <stdio_exit_handler>:
 800a3d4:	4a02      	ldr	r2, [pc, #8]	; (800a3e0 <stdio_exit_handler+0xc>)
 800a3d6:	4903      	ldr	r1, [pc, #12]	; (800a3e4 <stdio_exit_handler+0x10>)
 800a3d8:	4803      	ldr	r0, [pc, #12]	; (800a3e8 <stdio_exit_handler+0x14>)
 800a3da:	f000 b869 	b.w	800a4b0 <_fwalk_sglue>
 800a3de:	bf00      	nop
 800a3e0:	200005ac 	.word	0x200005ac
 800a3e4:	0800bb55 	.word	0x0800bb55
 800a3e8:	200005b8 	.word	0x200005b8

0800a3ec <cleanup_stdio>:
 800a3ec:	6841      	ldr	r1, [r0, #4]
 800a3ee:	4b0c      	ldr	r3, [pc, #48]	; (800a420 <cleanup_stdio+0x34>)
 800a3f0:	4299      	cmp	r1, r3
 800a3f2:	b510      	push	{r4, lr}
 800a3f4:	4604      	mov	r4, r0
 800a3f6:	d001      	beq.n	800a3fc <cleanup_stdio+0x10>
 800a3f8:	f001 fbac 	bl	800bb54 <_fflush_r>
 800a3fc:	68a1      	ldr	r1, [r4, #8]
 800a3fe:	4b09      	ldr	r3, [pc, #36]	; (800a424 <cleanup_stdio+0x38>)
 800a400:	4299      	cmp	r1, r3
 800a402:	d002      	beq.n	800a40a <cleanup_stdio+0x1e>
 800a404:	4620      	mov	r0, r4
 800a406:	f001 fba5 	bl	800bb54 <_fflush_r>
 800a40a:	68e1      	ldr	r1, [r4, #12]
 800a40c:	4b06      	ldr	r3, [pc, #24]	; (800a428 <cleanup_stdio+0x3c>)
 800a40e:	4299      	cmp	r1, r3
 800a410:	d004      	beq.n	800a41c <cleanup_stdio+0x30>
 800a412:	4620      	mov	r0, r4
 800a414:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a418:	f001 bb9c 	b.w	800bb54 <_fflush_r>
 800a41c:	bd10      	pop	{r4, pc}
 800a41e:	bf00      	nop
 800a420:	2000102c 	.word	0x2000102c
 800a424:	20001094 	.word	0x20001094
 800a428:	200010fc 	.word	0x200010fc

0800a42c <global_stdio_init.part.0>:
 800a42c:	b510      	push	{r4, lr}
 800a42e:	4b0b      	ldr	r3, [pc, #44]	; (800a45c <global_stdio_init.part.0+0x30>)
 800a430:	4c0b      	ldr	r4, [pc, #44]	; (800a460 <global_stdio_init.part.0+0x34>)
 800a432:	4a0c      	ldr	r2, [pc, #48]	; (800a464 <global_stdio_init.part.0+0x38>)
 800a434:	601a      	str	r2, [r3, #0]
 800a436:	4620      	mov	r0, r4
 800a438:	2200      	movs	r2, #0
 800a43a:	2104      	movs	r1, #4
 800a43c:	f7ff ffa6 	bl	800a38c <std>
 800a440:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a444:	2201      	movs	r2, #1
 800a446:	2109      	movs	r1, #9
 800a448:	f7ff ffa0 	bl	800a38c <std>
 800a44c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a450:	2202      	movs	r2, #2
 800a452:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a456:	2112      	movs	r1, #18
 800a458:	f7ff bf98 	b.w	800a38c <std>
 800a45c:	20001164 	.word	0x20001164
 800a460:	2000102c 	.word	0x2000102c
 800a464:	0800a3d5 	.word	0x0800a3d5

0800a468 <__sfp_lock_acquire>:
 800a468:	4801      	ldr	r0, [pc, #4]	; (800a470 <__sfp_lock_acquire+0x8>)
 800a46a:	f000 b921 	b.w	800a6b0 <__retarget_lock_acquire_recursive>
 800a46e:	bf00      	nop
 800a470:	2000116d 	.word	0x2000116d

0800a474 <__sfp_lock_release>:
 800a474:	4801      	ldr	r0, [pc, #4]	; (800a47c <__sfp_lock_release+0x8>)
 800a476:	f000 b91c 	b.w	800a6b2 <__retarget_lock_release_recursive>
 800a47a:	bf00      	nop
 800a47c:	2000116d 	.word	0x2000116d

0800a480 <__sinit>:
 800a480:	b510      	push	{r4, lr}
 800a482:	4604      	mov	r4, r0
 800a484:	f7ff fff0 	bl	800a468 <__sfp_lock_acquire>
 800a488:	6a23      	ldr	r3, [r4, #32]
 800a48a:	b11b      	cbz	r3, 800a494 <__sinit+0x14>
 800a48c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a490:	f7ff bff0 	b.w	800a474 <__sfp_lock_release>
 800a494:	4b04      	ldr	r3, [pc, #16]	; (800a4a8 <__sinit+0x28>)
 800a496:	6223      	str	r3, [r4, #32]
 800a498:	4b04      	ldr	r3, [pc, #16]	; (800a4ac <__sinit+0x2c>)
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1f5      	bne.n	800a48c <__sinit+0xc>
 800a4a0:	f7ff ffc4 	bl	800a42c <global_stdio_init.part.0>
 800a4a4:	e7f2      	b.n	800a48c <__sinit+0xc>
 800a4a6:	bf00      	nop
 800a4a8:	0800a3ed 	.word	0x0800a3ed
 800a4ac:	20001164 	.word	0x20001164

0800a4b0 <_fwalk_sglue>:
 800a4b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	4688      	mov	r8, r1
 800a4b8:	4614      	mov	r4, r2
 800a4ba:	2600      	movs	r6, #0
 800a4bc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a4c0:	f1b9 0901 	subs.w	r9, r9, #1
 800a4c4:	d505      	bpl.n	800a4d2 <_fwalk_sglue+0x22>
 800a4c6:	6824      	ldr	r4, [r4, #0]
 800a4c8:	2c00      	cmp	r4, #0
 800a4ca:	d1f7      	bne.n	800a4bc <_fwalk_sglue+0xc>
 800a4cc:	4630      	mov	r0, r6
 800a4ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4d2:	89ab      	ldrh	r3, [r5, #12]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d907      	bls.n	800a4e8 <_fwalk_sglue+0x38>
 800a4d8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a4dc:	3301      	adds	r3, #1
 800a4de:	d003      	beq.n	800a4e8 <_fwalk_sglue+0x38>
 800a4e0:	4629      	mov	r1, r5
 800a4e2:	4638      	mov	r0, r7
 800a4e4:	47c0      	blx	r8
 800a4e6:	4306      	orrs	r6, r0
 800a4e8:	3568      	adds	r5, #104	; 0x68
 800a4ea:	e7e9      	b.n	800a4c0 <_fwalk_sglue+0x10>

0800a4ec <__sread>:
 800a4ec:	b510      	push	{r4, lr}
 800a4ee:	460c      	mov	r4, r1
 800a4f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f4:	f000 f87e 	bl	800a5f4 <_read_r>
 800a4f8:	2800      	cmp	r0, #0
 800a4fa:	bfab      	itete	ge
 800a4fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a4fe:	89a3      	ldrhlt	r3, [r4, #12]
 800a500:	181b      	addge	r3, r3, r0
 800a502:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a506:	bfac      	ite	ge
 800a508:	6563      	strge	r3, [r4, #84]	; 0x54
 800a50a:	81a3      	strhlt	r3, [r4, #12]
 800a50c:	bd10      	pop	{r4, pc}

0800a50e <__swrite>:
 800a50e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a512:	461f      	mov	r7, r3
 800a514:	898b      	ldrh	r3, [r1, #12]
 800a516:	05db      	lsls	r3, r3, #23
 800a518:	4605      	mov	r5, r0
 800a51a:	460c      	mov	r4, r1
 800a51c:	4616      	mov	r6, r2
 800a51e:	d505      	bpl.n	800a52c <__swrite+0x1e>
 800a520:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a524:	2302      	movs	r3, #2
 800a526:	2200      	movs	r2, #0
 800a528:	f000 f852 	bl	800a5d0 <_lseek_r>
 800a52c:	89a3      	ldrh	r3, [r4, #12]
 800a52e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a532:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a536:	81a3      	strh	r3, [r4, #12]
 800a538:	4632      	mov	r2, r6
 800a53a:	463b      	mov	r3, r7
 800a53c:	4628      	mov	r0, r5
 800a53e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a542:	f000 b879 	b.w	800a638 <_write_r>

0800a546 <__sseek>:
 800a546:	b510      	push	{r4, lr}
 800a548:	460c      	mov	r4, r1
 800a54a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a54e:	f000 f83f 	bl	800a5d0 <_lseek_r>
 800a552:	1c43      	adds	r3, r0, #1
 800a554:	89a3      	ldrh	r3, [r4, #12]
 800a556:	bf15      	itete	ne
 800a558:	6560      	strne	r0, [r4, #84]	; 0x54
 800a55a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a55e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a562:	81a3      	strheq	r3, [r4, #12]
 800a564:	bf18      	it	ne
 800a566:	81a3      	strhne	r3, [r4, #12]
 800a568:	bd10      	pop	{r4, pc}

0800a56a <__sclose>:
 800a56a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a56e:	f000 b81f 	b.w	800a5b0 <_close_r>

0800a572 <memset>:
 800a572:	4402      	add	r2, r0
 800a574:	4603      	mov	r3, r0
 800a576:	4293      	cmp	r3, r2
 800a578:	d100      	bne.n	800a57c <memset+0xa>
 800a57a:	4770      	bx	lr
 800a57c:	f803 1b01 	strb.w	r1, [r3], #1
 800a580:	e7f9      	b.n	800a576 <memset+0x4>

0800a582 <strncmp>:
 800a582:	b510      	push	{r4, lr}
 800a584:	b16a      	cbz	r2, 800a5a2 <strncmp+0x20>
 800a586:	3901      	subs	r1, #1
 800a588:	1884      	adds	r4, r0, r2
 800a58a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a58e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a592:	429a      	cmp	r2, r3
 800a594:	d103      	bne.n	800a59e <strncmp+0x1c>
 800a596:	42a0      	cmp	r0, r4
 800a598:	d001      	beq.n	800a59e <strncmp+0x1c>
 800a59a:	2a00      	cmp	r2, #0
 800a59c:	d1f5      	bne.n	800a58a <strncmp+0x8>
 800a59e:	1ad0      	subs	r0, r2, r3
 800a5a0:	bd10      	pop	{r4, pc}
 800a5a2:	4610      	mov	r0, r2
 800a5a4:	e7fc      	b.n	800a5a0 <strncmp+0x1e>
	...

0800a5a8 <_localeconv_r>:
 800a5a8:	4800      	ldr	r0, [pc, #0]	; (800a5ac <_localeconv_r+0x4>)
 800a5aa:	4770      	bx	lr
 800a5ac:	200006f8 	.word	0x200006f8

0800a5b0 <_close_r>:
 800a5b0:	b538      	push	{r3, r4, r5, lr}
 800a5b2:	4d06      	ldr	r5, [pc, #24]	; (800a5cc <_close_r+0x1c>)
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	4604      	mov	r4, r0
 800a5b8:	4608      	mov	r0, r1
 800a5ba:	602b      	str	r3, [r5, #0]
 800a5bc:	f001 fe9c 	bl	800c2f8 <_close>
 800a5c0:	1c43      	adds	r3, r0, #1
 800a5c2:	d102      	bne.n	800a5ca <_close_r+0x1a>
 800a5c4:	682b      	ldr	r3, [r5, #0]
 800a5c6:	b103      	cbz	r3, 800a5ca <_close_r+0x1a>
 800a5c8:	6023      	str	r3, [r4, #0]
 800a5ca:	bd38      	pop	{r3, r4, r5, pc}
 800a5cc:	20001168 	.word	0x20001168

0800a5d0 <_lseek_r>:
 800a5d0:	b538      	push	{r3, r4, r5, lr}
 800a5d2:	4d07      	ldr	r5, [pc, #28]	; (800a5f0 <_lseek_r+0x20>)
 800a5d4:	4604      	mov	r4, r0
 800a5d6:	4608      	mov	r0, r1
 800a5d8:	4611      	mov	r1, r2
 800a5da:	2200      	movs	r2, #0
 800a5dc:	602a      	str	r2, [r5, #0]
 800a5de:	461a      	mov	r2, r3
 800a5e0:	f001 feb2 	bl	800c348 <_lseek>
 800a5e4:	1c43      	adds	r3, r0, #1
 800a5e6:	d102      	bne.n	800a5ee <_lseek_r+0x1e>
 800a5e8:	682b      	ldr	r3, [r5, #0]
 800a5ea:	b103      	cbz	r3, 800a5ee <_lseek_r+0x1e>
 800a5ec:	6023      	str	r3, [r4, #0]
 800a5ee:	bd38      	pop	{r3, r4, r5, pc}
 800a5f0:	20001168 	.word	0x20001168

0800a5f4 <_read_r>:
 800a5f4:	b538      	push	{r3, r4, r5, lr}
 800a5f6:	4d07      	ldr	r5, [pc, #28]	; (800a614 <_read_r+0x20>)
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	4608      	mov	r0, r1
 800a5fc:	4611      	mov	r1, r2
 800a5fe:	2200      	movs	r2, #0
 800a600:	602a      	str	r2, [r5, #0]
 800a602:	461a      	mov	r2, r3
 800a604:	f001 fea8 	bl	800c358 <_read>
 800a608:	1c43      	adds	r3, r0, #1
 800a60a:	d102      	bne.n	800a612 <_read_r+0x1e>
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	b103      	cbz	r3, 800a612 <_read_r+0x1e>
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	bd38      	pop	{r3, r4, r5, pc}
 800a614:	20001168 	.word	0x20001168

0800a618 <_sbrk_r>:
 800a618:	b538      	push	{r3, r4, r5, lr}
 800a61a:	4d06      	ldr	r5, [pc, #24]	; (800a634 <_sbrk_r+0x1c>)
 800a61c:	2300      	movs	r3, #0
 800a61e:	4604      	mov	r4, r0
 800a620:	4608      	mov	r0, r1
 800a622:	602b      	str	r3, [r5, #0]
 800a624:	f7f6 fd5a 	bl	80010dc <_sbrk>
 800a628:	1c43      	adds	r3, r0, #1
 800a62a:	d102      	bne.n	800a632 <_sbrk_r+0x1a>
 800a62c:	682b      	ldr	r3, [r5, #0]
 800a62e:	b103      	cbz	r3, 800a632 <_sbrk_r+0x1a>
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	bd38      	pop	{r3, r4, r5, pc}
 800a634:	20001168 	.word	0x20001168

0800a638 <_write_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4d07      	ldr	r5, [pc, #28]	; (800a658 <_write_r+0x20>)
 800a63c:	4604      	mov	r4, r0
 800a63e:	4608      	mov	r0, r1
 800a640:	4611      	mov	r1, r2
 800a642:	2200      	movs	r2, #0
 800a644:	602a      	str	r2, [r5, #0]
 800a646:	461a      	mov	r2, r3
 800a648:	f7f8 fd1c 	bl	8003084 <_write>
 800a64c:	1c43      	adds	r3, r0, #1
 800a64e:	d102      	bne.n	800a656 <_write_r+0x1e>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	b103      	cbz	r3, 800a656 <_write_r+0x1e>
 800a654:	6023      	str	r3, [r4, #0]
 800a656:	bd38      	pop	{r3, r4, r5, pc}
 800a658:	20001168 	.word	0x20001168

0800a65c <__errno>:
 800a65c:	4b01      	ldr	r3, [pc, #4]	; (800a664 <__errno+0x8>)
 800a65e:	6818      	ldr	r0, [r3, #0]
 800a660:	4770      	bx	lr
 800a662:	bf00      	nop
 800a664:	20000604 	.word	0x20000604

0800a668 <__libc_init_array>:
 800a668:	b570      	push	{r4, r5, r6, lr}
 800a66a:	4d0d      	ldr	r5, [pc, #52]	; (800a6a0 <__libc_init_array+0x38>)
 800a66c:	4c0d      	ldr	r4, [pc, #52]	; (800a6a4 <__libc_init_array+0x3c>)
 800a66e:	1b64      	subs	r4, r4, r5
 800a670:	10a4      	asrs	r4, r4, #2
 800a672:	2600      	movs	r6, #0
 800a674:	42a6      	cmp	r6, r4
 800a676:	d109      	bne.n	800a68c <__libc_init_array+0x24>
 800a678:	4d0b      	ldr	r5, [pc, #44]	; (800a6a8 <__libc_init_array+0x40>)
 800a67a:	4c0c      	ldr	r4, [pc, #48]	; (800a6ac <__libc_init_array+0x44>)
 800a67c:	f001 fe76 	bl	800c36c <_init>
 800a680:	1b64      	subs	r4, r4, r5
 800a682:	10a4      	asrs	r4, r4, #2
 800a684:	2600      	movs	r6, #0
 800a686:	42a6      	cmp	r6, r4
 800a688:	d105      	bne.n	800a696 <__libc_init_array+0x2e>
 800a68a:	bd70      	pop	{r4, r5, r6, pc}
 800a68c:	f855 3b04 	ldr.w	r3, [r5], #4
 800a690:	4798      	blx	r3
 800a692:	3601      	adds	r6, #1
 800a694:	e7ee      	b.n	800a674 <__libc_init_array+0xc>
 800a696:	f855 3b04 	ldr.w	r3, [r5], #4
 800a69a:	4798      	blx	r3
 800a69c:	3601      	adds	r6, #1
 800a69e:	e7f2      	b.n	800a686 <__libc_init_array+0x1e>
 800a6a0:	08011a88 	.word	0x08011a88
 800a6a4:	08011a88 	.word	0x08011a88
 800a6a8:	08011a88 	.word	0x08011a88
 800a6ac:	08011a8c 	.word	0x08011a8c

0800a6b0 <__retarget_lock_acquire_recursive>:
 800a6b0:	4770      	bx	lr

0800a6b2 <__retarget_lock_release_recursive>:
 800a6b2:	4770      	bx	lr

0800a6b4 <memcpy>:
 800a6b4:	440a      	add	r2, r1
 800a6b6:	4291      	cmp	r1, r2
 800a6b8:	f100 33ff 	add.w	r3, r0, #4294967295
 800a6bc:	d100      	bne.n	800a6c0 <memcpy+0xc>
 800a6be:	4770      	bx	lr
 800a6c0:	b510      	push	{r4, lr}
 800a6c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a6c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a6ca:	4291      	cmp	r1, r2
 800a6cc:	d1f9      	bne.n	800a6c2 <memcpy+0xe>
 800a6ce:	bd10      	pop	{r4, pc}

0800a6d0 <quorem>:
 800a6d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d4:	6903      	ldr	r3, [r0, #16]
 800a6d6:	690c      	ldr	r4, [r1, #16]
 800a6d8:	42a3      	cmp	r3, r4
 800a6da:	4607      	mov	r7, r0
 800a6dc:	db7e      	blt.n	800a7dc <quorem+0x10c>
 800a6de:	3c01      	subs	r4, #1
 800a6e0:	f101 0814 	add.w	r8, r1, #20
 800a6e4:	f100 0514 	add.w	r5, r0, #20
 800a6e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6ec:	9301      	str	r3, [sp, #4]
 800a6ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6f6:	3301      	adds	r3, #1
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a6fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a702:	fbb2 f6f3 	udiv	r6, r2, r3
 800a706:	d331      	bcc.n	800a76c <quorem+0x9c>
 800a708:	f04f 0e00 	mov.w	lr, #0
 800a70c:	4640      	mov	r0, r8
 800a70e:	46ac      	mov	ip, r5
 800a710:	46f2      	mov	sl, lr
 800a712:	f850 2b04 	ldr.w	r2, [r0], #4
 800a716:	b293      	uxth	r3, r2
 800a718:	fb06 e303 	mla	r3, r6, r3, lr
 800a71c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a720:	0c1a      	lsrs	r2, r3, #16
 800a722:	b29b      	uxth	r3, r3
 800a724:	ebaa 0303 	sub.w	r3, sl, r3
 800a728:	f8dc a000 	ldr.w	sl, [ip]
 800a72c:	fa13 f38a 	uxtah	r3, r3, sl
 800a730:	fb06 220e 	mla	r2, r6, lr, r2
 800a734:	9300      	str	r3, [sp, #0]
 800a736:	9b00      	ldr	r3, [sp, #0]
 800a738:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a73c:	b292      	uxth	r2, r2
 800a73e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a742:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a746:	f8bd 3000 	ldrh.w	r3, [sp]
 800a74a:	4581      	cmp	r9, r0
 800a74c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a750:	f84c 3b04 	str.w	r3, [ip], #4
 800a754:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a758:	d2db      	bcs.n	800a712 <quorem+0x42>
 800a75a:	f855 300b 	ldr.w	r3, [r5, fp]
 800a75e:	b92b      	cbnz	r3, 800a76c <quorem+0x9c>
 800a760:	9b01      	ldr	r3, [sp, #4]
 800a762:	3b04      	subs	r3, #4
 800a764:	429d      	cmp	r5, r3
 800a766:	461a      	mov	r2, r3
 800a768:	d32c      	bcc.n	800a7c4 <quorem+0xf4>
 800a76a:	613c      	str	r4, [r7, #16]
 800a76c:	4638      	mov	r0, r7
 800a76e:	f001 f86b 	bl	800b848 <__mcmp>
 800a772:	2800      	cmp	r0, #0
 800a774:	db22      	blt.n	800a7bc <quorem+0xec>
 800a776:	3601      	adds	r6, #1
 800a778:	4629      	mov	r1, r5
 800a77a:	2000      	movs	r0, #0
 800a77c:	f858 2b04 	ldr.w	r2, [r8], #4
 800a780:	f8d1 c000 	ldr.w	ip, [r1]
 800a784:	b293      	uxth	r3, r2
 800a786:	1ac3      	subs	r3, r0, r3
 800a788:	0c12      	lsrs	r2, r2, #16
 800a78a:	fa13 f38c 	uxtah	r3, r3, ip
 800a78e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a792:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a796:	b29b      	uxth	r3, r3
 800a798:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a79c:	45c1      	cmp	r9, r8
 800a79e:	f841 3b04 	str.w	r3, [r1], #4
 800a7a2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a7a6:	d2e9      	bcs.n	800a77c <quorem+0xac>
 800a7a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a7ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a7b0:	b922      	cbnz	r2, 800a7bc <quorem+0xec>
 800a7b2:	3b04      	subs	r3, #4
 800a7b4:	429d      	cmp	r5, r3
 800a7b6:	461a      	mov	r2, r3
 800a7b8:	d30a      	bcc.n	800a7d0 <quorem+0x100>
 800a7ba:	613c      	str	r4, [r7, #16]
 800a7bc:	4630      	mov	r0, r6
 800a7be:	b003      	add	sp, #12
 800a7c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7c4:	6812      	ldr	r2, [r2, #0]
 800a7c6:	3b04      	subs	r3, #4
 800a7c8:	2a00      	cmp	r2, #0
 800a7ca:	d1ce      	bne.n	800a76a <quorem+0x9a>
 800a7cc:	3c01      	subs	r4, #1
 800a7ce:	e7c9      	b.n	800a764 <quorem+0x94>
 800a7d0:	6812      	ldr	r2, [r2, #0]
 800a7d2:	3b04      	subs	r3, #4
 800a7d4:	2a00      	cmp	r2, #0
 800a7d6:	d1f0      	bne.n	800a7ba <quorem+0xea>
 800a7d8:	3c01      	subs	r4, #1
 800a7da:	e7eb      	b.n	800a7b4 <quorem+0xe4>
 800a7dc:	2000      	movs	r0, #0
 800a7de:	e7ee      	b.n	800a7be <quorem+0xee>

0800a7e0 <_dtoa_r>:
 800a7e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7e4:	ed2d 8b02 	vpush	{d8}
 800a7e8:	69c5      	ldr	r5, [r0, #28]
 800a7ea:	b091      	sub	sp, #68	; 0x44
 800a7ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a7f0:	ec59 8b10 	vmov	r8, r9, d0
 800a7f4:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 800a7f6:	9106      	str	r1, [sp, #24]
 800a7f8:	4606      	mov	r6, r0
 800a7fa:	9208      	str	r2, [sp, #32]
 800a7fc:	930c      	str	r3, [sp, #48]	; 0x30
 800a7fe:	b975      	cbnz	r5, 800a81e <_dtoa_r+0x3e>
 800a800:	2010      	movs	r0, #16
 800a802:	f7f8 fc81 	bl	8003108 <__wrap_malloc>
 800a806:	4602      	mov	r2, r0
 800a808:	61f0      	str	r0, [r6, #28]
 800a80a:	b920      	cbnz	r0, 800a816 <_dtoa_r+0x36>
 800a80c:	4ba6      	ldr	r3, [pc, #664]	; (800aaa8 <_dtoa_r+0x2c8>)
 800a80e:	21ef      	movs	r1, #239	; 0xef
 800a810:	48a6      	ldr	r0, [pc, #664]	; (800aaac <_dtoa_r+0x2cc>)
 800a812:	f001 f9c7 	bl	800bba4 <__assert_func>
 800a816:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a81a:	6005      	str	r5, [r0, #0]
 800a81c:	60c5      	str	r5, [r0, #12]
 800a81e:	69f3      	ldr	r3, [r6, #28]
 800a820:	6819      	ldr	r1, [r3, #0]
 800a822:	b151      	cbz	r1, 800a83a <_dtoa_r+0x5a>
 800a824:	685a      	ldr	r2, [r3, #4]
 800a826:	604a      	str	r2, [r1, #4]
 800a828:	2301      	movs	r3, #1
 800a82a:	4093      	lsls	r3, r2
 800a82c:	608b      	str	r3, [r1, #8]
 800a82e:	4630      	mov	r0, r6
 800a830:	f000 fdce 	bl	800b3d0 <_Bfree>
 800a834:	69f3      	ldr	r3, [r6, #28]
 800a836:	2200      	movs	r2, #0
 800a838:	601a      	str	r2, [r3, #0]
 800a83a:	f1b9 0300 	subs.w	r3, r9, #0
 800a83e:	bfbb      	ittet	lt
 800a840:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a844:	9303      	strlt	r3, [sp, #12]
 800a846:	2300      	movge	r3, #0
 800a848:	2201      	movlt	r2, #1
 800a84a:	bfac      	ite	ge
 800a84c:	6023      	strge	r3, [r4, #0]
 800a84e:	6022      	strlt	r2, [r4, #0]
 800a850:	4b97      	ldr	r3, [pc, #604]	; (800aab0 <_dtoa_r+0x2d0>)
 800a852:	9c03      	ldr	r4, [sp, #12]
 800a854:	43a3      	bics	r3, r4
 800a856:	d11c      	bne.n	800a892 <_dtoa_r+0xb2>
 800a858:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a85a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a85e:	6013      	str	r3, [r2, #0]
 800a860:	f3c4 0313 	ubfx	r3, r4, #0, #20
 800a864:	ea53 0308 	orrs.w	r3, r3, r8
 800a868:	f000 84fb 	beq.w	800b262 <_dtoa_r+0xa82>
 800a86c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a86e:	b963      	cbnz	r3, 800a88a <_dtoa_r+0xaa>
 800a870:	4b90      	ldr	r3, [pc, #576]	; (800aab4 <_dtoa_r+0x2d4>)
 800a872:	e020      	b.n	800a8b6 <_dtoa_r+0xd6>
 800a874:	4b90      	ldr	r3, [pc, #576]	; (800aab8 <_dtoa_r+0x2d8>)
 800a876:	9301      	str	r3, [sp, #4]
 800a878:	3308      	adds	r3, #8
 800a87a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a87c:	6013      	str	r3, [r2, #0]
 800a87e:	9801      	ldr	r0, [sp, #4]
 800a880:	b011      	add	sp, #68	; 0x44
 800a882:	ecbd 8b02 	vpop	{d8}
 800a886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a88a:	4b8a      	ldr	r3, [pc, #552]	; (800aab4 <_dtoa_r+0x2d4>)
 800a88c:	9301      	str	r3, [sp, #4]
 800a88e:	3303      	adds	r3, #3
 800a890:	e7f3      	b.n	800a87a <_dtoa_r+0x9a>
 800a892:	ed9d 8b02 	vldr	d8, [sp, #8]
 800a896:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800a89a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a89e:	d10c      	bne.n	800a8ba <_dtoa_r+0xda>
 800a8a0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	6013      	str	r3, [r2, #0]
 800a8a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f000 84d7 	beq.w	800b25c <_dtoa_r+0xa7c>
 800a8ae:	4b83      	ldr	r3, [pc, #524]	; (800aabc <_dtoa_r+0x2dc>)
 800a8b0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a8b2:	6013      	str	r3, [r2, #0]
 800a8b4:	3b01      	subs	r3, #1
 800a8b6:	9301      	str	r3, [sp, #4]
 800a8b8:	e7e1      	b.n	800a87e <_dtoa_r+0x9e>
 800a8ba:	aa0e      	add	r2, sp, #56	; 0x38
 800a8bc:	a90f      	add	r1, sp, #60	; 0x3c
 800a8be:	4630      	mov	r0, r6
 800a8c0:	eeb0 0b48 	vmov.f64	d0, d8
 800a8c4:	f001 f866 	bl	800b994 <__d2b>
 800a8c8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800a8cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a8ce:	4605      	mov	r5, r0
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d046      	beq.n	800a962 <_dtoa_r+0x182>
 800a8d4:	eeb0 7b48 	vmov.f64	d7, d8
 800a8d8:	ee18 1a90 	vmov	r1, s17
 800a8dc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800a8e0:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 800a8e4:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800a8e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a8ec:	2000      	movs	r0, #0
 800a8ee:	ee07 1a90 	vmov	s15, r1
 800a8f2:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 800a8f6:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800aa90 <_dtoa_r+0x2b0>
 800a8fa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800a8fe:	ed9f 6b66 	vldr	d6, [pc, #408]	; 800aa98 <_dtoa_r+0x2b8>
 800a902:	eea7 6b05 	vfma.f64	d6, d7, d5
 800a906:	ed9f 5b66 	vldr	d5, [pc, #408]	; 800aaa0 <_dtoa_r+0x2c0>
 800a90a:	ee07 3a90 	vmov	s15, r3
 800a90e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800a912:	eeb0 7b46 	vmov.f64	d7, d6
 800a916:	eea4 7b05 	vfma.f64	d7, d4, d5
 800a91a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800a91e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800a922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a926:	ee16 ba90 	vmov	fp, s13
 800a92a:	9009      	str	r0, [sp, #36]	; 0x24
 800a92c:	d508      	bpl.n	800a940 <_dtoa_r+0x160>
 800a92e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800a932:	eeb4 6b47 	vcmp.f64	d6, d7
 800a936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a93a:	bf18      	it	ne
 800a93c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800a940:	f1bb 0f16 	cmp.w	fp, #22
 800a944:	d82b      	bhi.n	800a99e <_dtoa_r+0x1be>
 800a946:	495e      	ldr	r1, [pc, #376]	; (800aac0 <_dtoa_r+0x2e0>)
 800a948:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 800a94c:	ed91 7b00 	vldr	d7, [r1]
 800a950:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800a954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a958:	d501      	bpl.n	800a95e <_dtoa_r+0x17e>
 800a95a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a95e:	2100      	movs	r1, #0
 800a960:	e01e      	b.n	800a9a0 <_dtoa_r+0x1c0>
 800a962:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a964:	4413      	add	r3, r2
 800a966:	f203 4132 	addw	r1, r3, #1074	; 0x432
 800a96a:	2920      	cmp	r1, #32
 800a96c:	bfc1      	itttt	gt
 800a96e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 800a972:	408c      	lslgt	r4, r1
 800a974:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 800a978:	fa28 f101 	lsrgt.w	r1, r8, r1
 800a97c:	bfd6      	itet	le
 800a97e:	f1c1 0120 	rsble	r1, r1, #32
 800a982:	4321      	orrgt	r1, r4
 800a984:	fa08 f101 	lslle.w	r1, r8, r1
 800a988:	ee07 1a90 	vmov	s15, r1
 800a98c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800a990:	3b01      	subs	r3, #1
 800a992:	ee17 1a90 	vmov	r1, s15
 800a996:	2001      	movs	r0, #1
 800a998:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800a99c:	e7a7      	b.n	800a8ee <_dtoa_r+0x10e>
 800a99e:	2101      	movs	r1, #1
 800a9a0:	1ad2      	subs	r2, r2, r3
 800a9a2:	1e53      	subs	r3, r2, #1
 800a9a4:	9305      	str	r3, [sp, #20]
 800a9a6:	bf45      	ittet	mi
 800a9a8:	f1c2 0301 	rsbmi	r3, r2, #1
 800a9ac:	9304      	strmi	r3, [sp, #16]
 800a9ae:	2300      	movpl	r3, #0
 800a9b0:	2300      	movmi	r3, #0
 800a9b2:	bf4c      	ite	mi
 800a9b4:	9305      	strmi	r3, [sp, #20]
 800a9b6:	9304      	strpl	r3, [sp, #16]
 800a9b8:	f1bb 0f00 	cmp.w	fp, #0
 800a9bc:	910b      	str	r1, [sp, #44]	; 0x2c
 800a9be:	db18      	blt.n	800a9f2 <_dtoa_r+0x212>
 800a9c0:	9b05      	ldr	r3, [sp, #20]
 800a9c2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800a9c6:	445b      	add	r3, fp
 800a9c8:	9305      	str	r3, [sp, #20]
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	9a06      	ldr	r2, [sp, #24]
 800a9ce:	2a09      	cmp	r2, #9
 800a9d0:	d848      	bhi.n	800aa64 <_dtoa_r+0x284>
 800a9d2:	2a05      	cmp	r2, #5
 800a9d4:	bfc4      	itt	gt
 800a9d6:	3a04      	subgt	r2, #4
 800a9d8:	9206      	strgt	r2, [sp, #24]
 800a9da:	9a06      	ldr	r2, [sp, #24]
 800a9dc:	f1a2 0202 	sub.w	r2, r2, #2
 800a9e0:	bfcc      	ite	gt
 800a9e2:	2400      	movgt	r4, #0
 800a9e4:	2401      	movle	r4, #1
 800a9e6:	2a03      	cmp	r2, #3
 800a9e8:	d847      	bhi.n	800aa7a <_dtoa_r+0x29a>
 800a9ea:	e8df f002 	tbb	[pc, r2]
 800a9ee:	2d0b      	.short	0x2d0b
 800a9f0:	392b      	.short	0x392b
 800a9f2:	9b04      	ldr	r3, [sp, #16]
 800a9f4:	2200      	movs	r2, #0
 800a9f6:	eba3 030b 	sub.w	r3, r3, fp
 800a9fa:	9304      	str	r3, [sp, #16]
 800a9fc:	920a      	str	r2, [sp, #40]	; 0x28
 800a9fe:	f1cb 0300 	rsb	r3, fp, #0
 800aa02:	e7e3      	b.n	800a9cc <_dtoa_r+0x1ec>
 800aa04:	2200      	movs	r2, #0
 800aa06:	9207      	str	r2, [sp, #28]
 800aa08:	9a08      	ldr	r2, [sp, #32]
 800aa0a:	2a00      	cmp	r2, #0
 800aa0c:	dc38      	bgt.n	800aa80 <_dtoa_r+0x2a0>
 800aa0e:	f04f 0a01 	mov.w	sl, #1
 800aa12:	46d1      	mov	r9, sl
 800aa14:	4652      	mov	r2, sl
 800aa16:	f8cd a020 	str.w	sl, [sp, #32]
 800aa1a:	69f7      	ldr	r7, [r6, #28]
 800aa1c:	2100      	movs	r1, #0
 800aa1e:	2004      	movs	r0, #4
 800aa20:	f100 0c14 	add.w	ip, r0, #20
 800aa24:	4594      	cmp	ip, r2
 800aa26:	d930      	bls.n	800aa8a <_dtoa_r+0x2aa>
 800aa28:	6079      	str	r1, [r7, #4]
 800aa2a:	4630      	mov	r0, r6
 800aa2c:	930d      	str	r3, [sp, #52]	; 0x34
 800aa2e:	f000 fc8f 	bl	800b350 <_Balloc>
 800aa32:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa34:	9001      	str	r0, [sp, #4]
 800aa36:	4602      	mov	r2, r0
 800aa38:	2800      	cmp	r0, #0
 800aa3a:	d145      	bne.n	800aac8 <_dtoa_r+0x2e8>
 800aa3c:	4b21      	ldr	r3, [pc, #132]	; (800aac4 <_dtoa_r+0x2e4>)
 800aa3e:	f240 11af 	movw	r1, #431	; 0x1af
 800aa42:	e6e5      	b.n	800a810 <_dtoa_r+0x30>
 800aa44:	2201      	movs	r2, #1
 800aa46:	e7de      	b.n	800aa06 <_dtoa_r+0x226>
 800aa48:	2200      	movs	r2, #0
 800aa4a:	9207      	str	r2, [sp, #28]
 800aa4c:	9a08      	ldr	r2, [sp, #32]
 800aa4e:	eb0b 0a02 	add.w	sl, fp, r2
 800aa52:	f10a 0901 	add.w	r9, sl, #1
 800aa56:	464a      	mov	r2, r9
 800aa58:	2a01      	cmp	r2, #1
 800aa5a:	bfb8      	it	lt
 800aa5c:	2201      	movlt	r2, #1
 800aa5e:	e7dc      	b.n	800aa1a <_dtoa_r+0x23a>
 800aa60:	2201      	movs	r2, #1
 800aa62:	e7f2      	b.n	800aa4a <_dtoa_r+0x26a>
 800aa64:	2401      	movs	r4, #1
 800aa66:	2200      	movs	r2, #0
 800aa68:	e9cd 2406 	strd	r2, r4, [sp, #24]
 800aa6c:	f04f 3aff 	mov.w	sl, #4294967295
 800aa70:	2100      	movs	r1, #0
 800aa72:	46d1      	mov	r9, sl
 800aa74:	2212      	movs	r2, #18
 800aa76:	9108      	str	r1, [sp, #32]
 800aa78:	e7cf      	b.n	800aa1a <_dtoa_r+0x23a>
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	9207      	str	r2, [sp, #28]
 800aa7e:	e7f5      	b.n	800aa6c <_dtoa_r+0x28c>
 800aa80:	f8dd a020 	ldr.w	sl, [sp, #32]
 800aa84:	46d1      	mov	r9, sl
 800aa86:	4652      	mov	r2, sl
 800aa88:	e7c7      	b.n	800aa1a <_dtoa_r+0x23a>
 800aa8a:	3101      	adds	r1, #1
 800aa8c:	0040      	lsls	r0, r0, #1
 800aa8e:	e7c7      	b.n	800aa20 <_dtoa_r+0x240>
 800aa90:	636f4361 	.word	0x636f4361
 800aa94:	3fd287a7 	.word	0x3fd287a7
 800aa98:	8b60c8b3 	.word	0x8b60c8b3
 800aa9c:	3fc68a28 	.word	0x3fc68a28
 800aaa0:	509f79fb 	.word	0x509f79fb
 800aaa4:	3fd34413 	.word	0x3fd34413
 800aaa8:	08011605 	.word	0x08011605
 800aaac:	0801161c 	.word	0x0801161c
 800aab0:	7ff00000 	.word	0x7ff00000
 800aab4:	08011601 	.word	0x08011601
 800aab8:	080115f8 	.word	0x080115f8
 800aabc:	080115d5 	.word	0x080115d5
 800aac0:	08011708 	.word	0x08011708
 800aac4:	08011674 	.word	0x08011674
 800aac8:	69f2      	ldr	r2, [r6, #28]
 800aaca:	9901      	ldr	r1, [sp, #4]
 800aacc:	6011      	str	r1, [r2, #0]
 800aace:	f1b9 0f0e 	cmp.w	r9, #14
 800aad2:	d86c      	bhi.n	800abae <_dtoa_r+0x3ce>
 800aad4:	2c00      	cmp	r4, #0
 800aad6:	d06a      	beq.n	800abae <_dtoa_r+0x3ce>
 800aad8:	f1bb 0f00 	cmp.w	fp, #0
 800aadc:	f340 80a0 	ble.w	800ac20 <_dtoa_r+0x440>
 800aae0:	4ac1      	ldr	r2, [pc, #772]	; (800ade8 <_dtoa_r+0x608>)
 800aae2:	f00b 010f 	and.w	r1, fp, #15
 800aae6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800aaea:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aaee:	ed92 7b00 	vldr	d7, [r2]
 800aaf2:	ea4f 122b 	mov.w	r2, fp, asr #4
 800aaf6:	f000 8087 	beq.w	800ac08 <_dtoa_r+0x428>
 800aafa:	49bc      	ldr	r1, [pc, #752]	; (800adec <_dtoa_r+0x60c>)
 800aafc:	ed91 6b08 	vldr	d6, [r1, #32]
 800ab00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ab04:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ab08:	f002 020f 	and.w	r2, r2, #15
 800ab0c:	2103      	movs	r1, #3
 800ab0e:	48b7      	ldr	r0, [pc, #732]	; (800adec <_dtoa_r+0x60c>)
 800ab10:	2a00      	cmp	r2, #0
 800ab12:	d17b      	bne.n	800ac0c <_dtoa_r+0x42c>
 800ab14:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ab18:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ab1c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ab22:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ab26:	2a00      	cmp	r2, #0
 800ab28:	f000 80a0 	beq.w	800ac6c <_dtoa_r+0x48c>
 800ab2c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800ab30:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ab34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab38:	f140 8098 	bpl.w	800ac6c <_dtoa_r+0x48c>
 800ab3c:	f1b9 0f00 	cmp.w	r9, #0
 800ab40:	f000 8094 	beq.w	800ac6c <_dtoa_r+0x48c>
 800ab44:	f1ba 0f00 	cmp.w	sl, #0
 800ab48:	dd2f      	ble.n	800abaa <_dtoa_r+0x3ca>
 800ab4a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800ab4e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ab52:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ab56:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ab5a:	3101      	adds	r1, #1
 800ab5c:	4654      	mov	r4, sl
 800ab5e:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ab62:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800ab66:	ee07 1a90 	vmov	s15, r1
 800ab6a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ab6e:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ab72:	ee15 7a90 	vmov	r7, s11
 800ab76:	ec51 0b15 	vmov	r0, r1, d5
 800ab7a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 800ab7e:	2c00      	cmp	r4, #0
 800ab80:	d177      	bne.n	800ac72 <_dtoa_r+0x492>
 800ab82:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800ab86:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ab8a:	ec41 0b17 	vmov	d7, r0, r1
 800ab8e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ab92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ab96:	f300 826a 	bgt.w	800b06e <_dtoa_r+0x88e>
 800ab9a:	eeb1 7b47 	vneg.f64	d7, d7
 800ab9e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800aba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba6:	f100 8260 	bmi.w	800b06a <_dtoa_r+0x88a>
 800abaa:	ed8d 8b02 	vstr	d8, [sp, #8]
 800abae:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800abb0:	2a00      	cmp	r2, #0
 800abb2:	f2c0 811d 	blt.w	800adf0 <_dtoa_r+0x610>
 800abb6:	f1bb 0f0e 	cmp.w	fp, #14
 800abba:	f300 8119 	bgt.w	800adf0 <_dtoa_r+0x610>
 800abbe:	4b8a      	ldr	r3, [pc, #552]	; (800ade8 <_dtoa_r+0x608>)
 800abc0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800abc4:	ed93 6b00 	vldr	d6, [r3]
 800abc8:	9b08      	ldr	r3, [sp, #32]
 800abca:	2b00      	cmp	r3, #0
 800abcc:	f280 80b7 	bge.w	800ad3e <_dtoa_r+0x55e>
 800abd0:	f1b9 0f00 	cmp.w	r9, #0
 800abd4:	f300 80b3 	bgt.w	800ad3e <_dtoa_r+0x55e>
 800abd8:	f040 8246 	bne.w	800b068 <_dtoa_r+0x888>
 800abdc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800abe0:	ee26 6b07 	vmul.f64	d6, d6, d7
 800abe4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800abe8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800abec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abf0:	464c      	mov	r4, r9
 800abf2:	464f      	mov	r7, r9
 800abf4:	f280 821c 	bge.w	800b030 <_dtoa_r+0x850>
 800abf8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800abfc:	2331      	movs	r3, #49	; 0x31
 800abfe:	f808 3b01 	strb.w	r3, [r8], #1
 800ac02:	f10b 0b01 	add.w	fp, fp, #1
 800ac06:	e218      	b.n	800b03a <_dtoa_r+0x85a>
 800ac08:	2102      	movs	r1, #2
 800ac0a:	e780      	b.n	800ab0e <_dtoa_r+0x32e>
 800ac0c:	07d4      	lsls	r4, r2, #31
 800ac0e:	d504      	bpl.n	800ac1a <_dtoa_r+0x43a>
 800ac10:	ed90 6b00 	vldr	d6, [r0]
 800ac14:	3101      	adds	r1, #1
 800ac16:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac1a:	1052      	asrs	r2, r2, #1
 800ac1c:	3008      	adds	r0, #8
 800ac1e:	e777      	b.n	800ab10 <_dtoa_r+0x330>
 800ac20:	d022      	beq.n	800ac68 <_dtoa_r+0x488>
 800ac22:	f1cb 0200 	rsb	r2, fp, #0
 800ac26:	4970      	ldr	r1, [pc, #448]	; (800ade8 <_dtoa_r+0x608>)
 800ac28:	f002 000f 	and.w	r0, r2, #15
 800ac2c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 800ac30:	ed91 7b00 	vldr	d7, [r1]
 800ac34:	ee28 7b07 	vmul.f64	d7, d8, d7
 800ac38:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac3c:	486b      	ldr	r0, [pc, #428]	; (800adec <_dtoa_r+0x60c>)
 800ac3e:	1112      	asrs	r2, r2, #4
 800ac40:	2400      	movs	r4, #0
 800ac42:	2102      	movs	r1, #2
 800ac44:	b92a      	cbnz	r2, 800ac52 <_dtoa_r+0x472>
 800ac46:	2c00      	cmp	r4, #0
 800ac48:	f43f af6a 	beq.w	800ab20 <_dtoa_r+0x340>
 800ac4c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ac50:	e766      	b.n	800ab20 <_dtoa_r+0x340>
 800ac52:	07d7      	lsls	r7, r2, #31
 800ac54:	d505      	bpl.n	800ac62 <_dtoa_r+0x482>
 800ac56:	ed90 6b00 	vldr	d6, [r0]
 800ac5a:	3101      	adds	r1, #1
 800ac5c:	2401      	movs	r4, #1
 800ac5e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ac62:	1052      	asrs	r2, r2, #1
 800ac64:	3008      	adds	r0, #8
 800ac66:	e7ed      	b.n	800ac44 <_dtoa_r+0x464>
 800ac68:	2102      	movs	r1, #2
 800ac6a:	e759      	b.n	800ab20 <_dtoa_r+0x340>
 800ac6c:	465a      	mov	r2, fp
 800ac6e:	464c      	mov	r4, r9
 800ac70:	e775      	b.n	800ab5e <_dtoa_r+0x37e>
 800ac72:	ec41 0b17 	vmov	d7, r0, r1
 800ac76:	495c      	ldr	r1, [pc, #368]	; (800ade8 <_dtoa_r+0x608>)
 800ac78:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 800ac7c:	ed11 4b02 	vldr	d4, [r1, #-8]
 800ac80:	9901      	ldr	r1, [sp, #4]
 800ac82:	440c      	add	r4, r1
 800ac84:	9907      	ldr	r1, [sp, #28]
 800ac86:	b351      	cbz	r1, 800acde <_dtoa_r+0x4fe>
 800ac88:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 800ac8c:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 800ac90:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ac94:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800ac98:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800ac9c:	ee35 7b47 	vsub.f64	d7, d5, d7
 800aca0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800aca4:	ee14 1a90 	vmov	r1, s9
 800aca8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800acac:	3130      	adds	r1, #48	; 0x30
 800acae:	ee36 6b45 	vsub.f64	d6, d6, d5
 800acb2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800acb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acba:	f808 1b01 	strb.w	r1, [r8], #1
 800acbe:	d439      	bmi.n	800ad34 <_dtoa_r+0x554>
 800acc0:	ee32 5b46 	vsub.f64	d5, d2, d6
 800acc4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 800acc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800accc:	d472      	bmi.n	800adb4 <_dtoa_r+0x5d4>
 800acce:	45a0      	cmp	r8, r4
 800acd0:	f43f af6b 	beq.w	800abaa <_dtoa_r+0x3ca>
 800acd4:	ee27 7b03 	vmul.f64	d7, d7, d3
 800acd8:	ee26 6b03 	vmul.f64	d6, d6, d3
 800acdc:	e7e0      	b.n	800aca0 <_dtoa_r+0x4c0>
 800acde:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ace2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ace6:	4620      	mov	r0, r4
 800ace8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 800acec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800acf0:	ee14 1a90 	vmov	r1, s9
 800acf4:	3130      	adds	r1, #48	; 0x30
 800acf6:	f808 1b01 	strb.w	r1, [r8], #1
 800acfa:	45a0      	cmp	r8, r4
 800acfc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 800ad00:	ee36 6b45 	vsub.f64	d6, d6, d5
 800ad04:	d118      	bne.n	800ad38 <_dtoa_r+0x558>
 800ad06:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 800ad0a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800ad0e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800ad12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad16:	dc4d      	bgt.n	800adb4 <_dtoa_r+0x5d4>
 800ad18:	ee35 5b47 	vsub.f64	d5, d5, d7
 800ad1c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 800ad20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad24:	f57f af41 	bpl.w	800abaa <_dtoa_r+0x3ca>
 800ad28:	4680      	mov	r8, r0
 800ad2a:	3801      	subs	r0, #1
 800ad2c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 800ad30:	2b30      	cmp	r3, #48	; 0x30
 800ad32:	d0f9      	beq.n	800ad28 <_dtoa_r+0x548>
 800ad34:	4693      	mov	fp, r2
 800ad36:	e02a      	b.n	800ad8e <_dtoa_r+0x5ae>
 800ad38:	ee26 6b03 	vmul.f64	d6, d6, d3
 800ad3c:	e7d6      	b.n	800acec <_dtoa_r+0x50c>
 800ad3e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad42:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800ad46:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800ad4a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 800ad4e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800ad52:	ee15 3a10 	vmov	r3, s10
 800ad56:	3330      	adds	r3, #48	; 0x30
 800ad58:	f808 3b01 	strb.w	r3, [r8], #1
 800ad5c:	9b01      	ldr	r3, [sp, #4]
 800ad5e:	eba8 0303 	sub.w	r3, r8, r3
 800ad62:	4599      	cmp	r9, r3
 800ad64:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 800ad68:	eea3 7b46 	vfms.f64	d7, d3, d6
 800ad6c:	d133      	bne.n	800add6 <_dtoa_r+0x5f6>
 800ad6e:	ee37 7b07 	vadd.f64	d7, d7, d7
 800ad72:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ad76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7a:	dc1a      	bgt.n	800adb2 <_dtoa_r+0x5d2>
 800ad7c:	eeb4 7b46 	vcmp.f64	d7, d6
 800ad80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad84:	d103      	bne.n	800ad8e <_dtoa_r+0x5ae>
 800ad86:	ee15 3a10 	vmov	r3, s10
 800ad8a:	07d9      	lsls	r1, r3, #31
 800ad8c:	d411      	bmi.n	800adb2 <_dtoa_r+0x5d2>
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4630      	mov	r0, r6
 800ad92:	f000 fb1d 	bl	800b3d0 <_Bfree>
 800ad96:	2300      	movs	r3, #0
 800ad98:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ad9a:	f888 3000 	strb.w	r3, [r8]
 800ad9e:	f10b 0301 	add.w	r3, fp, #1
 800ada2:	6013      	str	r3, [r2, #0]
 800ada4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	f43f ad69 	beq.w	800a87e <_dtoa_r+0x9e>
 800adac:	f8c3 8000 	str.w	r8, [r3]
 800adb0:	e565      	b.n	800a87e <_dtoa_r+0x9e>
 800adb2:	465a      	mov	r2, fp
 800adb4:	4643      	mov	r3, r8
 800adb6:	4698      	mov	r8, r3
 800adb8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800adbc:	2939      	cmp	r1, #57	; 0x39
 800adbe:	d106      	bne.n	800adce <_dtoa_r+0x5ee>
 800adc0:	9901      	ldr	r1, [sp, #4]
 800adc2:	4299      	cmp	r1, r3
 800adc4:	d1f7      	bne.n	800adb6 <_dtoa_r+0x5d6>
 800adc6:	9801      	ldr	r0, [sp, #4]
 800adc8:	2130      	movs	r1, #48	; 0x30
 800adca:	3201      	adds	r2, #1
 800adcc:	7001      	strb	r1, [r0, #0]
 800adce:	7819      	ldrb	r1, [r3, #0]
 800add0:	3101      	adds	r1, #1
 800add2:	7019      	strb	r1, [r3, #0]
 800add4:	e7ae      	b.n	800ad34 <_dtoa_r+0x554>
 800add6:	ee27 7b04 	vmul.f64	d7, d7, d4
 800adda:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800adde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ade2:	d1b2      	bne.n	800ad4a <_dtoa_r+0x56a>
 800ade4:	e7d3      	b.n	800ad8e <_dtoa_r+0x5ae>
 800ade6:	bf00      	nop
 800ade8:	08011708 	.word	0x08011708
 800adec:	080116e0 	.word	0x080116e0
 800adf0:	9907      	ldr	r1, [sp, #28]
 800adf2:	2900      	cmp	r1, #0
 800adf4:	f000 80d0 	beq.w	800af98 <_dtoa_r+0x7b8>
 800adf8:	9906      	ldr	r1, [sp, #24]
 800adfa:	2901      	cmp	r1, #1
 800adfc:	f300 80b4 	bgt.w	800af68 <_dtoa_r+0x788>
 800ae00:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ae02:	2900      	cmp	r1, #0
 800ae04:	f000 80ac 	beq.w	800af60 <_dtoa_r+0x780>
 800ae08:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae0c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800ae10:	461c      	mov	r4, r3
 800ae12:	9309      	str	r3, [sp, #36]	; 0x24
 800ae14:	9b04      	ldr	r3, [sp, #16]
 800ae16:	4413      	add	r3, r2
 800ae18:	9304      	str	r3, [sp, #16]
 800ae1a:	9b05      	ldr	r3, [sp, #20]
 800ae1c:	2101      	movs	r1, #1
 800ae1e:	4413      	add	r3, r2
 800ae20:	4630      	mov	r0, r6
 800ae22:	9305      	str	r3, [sp, #20]
 800ae24:	f000 fb8a 	bl	800b53c <__i2b>
 800ae28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ae2a:	4607      	mov	r7, r0
 800ae2c:	f1b8 0f00 	cmp.w	r8, #0
 800ae30:	d00d      	beq.n	800ae4e <_dtoa_r+0x66e>
 800ae32:	9a05      	ldr	r2, [sp, #20]
 800ae34:	2a00      	cmp	r2, #0
 800ae36:	dd0a      	ble.n	800ae4e <_dtoa_r+0x66e>
 800ae38:	4542      	cmp	r2, r8
 800ae3a:	9904      	ldr	r1, [sp, #16]
 800ae3c:	bfa8      	it	ge
 800ae3e:	4642      	movge	r2, r8
 800ae40:	1a89      	subs	r1, r1, r2
 800ae42:	9104      	str	r1, [sp, #16]
 800ae44:	9905      	ldr	r1, [sp, #20]
 800ae46:	eba8 0802 	sub.w	r8, r8, r2
 800ae4a:	1a8a      	subs	r2, r1, r2
 800ae4c:	9205      	str	r2, [sp, #20]
 800ae4e:	b303      	cbz	r3, 800ae92 <_dtoa_r+0x6b2>
 800ae50:	9a07      	ldr	r2, [sp, #28]
 800ae52:	2a00      	cmp	r2, #0
 800ae54:	f000 80a5 	beq.w	800afa2 <_dtoa_r+0x7c2>
 800ae58:	2c00      	cmp	r4, #0
 800ae5a:	dd13      	ble.n	800ae84 <_dtoa_r+0x6a4>
 800ae5c:	4639      	mov	r1, r7
 800ae5e:	4622      	mov	r2, r4
 800ae60:	4630      	mov	r0, r6
 800ae62:	930d      	str	r3, [sp, #52]	; 0x34
 800ae64:	f000 fc2a 	bl	800b6bc <__pow5mult>
 800ae68:	462a      	mov	r2, r5
 800ae6a:	4601      	mov	r1, r0
 800ae6c:	4607      	mov	r7, r0
 800ae6e:	4630      	mov	r0, r6
 800ae70:	f000 fb7a 	bl	800b568 <__multiply>
 800ae74:	4629      	mov	r1, r5
 800ae76:	9009      	str	r0, [sp, #36]	; 0x24
 800ae78:	4630      	mov	r0, r6
 800ae7a:	f000 faa9 	bl	800b3d0 <_Bfree>
 800ae7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ae82:	4615      	mov	r5, r2
 800ae84:	1b1a      	subs	r2, r3, r4
 800ae86:	d004      	beq.n	800ae92 <_dtoa_r+0x6b2>
 800ae88:	4629      	mov	r1, r5
 800ae8a:	4630      	mov	r0, r6
 800ae8c:	f000 fc16 	bl	800b6bc <__pow5mult>
 800ae90:	4605      	mov	r5, r0
 800ae92:	2101      	movs	r1, #1
 800ae94:	4630      	mov	r0, r6
 800ae96:	f000 fb51 	bl	800b53c <__i2b>
 800ae9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	4604      	mov	r4, r0
 800aea0:	f340 8081 	ble.w	800afa6 <_dtoa_r+0x7c6>
 800aea4:	461a      	mov	r2, r3
 800aea6:	4601      	mov	r1, r0
 800aea8:	4630      	mov	r0, r6
 800aeaa:	f000 fc07 	bl	800b6bc <__pow5mult>
 800aeae:	9b06      	ldr	r3, [sp, #24]
 800aeb0:	2b01      	cmp	r3, #1
 800aeb2:	4604      	mov	r4, r0
 800aeb4:	dd7a      	ble.n	800afac <_dtoa_r+0x7cc>
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	9309      	str	r3, [sp, #36]	; 0x24
 800aeba:	6922      	ldr	r2, [r4, #16]
 800aebc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800aec0:	6910      	ldr	r0, [r2, #16]
 800aec2:	f000 faed 	bl	800b4a0 <__hi0bits>
 800aec6:	f1c0 0020 	rsb	r0, r0, #32
 800aeca:	9b05      	ldr	r3, [sp, #20]
 800aecc:	4418      	add	r0, r3
 800aece:	f010 001f 	ands.w	r0, r0, #31
 800aed2:	f000 8093 	beq.w	800affc <_dtoa_r+0x81c>
 800aed6:	f1c0 0220 	rsb	r2, r0, #32
 800aeda:	2a04      	cmp	r2, #4
 800aedc:	f340 8085 	ble.w	800afea <_dtoa_r+0x80a>
 800aee0:	9b04      	ldr	r3, [sp, #16]
 800aee2:	f1c0 001c 	rsb	r0, r0, #28
 800aee6:	4403      	add	r3, r0
 800aee8:	9304      	str	r3, [sp, #16]
 800aeea:	9b05      	ldr	r3, [sp, #20]
 800aeec:	4480      	add	r8, r0
 800aeee:	4403      	add	r3, r0
 800aef0:	9305      	str	r3, [sp, #20]
 800aef2:	9b04      	ldr	r3, [sp, #16]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	dd05      	ble.n	800af04 <_dtoa_r+0x724>
 800aef8:	4629      	mov	r1, r5
 800aefa:	461a      	mov	r2, r3
 800aefc:	4630      	mov	r0, r6
 800aefe:	f000 fc37 	bl	800b770 <__lshift>
 800af02:	4605      	mov	r5, r0
 800af04:	9b05      	ldr	r3, [sp, #20]
 800af06:	2b00      	cmp	r3, #0
 800af08:	dd05      	ble.n	800af16 <_dtoa_r+0x736>
 800af0a:	4621      	mov	r1, r4
 800af0c:	461a      	mov	r2, r3
 800af0e:	4630      	mov	r0, r6
 800af10:	f000 fc2e 	bl	800b770 <__lshift>
 800af14:	4604      	mov	r4, r0
 800af16:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d071      	beq.n	800b000 <_dtoa_r+0x820>
 800af1c:	4621      	mov	r1, r4
 800af1e:	4628      	mov	r0, r5
 800af20:	f000 fc92 	bl	800b848 <__mcmp>
 800af24:	2800      	cmp	r0, #0
 800af26:	da6b      	bge.n	800b000 <_dtoa_r+0x820>
 800af28:	2300      	movs	r3, #0
 800af2a:	4629      	mov	r1, r5
 800af2c:	220a      	movs	r2, #10
 800af2e:	4630      	mov	r0, r6
 800af30:	f000 fa70 	bl	800b414 <__multadd>
 800af34:	9b07      	ldr	r3, [sp, #28]
 800af36:	f10b 3bff 	add.w	fp, fp, #4294967295
 800af3a:	4605      	mov	r5, r0
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	f000 8197 	beq.w	800b270 <_dtoa_r+0xa90>
 800af42:	4639      	mov	r1, r7
 800af44:	2300      	movs	r3, #0
 800af46:	220a      	movs	r2, #10
 800af48:	4630      	mov	r0, r6
 800af4a:	f000 fa63 	bl	800b414 <__multadd>
 800af4e:	f1ba 0f00 	cmp.w	sl, #0
 800af52:	4607      	mov	r7, r0
 800af54:	f300 8093 	bgt.w	800b07e <_dtoa_r+0x89e>
 800af58:	9b06      	ldr	r3, [sp, #24]
 800af5a:	2b02      	cmp	r3, #2
 800af5c:	dc57      	bgt.n	800b00e <_dtoa_r+0x82e>
 800af5e:	e08e      	b.n	800b07e <_dtoa_r+0x89e>
 800af60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800af62:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800af66:	e751      	b.n	800ae0c <_dtoa_r+0x62c>
 800af68:	f109 34ff 	add.w	r4, r9, #4294967295
 800af6c:	42a3      	cmp	r3, r4
 800af6e:	bfbf      	itttt	lt
 800af70:	1ae2      	sublt	r2, r4, r3
 800af72:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800af74:	189b      	addlt	r3, r3, r2
 800af76:	930a      	strlt	r3, [sp, #40]	; 0x28
 800af78:	bfae      	itee	ge
 800af7a:	1b1c      	subge	r4, r3, r4
 800af7c:	4623      	movlt	r3, r4
 800af7e:	2400      	movlt	r4, #0
 800af80:	f1b9 0f00 	cmp.w	r9, #0
 800af84:	bfb5      	itete	lt
 800af86:	9a04      	ldrlt	r2, [sp, #16]
 800af88:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 800af8c:	eba2 0809 	sublt.w	r8, r2, r9
 800af90:	464a      	movge	r2, r9
 800af92:	bfb8      	it	lt
 800af94:	2200      	movlt	r2, #0
 800af96:	e73c      	b.n	800ae12 <_dtoa_r+0x632>
 800af98:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800af9c:	9f07      	ldr	r7, [sp, #28]
 800af9e:	461c      	mov	r4, r3
 800afa0:	e744      	b.n	800ae2c <_dtoa_r+0x64c>
 800afa2:	461a      	mov	r2, r3
 800afa4:	e770      	b.n	800ae88 <_dtoa_r+0x6a8>
 800afa6:	9b06      	ldr	r3, [sp, #24]
 800afa8:	2b01      	cmp	r3, #1
 800afaa:	dc18      	bgt.n	800afde <_dtoa_r+0x7fe>
 800afac:	9b02      	ldr	r3, [sp, #8]
 800afae:	b9b3      	cbnz	r3, 800afde <_dtoa_r+0x7fe>
 800afb0:	9b03      	ldr	r3, [sp, #12]
 800afb2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800afb6:	b9a2      	cbnz	r2, 800afe2 <_dtoa_r+0x802>
 800afb8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800afbc:	0d12      	lsrs	r2, r2, #20
 800afbe:	0512      	lsls	r2, r2, #20
 800afc0:	b18a      	cbz	r2, 800afe6 <_dtoa_r+0x806>
 800afc2:	9b04      	ldr	r3, [sp, #16]
 800afc4:	3301      	adds	r3, #1
 800afc6:	9304      	str	r3, [sp, #16]
 800afc8:	9b05      	ldr	r3, [sp, #20]
 800afca:	3301      	adds	r3, #1
 800afcc:	9305      	str	r3, [sp, #20]
 800afce:	2301      	movs	r3, #1
 800afd0:	9309      	str	r3, [sp, #36]	; 0x24
 800afd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	f47f af70 	bne.w	800aeba <_dtoa_r+0x6da>
 800afda:	2001      	movs	r0, #1
 800afdc:	e775      	b.n	800aeca <_dtoa_r+0x6ea>
 800afde:	2300      	movs	r3, #0
 800afe0:	e7f6      	b.n	800afd0 <_dtoa_r+0x7f0>
 800afe2:	9b02      	ldr	r3, [sp, #8]
 800afe4:	e7f4      	b.n	800afd0 <_dtoa_r+0x7f0>
 800afe6:	9209      	str	r2, [sp, #36]	; 0x24
 800afe8:	e7f3      	b.n	800afd2 <_dtoa_r+0x7f2>
 800afea:	d082      	beq.n	800aef2 <_dtoa_r+0x712>
 800afec:	9b04      	ldr	r3, [sp, #16]
 800afee:	321c      	adds	r2, #28
 800aff0:	4413      	add	r3, r2
 800aff2:	9304      	str	r3, [sp, #16]
 800aff4:	9b05      	ldr	r3, [sp, #20]
 800aff6:	4490      	add	r8, r2
 800aff8:	4413      	add	r3, r2
 800affa:	e779      	b.n	800aef0 <_dtoa_r+0x710>
 800affc:	4602      	mov	r2, r0
 800affe:	e7f5      	b.n	800afec <_dtoa_r+0x80c>
 800b000:	f1b9 0f00 	cmp.w	r9, #0
 800b004:	dc36      	bgt.n	800b074 <_dtoa_r+0x894>
 800b006:	9b06      	ldr	r3, [sp, #24]
 800b008:	2b02      	cmp	r3, #2
 800b00a:	dd33      	ble.n	800b074 <_dtoa_r+0x894>
 800b00c:	46ca      	mov	sl, r9
 800b00e:	f1ba 0f00 	cmp.w	sl, #0
 800b012:	d10d      	bne.n	800b030 <_dtoa_r+0x850>
 800b014:	4621      	mov	r1, r4
 800b016:	4653      	mov	r3, sl
 800b018:	2205      	movs	r2, #5
 800b01a:	4630      	mov	r0, r6
 800b01c:	f000 f9fa 	bl	800b414 <__multadd>
 800b020:	4601      	mov	r1, r0
 800b022:	4604      	mov	r4, r0
 800b024:	4628      	mov	r0, r5
 800b026:	f000 fc0f 	bl	800b848 <__mcmp>
 800b02a:	2800      	cmp	r0, #0
 800b02c:	f73f ade4 	bgt.w	800abf8 <_dtoa_r+0x418>
 800b030:	9b08      	ldr	r3, [sp, #32]
 800b032:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b036:	ea6f 0b03 	mvn.w	fp, r3
 800b03a:	f04f 0900 	mov.w	r9, #0
 800b03e:	4621      	mov	r1, r4
 800b040:	4630      	mov	r0, r6
 800b042:	f000 f9c5 	bl	800b3d0 <_Bfree>
 800b046:	2f00      	cmp	r7, #0
 800b048:	f43f aea1 	beq.w	800ad8e <_dtoa_r+0x5ae>
 800b04c:	f1b9 0f00 	cmp.w	r9, #0
 800b050:	d005      	beq.n	800b05e <_dtoa_r+0x87e>
 800b052:	45b9      	cmp	r9, r7
 800b054:	d003      	beq.n	800b05e <_dtoa_r+0x87e>
 800b056:	4649      	mov	r1, r9
 800b058:	4630      	mov	r0, r6
 800b05a:	f000 f9b9 	bl	800b3d0 <_Bfree>
 800b05e:	4639      	mov	r1, r7
 800b060:	4630      	mov	r0, r6
 800b062:	f000 f9b5 	bl	800b3d0 <_Bfree>
 800b066:	e692      	b.n	800ad8e <_dtoa_r+0x5ae>
 800b068:	2400      	movs	r4, #0
 800b06a:	4627      	mov	r7, r4
 800b06c:	e7e0      	b.n	800b030 <_dtoa_r+0x850>
 800b06e:	4693      	mov	fp, r2
 800b070:	4627      	mov	r7, r4
 800b072:	e5c1      	b.n	800abf8 <_dtoa_r+0x418>
 800b074:	9b07      	ldr	r3, [sp, #28]
 800b076:	46ca      	mov	sl, r9
 800b078:	2b00      	cmp	r3, #0
 800b07a:	f000 8100 	beq.w	800b27e <_dtoa_r+0xa9e>
 800b07e:	f1b8 0f00 	cmp.w	r8, #0
 800b082:	dd05      	ble.n	800b090 <_dtoa_r+0x8b0>
 800b084:	4639      	mov	r1, r7
 800b086:	4642      	mov	r2, r8
 800b088:	4630      	mov	r0, r6
 800b08a:	f000 fb71 	bl	800b770 <__lshift>
 800b08e:	4607      	mov	r7, r0
 800b090:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b092:	2b00      	cmp	r3, #0
 800b094:	d05d      	beq.n	800b152 <_dtoa_r+0x972>
 800b096:	6879      	ldr	r1, [r7, #4]
 800b098:	4630      	mov	r0, r6
 800b09a:	f000 f959 	bl	800b350 <_Balloc>
 800b09e:	4680      	mov	r8, r0
 800b0a0:	b928      	cbnz	r0, 800b0ae <_dtoa_r+0x8ce>
 800b0a2:	4b82      	ldr	r3, [pc, #520]	; (800b2ac <_dtoa_r+0xacc>)
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b0aa:	f7ff bbb1 	b.w	800a810 <_dtoa_r+0x30>
 800b0ae:	693a      	ldr	r2, [r7, #16]
 800b0b0:	3202      	adds	r2, #2
 800b0b2:	0092      	lsls	r2, r2, #2
 800b0b4:	f107 010c 	add.w	r1, r7, #12
 800b0b8:	300c      	adds	r0, #12
 800b0ba:	f7ff fafb 	bl	800a6b4 <memcpy>
 800b0be:	2201      	movs	r2, #1
 800b0c0:	4641      	mov	r1, r8
 800b0c2:	4630      	mov	r0, r6
 800b0c4:	f000 fb54 	bl	800b770 <__lshift>
 800b0c8:	9b01      	ldr	r3, [sp, #4]
 800b0ca:	3301      	adds	r3, #1
 800b0cc:	9304      	str	r3, [sp, #16]
 800b0ce:	9b01      	ldr	r3, [sp, #4]
 800b0d0:	4453      	add	r3, sl
 800b0d2:	9308      	str	r3, [sp, #32]
 800b0d4:	9b02      	ldr	r3, [sp, #8]
 800b0d6:	f003 0301 	and.w	r3, r3, #1
 800b0da:	46b9      	mov	r9, r7
 800b0dc:	9307      	str	r3, [sp, #28]
 800b0de:	4607      	mov	r7, r0
 800b0e0:	9b04      	ldr	r3, [sp, #16]
 800b0e2:	4621      	mov	r1, r4
 800b0e4:	3b01      	subs	r3, #1
 800b0e6:	4628      	mov	r0, r5
 800b0e8:	9302      	str	r3, [sp, #8]
 800b0ea:	f7ff faf1 	bl	800a6d0 <quorem>
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	3330      	adds	r3, #48	; 0x30
 800b0f2:	9005      	str	r0, [sp, #20]
 800b0f4:	4649      	mov	r1, r9
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b0fa:	f000 fba5 	bl	800b848 <__mcmp>
 800b0fe:	463a      	mov	r2, r7
 800b100:	4682      	mov	sl, r0
 800b102:	4621      	mov	r1, r4
 800b104:	4630      	mov	r0, r6
 800b106:	f000 fbbb 	bl	800b880 <__mdiff>
 800b10a:	68c2      	ldr	r2, [r0, #12]
 800b10c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b10e:	4680      	mov	r8, r0
 800b110:	bb0a      	cbnz	r2, 800b156 <_dtoa_r+0x976>
 800b112:	4601      	mov	r1, r0
 800b114:	4628      	mov	r0, r5
 800b116:	f000 fb97 	bl	800b848 <__mcmp>
 800b11a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b11c:	4602      	mov	r2, r0
 800b11e:	4641      	mov	r1, r8
 800b120:	4630      	mov	r0, r6
 800b122:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800b126:	f000 f953 	bl	800b3d0 <_Bfree>
 800b12a:	9b06      	ldr	r3, [sp, #24]
 800b12c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b12e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800b132:	ea43 0102 	orr.w	r1, r3, r2
 800b136:	9b07      	ldr	r3, [sp, #28]
 800b138:	4319      	orrs	r1, r3
 800b13a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b13c:	d10d      	bne.n	800b15a <_dtoa_r+0x97a>
 800b13e:	2b39      	cmp	r3, #57	; 0x39
 800b140:	d029      	beq.n	800b196 <_dtoa_r+0x9b6>
 800b142:	f1ba 0f00 	cmp.w	sl, #0
 800b146:	dd01      	ble.n	800b14c <_dtoa_r+0x96c>
 800b148:	9b05      	ldr	r3, [sp, #20]
 800b14a:	3331      	adds	r3, #49	; 0x31
 800b14c:	9a02      	ldr	r2, [sp, #8]
 800b14e:	7013      	strb	r3, [r2, #0]
 800b150:	e775      	b.n	800b03e <_dtoa_r+0x85e>
 800b152:	4638      	mov	r0, r7
 800b154:	e7b8      	b.n	800b0c8 <_dtoa_r+0x8e8>
 800b156:	2201      	movs	r2, #1
 800b158:	e7e1      	b.n	800b11e <_dtoa_r+0x93e>
 800b15a:	f1ba 0f00 	cmp.w	sl, #0
 800b15e:	db06      	blt.n	800b16e <_dtoa_r+0x98e>
 800b160:	9906      	ldr	r1, [sp, #24]
 800b162:	ea41 0a0a 	orr.w	sl, r1, sl
 800b166:	9907      	ldr	r1, [sp, #28]
 800b168:	ea5a 0a01 	orrs.w	sl, sl, r1
 800b16c:	d120      	bne.n	800b1b0 <_dtoa_r+0x9d0>
 800b16e:	2a00      	cmp	r2, #0
 800b170:	ddec      	ble.n	800b14c <_dtoa_r+0x96c>
 800b172:	4629      	mov	r1, r5
 800b174:	2201      	movs	r2, #1
 800b176:	4630      	mov	r0, r6
 800b178:	9304      	str	r3, [sp, #16]
 800b17a:	f000 faf9 	bl	800b770 <__lshift>
 800b17e:	4621      	mov	r1, r4
 800b180:	4605      	mov	r5, r0
 800b182:	f000 fb61 	bl	800b848 <__mcmp>
 800b186:	2800      	cmp	r0, #0
 800b188:	9b04      	ldr	r3, [sp, #16]
 800b18a:	dc02      	bgt.n	800b192 <_dtoa_r+0x9b2>
 800b18c:	d1de      	bne.n	800b14c <_dtoa_r+0x96c>
 800b18e:	07da      	lsls	r2, r3, #31
 800b190:	d5dc      	bpl.n	800b14c <_dtoa_r+0x96c>
 800b192:	2b39      	cmp	r3, #57	; 0x39
 800b194:	d1d8      	bne.n	800b148 <_dtoa_r+0x968>
 800b196:	9a02      	ldr	r2, [sp, #8]
 800b198:	2339      	movs	r3, #57	; 0x39
 800b19a:	7013      	strb	r3, [r2, #0]
 800b19c:	4643      	mov	r3, r8
 800b19e:	4698      	mov	r8, r3
 800b1a0:	3b01      	subs	r3, #1
 800b1a2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800b1a6:	2a39      	cmp	r2, #57	; 0x39
 800b1a8:	d051      	beq.n	800b24e <_dtoa_r+0xa6e>
 800b1aa:	3201      	adds	r2, #1
 800b1ac:	701a      	strb	r2, [r3, #0]
 800b1ae:	e746      	b.n	800b03e <_dtoa_r+0x85e>
 800b1b0:	2a00      	cmp	r2, #0
 800b1b2:	dd03      	ble.n	800b1bc <_dtoa_r+0x9dc>
 800b1b4:	2b39      	cmp	r3, #57	; 0x39
 800b1b6:	d0ee      	beq.n	800b196 <_dtoa_r+0x9b6>
 800b1b8:	3301      	adds	r3, #1
 800b1ba:	e7c7      	b.n	800b14c <_dtoa_r+0x96c>
 800b1bc:	9a04      	ldr	r2, [sp, #16]
 800b1be:	9908      	ldr	r1, [sp, #32]
 800b1c0:	f802 3c01 	strb.w	r3, [r2, #-1]
 800b1c4:	428a      	cmp	r2, r1
 800b1c6:	d02b      	beq.n	800b220 <_dtoa_r+0xa40>
 800b1c8:	4629      	mov	r1, r5
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	220a      	movs	r2, #10
 800b1ce:	4630      	mov	r0, r6
 800b1d0:	f000 f920 	bl	800b414 <__multadd>
 800b1d4:	45b9      	cmp	r9, r7
 800b1d6:	4605      	mov	r5, r0
 800b1d8:	f04f 0300 	mov.w	r3, #0
 800b1dc:	f04f 020a 	mov.w	r2, #10
 800b1e0:	4649      	mov	r1, r9
 800b1e2:	4630      	mov	r0, r6
 800b1e4:	d107      	bne.n	800b1f6 <_dtoa_r+0xa16>
 800b1e6:	f000 f915 	bl	800b414 <__multadd>
 800b1ea:	4681      	mov	r9, r0
 800b1ec:	4607      	mov	r7, r0
 800b1ee:	9b04      	ldr	r3, [sp, #16]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	9304      	str	r3, [sp, #16]
 800b1f4:	e774      	b.n	800b0e0 <_dtoa_r+0x900>
 800b1f6:	f000 f90d 	bl	800b414 <__multadd>
 800b1fa:	4639      	mov	r1, r7
 800b1fc:	4681      	mov	r9, r0
 800b1fe:	2300      	movs	r3, #0
 800b200:	220a      	movs	r2, #10
 800b202:	4630      	mov	r0, r6
 800b204:	f000 f906 	bl	800b414 <__multadd>
 800b208:	4607      	mov	r7, r0
 800b20a:	e7f0      	b.n	800b1ee <_dtoa_r+0xa0e>
 800b20c:	f1ba 0f00 	cmp.w	sl, #0
 800b210:	9a01      	ldr	r2, [sp, #4]
 800b212:	bfcc      	ite	gt
 800b214:	46d0      	movgt	r8, sl
 800b216:	f04f 0801 	movle.w	r8, #1
 800b21a:	4490      	add	r8, r2
 800b21c:	f04f 0900 	mov.w	r9, #0
 800b220:	4629      	mov	r1, r5
 800b222:	2201      	movs	r2, #1
 800b224:	4630      	mov	r0, r6
 800b226:	9302      	str	r3, [sp, #8]
 800b228:	f000 faa2 	bl	800b770 <__lshift>
 800b22c:	4621      	mov	r1, r4
 800b22e:	4605      	mov	r5, r0
 800b230:	f000 fb0a 	bl	800b848 <__mcmp>
 800b234:	2800      	cmp	r0, #0
 800b236:	dcb1      	bgt.n	800b19c <_dtoa_r+0x9bc>
 800b238:	d102      	bne.n	800b240 <_dtoa_r+0xa60>
 800b23a:	9b02      	ldr	r3, [sp, #8]
 800b23c:	07db      	lsls	r3, r3, #31
 800b23e:	d4ad      	bmi.n	800b19c <_dtoa_r+0x9bc>
 800b240:	4643      	mov	r3, r8
 800b242:	4698      	mov	r8, r3
 800b244:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b248:	2a30      	cmp	r2, #48	; 0x30
 800b24a:	d0fa      	beq.n	800b242 <_dtoa_r+0xa62>
 800b24c:	e6f7      	b.n	800b03e <_dtoa_r+0x85e>
 800b24e:	9a01      	ldr	r2, [sp, #4]
 800b250:	429a      	cmp	r2, r3
 800b252:	d1a4      	bne.n	800b19e <_dtoa_r+0x9be>
 800b254:	f10b 0b01 	add.w	fp, fp, #1
 800b258:	2331      	movs	r3, #49	; 0x31
 800b25a:	e778      	b.n	800b14e <_dtoa_r+0x96e>
 800b25c:	4b14      	ldr	r3, [pc, #80]	; (800b2b0 <_dtoa_r+0xad0>)
 800b25e:	f7ff bb2a 	b.w	800a8b6 <_dtoa_r+0xd6>
 800b262:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b264:	2b00      	cmp	r3, #0
 800b266:	f47f ab05 	bne.w	800a874 <_dtoa_r+0x94>
 800b26a:	4b12      	ldr	r3, [pc, #72]	; (800b2b4 <_dtoa_r+0xad4>)
 800b26c:	f7ff bb23 	b.w	800a8b6 <_dtoa_r+0xd6>
 800b270:	f1ba 0f00 	cmp.w	sl, #0
 800b274:	dc03      	bgt.n	800b27e <_dtoa_r+0xa9e>
 800b276:	9b06      	ldr	r3, [sp, #24]
 800b278:	2b02      	cmp	r3, #2
 800b27a:	f73f aec8 	bgt.w	800b00e <_dtoa_r+0x82e>
 800b27e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800b282:	4621      	mov	r1, r4
 800b284:	4628      	mov	r0, r5
 800b286:	f7ff fa23 	bl	800a6d0 <quorem>
 800b28a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800b28e:	f808 3b01 	strb.w	r3, [r8], #1
 800b292:	9a01      	ldr	r2, [sp, #4]
 800b294:	eba8 0202 	sub.w	r2, r8, r2
 800b298:	4592      	cmp	sl, r2
 800b29a:	ddb7      	ble.n	800b20c <_dtoa_r+0xa2c>
 800b29c:	4629      	mov	r1, r5
 800b29e:	2300      	movs	r3, #0
 800b2a0:	220a      	movs	r2, #10
 800b2a2:	4630      	mov	r0, r6
 800b2a4:	f000 f8b6 	bl	800b414 <__multadd>
 800b2a8:	4605      	mov	r5, r0
 800b2aa:	e7ea      	b.n	800b282 <_dtoa_r+0xaa2>
 800b2ac:	08011674 	.word	0x08011674
 800b2b0:	080115d4 	.word	0x080115d4
 800b2b4:	080115f8 	.word	0x080115f8

0800b2b8 <_free_r>:
 800b2b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b2ba:	2900      	cmp	r1, #0
 800b2bc:	d044      	beq.n	800b348 <_free_r+0x90>
 800b2be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2c2:	9001      	str	r0, [sp, #4]
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	f1a1 0404 	sub.w	r4, r1, #4
 800b2ca:	bfb8      	it	lt
 800b2cc:	18e4      	addlt	r4, r4, r3
 800b2ce:	f7fe fc15 	bl	8009afc <__malloc_lock>
 800b2d2:	4a1e      	ldr	r2, [pc, #120]	; (800b34c <_free_r+0x94>)
 800b2d4:	9801      	ldr	r0, [sp, #4]
 800b2d6:	6813      	ldr	r3, [r2, #0]
 800b2d8:	b933      	cbnz	r3, 800b2e8 <_free_r+0x30>
 800b2da:	6063      	str	r3, [r4, #4]
 800b2dc:	6014      	str	r4, [r2, #0]
 800b2de:	b003      	add	sp, #12
 800b2e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2e4:	f7fe bc10 	b.w	8009b08 <__malloc_unlock>
 800b2e8:	42a3      	cmp	r3, r4
 800b2ea:	d908      	bls.n	800b2fe <_free_r+0x46>
 800b2ec:	6825      	ldr	r5, [r4, #0]
 800b2ee:	1961      	adds	r1, r4, r5
 800b2f0:	428b      	cmp	r3, r1
 800b2f2:	bf01      	itttt	eq
 800b2f4:	6819      	ldreq	r1, [r3, #0]
 800b2f6:	685b      	ldreq	r3, [r3, #4]
 800b2f8:	1949      	addeq	r1, r1, r5
 800b2fa:	6021      	streq	r1, [r4, #0]
 800b2fc:	e7ed      	b.n	800b2da <_free_r+0x22>
 800b2fe:	461a      	mov	r2, r3
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	b10b      	cbz	r3, 800b308 <_free_r+0x50>
 800b304:	42a3      	cmp	r3, r4
 800b306:	d9fa      	bls.n	800b2fe <_free_r+0x46>
 800b308:	6811      	ldr	r1, [r2, #0]
 800b30a:	1855      	adds	r5, r2, r1
 800b30c:	42a5      	cmp	r5, r4
 800b30e:	d10b      	bne.n	800b328 <_free_r+0x70>
 800b310:	6824      	ldr	r4, [r4, #0]
 800b312:	4421      	add	r1, r4
 800b314:	1854      	adds	r4, r2, r1
 800b316:	42a3      	cmp	r3, r4
 800b318:	6011      	str	r1, [r2, #0]
 800b31a:	d1e0      	bne.n	800b2de <_free_r+0x26>
 800b31c:	681c      	ldr	r4, [r3, #0]
 800b31e:	685b      	ldr	r3, [r3, #4]
 800b320:	6053      	str	r3, [r2, #4]
 800b322:	440c      	add	r4, r1
 800b324:	6014      	str	r4, [r2, #0]
 800b326:	e7da      	b.n	800b2de <_free_r+0x26>
 800b328:	d902      	bls.n	800b330 <_free_r+0x78>
 800b32a:	230c      	movs	r3, #12
 800b32c:	6003      	str	r3, [r0, #0]
 800b32e:	e7d6      	b.n	800b2de <_free_r+0x26>
 800b330:	6825      	ldr	r5, [r4, #0]
 800b332:	1961      	adds	r1, r4, r5
 800b334:	428b      	cmp	r3, r1
 800b336:	bf04      	itt	eq
 800b338:	6819      	ldreq	r1, [r3, #0]
 800b33a:	685b      	ldreq	r3, [r3, #4]
 800b33c:	6063      	str	r3, [r4, #4]
 800b33e:	bf04      	itt	eq
 800b340:	1949      	addeq	r1, r1, r5
 800b342:	6021      	streq	r1, [r4, #0]
 800b344:	6054      	str	r4, [r2, #4]
 800b346:	e7ca      	b.n	800b2de <_free_r+0x26>
 800b348:	b003      	add	sp, #12
 800b34a:	bd30      	pop	{r4, r5, pc}
 800b34c:	20001024 	.word	0x20001024

0800b350 <_Balloc>:
 800b350:	b570      	push	{r4, r5, r6, lr}
 800b352:	69c6      	ldr	r6, [r0, #28]
 800b354:	4604      	mov	r4, r0
 800b356:	460d      	mov	r5, r1
 800b358:	b976      	cbnz	r6, 800b378 <_Balloc+0x28>
 800b35a:	2010      	movs	r0, #16
 800b35c:	f7f7 fed4 	bl	8003108 <__wrap_malloc>
 800b360:	4602      	mov	r2, r0
 800b362:	61e0      	str	r0, [r4, #28]
 800b364:	b920      	cbnz	r0, 800b370 <_Balloc+0x20>
 800b366:	4b18      	ldr	r3, [pc, #96]	; (800b3c8 <_Balloc+0x78>)
 800b368:	4818      	ldr	r0, [pc, #96]	; (800b3cc <_Balloc+0x7c>)
 800b36a:	216b      	movs	r1, #107	; 0x6b
 800b36c:	f000 fc1a 	bl	800bba4 <__assert_func>
 800b370:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b374:	6006      	str	r6, [r0, #0]
 800b376:	60c6      	str	r6, [r0, #12]
 800b378:	69e6      	ldr	r6, [r4, #28]
 800b37a:	68f3      	ldr	r3, [r6, #12]
 800b37c:	b183      	cbz	r3, 800b3a0 <_Balloc+0x50>
 800b37e:	69e3      	ldr	r3, [r4, #28]
 800b380:	68db      	ldr	r3, [r3, #12]
 800b382:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b386:	b9b8      	cbnz	r0, 800b3b8 <_Balloc+0x68>
 800b388:	2101      	movs	r1, #1
 800b38a:	fa01 f605 	lsl.w	r6, r1, r5
 800b38e:	1d72      	adds	r2, r6, #5
 800b390:	0092      	lsls	r2, r2, #2
 800b392:	4620      	mov	r0, r4
 800b394:	f000 fc24 	bl	800bbe0 <_calloc_r>
 800b398:	b160      	cbz	r0, 800b3b4 <_Balloc+0x64>
 800b39a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b39e:	e00e      	b.n	800b3be <_Balloc+0x6e>
 800b3a0:	2221      	movs	r2, #33	; 0x21
 800b3a2:	2104      	movs	r1, #4
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f000 fc1b 	bl	800bbe0 <_calloc_r>
 800b3aa:	69e3      	ldr	r3, [r4, #28]
 800b3ac:	60f0      	str	r0, [r6, #12]
 800b3ae:	68db      	ldr	r3, [r3, #12]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d1e4      	bne.n	800b37e <_Balloc+0x2e>
 800b3b4:	2000      	movs	r0, #0
 800b3b6:	bd70      	pop	{r4, r5, r6, pc}
 800b3b8:	6802      	ldr	r2, [r0, #0]
 800b3ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3c4:	e7f7      	b.n	800b3b6 <_Balloc+0x66>
 800b3c6:	bf00      	nop
 800b3c8:	08011605 	.word	0x08011605
 800b3cc:	08011685 	.word	0x08011685

0800b3d0 <_Bfree>:
 800b3d0:	b570      	push	{r4, r5, r6, lr}
 800b3d2:	69c6      	ldr	r6, [r0, #28]
 800b3d4:	4605      	mov	r5, r0
 800b3d6:	460c      	mov	r4, r1
 800b3d8:	b976      	cbnz	r6, 800b3f8 <_Bfree+0x28>
 800b3da:	2010      	movs	r0, #16
 800b3dc:	f7f7 fe94 	bl	8003108 <__wrap_malloc>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	61e8      	str	r0, [r5, #28]
 800b3e4:	b920      	cbnz	r0, 800b3f0 <_Bfree+0x20>
 800b3e6:	4b09      	ldr	r3, [pc, #36]	; (800b40c <_Bfree+0x3c>)
 800b3e8:	4809      	ldr	r0, [pc, #36]	; (800b410 <_Bfree+0x40>)
 800b3ea:	218f      	movs	r1, #143	; 0x8f
 800b3ec:	f000 fbda 	bl	800bba4 <__assert_func>
 800b3f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3f4:	6006      	str	r6, [r0, #0]
 800b3f6:	60c6      	str	r6, [r0, #12]
 800b3f8:	b13c      	cbz	r4, 800b40a <_Bfree+0x3a>
 800b3fa:	69eb      	ldr	r3, [r5, #28]
 800b3fc:	6862      	ldr	r2, [r4, #4]
 800b3fe:	68db      	ldr	r3, [r3, #12]
 800b400:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b404:	6021      	str	r1, [r4, #0]
 800b406:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b40a:	bd70      	pop	{r4, r5, r6, pc}
 800b40c:	08011605 	.word	0x08011605
 800b410:	08011685 	.word	0x08011685

0800b414 <__multadd>:
 800b414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b418:	690d      	ldr	r5, [r1, #16]
 800b41a:	4607      	mov	r7, r0
 800b41c:	460c      	mov	r4, r1
 800b41e:	461e      	mov	r6, r3
 800b420:	f101 0c14 	add.w	ip, r1, #20
 800b424:	2000      	movs	r0, #0
 800b426:	f8dc 3000 	ldr.w	r3, [ip]
 800b42a:	b299      	uxth	r1, r3
 800b42c:	fb02 6101 	mla	r1, r2, r1, r6
 800b430:	0c1e      	lsrs	r6, r3, #16
 800b432:	0c0b      	lsrs	r3, r1, #16
 800b434:	fb02 3306 	mla	r3, r2, r6, r3
 800b438:	b289      	uxth	r1, r1
 800b43a:	3001      	adds	r0, #1
 800b43c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b440:	4285      	cmp	r5, r0
 800b442:	f84c 1b04 	str.w	r1, [ip], #4
 800b446:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b44a:	dcec      	bgt.n	800b426 <__multadd+0x12>
 800b44c:	b30e      	cbz	r6, 800b492 <__multadd+0x7e>
 800b44e:	68a3      	ldr	r3, [r4, #8]
 800b450:	42ab      	cmp	r3, r5
 800b452:	dc19      	bgt.n	800b488 <__multadd+0x74>
 800b454:	6861      	ldr	r1, [r4, #4]
 800b456:	4638      	mov	r0, r7
 800b458:	3101      	adds	r1, #1
 800b45a:	f7ff ff79 	bl	800b350 <_Balloc>
 800b45e:	4680      	mov	r8, r0
 800b460:	b928      	cbnz	r0, 800b46e <__multadd+0x5a>
 800b462:	4602      	mov	r2, r0
 800b464:	4b0c      	ldr	r3, [pc, #48]	; (800b498 <__multadd+0x84>)
 800b466:	480d      	ldr	r0, [pc, #52]	; (800b49c <__multadd+0x88>)
 800b468:	21ba      	movs	r1, #186	; 0xba
 800b46a:	f000 fb9b 	bl	800bba4 <__assert_func>
 800b46e:	6922      	ldr	r2, [r4, #16]
 800b470:	3202      	adds	r2, #2
 800b472:	f104 010c 	add.w	r1, r4, #12
 800b476:	0092      	lsls	r2, r2, #2
 800b478:	300c      	adds	r0, #12
 800b47a:	f7ff f91b 	bl	800a6b4 <memcpy>
 800b47e:	4621      	mov	r1, r4
 800b480:	4638      	mov	r0, r7
 800b482:	f7ff ffa5 	bl	800b3d0 <_Bfree>
 800b486:	4644      	mov	r4, r8
 800b488:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b48c:	3501      	adds	r5, #1
 800b48e:	615e      	str	r6, [r3, #20]
 800b490:	6125      	str	r5, [r4, #16]
 800b492:	4620      	mov	r0, r4
 800b494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b498:	08011674 	.word	0x08011674
 800b49c:	08011685 	.word	0x08011685

0800b4a0 <__hi0bits>:
 800b4a0:	0c03      	lsrs	r3, r0, #16
 800b4a2:	041b      	lsls	r3, r3, #16
 800b4a4:	b9d3      	cbnz	r3, 800b4dc <__hi0bits+0x3c>
 800b4a6:	0400      	lsls	r0, r0, #16
 800b4a8:	2310      	movs	r3, #16
 800b4aa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b4ae:	bf04      	itt	eq
 800b4b0:	0200      	lsleq	r0, r0, #8
 800b4b2:	3308      	addeq	r3, #8
 800b4b4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b4b8:	bf04      	itt	eq
 800b4ba:	0100      	lsleq	r0, r0, #4
 800b4bc:	3304      	addeq	r3, #4
 800b4be:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b4c2:	bf04      	itt	eq
 800b4c4:	0080      	lsleq	r0, r0, #2
 800b4c6:	3302      	addeq	r3, #2
 800b4c8:	2800      	cmp	r0, #0
 800b4ca:	db05      	blt.n	800b4d8 <__hi0bits+0x38>
 800b4cc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b4d0:	f103 0301 	add.w	r3, r3, #1
 800b4d4:	bf08      	it	eq
 800b4d6:	2320      	moveq	r3, #32
 800b4d8:	4618      	mov	r0, r3
 800b4da:	4770      	bx	lr
 800b4dc:	2300      	movs	r3, #0
 800b4de:	e7e4      	b.n	800b4aa <__hi0bits+0xa>

0800b4e0 <__lo0bits>:
 800b4e0:	6803      	ldr	r3, [r0, #0]
 800b4e2:	f013 0207 	ands.w	r2, r3, #7
 800b4e6:	d00c      	beq.n	800b502 <__lo0bits+0x22>
 800b4e8:	07d9      	lsls	r1, r3, #31
 800b4ea:	d422      	bmi.n	800b532 <__lo0bits+0x52>
 800b4ec:	079a      	lsls	r2, r3, #30
 800b4ee:	bf49      	itett	mi
 800b4f0:	085b      	lsrmi	r3, r3, #1
 800b4f2:	089b      	lsrpl	r3, r3, #2
 800b4f4:	6003      	strmi	r3, [r0, #0]
 800b4f6:	2201      	movmi	r2, #1
 800b4f8:	bf5c      	itt	pl
 800b4fa:	6003      	strpl	r3, [r0, #0]
 800b4fc:	2202      	movpl	r2, #2
 800b4fe:	4610      	mov	r0, r2
 800b500:	4770      	bx	lr
 800b502:	b299      	uxth	r1, r3
 800b504:	b909      	cbnz	r1, 800b50a <__lo0bits+0x2a>
 800b506:	0c1b      	lsrs	r3, r3, #16
 800b508:	2210      	movs	r2, #16
 800b50a:	b2d9      	uxtb	r1, r3
 800b50c:	b909      	cbnz	r1, 800b512 <__lo0bits+0x32>
 800b50e:	3208      	adds	r2, #8
 800b510:	0a1b      	lsrs	r3, r3, #8
 800b512:	0719      	lsls	r1, r3, #28
 800b514:	bf04      	itt	eq
 800b516:	091b      	lsreq	r3, r3, #4
 800b518:	3204      	addeq	r2, #4
 800b51a:	0799      	lsls	r1, r3, #30
 800b51c:	bf04      	itt	eq
 800b51e:	089b      	lsreq	r3, r3, #2
 800b520:	3202      	addeq	r2, #2
 800b522:	07d9      	lsls	r1, r3, #31
 800b524:	d403      	bmi.n	800b52e <__lo0bits+0x4e>
 800b526:	085b      	lsrs	r3, r3, #1
 800b528:	f102 0201 	add.w	r2, r2, #1
 800b52c:	d003      	beq.n	800b536 <__lo0bits+0x56>
 800b52e:	6003      	str	r3, [r0, #0]
 800b530:	e7e5      	b.n	800b4fe <__lo0bits+0x1e>
 800b532:	2200      	movs	r2, #0
 800b534:	e7e3      	b.n	800b4fe <__lo0bits+0x1e>
 800b536:	2220      	movs	r2, #32
 800b538:	e7e1      	b.n	800b4fe <__lo0bits+0x1e>
	...

0800b53c <__i2b>:
 800b53c:	b510      	push	{r4, lr}
 800b53e:	460c      	mov	r4, r1
 800b540:	2101      	movs	r1, #1
 800b542:	f7ff ff05 	bl	800b350 <_Balloc>
 800b546:	4602      	mov	r2, r0
 800b548:	b928      	cbnz	r0, 800b556 <__i2b+0x1a>
 800b54a:	4b05      	ldr	r3, [pc, #20]	; (800b560 <__i2b+0x24>)
 800b54c:	4805      	ldr	r0, [pc, #20]	; (800b564 <__i2b+0x28>)
 800b54e:	f240 1145 	movw	r1, #325	; 0x145
 800b552:	f000 fb27 	bl	800bba4 <__assert_func>
 800b556:	2301      	movs	r3, #1
 800b558:	6144      	str	r4, [r0, #20]
 800b55a:	6103      	str	r3, [r0, #16]
 800b55c:	bd10      	pop	{r4, pc}
 800b55e:	bf00      	nop
 800b560:	08011674 	.word	0x08011674
 800b564:	08011685 	.word	0x08011685

0800b568 <__multiply>:
 800b568:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b56c:	4691      	mov	r9, r2
 800b56e:	690a      	ldr	r2, [r1, #16]
 800b570:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b574:	429a      	cmp	r2, r3
 800b576:	bfb8      	it	lt
 800b578:	460b      	movlt	r3, r1
 800b57a:	460c      	mov	r4, r1
 800b57c:	bfbc      	itt	lt
 800b57e:	464c      	movlt	r4, r9
 800b580:	4699      	movlt	r9, r3
 800b582:	6927      	ldr	r7, [r4, #16]
 800b584:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b588:	68a3      	ldr	r3, [r4, #8]
 800b58a:	6861      	ldr	r1, [r4, #4]
 800b58c:	eb07 060a 	add.w	r6, r7, sl
 800b590:	42b3      	cmp	r3, r6
 800b592:	b085      	sub	sp, #20
 800b594:	bfb8      	it	lt
 800b596:	3101      	addlt	r1, #1
 800b598:	f7ff feda 	bl	800b350 <_Balloc>
 800b59c:	b930      	cbnz	r0, 800b5ac <__multiply+0x44>
 800b59e:	4602      	mov	r2, r0
 800b5a0:	4b44      	ldr	r3, [pc, #272]	; (800b6b4 <__multiply+0x14c>)
 800b5a2:	4845      	ldr	r0, [pc, #276]	; (800b6b8 <__multiply+0x150>)
 800b5a4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b5a8:	f000 fafc 	bl	800bba4 <__assert_func>
 800b5ac:	f100 0514 	add.w	r5, r0, #20
 800b5b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b5b4:	462b      	mov	r3, r5
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	4543      	cmp	r3, r8
 800b5ba:	d321      	bcc.n	800b600 <__multiply+0x98>
 800b5bc:	f104 0314 	add.w	r3, r4, #20
 800b5c0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b5c4:	f109 0314 	add.w	r3, r9, #20
 800b5c8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b5cc:	9202      	str	r2, [sp, #8]
 800b5ce:	1b3a      	subs	r2, r7, r4
 800b5d0:	3a15      	subs	r2, #21
 800b5d2:	f022 0203 	bic.w	r2, r2, #3
 800b5d6:	3204      	adds	r2, #4
 800b5d8:	f104 0115 	add.w	r1, r4, #21
 800b5dc:	428f      	cmp	r7, r1
 800b5de:	bf38      	it	cc
 800b5e0:	2204      	movcc	r2, #4
 800b5e2:	9201      	str	r2, [sp, #4]
 800b5e4:	9a02      	ldr	r2, [sp, #8]
 800b5e6:	9303      	str	r3, [sp, #12]
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d80c      	bhi.n	800b606 <__multiply+0x9e>
 800b5ec:	2e00      	cmp	r6, #0
 800b5ee:	dd03      	ble.n	800b5f8 <__multiply+0x90>
 800b5f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d05b      	beq.n	800b6b0 <__multiply+0x148>
 800b5f8:	6106      	str	r6, [r0, #16]
 800b5fa:	b005      	add	sp, #20
 800b5fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b600:	f843 2b04 	str.w	r2, [r3], #4
 800b604:	e7d8      	b.n	800b5b8 <__multiply+0x50>
 800b606:	f8b3 a000 	ldrh.w	sl, [r3]
 800b60a:	f1ba 0f00 	cmp.w	sl, #0
 800b60e:	d024      	beq.n	800b65a <__multiply+0xf2>
 800b610:	f104 0e14 	add.w	lr, r4, #20
 800b614:	46a9      	mov	r9, r5
 800b616:	f04f 0c00 	mov.w	ip, #0
 800b61a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b61e:	f8d9 1000 	ldr.w	r1, [r9]
 800b622:	fa1f fb82 	uxth.w	fp, r2
 800b626:	b289      	uxth	r1, r1
 800b628:	fb0a 110b 	mla	r1, sl, fp, r1
 800b62c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b630:	f8d9 2000 	ldr.w	r2, [r9]
 800b634:	4461      	add	r1, ip
 800b636:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b63a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b63e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b642:	b289      	uxth	r1, r1
 800b644:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b648:	4577      	cmp	r7, lr
 800b64a:	f849 1b04 	str.w	r1, [r9], #4
 800b64e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b652:	d8e2      	bhi.n	800b61a <__multiply+0xb2>
 800b654:	9a01      	ldr	r2, [sp, #4]
 800b656:	f845 c002 	str.w	ip, [r5, r2]
 800b65a:	9a03      	ldr	r2, [sp, #12]
 800b65c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b660:	3304      	adds	r3, #4
 800b662:	f1b9 0f00 	cmp.w	r9, #0
 800b666:	d021      	beq.n	800b6ac <__multiply+0x144>
 800b668:	6829      	ldr	r1, [r5, #0]
 800b66a:	f104 0c14 	add.w	ip, r4, #20
 800b66e:	46ae      	mov	lr, r5
 800b670:	f04f 0a00 	mov.w	sl, #0
 800b674:	f8bc b000 	ldrh.w	fp, [ip]
 800b678:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b67c:	fb09 220b 	mla	r2, r9, fp, r2
 800b680:	4452      	add	r2, sl
 800b682:	b289      	uxth	r1, r1
 800b684:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b688:	f84e 1b04 	str.w	r1, [lr], #4
 800b68c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b690:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b694:	f8be 1000 	ldrh.w	r1, [lr]
 800b698:	fb09 110a 	mla	r1, r9, sl, r1
 800b69c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b6a0:	4567      	cmp	r7, ip
 800b6a2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b6a6:	d8e5      	bhi.n	800b674 <__multiply+0x10c>
 800b6a8:	9a01      	ldr	r2, [sp, #4]
 800b6aa:	50a9      	str	r1, [r5, r2]
 800b6ac:	3504      	adds	r5, #4
 800b6ae:	e799      	b.n	800b5e4 <__multiply+0x7c>
 800b6b0:	3e01      	subs	r6, #1
 800b6b2:	e79b      	b.n	800b5ec <__multiply+0x84>
 800b6b4:	08011674 	.word	0x08011674
 800b6b8:	08011685 	.word	0x08011685

0800b6bc <__pow5mult>:
 800b6bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6c0:	4615      	mov	r5, r2
 800b6c2:	f012 0203 	ands.w	r2, r2, #3
 800b6c6:	4606      	mov	r6, r0
 800b6c8:	460f      	mov	r7, r1
 800b6ca:	d007      	beq.n	800b6dc <__pow5mult+0x20>
 800b6cc:	4c25      	ldr	r4, [pc, #148]	; (800b764 <__pow5mult+0xa8>)
 800b6ce:	3a01      	subs	r2, #1
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b6d6:	f7ff fe9d 	bl	800b414 <__multadd>
 800b6da:	4607      	mov	r7, r0
 800b6dc:	10ad      	asrs	r5, r5, #2
 800b6de:	d03d      	beq.n	800b75c <__pow5mult+0xa0>
 800b6e0:	69f4      	ldr	r4, [r6, #28]
 800b6e2:	b97c      	cbnz	r4, 800b704 <__pow5mult+0x48>
 800b6e4:	2010      	movs	r0, #16
 800b6e6:	f7f7 fd0f 	bl	8003108 <__wrap_malloc>
 800b6ea:	4602      	mov	r2, r0
 800b6ec:	61f0      	str	r0, [r6, #28]
 800b6ee:	b928      	cbnz	r0, 800b6fc <__pow5mult+0x40>
 800b6f0:	4b1d      	ldr	r3, [pc, #116]	; (800b768 <__pow5mult+0xac>)
 800b6f2:	481e      	ldr	r0, [pc, #120]	; (800b76c <__pow5mult+0xb0>)
 800b6f4:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b6f8:	f000 fa54 	bl	800bba4 <__assert_func>
 800b6fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b700:	6004      	str	r4, [r0, #0]
 800b702:	60c4      	str	r4, [r0, #12]
 800b704:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b708:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b70c:	b94c      	cbnz	r4, 800b722 <__pow5mult+0x66>
 800b70e:	f240 2171 	movw	r1, #625	; 0x271
 800b712:	4630      	mov	r0, r6
 800b714:	f7ff ff12 	bl	800b53c <__i2b>
 800b718:	2300      	movs	r3, #0
 800b71a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b71e:	4604      	mov	r4, r0
 800b720:	6003      	str	r3, [r0, #0]
 800b722:	f04f 0900 	mov.w	r9, #0
 800b726:	07eb      	lsls	r3, r5, #31
 800b728:	d50a      	bpl.n	800b740 <__pow5mult+0x84>
 800b72a:	4639      	mov	r1, r7
 800b72c:	4622      	mov	r2, r4
 800b72e:	4630      	mov	r0, r6
 800b730:	f7ff ff1a 	bl	800b568 <__multiply>
 800b734:	4639      	mov	r1, r7
 800b736:	4680      	mov	r8, r0
 800b738:	4630      	mov	r0, r6
 800b73a:	f7ff fe49 	bl	800b3d0 <_Bfree>
 800b73e:	4647      	mov	r7, r8
 800b740:	106d      	asrs	r5, r5, #1
 800b742:	d00b      	beq.n	800b75c <__pow5mult+0xa0>
 800b744:	6820      	ldr	r0, [r4, #0]
 800b746:	b938      	cbnz	r0, 800b758 <__pow5mult+0x9c>
 800b748:	4622      	mov	r2, r4
 800b74a:	4621      	mov	r1, r4
 800b74c:	4630      	mov	r0, r6
 800b74e:	f7ff ff0b 	bl	800b568 <__multiply>
 800b752:	6020      	str	r0, [r4, #0]
 800b754:	f8c0 9000 	str.w	r9, [r0]
 800b758:	4604      	mov	r4, r0
 800b75a:	e7e4      	b.n	800b726 <__pow5mult+0x6a>
 800b75c:	4638      	mov	r0, r7
 800b75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b762:	bf00      	nop
 800b764:	080117d0 	.word	0x080117d0
 800b768:	08011605 	.word	0x08011605
 800b76c:	08011685 	.word	0x08011685

0800b770 <__lshift>:
 800b770:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b774:	460c      	mov	r4, r1
 800b776:	6849      	ldr	r1, [r1, #4]
 800b778:	6923      	ldr	r3, [r4, #16]
 800b77a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b77e:	68a3      	ldr	r3, [r4, #8]
 800b780:	4607      	mov	r7, r0
 800b782:	4691      	mov	r9, r2
 800b784:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b788:	f108 0601 	add.w	r6, r8, #1
 800b78c:	42b3      	cmp	r3, r6
 800b78e:	db0b      	blt.n	800b7a8 <__lshift+0x38>
 800b790:	4638      	mov	r0, r7
 800b792:	f7ff fddd 	bl	800b350 <_Balloc>
 800b796:	4605      	mov	r5, r0
 800b798:	b948      	cbnz	r0, 800b7ae <__lshift+0x3e>
 800b79a:	4602      	mov	r2, r0
 800b79c:	4b28      	ldr	r3, [pc, #160]	; (800b840 <__lshift+0xd0>)
 800b79e:	4829      	ldr	r0, [pc, #164]	; (800b844 <__lshift+0xd4>)
 800b7a0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b7a4:	f000 f9fe 	bl	800bba4 <__assert_func>
 800b7a8:	3101      	adds	r1, #1
 800b7aa:	005b      	lsls	r3, r3, #1
 800b7ac:	e7ee      	b.n	800b78c <__lshift+0x1c>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	f100 0114 	add.w	r1, r0, #20
 800b7b4:	f100 0210 	add.w	r2, r0, #16
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	4553      	cmp	r3, sl
 800b7bc:	db33      	blt.n	800b826 <__lshift+0xb6>
 800b7be:	6920      	ldr	r0, [r4, #16]
 800b7c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7c4:	f104 0314 	add.w	r3, r4, #20
 800b7c8:	f019 091f 	ands.w	r9, r9, #31
 800b7cc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7d0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b7d4:	d02b      	beq.n	800b82e <__lshift+0xbe>
 800b7d6:	f1c9 0e20 	rsb	lr, r9, #32
 800b7da:	468a      	mov	sl, r1
 800b7dc:	2200      	movs	r2, #0
 800b7de:	6818      	ldr	r0, [r3, #0]
 800b7e0:	fa00 f009 	lsl.w	r0, r0, r9
 800b7e4:	4310      	orrs	r0, r2
 800b7e6:	f84a 0b04 	str.w	r0, [sl], #4
 800b7ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7ee:	459c      	cmp	ip, r3
 800b7f0:	fa22 f20e 	lsr.w	r2, r2, lr
 800b7f4:	d8f3      	bhi.n	800b7de <__lshift+0x6e>
 800b7f6:	ebac 0304 	sub.w	r3, ip, r4
 800b7fa:	3b15      	subs	r3, #21
 800b7fc:	f023 0303 	bic.w	r3, r3, #3
 800b800:	3304      	adds	r3, #4
 800b802:	f104 0015 	add.w	r0, r4, #21
 800b806:	4584      	cmp	ip, r0
 800b808:	bf38      	it	cc
 800b80a:	2304      	movcc	r3, #4
 800b80c:	50ca      	str	r2, [r1, r3]
 800b80e:	b10a      	cbz	r2, 800b814 <__lshift+0xa4>
 800b810:	f108 0602 	add.w	r6, r8, #2
 800b814:	3e01      	subs	r6, #1
 800b816:	4638      	mov	r0, r7
 800b818:	612e      	str	r6, [r5, #16]
 800b81a:	4621      	mov	r1, r4
 800b81c:	f7ff fdd8 	bl	800b3d0 <_Bfree>
 800b820:	4628      	mov	r0, r5
 800b822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b826:	f842 0f04 	str.w	r0, [r2, #4]!
 800b82a:	3301      	adds	r3, #1
 800b82c:	e7c5      	b.n	800b7ba <__lshift+0x4a>
 800b82e:	3904      	subs	r1, #4
 800b830:	f853 2b04 	ldr.w	r2, [r3], #4
 800b834:	f841 2f04 	str.w	r2, [r1, #4]!
 800b838:	459c      	cmp	ip, r3
 800b83a:	d8f9      	bhi.n	800b830 <__lshift+0xc0>
 800b83c:	e7ea      	b.n	800b814 <__lshift+0xa4>
 800b83e:	bf00      	nop
 800b840:	08011674 	.word	0x08011674
 800b844:	08011685 	.word	0x08011685

0800b848 <__mcmp>:
 800b848:	b530      	push	{r4, r5, lr}
 800b84a:	6902      	ldr	r2, [r0, #16]
 800b84c:	690c      	ldr	r4, [r1, #16]
 800b84e:	1b12      	subs	r2, r2, r4
 800b850:	d10e      	bne.n	800b870 <__mcmp+0x28>
 800b852:	f100 0314 	add.w	r3, r0, #20
 800b856:	3114      	adds	r1, #20
 800b858:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b85c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b860:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b864:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b868:	42a5      	cmp	r5, r4
 800b86a:	d003      	beq.n	800b874 <__mcmp+0x2c>
 800b86c:	d305      	bcc.n	800b87a <__mcmp+0x32>
 800b86e:	2201      	movs	r2, #1
 800b870:	4610      	mov	r0, r2
 800b872:	bd30      	pop	{r4, r5, pc}
 800b874:	4283      	cmp	r3, r0
 800b876:	d3f3      	bcc.n	800b860 <__mcmp+0x18>
 800b878:	e7fa      	b.n	800b870 <__mcmp+0x28>
 800b87a:	f04f 32ff 	mov.w	r2, #4294967295
 800b87e:	e7f7      	b.n	800b870 <__mcmp+0x28>

0800b880 <__mdiff>:
 800b880:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b884:	460c      	mov	r4, r1
 800b886:	4606      	mov	r6, r0
 800b888:	4611      	mov	r1, r2
 800b88a:	4620      	mov	r0, r4
 800b88c:	4690      	mov	r8, r2
 800b88e:	f7ff ffdb 	bl	800b848 <__mcmp>
 800b892:	1e05      	subs	r5, r0, #0
 800b894:	d110      	bne.n	800b8b8 <__mdiff+0x38>
 800b896:	4629      	mov	r1, r5
 800b898:	4630      	mov	r0, r6
 800b89a:	f7ff fd59 	bl	800b350 <_Balloc>
 800b89e:	b930      	cbnz	r0, 800b8ae <__mdiff+0x2e>
 800b8a0:	4b3a      	ldr	r3, [pc, #232]	; (800b98c <__mdiff+0x10c>)
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	f240 2137 	movw	r1, #567	; 0x237
 800b8a8:	4839      	ldr	r0, [pc, #228]	; (800b990 <__mdiff+0x110>)
 800b8aa:	f000 f97b 	bl	800bba4 <__assert_func>
 800b8ae:	2301      	movs	r3, #1
 800b8b0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8b8:	bfa4      	itt	ge
 800b8ba:	4643      	movge	r3, r8
 800b8bc:	46a0      	movge	r8, r4
 800b8be:	4630      	mov	r0, r6
 800b8c0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b8c4:	bfa6      	itte	ge
 800b8c6:	461c      	movge	r4, r3
 800b8c8:	2500      	movge	r5, #0
 800b8ca:	2501      	movlt	r5, #1
 800b8cc:	f7ff fd40 	bl	800b350 <_Balloc>
 800b8d0:	b920      	cbnz	r0, 800b8dc <__mdiff+0x5c>
 800b8d2:	4b2e      	ldr	r3, [pc, #184]	; (800b98c <__mdiff+0x10c>)
 800b8d4:	4602      	mov	r2, r0
 800b8d6:	f240 2145 	movw	r1, #581	; 0x245
 800b8da:	e7e5      	b.n	800b8a8 <__mdiff+0x28>
 800b8dc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b8e0:	6926      	ldr	r6, [r4, #16]
 800b8e2:	60c5      	str	r5, [r0, #12]
 800b8e4:	f104 0914 	add.w	r9, r4, #20
 800b8e8:	f108 0514 	add.w	r5, r8, #20
 800b8ec:	f100 0e14 	add.w	lr, r0, #20
 800b8f0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b8f4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b8f8:	f108 0210 	add.w	r2, r8, #16
 800b8fc:	46f2      	mov	sl, lr
 800b8fe:	2100      	movs	r1, #0
 800b900:	f859 3b04 	ldr.w	r3, [r9], #4
 800b904:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b908:	fa11 f88b 	uxtah	r8, r1, fp
 800b90c:	b299      	uxth	r1, r3
 800b90e:	0c1b      	lsrs	r3, r3, #16
 800b910:	eba8 0801 	sub.w	r8, r8, r1
 800b914:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b918:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b91c:	fa1f f888 	uxth.w	r8, r8
 800b920:	1419      	asrs	r1, r3, #16
 800b922:	454e      	cmp	r6, r9
 800b924:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b928:	f84a 3b04 	str.w	r3, [sl], #4
 800b92c:	d8e8      	bhi.n	800b900 <__mdiff+0x80>
 800b92e:	1b33      	subs	r3, r6, r4
 800b930:	3b15      	subs	r3, #21
 800b932:	f023 0303 	bic.w	r3, r3, #3
 800b936:	3304      	adds	r3, #4
 800b938:	3415      	adds	r4, #21
 800b93a:	42a6      	cmp	r6, r4
 800b93c:	bf38      	it	cc
 800b93e:	2304      	movcc	r3, #4
 800b940:	441d      	add	r5, r3
 800b942:	4473      	add	r3, lr
 800b944:	469e      	mov	lr, r3
 800b946:	462e      	mov	r6, r5
 800b948:	4566      	cmp	r6, ip
 800b94a:	d30e      	bcc.n	800b96a <__mdiff+0xea>
 800b94c:	f10c 0203 	add.w	r2, ip, #3
 800b950:	1b52      	subs	r2, r2, r5
 800b952:	f022 0203 	bic.w	r2, r2, #3
 800b956:	3d03      	subs	r5, #3
 800b958:	45ac      	cmp	ip, r5
 800b95a:	bf38      	it	cc
 800b95c:	2200      	movcc	r2, #0
 800b95e:	4413      	add	r3, r2
 800b960:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b964:	b17a      	cbz	r2, 800b986 <__mdiff+0x106>
 800b966:	6107      	str	r7, [r0, #16]
 800b968:	e7a4      	b.n	800b8b4 <__mdiff+0x34>
 800b96a:	f856 8b04 	ldr.w	r8, [r6], #4
 800b96e:	fa11 f288 	uxtah	r2, r1, r8
 800b972:	1414      	asrs	r4, r2, #16
 800b974:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b978:	b292      	uxth	r2, r2
 800b97a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b97e:	f84e 2b04 	str.w	r2, [lr], #4
 800b982:	1421      	asrs	r1, r4, #16
 800b984:	e7e0      	b.n	800b948 <__mdiff+0xc8>
 800b986:	3f01      	subs	r7, #1
 800b988:	e7ea      	b.n	800b960 <__mdiff+0xe0>
 800b98a:	bf00      	nop
 800b98c:	08011674 	.word	0x08011674
 800b990:	08011685 	.word	0x08011685

0800b994 <__d2b>:
 800b994:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b998:	460f      	mov	r7, r1
 800b99a:	2101      	movs	r1, #1
 800b99c:	ec59 8b10 	vmov	r8, r9, d0
 800b9a0:	4616      	mov	r6, r2
 800b9a2:	f7ff fcd5 	bl	800b350 <_Balloc>
 800b9a6:	4604      	mov	r4, r0
 800b9a8:	b930      	cbnz	r0, 800b9b8 <__d2b+0x24>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	4b24      	ldr	r3, [pc, #144]	; (800ba40 <__d2b+0xac>)
 800b9ae:	4825      	ldr	r0, [pc, #148]	; (800ba44 <__d2b+0xb0>)
 800b9b0:	f240 310f 	movw	r1, #783	; 0x30f
 800b9b4:	f000 f8f6 	bl	800bba4 <__assert_func>
 800b9b8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b9bc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9c0:	bb2d      	cbnz	r5, 800ba0e <__d2b+0x7a>
 800b9c2:	9301      	str	r3, [sp, #4]
 800b9c4:	f1b8 0300 	subs.w	r3, r8, #0
 800b9c8:	d026      	beq.n	800ba18 <__d2b+0x84>
 800b9ca:	4668      	mov	r0, sp
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	f7ff fd87 	bl	800b4e0 <__lo0bits>
 800b9d2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b9d6:	b1e8      	cbz	r0, 800ba14 <__d2b+0x80>
 800b9d8:	f1c0 0320 	rsb	r3, r0, #32
 800b9dc:	fa02 f303 	lsl.w	r3, r2, r3
 800b9e0:	430b      	orrs	r3, r1
 800b9e2:	40c2      	lsrs	r2, r0
 800b9e4:	6163      	str	r3, [r4, #20]
 800b9e6:	9201      	str	r2, [sp, #4]
 800b9e8:	9b01      	ldr	r3, [sp, #4]
 800b9ea:	61a3      	str	r3, [r4, #24]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	bf14      	ite	ne
 800b9f0:	2202      	movne	r2, #2
 800b9f2:	2201      	moveq	r2, #1
 800b9f4:	6122      	str	r2, [r4, #16]
 800b9f6:	b1bd      	cbz	r5, 800ba28 <__d2b+0x94>
 800b9f8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b9fc:	4405      	add	r5, r0
 800b9fe:	603d      	str	r5, [r7, #0]
 800ba00:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba04:	6030      	str	r0, [r6, #0]
 800ba06:	4620      	mov	r0, r4
 800ba08:	b003      	add	sp, #12
 800ba0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba12:	e7d6      	b.n	800b9c2 <__d2b+0x2e>
 800ba14:	6161      	str	r1, [r4, #20]
 800ba16:	e7e7      	b.n	800b9e8 <__d2b+0x54>
 800ba18:	a801      	add	r0, sp, #4
 800ba1a:	f7ff fd61 	bl	800b4e0 <__lo0bits>
 800ba1e:	9b01      	ldr	r3, [sp, #4]
 800ba20:	6163      	str	r3, [r4, #20]
 800ba22:	3020      	adds	r0, #32
 800ba24:	2201      	movs	r2, #1
 800ba26:	e7e5      	b.n	800b9f4 <__d2b+0x60>
 800ba28:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba2c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba30:	6038      	str	r0, [r7, #0]
 800ba32:	6918      	ldr	r0, [r3, #16]
 800ba34:	f7ff fd34 	bl	800b4a0 <__hi0bits>
 800ba38:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba3c:	e7e2      	b.n	800ba04 <__d2b+0x70>
 800ba3e:	bf00      	nop
 800ba40:	08011674 	.word	0x08011674
 800ba44:	08011685 	.word	0x08011685

0800ba48 <__sflush_r>:
 800ba48:	898a      	ldrh	r2, [r1, #12]
 800ba4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba4e:	4605      	mov	r5, r0
 800ba50:	0710      	lsls	r0, r2, #28
 800ba52:	460c      	mov	r4, r1
 800ba54:	d458      	bmi.n	800bb08 <__sflush_r+0xc0>
 800ba56:	684b      	ldr	r3, [r1, #4]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	dc05      	bgt.n	800ba68 <__sflush_r+0x20>
 800ba5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	dc02      	bgt.n	800ba68 <__sflush_r+0x20>
 800ba62:	2000      	movs	r0, #0
 800ba64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba6a:	2e00      	cmp	r6, #0
 800ba6c:	d0f9      	beq.n	800ba62 <__sflush_r+0x1a>
 800ba6e:	2300      	movs	r3, #0
 800ba70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ba74:	682f      	ldr	r7, [r5, #0]
 800ba76:	6a21      	ldr	r1, [r4, #32]
 800ba78:	602b      	str	r3, [r5, #0]
 800ba7a:	d032      	beq.n	800bae2 <__sflush_r+0x9a>
 800ba7c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ba7e:	89a3      	ldrh	r3, [r4, #12]
 800ba80:	075a      	lsls	r2, r3, #29
 800ba82:	d505      	bpl.n	800ba90 <__sflush_r+0x48>
 800ba84:	6863      	ldr	r3, [r4, #4]
 800ba86:	1ac0      	subs	r0, r0, r3
 800ba88:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ba8a:	b10b      	cbz	r3, 800ba90 <__sflush_r+0x48>
 800ba8c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ba8e:	1ac0      	subs	r0, r0, r3
 800ba90:	2300      	movs	r3, #0
 800ba92:	4602      	mov	r2, r0
 800ba94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ba96:	6a21      	ldr	r1, [r4, #32]
 800ba98:	4628      	mov	r0, r5
 800ba9a:	47b0      	blx	r6
 800ba9c:	1c43      	adds	r3, r0, #1
 800ba9e:	89a3      	ldrh	r3, [r4, #12]
 800baa0:	d106      	bne.n	800bab0 <__sflush_r+0x68>
 800baa2:	6829      	ldr	r1, [r5, #0]
 800baa4:	291d      	cmp	r1, #29
 800baa6:	d82b      	bhi.n	800bb00 <__sflush_r+0xb8>
 800baa8:	4a29      	ldr	r2, [pc, #164]	; (800bb50 <__sflush_r+0x108>)
 800baaa:	410a      	asrs	r2, r1
 800baac:	07d6      	lsls	r6, r2, #31
 800baae:	d427      	bmi.n	800bb00 <__sflush_r+0xb8>
 800bab0:	2200      	movs	r2, #0
 800bab2:	6062      	str	r2, [r4, #4]
 800bab4:	04d9      	lsls	r1, r3, #19
 800bab6:	6922      	ldr	r2, [r4, #16]
 800bab8:	6022      	str	r2, [r4, #0]
 800baba:	d504      	bpl.n	800bac6 <__sflush_r+0x7e>
 800babc:	1c42      	adds	r2, r0, #1
 800babe:	d101      	bne.n	800bac4 <__sflush_r+0x7c>
 800bac0:	682b      	ldr	r3, [r5, #0]
 800bac2:	b903      	cbnz	r3, 800bac6 <__sflush_r+0x7e>
 800bac4:	6560      	str	r0, [r4, #84]	; 0x54
 800bac6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bac8:	602f      	str	r7, [r5, #0]
 800baca:	2900      	cmp	r1, #0
 800bacc:	d0c9      	beq.n	800ba62 <__sflush_r+0x1a>
 800bace:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bad2:	4299      	cmp	r1, r3
 800bad4:	d002      	beq.n	800badc <__sflush_r+0x94>
 800bad6:	4628      	mov	r0, r5
 800bad8:	f7ff fbee 	bl	800b2b8 <_free_r>
 800badc:	2000      	movs	r0, #0
 800bade:	6360      	str	r0, [r4, #52]	; 0x34
 800bae0:	e7c0      	b.n	800ba64 <__sflush_r+0x1c>
 800bae2:	2301      	movs	r3, #1
 800bae4:	4628      	mov	r0, r5
 800bae6:	47b0      	blx	r6
 800bae8:	1c41      	adds	r1, r0, #1
 800baea:	d1c8      	bne.n	800ba7e <__sflush_r+0x36>
 800baec:	682b      	ldr	r3, [r5, #0]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d0c5      	beq.n	800ba7e <__sflush_r+0x36>
 800baf2:	2b1d      	cmp	r3, #29
 800baf4:	d001      	beq.n	800bafa <__sflush_r+0xb2>
 800baf6:	2b16      	cmp	r3, #22
 800baf8:	d101      	bne.n	800bafe <__sflush_r+0xb6>
 800bafa:	602f      	str	r7, [r5, #0]
 800bafc:	e7b1      	b.n	800ba62 <__sflush_r+0x1a>
 800bafe:	89a3      	ldrh	r3, [r4, #12]
 800bb00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb04:	81a3      	strh	r3, [r4, #12]
 800bb06:	e7ad      	b.n	800ba64 <__sflush_r+0x1c>
 800bb08:	690f      	ldr	r7, [r1, #16]
 800bb0a:	2f00      	cmp	r7, #0
 800bb0c:	d0a9      	beq.n	800ba62 <__sflush_r+0x1a>
 800bb0e:	0793      	lsls	r3, r2, #30
 800bb10:	680e      	ldr	r6, [r1, #0]
 800bb12:	bf08      	it	eq
 800bb14:	694b      	ldreq	r3, [r1, #20]
 800bb16:	600f      	str	r7, [r1, #0]
 800bb18:	bf18      	it	ne
 800bb1a:	2300      	movne	r3, #0
 800bb1c:	eba6 0807 	sub.w	r8, r6, r7
 800bb20:	608b      	str	r3, [r1, #8]
 800bb22:	f1b8 0f00 	cmp.w	r8, #0
 800bb26:	dd9c      	ble.n	800ba62 <__sflush_r+0x1a>
 800bb28:	6a21      	ldr	r1, [r4, #32]
 800bb2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bb2c:	4643      	mov	r3, r8
 800bb2e:	463a      	mov	r2, r7
 800bb30:	4628      	mov	r0, r5
 800bb32:	47b0      	blx	r6
 800bb34:	2800      	cmp	r0, #0
 800bb36:	dc06      	bgt.n	800bb46 <__sflush_r+0xfe>
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb3e:	81a3      	strh	r3, [r4, #12]
 800bb40:	f04f 30ff 	mov.w	r0, #4294967295
 800bb44:	e78e      	b.n	800ba64 <__sflush_r+0x1c>
 800bb46:	4407      	add	r7, r0
 800bb48:	eba8 0800 	sub.w	r8, r8, r0
 800bb4c:	e7e9      	b.n	800bb22 <__sflush_r+0xda>
 800bb4e:	bf00      	nop
 800bb50:	dfbffffe 	.word	0xdfbffffe

0800bb54 <_fflush_r>:
 800bb54:	b538      	push	{r3, r4, r5, lr}
 800bb56:	690b      	ldr	r3, [r1, #16]
 800bb58:	4605      	mov	r5, r0
 800bb5a:	460c      	mov	r4, r1
 800bb5c:	b913      	cbnz	r3, 800bb64 <_fflush_r+0x10>
 800bb5e:	2500      	movs	r5, #0
 800bb60:	4628      	mov	r0, r5
 800bb62:	bd38      	pop	{r3, r4, r5, pc}
 800bb64:	b118      	cbz	r0, 800bb6e <_fflush_r+0x1a>
 800bb66:	6a03      	ldr	r3, [r0, #32]
 800bb68:	b90b      	cbnz	r3, 800bb6e <_fflush_r+0x1a>
 800bb6a:	f7fe fc89 	bl	800a480 <__sinit>
 800bb6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d0f3      	beq.n	800bb5e <_fflush_r+0xa>
 800bb76:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bb78:	07d0      	lsls	r0, r2, #31
 800bb7a:	d404      	bmi.n	800bb86 <_fflush_r+0x32>
 800bb7c:	0599      	lsls	r1, r3, #22
 800bb7e:	d402      	bmi.n	800bb86 <_fflush_r+0x32>
 800bb80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb82:	f7fe fd95 	bl	800a6b0 <__retarget_lock_acquire_recursive>
 800bb86:	4628      	mov	r0, r5
 800bb88:	4621      	mov	r1, r4
 800bb8a:	f7ff ff5d 	bl	800ba48 <__sflush_r>
 800bb8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bb90:	07da      	lsls	r2, r3, #31
 800bb92:	4605      	mov	r5, r0
 800bb94:	d4e4      	bmi.n	800bb60 <_fflush_r+0xc>
 800bb96:	89a3      	ldrh	r3, [r4, #12]
 800bb98:	059b      	lsls	r3, r3, #22
 800bb9a:	d4e1      	bmi.n	800bb60 <_fflush_r+0xc>
 800bb9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bb9e:	f7fe fd88 	bl	800a6b2 <__retarget_lock_release_recursive>
 800bba2:	e7dd      	b.n	800bb60 <_fflush_r+0xc>

0800bba4 <__assert_func>:
 800bba4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bba6:	4614      	mov	r4, r2
 800bba8:	461a      	mov	r2, r3
 800bbaa:	4b09      	ldr	r3, [pc, #36]	; (800bbd0 <__assert_func+0x2c>)
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	4605      	mov	r5, r0
 800bbb0:	68d8      	ldr	r0, [r3, #12]
 800bbb2:	b14c      	cbz	r4, 800bbc8 <__assert_func+0x24>
 800bbb4:	4b07      	ldr	r3, [pc, #28]	; (800bbd4 <__assert_func+0x30>)
 800bbb6:	9100      	str	r1, [sp, #0]
 800bbb8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbbc:	4906      	ldr	r1, [pc, #24]	; (800bbd8 <__assert_func+0x34>)
 800bbbe:	462b      	mov	r3, r5
 800bbc0:	f000 f844 	bl	800bc4c <fiprintf>
 800bbc4:	f000 f854 	bl	800bc70 <abort>
 800bbc8:	4b04      	ldr	r3, [pc, #16]	; (800bbdc <__assert_func+0x38>)
 800bbca:	461c      	mov	r4, r3
 800bbcc:	e7f3      	b.n	800bbb6 <__assert_func+0x12>
 800bbce:	bf00      	nop
 800bbd0:	20000604 	.word	0x20000604
 800bbd4:	080117e6 	.word	0x080117e6
 800bbd8:	080117f3 	.word	0x080117f3
 800bbdc:	08011821 	.word	0x08011821

0800bbe0 <_calloc_r>:
 800bbe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbe2:	fba1 2402 	umull	r2, r4, r1, r2
 800bbe6:	b94c      	cbnz	r4, 800bbfc <_calloc_r+0x1c>
 800bbe8:	4611      	mov	r1, r2
 800bbea:	9201      	str	r2, [sp, #4]
 800bbec:	f7fd ff06 	bl	80099fc <_malloc_r>
 800bbf0:	9a01      	ldr	r2, [sp, #4]
 800bbf2:	4605      	mov	r5, r0
 800bbf4:	b930      	cbnz	r0, 800bc04 <_calloc_r+0x24>
 800bbf6:	4628      	mov	r0, r5
 800bbf8:	b003      	add	sp, #12
 800bbfa:	bd30      	pop	{r4, r5, pc}
 800bbfc:	220c      	movs	r2, #12
 800bbfe:	6002      	str	r2, [r0, #0]
 800bc00:	2500      	movs	r5, #0
 800bc02:	e7f8      	b.n	800bbf6 <_calloc_r+0x16>
 800bc04:	4621      	mov	r1, r4
 800bc06:	f7fe fcb4 	bl	800a572 <memset>
 800bc0a:	e7f4      	b.n	800bbf6 <_calloc_r+0x16>

0800bc0c <__ascii_mbtowc>:
 800bc0c:	b082      	sub	sp, #8
 800bc0e:	b901      	cbnz	r1, 800bc12 <__ascii_mbtowc+0x6>
 800bc10:	a901      	add	r1, sp, #4
 800bc12:	b142      	cbz	r2, 800bc26 <__ascii_mbtowc+0x1a>
 800bc14:	b14b      	cbz	r3, 800bc2a <__ascii_mbtowc+0x1e>
 800bc16:	7813      	ldrb	r3, [r2, #0]
 800bc18:	600b      	str	r3, [r1, #0]
 800bc1a:	7812      	ldrb	r2, [r2, #0]
 800bc1c:	1e10      	subs	r0, r2, #0
 800bc1e:	bf18      	it	ne
 800bc20:	2001      	movne	r0, #1
 800bc22:	b002      	add	sp, #8
 800bc24:	4770      	bx	lr
 800bc26:	4610      	mov	r0, r2
 800bc28:	e7fb      	b.n	800bc22 <__ascii_mbtowc+0x16>
 800bc2a:	f06f 0001 	mvn.w	r0, #1
 800bc2e:	e7f8      	b.n	800bc22 <__ascii_mbtowc+0x16>

0800bc30 <__ascii_wctomb>:
 800bc30:	b149      	cbz	r1, 800bc46 <__ascii_wctomb+0x16>
 800bc32:	2aff      	cmp	r2, #255	; 0xff
 800bc34:	bf85      	ittet	hi
 800bc36:	238a      	movhi	r3, #138	; 0x8a
 800bc38:	6003      	strhi	r3, [r0, #0]
 800bc3a:	700a      	strbls	r2, [r1, #0]
 800bc3c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bc40:	bf98      	it	ls
 800bc42:	2001      	movls	r0, #1
 800bc44:	4770      	bx	lr
 800bc46:	4608      	mov	r0, r1
 800bc48:	4770      	bx	lr
	...

0800bc4c <fiprintf>:
 800bc4c:	b40e      	push	{r1, r2, r3}
 800bc4e:	b503      	push	{r0, r1, lr}
 800bc50:	4601      	mov	r1, r0
 800bc52:	ab03      	add	r3, sp, #12
 800bc54:	4805      	ldr	r0, [pc, #20]	; (800bc6c <fiprintf+0x20>)
 800bc56:	f853 2b04 	ldr.w	r2, [r3], #4
 800bc5a:	6800      	ldr	r0, [r0, #0]
 800bc5c:	9301      	str	r3, [sp, #4]
 800bc5e:	f000 f837 	bl	800bcd0 <_vfiprintf_r>
 800bc62:	b002      	add	sp, #8
 800bc64:	f85d eb04 	ldr.w	lr, [sp], #4
 800bc68:	b003      	add	sp, #12
 800bc6a:	4770      	bx	lr
 800bc6c:	20000604 	.word	0x20000604

0800bc70 <abort>:
 800bc70:	b508      	push	{r3, lr}
 800bc72:	2006      	movs	r0, #6
 800bc74:	f000 fa04 	bl	800c080 <raise>
 800bc78:	2001      	movs	r0, #1
 800bc7a:	f000 fb75 	bl	800c368 <_exit>

0800bc7e <__sfputc_r>:
 800bc7e:	6893      	ldr	r3, [r2, #8]
 800bc80:	3b01      	subs	r3, #1
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	b410      	push	{r4}
 800bc86:	6093      	str	r3, [r2, #8]
 800bc88:	da08      	bge.n	800bc9c <__sfputc_r+0x1e>
 800bc8a:	6994      	ldr	r4, [r2, #24]
 800bc8c:	42a3      	cmp	r3, r4
 800bc8e:	db01      	blt.n	800bc94 <__sfputc_r+0x16>
 800bc90:	290a      	cmp	r1, #10
 800bc92:	d103      	bne.n	800bc9c <__sfputc_r+0x1e>
 800bc94:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bc98:	f000 b934 	b.w	800bf04 <__swbuf_r>
 800bc9c:	6813      	ldr	r3, [r2, #0]
 800bc9e:	1c58      	adds	r0, r3, #1
 800bca0:	6010      	str	r0, [r2, #0]
 800bca2:	7019      	strb	r1, [r3, #0]
 800bca4:	4608      	mov	r0, r1
 800bca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcaa:	4770      	bx	lr

0800bcac <__sfputs_r>:
 800bcac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcae:	4606      	mov	r6, r0
 800bcb0:	460f      	mov	r7, r1
 800bcb2:	4614      	mov	r4, r2
 800bcb4:	18d5      	adds	r5, r2, r3
 800bcb6:	42ac      	cmp	r4, r5
 800bcb8:	d101      	bne.n	800bcbe <__sfputs_r+0x12>
 800bcba:	2000      	movs	r0, #0
 800bcbc:	e007      	b.n	800bcce <__sfputs_r+0x22>
 800bcbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcc2:	463a      	mov	r2, r7
 800bcc4:	4630      	mov	r0, r6
 800bcc6:	f7ff ffda 	bl	800bc7e <__sfputc_r>
 800bcca:	1c43      	adds	r3, r0, #1
 800bccc:	d1f3      	bne.n	800bcb6 <__sfputs_r+0xa>
 800bcce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800bcd0 <_vfiprintf_r>:
 800bcd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcd4:	460d      	mov	r5, r1
 800bcd6:	b09d      	sub	sp, #116	; 0x74
 800bcd8:	4614      	mov	r4, r2
 800bcda:	4698      	mov	r8, r3
 800bcdc:	4606      	mov	r6, r0
 800bcde:	b118      	cbz	r0, 800bce8 <_vfiprintf_r+0x18>
 800bce0:	6a03      	ldr	r3, [r0, #32]
 800bce2:	b90b      	cbnz	r3, 800bce8 <_vfiprintf_r+0x18>
 800bce4:	f7fe fbcc 	bl	800a480 <__sinit>
 800bce8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bcea:	07d9      	lsls	r1, r3, #31
 800bcec:	d405      	bmi.n	800bcfa <_vfiprintf_r+0x2a>
 800bcee:	89ab      	ldrh	r3, [r5, #12]
 800bcf0:	059a      	lsls	r2, r3, #22
 800bcf2:	d402      	bmi.n	800bcfa <_vfiprintf_r+0x2a>
 800bcf4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bcf6:	f7fe fcdb 	bl	800a6b0 <__retarget_lock_acquire_recursive>
 800bcfa:	89ab      	ldrh	r3, [r5, #12]
 800bcfc:	071b      	lsls	r3, r3, #28
 800bcfe:	d501      	bpl.n	800bd04 <_vfiprintf_r+0x34>
 800bd00:	692b      	ldr	r3, [r5, #16]
 800bd02:	b99b      	cbnz	r3, 800bd2c <_vfiprintf_r+0x5c>
 800bd04:	4629      	mov	r1, r5
 800bd06:	4630      	mov	r0, r6
 800bd08:	f000 f93a 	bl	800bf80 <__swsetup_r>
 800bd0c:	b170      	cbz	r0, 800bd2c <_vfiprintf_r+0x5c>
 800bd0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd10:	07dc      	lsls	r4, r3, #31
 800bd12:	d504      	bpl.n	800bd1e <_vfiprintf_r+0x4e>
 800bd14:	f04f 30ff 	mov.w	r0, #4294967295
 800bd18:	b01d      	add	sp, #116	; 0x74
 800bd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1e:	89ab      	ldrh	r3, [r5, #12]
 800bd20:	0598      	lsls	r0, r3, #22
 800bd22:	d4f7      	bmi.n	800bd14 <_vfiprintf_r+0x44>
 800bd24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd26:	f7fe fcc4 	bl	800a6b2 <__retarget_lock_release_recursive>
 800bd2a:	e7f3      	b.n	800bd14 <_vfiprintf_r+0x44>
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd30:	2320      	movs	r3, #32
 800bd32:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd36:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd3a:	2330      	movs	r3, #48	; 0x30
 800bd3c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800bef0 <_vfiprintf_r+0x220>
 800bd40:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd44:	f04f 0901 	mov.w	r9, #1
 800bd48:	4623      	mov	r3, r4
 800bd4a:	469a      	mov	sl, r3
 800bd4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd50:	b10a      	cbz	r2, 800bd56 <_vfiprintf_r+0x86>
 800bd52:	2a25      	cmp	r2, #37	; 0x25
 800bd54:	d1f9      	bne.n	800bd4a <_vfiprintf_r+0x7a>
 800bd56:	ebba 0b04 	subs.w	fp, sl, r4
 800bd5a:	d00b      	beq.n	800bd74 <_vfiprintf_r+0xa4>
 800bd5c:	465b      	mov	r3, fp
 800bd5e:	4622      	mov	r2, r4
 800bd60:	4629      	mov	r1, r5
 800bd62:	4630      	mov	r0, r6
 800bd64:	f7ff ffa2 	bl	800bcac <__sfputs_r>
 800bd68:	3001      	adds	r0, #1
 800bd6a:	f000 80a9 	beq.w	800bec0 <_vfiprintf_r+0x1f0>
 800bd6e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd70:	445a      	add	r2, fp
 800bd72:	9209      	str	r2, [sp, #36]	; 0x24
 800bd74:	f89a 3000 	ldrb.w	r3, [sl]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f000 80a1 	beq.w	800bec0 <_vfiprintf_r+0x1f0>
 800bd7e:	2300      	movs	r3, #0
 800bd80:	f04f 32ff 	mov.w	r2, #4294967295
 800bd84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd88:	f10a 0a01 	add.w	sl, sl, #1
 800bd8c:	9304      	str	r3, [sp, #16]
 800bd8e:	9307      	str	r3, [sp, #28]
 800bd90:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd94:	931a      	str	r3, [sp, #104]	; 0x68
 800bd96:	4654      	mov	r4, sl
 800bd98:	2205      	movs	r2, #5
 800bd9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd9e:	4854      	ldr	r0, [pc, #336]	; (800bef0 <_vfiprintf_r+0x220>)
 800bda0:	f7f4 fa4e 	bl	8000240 <memchr>
 800bda4:	9a04      	ldr	r2, [sp, #16]
 800bda6:	b9d8      	cbnz	r0, 800bde0 <_vfiprintf_r+0x110>
 800bda8:	06d1      	lsls	r1, r2, #27
 800bdaa:	bf44      	itt	mi
 800bdac:	2320      	movmi	r3, #32
 800bdae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdb2:	0713      	lsls	r3, r2, #28
 800bdb4:	bf44      	itt	mi
 800bdb6:	232b      	movmi	r3, #43	; 0x2b
 800bdb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdbc:	f89a 3000 	ldrb.w	r3, [sl]
 800bdc0:	2b2a      	cmp	r3, #42	; 0x2a
 800bdc2:	d015      	beq.n	800bdf0 <_vfiprintf_r+0x120>
 800bdc4:	9a07      	ldr	r2, [sp, #28]
 800bdc6:	4654      	mov	r4, sl
 800bdc8:	2000      	movs	r0, #0
 800bdca:	f04f 0c0a 	mov.w	ip, #10
 800bdce:	4621      	mov	r1, r4
 800bdd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdd4:	3b30      	subs	r3, #48	; 0x30
 800bdd6:	2b09      	cmp	r3, #9
 800bdd8:	d94d      	bls.n	800be76 <_vfiprintf_r+0x1a6>
 800bdda:	b1b0      	cbz	r0, 800be0a <_vfiprintf_r+0x13a>
 800bddc:	9207      	str	r2, [sp, #28]
 800bdde:	e014      	b.n	800be0a <_vfiprintf_r+0x13a>
 800bde0:	eba0 0308 	sub.w	r3, r0, r8
 800bde4:	fa09 f303 	lsl.w	r3, r9, r3
 800bde8:	4313      	orrs	r3, r2
 800bdea:	9304      	str	r3, [sp, #16]
 800bdec:	46a2      	mov	sl, r4
 800bdee:	e7d2      	b.n	800bd96 <_vfiprintf_r+0xc6>
 800bdf0:	9b03      	ldr	r3, [sp, #12]
 800bdf2:	1d19      	adds	r1, r3, #4
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	9103      	str	r1, [sp, #12]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	bfbb      	ittet	lt
 800bdfc:	425b      	neglt	r3, r3
 800bdfe:	f042 0202 	orrlt.w	r2, r2, #2
 800be02:	9307      	strge	r3, [sp, #28]
 800be04:	9307      	strlt	r3, [sp, #28]
 800be06:	bfb8      	it	lt
 800be08:	9204      	strlt	r2, [sp, #16]
 800be0a:	7823      	ldrb	r3, [r4, #0]
 800be0c:	2b2e      	cmp	r3, #46	; 0x2e
 800be0e:	d10c      	bne.n	800be2a <_vfiprintf_r+0x15a>
 800be10:	7863      	ldrb	r3, [r4, #1]
 800be12:	2b2a      	cmp	r3, #42	; 0x2a
 800be14:	d134      	bne.n	800be80 <_vfiprintf_r+0x1b0>
 800be16:	9b03      	ldr	r3, [sp, #12]
 800be18:	1d1a      	adds	r2, r3, #4
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	9203      	str	r2, [sp, #12]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	bfb8      	it	lt
 800be22:	f04f 33ff 	movlt.w	r3, #4294967295
 800be26:	3402      	adds	r4, #2
 800be28:	9305      	str	r3, [sp, #20]
 800be2a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800bf00 <_vfiprintf_r+0x230>
 800be2e:	7821      	ldrb	r1, [r4, #0]
 800be30:	2203      	movs	r2, #3
 800be32:	4650      	mov	r0, sl
 800be34:	f7f4 fa04 	bl	8000240 <memchr>
 800be38:	b138      	cbz	r0, 800be4a <_vfiprintf_r+0x17a>
 800be3a:	9b04      	ldr	r3, [sp, #16]
 800be3c:	eba0 000a 	sub.w	r0, r0, sl
 800be40:	2240      	movs	r2, #64	; 0x40
 800be42:	4082      	lsls	r2, r0
 800be44:	4313      	orrs	r3, r2
 800be46:	3401      	adds	r4, #1
 800be48:	9304      	str	r3, [sp, #16]
 800be4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be4e:	4829      	ldr	r0, [pc, #164]	; (800bef4 <_vfiprintf_r+0x224>)
 800be50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be54:	2206      	movs	r2, #6
 800be56:	f7f4 f9f3 	bl	8000240 <memchr>
 800be5a:	2800      	cmp	r0, #0
 800be5c:	d03f      	beq.n	800bede <_vfiprintf_r+0x20e>
 800be5e:	4b26      	ldr	r3, [pc, #152]	; (800bef8 <_vfiprintf_r+0x228>)
 800be60:	bb1b      	cbnz	r3, 800beaa <_vfiprintf_r+0x1da>
 800be62:	9b03      	ldr	r3, [sp, #12]
 800be64:	3307      	adds	r3, #7
 800be66:	f023 0307 	bic.w	r3, r3, #7
 800be6a:	3308      	adds	r3, #8
 800be6c:	9303      	str	r3, [sp, #12]
 800be6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be70:	443b      	add	r3, r7
 800be72:	9309      	str	r3, [sp, #36]	; 0x24
 800be74:	e768      	b.n	800bd48 <_vfiprintf_r+0x78>
 800be76:	fb0c 3202 	mla	r2, ip, r2, r3
 800be7a:	460c      	mov	r4, r1
 800be7c:	2001      	movs	r0, #1
 800be7e:	e7a6      	b.n	800bdce <_vfiprintf_r+0xfe>
 800be80:	2300      	movs	r3, #0
 800be82:	3401      	adds	r4, #1
 800be84:	9305      	str	r3, [sp, #20]
 800be86:	4619      	mov	r1, r3
 800be88:	f04f 0c0a 	mov.w	ip, #10
 800be8c:	4620      	mov	r0, r4
 800be8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be92:	3a30      	subs	r2, #48	; 0x30
 800be94:	2a09      	cmp	r2, #9
 800be96:	d903      	bls.n	800bea0 <_vfiprintf_r+0x1d0>
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d0c6      	beq.n	800be2a <_vfiprintf_r+0x15a>
 800be9c:	9105      	str	r1, [sp, #20]
 800be9e:	e7c4      	b.n	800be2a <_vfiprintf_r+0x15a>
 800bea0:	fb0c 2101 	mla	r1, ip, r1, r2
 800bea4:	4604      	mov	r4, r0
 800bea6:	2301      	movs	r3, #1
 800bea8:	e7f0      	b.n	800be8c <_vfiprintf_r+0x1bc>
 800beaa:	ab03      	add	r3, sp, #12
 800beac:	9300      	str	r3, [sp, #0]
 800beae:	462a      	mov	r2, r5
 800beb0:	4b12      	ldr	r3, [pc, #72]	; (800befc <_vfiprintf_r+0x22c>)
 800beb2:	a904      	add	r1, sp, #16
 800beb4:	4630      	mov	r0, r6
 800beb6:	f7fd febf 	bl	8009c38 <_printf_float>
 800beba:	4607      	mov	r7, r0
 800bebc:	1c78      	adds	r0, r7, #1
 800bebe:	d1d6      	bne.n	800be6e <_vfiprintf_r+0x19e>
 800bec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bec2:	07d9      	lsls	r1, r3, #31
 800bec4:	d405      	bmi.n	800bed2 <_vfiprintf_r+0x202>
 800bec6:	89ab      	ldrh	r3, [r5, #12]
 800bec8:	059a      	lsls	r2, r3, #22
 800beca:	d402      	bmi.n	800bed2 <_vfiprintf_r+0x202>
 800becc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bece:	f7fe fbf0 	bl	800a6b2 <__retarget_lock_release_recursive>
 800bed2:	89ab      	ldrh	r3, [r5, #12]
 800bed4:	065b      	lsls	r3, r3, #25
 800bed6:	f53f af1d 	bmi.w	800bd14 <_vfiprintf_r+0x44>
 800beda:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bedc:	e71c      	b.n	800bd18 <_vfiprintf_r+0x48>
 800bede:	ab03      	add	r3, sp, #12
 800bee0:	9300      	str	r3, [sp, #0]
 800bee2:	462a      	mov	r2, r5
 800bee4:	4b05      	ldr	r3, [pc, #20]	; (800befc <_vfiprintf_r+0x22c>)
 800bee6:	a904      	add	r1, sp, #16
 800bee8:	4630      	mov	r0, r6
 800beea:	f7fe f92d 	bl	800a148 <_printf_i>
 800beee:	e7e4      	b.n	800beba <_vfiprintf_r+0x1ea>
 800bef0:	08011923 	.word	0x08011923
 800bef4:	0801192d 	.word	0x0801192d
 800bef8:	08009c39 	.word	0x08009c39
 800befc:	0800bcad 	.word	0x0800bcad
 800bf00:	08011929 	.word	0x08011929

0800bf04 <__swbuf_r>:
 800bf04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf06:	460e      	mov	r6, r1
 800bf08:	4614      	mov	r4, r2
 800bf0a:	4605      	mov	r5, r0
 800bf0c:	b118      	cbz	r0, 800bf16 <__swbuf_r+0x12>
 800bf0e:	6a03      	ldr	r3, [r0, #32]
 800bf10:	b90b      	cbnz	r3, 800bf16 <__swbuf_r+0x12>
 800bf12:	f7fe fab5 	bl	800a480 <__sinit>
 800bf16:	69a3      	ldr	r3, [r4, #24]
 800bf18:	60a3      	str	r3, [r4, #8]
 800bf1a:	89a3      	ldrh	r3, [r4, #12]
 800bf1c:	071a      	lsls	r2, r3, #28
 800bf1e:	d525      	bpl.n	800bf6c <__swbuf_r+0x68>
 800bf20:	6923      	ldr	r3, [r4, #16]
 800bf22:	b31b      	cbz	r3, 800bf6c <__swbuf_r+0x68>
 800bf24:	6823      	ldr	r3, [r4, #0]
 800bf26:	6922      	ldr	r2, [r4, #16]
 800bf28:	1a98      	subs	r0, r3, r2
 800bf2a:	6963      	ldr	r3, [r4, #20]
 800bf2c:	b2f6      	uxtb	r6, r6
 800bf2e:	4283      	cmp	r3, r0
 800bf30:	4637      	mov	r7, r6
 800bf32:	dc04      	bgt.n	800bf3e <__swbuf_r+0x3a>
 800bf34:	4621      	mov	r1, r4
 800bf36:	4628      	mov	r0, r5
 800bf38:	f7ff fe0c 	bl	800bb54 <_fflush_r>
 800bf3c:	b9e0      	cbnz	r0, 800bf78 <__swbuf_r+0x74>
 800bf3e:	68a3      	ldr	r3, [r4, #8]
 800bf40:	3b01      	subs	r3, #1
 800bf42:	60a3      	str	r3, [r4, #8]
 800bf44:	6823      	ldr	r3, [r4, #0]
 800bf46:	1c5a      	adds	r2, r3, #1
 800bf48:	6022      	str	r2, [r4, #0]
 800bf4a:	701e      	strb	r6, [r3, #0]
 800bf4c:	6962      	ldr	r2, [r4, #20]
 800bf4e:	1c43      	adds	r3, r0, #1
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d004      	beq.n	800bf5e <__swbuf_r+0x5a>
 800bf54:	89a3      	ldrh	r3, [r4, #12]
 800bf56:	07db      	lsls	r3, r3, #31
 800bf58:	d506      	bpl.n	800bf68 <__swbuf_r+0x64>
 800bf5a:	2e0a      	cmp	r6, #10
 800bf5c:	d104      	bne.n	800bf68 <__swbuf_r+0x64>
 800bf5e:	4621      	mov	r1, r4
 800bf60:	4628      	mov	r0, r5
 800bf62:	f7ff fdf7 	bl	800bb54 <_fflush_r>
 800bf66:	b938      	cbnz	r0, 800bf78 <__swbuf_r+0x74>
 800bf68:	4638      	mov	r0, r7
 800bf6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf6c:	4621      	mov	r1, r4
 800bf6e:	4628      	mov	r0, r5
 800bf70:	f000 f806 	bl	800bf80 <__swsetup_r>
 800bf74:	2800      	cmp	r0, #0
 800bf76:	d0d5      	beq.n	800bf24 <__swbuf_r+0x20>
 800bf78:	f04f 37ff 	mov.w	r7, #4294967295
 800bf7c:	e7f4      	b.n	800bf68 <__swbuf_r+0x64>
	...

0800bf80 <__swsetup_r>:
 800bf80:	b538      	push	{r3, r4, r5, lr}
 800bf82:	4b2a      	ldr	r3, [pc, #168]	; (800c02c <__swsetup_r+0xac>)
 800bf84:	4605      	mov	r5, r0
 800bf86:	6818      	ldr	r0, [r3, #0]
 800bf88:	460c      	mov	r4, r1
 800bf8a:	b118      	cbz	r0, 800bf94 <__swsetup_r+0x14>
 800bf8c:	6a03      	ldr	r3, [r0, #32]
 800bf8e:	b90b      	cbnz	r3, 800bf94 <__swsetup_r+0x14>
 800bf90:	f7fe fa76 	bl	800a480 <__sinit>
 800bf94:	89a3      	ldrh	r3, [r4, #12]
 800bf96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bf9a:	0718      	lsls	r0, r3, #28
 800bf9c:	d422      	bmi.n	800bfe4 <__swsetup_r+0x64>
 800bf9e:	06d9      	lsls	r1, r3, #27
 800bfa0:	d407      	bmi.n	800bfb2 <__swsetup_r+0x32>
 800bfa2:	2309      	movs	r3, #9
 800bfa4:	602b      	str	r3, [r5, #0]
 800bfa6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bfaa:	81a3      	strh	r3, [r4, #12]
 800bfac:	f04f 30ff 	mov.w	r0, #4294967295
 800bfb0:	e034      	b.n	800c01c <__swsetup_r+0x9c>
 800bfb2:	0758      	lsls	r0, r3, #29
 800bfb4:	d512      	bpl.n	800bfdc <__swsetup_r+0x5c>
 800bfb6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bfb8:	b141      	cbz	r1, 800bfcc <__swsetup_r+0x4c>
 800bfba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bfbe:	4299      	cmp	r1, r3
 800bfc0:	d002      	beq.n	800bfc8 <__swsetup_r+0x48>
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	f7ff f978 	bl	800b2b8 <_free_r>
 800bfc8:	2300      	movs	r3, #0
 800bfca:	6363      	str	r3, [r4, #52]	; 0x34
 800bfcc:	89a3      	ldrh	r3, [r4, #12]
 800bfce:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bfd2:	81a3      	strh	r3, [r4, #12]
 800bfd4:	2300      	movs	r3, #0
 800bfd6:	6063      	str	r3, [r4, #4]
 800bfd8:	6923      	ldr	r3, [r4, #16]
 800bfda:	6023      	str	r3, [r4, #0]
 800bfdc:	89a3      	ldrh	r3, [r4, #12]
 800bfde:	f043 0308 	orr.w	r3, r3, #8
 800bfe2:	81a3      	strh	r3, [r4, #12]
 800bfe4:	6923      	ldr	r3, [r4, #16]
 800bfe6:	b94b      	cbnz	r3, 800bffc <__swsetup_r+0x7c>
 800bfe8:	89a3      	ldrh	r3, [r4, #12]
 800bfea:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bfee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bff2:	d003      	beq.n	800bffc <__swsetup_r+0x7c>
 800bff4:	4621      	mov	r1, r4
 800bff6:	4628      	mov	r0, r5
 800bff8:	f000 f884 	bl	800c104 <__smakebuf_r>
 800bffc:	89a0      	ldrh	r0, [r4, #12]
 800bffe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c002:	f010 0301 	ands.w	r3, r0, #1
 800c006:	d00a      	beq.n	800c01e <__swsetup_r+0x9e>
 800c008:	2300      	movs	r3, #0
 800c00a:	60a3      	str	r3, [r4, #8]
 800c00c:	6963      	ldr	r3, [r4, #20]
 800c00e:	425b      	negs	r3, r3
 800c010:	61a3      	str	r3, [r4, #24]
 800c012:	6923      	ldr	r3, [r4, #16]
 800c014:	b943      	cbnz	r3, 800c028 <__swsetup_r+0xa8>
 800c016:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c01a:	d1c4      	bne.n	800bfa6 <__swsetup_r+0x26>
 800c01c:	bd38      	pop	{r3, r4, r5, pc}
 800c01e:	0781      	lsls	r1, r0, #30
 800c020:	bf58      	it	pl
 800c022:	6963      	ldrpl	r3, [r4, #20]
 800c024:	60a3      	str	r3, [r4, #8]
 800c026:	e7f4      	b.n	800c012 <__swsetup_r+0x92>
 800c028:	2000      	movs	r0, #0
 800c02a:	e7f7      	b.n	800c01c <__swsetup_r+0x9c>
 800c02c:	20000604 	.word	0x20000604

0800c030 <_raise_r>:
 800c030:	291f      	cmp	r1, #31
 800c032:	b538      	push	{r3, r4, r5, lr}
 800c034:	4604      	mov	r4, r0
 800c036:	460d      	mov	r5, r1
 800c038:	d904      	bls.n	800c044 <_raise_r+0x14>
 800c03a:	2316      	movs	r3, #22
 800c03c:	6003      	str	r3, [r0, #0]
 800c03e:	f04f 30ff 	mov.w	r0, #4294967295
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c046:	b112      	cbz	r2, 800c04e <_raise_r+0x1e>
 800c048:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c04c:	b94b      	cbnz	r3, 800c062 <_raise_r+0x32>
 800c04e:	4620      	mov	r0, r4
 800c050:	f000 f830 	bl	800c0b4 <_getpid_r>
 800c054:	462a      	mov	r2, r5
 800c056:	4601      	mov	r1, r0
 800c058:	4620      	mov	r0, r4
 800c05a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c05e:	f000 b817 	b.w	800c090 <_kill_r>
 800c062:	2b01      	cmp	r3, #1
 800c064:	d00a      	beq.n	800c07c <_raise_r+0x4c>
 800c066:	1c59      	adds	r1, r3, #1
 800c068:	d103      	bne.n	800c072 <_raise_r+0x42>
 800c06a:	2316      	movs	r3, #22
 800c06c:	6003      	str	r3, [r0, #0]
 800c06e:	2001      	movs	r0, #1
 800c070:	e7e7      	b.n	800c042 <_raise_r+0x12>
 800c072:	2400      	movs	r4, #0
 800c074:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c078:	4628      	mov	r0, r5
 800c07a:	4798      	blx	r3
 800c07c:	2000      	movs	r0, #0
 800c07e:	e7e0      	b.n	800c042 <_raise_r+0x12>

0800c080 <raise>:
 800c080:	4b02      	ldr	r3, [pc, #8]	; (800c08c <raise+0xc>)
 800c082:	4601      	mov	r1, r0
 800c084:	6818      	ldr	r0, [r3, #0]
 800c086:	f7ff bfd3 	b.w	800c030 <_raise_r>
 800c08a:	bf00      	nop
 800c08c:	20000604 	.word	0x20000604

0800c090 <_kill_r>:
 800c090:	b538      	push	{r3, r4, r5, lr}
 800c092:	4d07      	ldr	r5, [pc, #28]	; (800c0b0 <_kill_r+0x20>)
 800c094:	2300      	movs	r3, #0
 800c096:	4604      	mov	r4, r0
 800c098:	4608      	mov	r0, r1
 800c09a:	4611      	mov	r1, r2
 800c09c:	602b      	str	r3, [r5, #0]
 800c09e:	f000 f94b 	bl	800c338 <_kill>
 800c0a2:	1c43      	adds	r3, r0, #1
 800c0a4:	d102      	bne.n	800c0ac <_kill_r+0x1c>
 800c0a6:	682b      	ldr	r3, [r5, #0]
 800c0a8:	b103      	cbz	r3, 800c0ac <_kill_r+0x1c>
 800c0aa:	6023      	str	r3, [r4, #0]
 800c0ac:	bd38      	pop	{r3, r4, r5, pc}
 800c0ae:	bf00      	nop
 800c0b0:	20001168 	.word	0x20001168

0800c0b4 <_getpid_r>:
 800c0b4:	f000 b930 	b.w	800c318 <_getpid>

0800c0b8 <__swhatbuf_r>:
 800c0b8:	b570      	push	{r4, r5, r6, lr}
 800c0ba:	460c      	mov	r4, r1
 800c0bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0c0:	2900      	cmp	r1, #0
 800c0c2:	b096      	sub	sp, #88	; 0x58
 800c0c4:	4615      	mov	r5, r2
 800c0c6:	461e      	mov	r6, r3
 800c0c8:	da0d      	bge.n	800c0e6 <__swhatbuf_r+0x2e>
 800c0ca:	89a3      	ldrh	r3, [r4, #12]
 800c0cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c0d0:	f04f 0100 	mov.w	r1, #0
 800c0d4:	bf0c      	ite	eq
 800c0d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c0da:	2340      	movne	r3, #64	; 0x40
 800c0dc:	2000      	movs	r0, #0
 800c0de:	6031      	str	r1, [r6, #0]
 800c0e0:	602b      	str	r3, [r5, #0]
 800c0e2:	b016      	add	sp, #88	; 0x58
 800c0e4:	bd70      	pop	{r4, r5, r6, pc}
 800c0e6:	466a      	mov	r2, sp
 800c0e8:	f000 f848 	bl	800c17c <_fstat_r>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	dbec      	blt.n	800c0ca <__swhatbuf_r+0x12>
 800c0f0:	9901      	ldr	r1, [sp, #4]
 800c0f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c0f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c0fa:	4259      	negs	r1, r3
 800c0fc:	4159      	adcs	r1, r3
 800c0fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c102:	e7eb      	b.n	800c0dc <__swhatbuf_r+0x24>

0800c104 <__smakebuf_r>:
 800c104:	898b      	ldrh	r3, [r1, #12]
 800c106:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c108:	079d      	lsls	r5, r3, #30
 800c10a:	4606      	mov	r6, r0
 800c10c:	460c      	mov	r4, r1
 800c10e:	d507      	bpl.n	800c120 <__smakebuf_r+0x1c>
 800c110:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c114:	6023      	str	r3, [r4, #0]
 800c116:	6123      	str	r3, [r4, #16]
 800c118:	2301      	movs	r3, #1
 800c11a:	6163      	str	r3, [r4, #20]
 800c11c:	b002      	add	sp, #8
 800c11e:	bd70      	pop	{r4, r5, r6, pc}
 800c120:	ab01      	add	r3, sp, #4
 800c122:	466a      	mov	r2, sp
 800c124:	f7ff ffc8 	bl	800c0b8 <__swhatbuf_r>
 800c128:	9900      	ldr	r1, [sp, #0]
 800c12a:	4605      	mov	r5, r0
 800c12c:	4630      	mov	r0, r6
 800c12e:	f7fd fc65 	bl	80099fc <_malloc_r>
 800c132:	b948      	cbnz	r0, 800c148 <__smakebuf_r+0x44>
 800c134:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c138:	059a      	lsls	r2, r3, #22
 800c13a:	d4ef      	bmi.n	800c11c <__smakebuf_r+0x18>
 800c13c:	f023 0303 	bic.w	r3, r3, #3
 800c140:	f043 0302 	orr.w	r3, r3, #2
 800c144:	81a3      	strh	r3, [r4, #12]
 800c146:	e7e3      	b.n	800c110 <__smakebuf_r+0xc>
 800c148:	89a3      	ldrh	r3, [r4, #12]
 800c14a:	6020      	str	r0, [r4, #0]
 800c14c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c150:	81a3      	strh	r3, [r4, #12]
 800c152:	9b00      	ldr	r3, [sp, #0]
 800c154:	6163      	str	r3, [r4, #20]
 800c156:	9b01      	ldr	r3, [sp, #4]
 800c158:	6120      	str	r0, [r4, #16]
 800c15a:	b15b      	cbz	r3, 800c174 <__smakebuf_r+0x70>
 800c15c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c160:	4630      	mov	r0, r6
 800c162:	f000 f81d 	bl	800c1a0 <_isatty_r>
 800c166:	b128      	cbz	r0, 800c174 <__smakebuf_r+0x70>
 800c168:	89a3      	ldrh	r3, [r4, #12]
 800c16a:	f023 0303 	bic.w	r3, r3, #3
 800c16e:	f043 0301 	orr.w	r3, r3, #1
 800c172:	81a3      	strh	r3, [r4, #12]
 800c174:	89a3      	ldrh	r3, [r4, #12]
 800c176:	431d      	orrs	r5, r3
 800c178:	81a5      	strh	r5, [r4, #12]
 800c17a:	e7cf      	b.n	800c11c <__smakebuf_r+0x18>

0800c17c <_fstat_r>:
 800c17c:	b538      	push	{r3, r4, r5, lr}
 800c17e:	4d07      	ldr	r5, [pc, #28]	; (800c19c <_fstat_r+0x20>)
 800c180:	2300      	movs	r3, #0
 800c182:	4604      	mov	r4, r0
 800c184:	4608      	mov	r0, r1
 800c186:	4611      	mov	r1, r2
 800c188:	602b      	str	r3, [r5, #0]
 800c18a:	f000 f8bd 	bl	800c308 <_fstat>
 800c18e:	1c43      	adds	r3, r0, #1
 800c190:	d102      	bne.n	800c198 <_fstat_r+0x1c>
 800c192:	682b      	ldr	r3, [r5, #0]
 800c194:	b103      	cbz	r3, 800c198 <_fstat_r+0x1c>
 800c196:	6023      	str	r3, [r4, #0]
 800c198:	bd38      	pop	{r3, r4, r5, pc}
 800c19a:	bf00      	nop
 800c19c:	20001168 	.word	0x20001168

0800c1a0 <_isatty_r>:
 800c1a0:	b538      	push	{r3, r4, r5, lr}
 800c1a2:	4d06      	ldr	r5, [pc, #24]	; (800c1bc <_isatty_r+0x1c>)
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	4604      	mov	r4, r0
 800c1a8:	4608      	mov	r0, r1
 800c1aa:	602b      	str	r3, [r5, #0]
 800c1ac:	f000 f8bc 	bl	800c328 <_isatty>
 800c1b0:	1c43      	adds	r3, r0, #1
 800c1b2:	d102      	bne.n	800c1ba <_isatty_r+0x1a>
 800c1b4:	682b      	ldr	r3, [r5, #0]
 800c1b6:	b103      	cbz	r3, 800c1ba <_isatty_r+0x1a>
 800c1b8:	6023      	str	r3, [r4, #0]
 800c1ba:	bd38      	pop	{r3, r4, r5, pc}
 800c1bc:	20001168 	.word	0x20001168

0800c1c0 <expf>:
 800c1c0:	ee10 2a10 	vmov	r2, s0
 800c1c4:	f240 412a 	movw	r1, #1066	; 0x42a
 800c1c8:	f3c2 530a 	ubfx	r3, r2, #20, #11
 800c1cc:	428b      	cmp	r3, r1
 800c1ce:	b430      	push	{r4, r5}
 800c1d0:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800c1d4:	d92a      	bls.n	800c22c <expf+0x6c>
 800c1d6:	f512 0f00 	cmn.w	r2, #8388608	; 0x800000
 800c1da:	d058      	beq.n	800c28e <expf+0xce>
 800c1dc:	f5b3 6fff 	cmp.w	r3, #2040	; 0x7f8
 800c1e0:	d303      	bcc.n	800c1ea <expf+0x2a>
 800c1e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c1e6:	bc30      	pop	{r4, r5}
 800c1e8:	4770      	bx	lr
 800c1ea:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800c294 <expf+0xd4>
 800c1ee:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c1f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1f6:	dd03      	ble.n	800c200 <expf+0x40>
 800c1f8:	bc30      	pop	{r4, r5}
 800c1fa:	2000      	movs	r0, #0
 800c1fc:	f000 b876 	b.w	800c2ec <__math_oflowf>
 800c200:	eddf 7a25 	vldr	s15, [pc, #148]	; 800c298 <expf+0xd8>
 800c204:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c20c:	d503      	bpl.n	800c216 <expf+0x56>
 800c20e:	bc30      	pop	{r4, r5}
 800c210:	2000      	movs	r0, #0
 800c212:	f000 b85f 	b.w	800c2d4 <__math_uflowf>
 800c216:	eddf 7a21 	vldr	s15, [pc, #132]	; 800c29c <expf+0xdc>
 800c21a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800c21e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c222:	d503      	bpl.n	800c22c <expf+0x6c>
 800c224:	bc30      	pop	{r4, r5}
 800c226:	2000      	movs	r0, #0
 800c228:	f000 b85a 	b.w	800c2e0 <__math_may_uflowf>
 800c22c:	4b1c      	ldr	r3, [pc, #112]	; (800c2a0 <expf+0xe0>)
 800c22e:	eeb7 0b00 	vmov.f64	d0, #112	; 0x3f800000  1.0
 800c232:	ed93 5b4a 	vldr	d5, [r3, #296]	; 0x128
 800c236:	ed93 4b48 	vldr	d4, [r3, #288]	; 0x120
 800c23a:	eeb0 7b44 	vmov.f64	d7, d4
 800c23e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800c242:	ee17 0a10 	vmov	r0, s14
 800c246:	ee37 7b44 	vsub.f64	d7, d7, d4
 800c24a:	f000 021f 	and.w	r2, r0, #31
 800c24e:	ee95 7b06 	vfnms.f64	d7, d5, d6
 800c252:	ed93 5b4c 	vldr	d5, [r3, #304]	; 0x130
 800c256:	ee27 4b07 	vmul.f64	d4, d7, d7
 800c25a:	ed93 6b4e 	vldr	d6, [r3, #312]	; 0x138
 800c25e:	eb03 01c2 	add.w	r1, r3, r2, lsl #3
 800c262:	eea5 6b07 	vfma.f64	d6, d5, d7
 800c266:	f853 4032 	ldr.w	r4, [r3, r2, lsl #3]
 800c26a:	684d      	ldr	r5, [r1, #4]
 800c26c:	ed93 5b50 	vldr	d5, [r3, #320]	; 0x140
 800c270:	2100      	movs	r1, #0
 800c272:	190a      	adds	r2, r1, r4
 800c274:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800c278:	eea5 0b07 	vfma.f64	d0, d5, d7
 800c27c:	ec43 2b17 	vmov	d7, r2, r3
 800c280:	eea6 0b04 	vfma.f64	d0, d6, d4
 800c284:	ee20 0b07 	vmul.f64	d0, d0, d7
 800c288:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800c28c:	e7ab      	b.n	800c1e6 <expf+0x26>
 800c28e:	ed9f 0a05 	vldr	s0, [pc, #20]	; 800c2a4 <expf+0xe4>
 800c292:	e7a8      	b.n	800c1e6 <expf+0x26>
 800c294:	42b17217 	.word	0x42b17217
 800c298:	c2cff1b4 	.word	0xc2cff1b4
 800c29c:	c2ce8ecf 	.word	0xc2ce8ecf
 800c2a0:	08011938 	.word	0x08011938
 800c2a4:	00000000 	.word	0x00000000

0800c2a8 <with_errnof>:
 800c2a8:	b513      	push	{r0, r1, r4, lr}
 800c2aa:	4604      	mov	r4, r0
 800c2ac:	ed8d 0a01 	vstr	s0, [sp, #4]
 800c2b0:	f7fe f9d4 	bl	800a65c <__errno>
 800c2b4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800c2b8:	6004      	str	r4, [r0, #0]
 800c2ba:	b002      	add	sp, #8
 800c2bc:	bd10      	pop	{r4, pc}

0800c2be <xflowf>:
 800c2be:	b130      	cbz	r0, 800c2ce <xflowf+0x10>
 800c2c0:	eef1 7a40 	vneg.f32	s15, s0
 800c2c4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c2c8:	2022      	movs	r0, #34	; 0x22
 800c2ca:	f7ff bfed 	b.w	800c2a8 <with_errnof>
 800c2ce:	eef0 7a40 	vmov.f32	s15, s0
 800c2d2:	e7f7      	b.n	800c2c4 <xflowf+0x6>

0800c2d4 <__math_uflowf>:
 800c2d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c2dc <__math_uflowf+0x8>
 800c2d8:	f7ff bff1 	b.w	800c2be <xflowf>
 800c2dc:	10000000 	.word	0x10000000

0800c2e0 <__math_may_uflowf>:
 800c2e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c2e8 <__math_may_uflowf+0x8>
 800c2e4:	f7ff bfeb 	b.w	800c2be <xflowf>
 800c2e8:	1a200000 	.word	0x1a200000

0800c2ec <__math_oflowf>:
 800c2ec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c2f4 <__math_oflowf+0x8>
 800c2f0:	f7ff bfe5 	b.w	800c2be <xflowf>
 800c2f4:	70000000 	.word	0x70000000

0800c2f8 <_close>:
 800c2f8:	4b02      	ldr	r3, [pc, #8]	; (800c304 <_close+0xc>)
 800c2fa:	2258      	movs	r2, #88	; 0x58
 800c2fc:	601a      	str	r2, [r3, #0]
 800c2fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c302:	4770      	bx	lr
 800c304:	20001168 	.word	0x20001168

0800c308 <_fstat>:
 800c308:	4b02      	ldr	r3, [pc, #8]	; (800c314 <_fstat+0xc>)
 800c30a:	2258      	movs	r2, #88	; 0x58
 800c30c:	601a      	str	r2, [r3, #0]
 800c30e:	f04f 30ff 	mov.w	r0, #4294967295
 800c312:	4770      	bx	lr
 800c314:	20001168 	.word	0x20001168

0800c318 <_getpid>:
 800c318:	4b02      	ldr	r3, [pc, #8]	; (800c324 <_getpid+0xc>)
 800c31a:	2258      	movs	r2, #88	; 0x58
 800c31c:	601a      	str	r2, [r3, #0]
 800c31e:	f04f 30ff 	mov.w	r0, #4294967295
 800c322:	4770      	bx	lr
 800c324:	20001168 	.word	0x20001168

0800c328 <_isatty>:
 800c328:	4b02      	ldr	r3, [pc, #8]	; (800c334 <_isatty+0xc>)
 800c32a:	2258      	movs	r2, #88	; 0x58
 800c32c:	601a      	str	r2, [r3, #0]
 800c32e:	2000      	movs	r0, #0
 800c330:	4770      	bx	lr
 800c332:	bf00      	nop
 800c334:	20001168 	.word	0x20001168

0800c338 <_kill>:
 800c338:	4b02      	ldr	r3, [pc, #8]	; (800c344 <_kill+0xc>)
 800c33a:	2258      	movs	r2, #88	; 0x58
 800c33c:	601a      	str	r2, [r3, #0]
 800c33e:	f04f 30ff 	mov.w	r0, #4294967295
 800c342:	4770      	bx	lr
 800c344:	20001168 	.word	0x20001168

0800c348 <_lseek>:
 800c348:	4b02      	ldr	r3, [pc, #8]	; (800c354 <_lseek+0xc>)
 800c34a:	2258      	movs	r2, #88	; 0x58
 800c34c:	601a      	str	r2, [r3, #0]
 800c34e:	f04f 30ff 	mov.w	r0, #4294967295
 800c352:	4770      	bx	lr
 800c354:	20001168 	.word	0x20001168

0800c358 <_read>:
 800c358:	4b02      	ldr	r3, [pc, #8]	; (800c364 <_read+0xc>)
 800c35a:	2258      	movs	r2, #88	; 0x58
 800c35c:	601a      	str	r2, [r3, #0]
 800c35e:	f04f 30ff 	mov.w	r0, #4294967295
 800c362:	4770      	bx	lr
 800c364:	20001168 	.word	0x20001168

0800c368 <_exit>:
 800c368:	e7fe      	b.n	800c368 <_exit>
	...

0800c36c <_init>:
 800c36c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c36e:	bf00      	nop
 800c370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c372:	bc08      	pop	{r3}
 800c374:	469e      	mov	lr, r3
 800c376:	4770      	bx	lr

0800c378 <_fini>:
 800c378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c37a:	bf00      	nop
 800c37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c37e:	bc08      	pop	{r3}
 800c380:	469e      	mov	lr, r3
 800c382:	4770      	bx	lr
